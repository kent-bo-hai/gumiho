// Generated from /Users/kent/IdeaProjects/github/gumiho/gumiho/src/main/resources/grammars/sql/dialect/oracle/OracleSQLStatementParser.g4 by ANTLR 4.7
package com.kent.gumiho.sql.dialect.oracle.parser;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.misc.*;
import org.antlr.v4.runtime.tree.*;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class OracleSQLStatementParser extends Parser {
	static { RuntimeMetaData.checkVersion("4.7", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		ABS=1, ACOS=2, ADD=3, ADD_MONTHS=4, AFTER=5, AGENT=6, AGGREGATE=7, A_LETTER=8, 
		ALL=9, ALTER=10, ANALYZE=11, AND=12, ANY=13, ARRAY=14, AS=15, ASC=16, 
		ASCII=17, ASCIISTR=18, ASIN=19, ASSOCIATE=20, ATAN2=21, ATAN=22, AT=23, 
		ATTRIBUTE=24, AUDIT=25, AUTHID=26, AUTO=27, AUTOMATIC=28, AUTONOMOUS_TRANSACTION=29, 
		BATCH=30, BEFORE=31, BEGIN=32, BETWEEN=33, BFILE=34, BFILENAME=35, BINARY_DOUBLE=36, 
		BINARY_FLOAT=37, BINARY_INTEGER=38, BIN_TO_NUM=39, BITAND=40, BLOB=41, 
		BLOCK=42, BODY=43, BOOLEAN=44, BOTH=45, BREADTH=46, BULK=47, BY=48, BYTE=49, 
		CALL=50, CANONICAL=51, CARDINALITY=52, CASCADE=53, CASE=54, CAST=55, CEIL=56, 
		CHARACTER=57, CHAR=58, CHAR_CS=59, CHARTOROWID=60, CHECK=61, CHR=62, C_LETTER=63, 
		CLOB=64, CLOSE=65, CLUSTER=66, COALESCE=67, COLLECT=68, COMMENT_ON_COLUMN=69, 
		COLUMNS=70, COMMENT=71, COMMIT=72, COMMITTED=73, COMPATIBILITY=74, COMPILE=75, 
		COMPOSE=76, COMPOUND=77, CONCAT=78, CONNECT_BY_ROOT=79, CONNECT=80, CONSTANT=81, 
		CONSTRAINT=82, CONSTRAINTS=83, CONSTRUCTOR=84, CONTENT=85, CONTEXT=86, 
		CONTINUE=87, CONVERT=88, CORRUPT_XID_ALL=89, CORRUPT_XID=90, COS=91, COSH=92, 
		COST=93, COUNT=94, COVAR_POP=95, COVAR_SAMP=96, CREATE=97, CROSS=98, CUBE=99, 
		CURRENT=100, CURRENT_DATE=101, CURRENT_TIMESTAMP=102, CURRENT_USER=103, 
		CURSOR=104, CUSTOMDATUM=105, CYCLE=106, DATABASE=107, DATA=108, DATE=109, 
		DAY=110, DB_ROLE_CHANGE=111, DBTIMEZONE=112, DDL=113, DEBUG=114, DEC=115, 
		DECIMAL=116, DECLARE=117, DECOMPOSE=118, DECREMENT=119, DEFAULT=120, DEFAULTS=121, 
		DEFERRED=122, DEFINER=123, DELETE=124, DEPTH=125, DESC=126, DETERMINISTIC=127, 
		DIMENSION=128, DISABLE=129, DISASSOCIATE=130, DISTINCT=131, DOCUMENT=132, 
		DOUBLE=133, DROP=134, DSINTERVAL_UNCONSTRAINED=135, DUMP=136, EACH=137, 
		ELEMENT=138, ELSE=139, ELSIF=140, EMPTY_BLOB=141, EMPTY_CLOB=142, EMPTY=143, 
		ENABLE=144, ENCODING=145, END=146, ENTITYESCAPING=147, ERR=148, ERRORS=149, 
		ESCAPE=150, EVALNAME=151, EXCEPTION=152, EXCEPTION_INIT=153, EXCEPTIONS=154, 
		EXCLUDE=155, EXCLUSIVE=156, EXECUTE=157, EXISTS=158, EXIT=159, EXP=160, 
		EXPLAIN=161, EXTERNAL=162, EXTRACT=163, FAILURE=164, FALSE=165, FETCH=166, 
		FINAL=167, FIRST=168, FIRST_VALUE=169, FLOAT=170, FLOOR=171, FOLLOWING=172, 
		FOLLOWS=173, FORALL=174, FORCE=175, FOREIGN=176, FOR=177, FROM=178, FROM_TZ=179, 
		FULL=180, FUNCTION=181, GOTO=182, GRANT=183, GROUP=184, GROUP_ID=185, 
		GROUPING=186, HASH=187, HAVING=188, HEXTORAW=189, HIDE=190, HOUR=191, 
		IF=192, IGNORE=193, IMMEDIATE=194, INCLUDE=195, INCLUDING=196, INCREMENT=197, 
		INDENT=198, INDEXED=199, INDEX=200, INDICATOR=201, INDICES=202, INFINITE=203, 
		IN=204, INITCAP=205, INLINE=206, INNER=207, INOUT=208, INSERT=209, INSTANTIABLE=210, 
		INSTEAD=211, INSTR2=212, INSTR4=213, INSTRB=214, INSTRC=215, INSTR=216, 
		INTERFACE=217, INTEGER=218, INTERSECT=219, INTERVAL=220, INT=221, INTO=222, 
		INVALIDATE=223, IS=224, ISOLATION=225, ITERATE=226, JAVA=227, JOIN=228, 
		KEEP=229, KEY=230, LANGUAGE=231, LAST_DAY=232, LAST=233, LAST_VALUE=234, 
		LEADING=235, LEFT=236, LENGTH2=237, LENGTH4=238, LENGTHB=239, LENGTHC=240, 
		LENGTH=241, LEVEL=242, LIBRARY=243, LIKE2=244, LIKE4=245, LIKEC=246, LIKE=247, 
		LIMIT=248, LN=249, LNNVL=250, LOCAL=251, LOCALTIMESTAMP=252, LOCKED=253, 
		LOCK=254, LOG=255, LOGOFF=256, LOGON=257, LONG=258, LOOP=259, LOWER=260, 
		LPAD=261, LTRIM=262, MAIN=263, MAP=264, MATCHED=265, MAXVALUE=266, MEASURES=267, 
		MEMBER=268, MERGE=269, MINUS=270, MINUTE=271, MINVALUE=272, MLSLABEL=273, 
		MODEL=274, MODE=275, MODIFY=276, MOD=277, MONTH=278, MONTHS_BETWEEN=279, 
		MULTISET=280, NAME=281, NAN=282, NANVL=283, NATURAL=284, NATURALN=285, 
		NAV=286, NCHAR_CS=287, NCHAR=288, NCHR=289, NCLOB=290, NESTED=291, NEW=292, 
		NEW_TIME=293, NEXT_DAY=294, NOAUDIT=295, NOCACHE=296, NOCOPY=297, NOCYCLE=298, 
		NOENTITYESCAPING=299, NOMAXVALUE=300, NOMINVALUE=301, NONE=302, NO=303, 
		NOORDER=304, NOSCHEMACHECK=305, NOT=306, NOWAIT=307, NTH_VALUE=308, NULLIF=309, 
		NULL=310, NULLS=311, NUMBER=312, NUMERIC=313, NUMTODSINTERVAL=314, NUMTOYMINTERVAL=315, 
		NVARCHAR2=316, NVL2=317, OBJECT=318, OFF=319, OF=320, OID=321, OLD=322, 
		ONLY=323, ON=324, OPAQUE=325, OPEN=326, OPTION=327, ORADATA=328, ORDER=329, 
		ORDINALITY=330, OR=331, OSERROR=332, OUTER=333, OUT=334, OVER=335, OVERRIDING=336, 
		PACKAGE=337, PARALLEL_ENABLE=338, PARAMETERS=339, PARENT=340, PARTITION=341, 
		PASSING=342, PATH=343, PERCENT_CHARSET=344, PERCENT_FOUND=345, PERCENT_ISOPEN=346, 
		PERCENT_NOTFOUND=347, PERCENT_ROWCOUNT=348, PERCENT_ROWTYPE=349, PERCENT_TYPE=350, 
		PIPELINED=351, PIPE=352, PIVOT=353, PLAN=354, PLS_INTEGER=355, POSITIVEN=356, 
		POSITIVE=357, POWER=358, PRAGMA=359, PRECEDING=360, PRECISION=361, PRESENT=362, 
		PRIMARY=363, PRIOR=364, PROCEDURE=365, PUBLIC=366, RAISE=367, RANGE=368, 
		RAW=369, RAWTOHEX=370, READ=371, REAL=372, RECORD=373, REFERENCE=374, 
		REFERENCES=375, REFERENCING=376, REF=377, REGEXP_COUNT=378, REGEXP_INSTR=379, 
		REGEXP_REPLACE=380, REGEXP_SUBSTR=381, REJECT=382, RELIES_ON=383, REMAINDER=384, 
		RENAME=385, REPLACE=386, RESPECT=387, RESTRICT_REFERENCES=388, RESULT_CACHE=389, 
		RESULT=390, RETURNING=391, RETURN=392, REUSE=393, REVERSE=394, REVOKE=395, 
		RIGHT=396, ROLLBACK=397, ROLLUP=398, ROWID=399, ROWNUM=400, ROW=401, ROWS=402, 
		RPAD=403, RTRIM=404, RULES=405, SAMPLE=406, SAVEPOINT=407, SAVE=408, SCHEMACHECK=409, 
		SCHEMA=410, SCN=411, SEARCH=412, SECOND=413, SEED=414, SEGMENT=415, SELECT=416, 
		SELF=417, SEQUENCE=418, SEQUENTIAL=419, SERIALIZABLE=420, SERIALLY_REUSABLE=421, 
		SERVERERROR=422, SESSIONTIMEZONE=423, SET=424, SETS=425, SETTINGS=426, 
		SHARE=427, SHOW=428, SHUTDOWN=429, SIBLINGS=430, SIGN=431, SIGNTYPE=432, 
		SIMPLE_INTEGER=433, SINGLE=434, SINH=435, SIN=436, SIZE=437, SKIP_=438, 
		SMALLINT=439, SNAPSHOT=440, SOME=441, SOUNDEX=442, SPECIFICATION=443, 
		SQLDATA=444, SQLERROR=445, SQRT=446, STANDALONE=447, START=448, STARTUP=449, 
		STATEMENT_ID=450, STATEMENT=451, STATIC=452, STATISTICS=453, STRING=454, 
		SUBMULTISET=455, SUBPARTITION=456, SUBSTITUTABLE=457, SUBTYPE=458, SUCCESS=459, 
		SUPPLEMENTAL_LOG_DATA=460, SUSPEND=461, SYNONYM=462, SYS_CONTEXT=463, 
		SYSDATE=464, SYSTIMESTAMP=465, TABLE=466, TANH=467, TAN=468, THEN=469, 
		THE=470, TIMESTAMP_LTZ_UNCONSTRAINED=471, TIMESTAMP=472, TIMESTAMP_TZ_UNCONSTRAINED=473, 
		TIMESTAMP_UNCONSTRAINED=474, TIME=475, TIME_TZ_UNCONSTRAINED=476, TIME_UNCONSTRAINED=477, 
		TIMEZONE_ABBR=478, TIMEZONE_HOUR=479, TIMEZONE_MINUTE=480, TIMEZONE_REGION=481, 
		TO_CLOB=482, TO_DSINTERVAL=483, TO_LOB=484, TO_MULTI_BYTE=485, TO_NCLOB=486, 
		TO_NUMBER=487, TO_SINGLE_BYTE=488, TO_TIMESTAMP=489, TO_TIMESTAMP_TZ=490, 
		TO=491, TO_YMINTERVAL=492, TRAILING=493, TRANSACTION=494, TRANSLATE=495, 
		TREAT=496, TRIGGER=497, TRUE=498, TRUNCATE=499, TRUNC=500, TYPE=501, TZ_OFFSET=502, 
		UID=503, UNBOUNDED=504, UNDER=505, UNION=506, UNIQUE=507, UNLIMITED=508, 
		UNPIVOT=509, UNTIL=510, UPDATED=511, UPDATE=512, UPPER=513, UPSERT=514, 
		UROWID=515, USERENV=516, USER=517, USE=518, USING=519, VALIDATE=520, VALUES=521, 
		VALUE=522, VARCHAR2=523, VARCHAR=524, VARIABLE=525, VAR_POP=526, VARRAY=527, 
		VAR_SAMP=528, VARYING=529, VERSIONS=530, VERSION=531, VIEW=532, VSIZE=533, 
		WAIT=534, WARNING=535, WELLFORMED=536, WHENEVER=537, WHEN=538, WHERE=539, 
		WHILE=540, WITHIN=541, WITH=542, WORK=543, WRITE=544, XMLAGG=545, XMLATTRIBUTES=546, 
		XMLCAST=547, XMLCOLATTVAL=548, XMLELEMENT=549, XMLEXISTS=550, XMLFOREST=551, 
		XMLNAMESPACES=552, XMLPARSE=553, XMLPI=554, XMLQUERY=555, XMLROOT=556, 
		XMLSERIALIZE=557, XMLTABLE=558, XML=559, YEAR=560, YES=561, YMINTERVAL_UNCONSTRAINED=562, 
		ZONE=563, PREDICTION=564, PREDICTION_BOUNDS=565, PREDICTION_COST=566, 
		PREDICTION_DETAILS=567, PREDICTION_PROBABILITY=568, PREDICTION_SET=569, 
		CUME_DIST=570, DENSE_RANK=571, LISTAGG=572, PERCENT_RANK=573, PERCENTILE_CONT=574, 
		PERCENTILE_DISC=575, RANK=576, AVG=577, CORR=578, COVAR_=579, DECODE=580, 
		LAG=581, LEAD=582, MAX=583, MEDIAN=584, MIN=585, NTILE=586, NVL=587, RATIO_TO_REPORT=588, 
		REGR_=589, ROUND=590, ROW_NUMBER=591, SUBSTR=592, TO_CHAR=593, TRIM=594, 
		SUM=595, STDDEV=596, VAR_=597, VARIANCE=598, LEAST=599, GREATEST=600, 
		TO_DATE=601, WM_CONCAT=602, NATIONAL_CHAR_STRING_LIT=603, BIT_STRING_LIT=604, 
		HEX_STRING_LIT=605, DOUBLE_PERIOD=606, PERIOD=607, UNSIGNED_INTEGER=608, 
		APPROXIMATE_NUM_LIT=609, PLAIN_TEXT_START=610, PLAIN_TEXT_END=611, CHAR_STRING=612, 
		DELIMITED_ID=613, PERCENT=614, AMPERSAND=615, LEFT_PAREN=616, RIGHT_PAREN=617, 
		DOUBLE_ASTERISK=618, ASTERISK=619, PLUS_SIGN=620, MINUS_SIGN=621, MOD_SIGN=622, 
		COMMA=623, SOLIDUS=624, AT_SIGN=625, ASSIGN_OP=626, BINDVAR=627, COLON=628, 
		SEMI=629, LESS_THAN_OR_EQUALS_OP=630, LESS_THAN_OP=631, GREATER_THAN_OR_EQUALS_OP=632, 
		NOT_EQUAL_OP=633, CARRET_OPERATOR_PART=634, TILDE_OPERATOR_PART=635, EXCLAMATION_OPERATOR_PART=636, 
		GREATER_THAN_OP=637, CONCATENATION_OP=638, VERTICAL_BAR=639, EQUALS_OP=640, 
		LEFT_BRACKET=641, RIGHT_BRACKET=642, INTRODUCER=643, SPACES=644, SINGLE_LINE_COMMENT=645, 
		MULTI_LINE_COMMENT=646, CACHE_NUMBER=647, PROMPT=648, START_CMD=649, REGULAR_ID=650, 
		ZV=651;
	public static final int
		RULE_parse = 0, RULE_swallow_to_semi = 1, RULE_unit_statement = 2, RULE_drop_function = 3, 
		RULE_alter_function = 4, RULE_create_function_body = 5, RULE_parallel_enable_clause = 6, 
		RULE_partition_by_clause = 7, RULE_result_cache_clause = 8, RULE_relies_on_part = 9, 
		RULE_streaming_clause = 10, RULE_drop_package = 11, RULE_alter_package = 12, 
		RULE_create_package = 13, RULE_create_package_body = 14, RULE_package_obj_spec = 15, 
		RULE_procedure_spec = 16, RULE_function_spec = 17, RULE_package_obj_body = 18, 
		RULE_drop_procedure = 19, RULE_alter_procedure = 20, RULE_function_body = 21, 
		RULE_procedure_body = 22, RULE_create_procedure_body = 23, RULE_drop_trigger = 24, 
		RULE_alter_trigger = 25, RULE_create_trigger = 26, RULE_trigger_follows_clause = 27, 
		RULE_trigger_when_clause = 28, RULE_simple_dml_trigger = 29, RULE_for_each_row = 30, 
		RULE_compound_dml_trigger = 31, RULE_non_dml_trigger = 32, RULE_trigger_body = 33, 
		RULE_compound_trigger_block = 34, RULE_timing_point_section = 35, RULE_non_dml_event = 36, 
		RULE_dml_event_clause = 37, RULE_dml_event_element = 38, RULE_dml_event_nested_clause = 39, 
		RULE_referencing_clause = 40, RULE_referencing_element = 41, RULE_drop_type = 42, 
		RULE_alter_type = 43, RULE_compile_type_clause = 44, RULE_replace_type_clause = 45, 
		RULE_alter_method_spec = 46, RULE_alter_method_element = 47, RULE_alter_attribute_definition = 48, 
		RULE_attribute_definition = 49, RULE_alter_collection_clauses = 50, RULE_dependent_handling_clause = 51, 
		RULE_dependent_exceptions_part = 52, RULE_create_type = 53, RULE_create_type_body = 54, 
		RULE_type_definition = 55, RULE_object_type_def = 56, RULE_object_as_part = 57, 
		RULE_object_under_part = 58, RULE_nested_table_type_def = 59, RULE_sqlj_object_type = 60, 
		RULE_type_body = 61, RULE_type_body_elements = 62, RULE_map_order_func_declaration = 63, 
		RULE_subprog_decl_in_type = 64, RULE_proc_decl_in_type = 65, RULE_func_decl_in_type = 66, 
		RULE_constructor_declaration = 67, RULE_modifier_clause = 68, RULE_object_member_spec = 69, 
		RULE_sqlj_object_type_attr = 70, RULE_element_spec = 71, RULE_element_spec_options = 72, 
		RULE_subprogram_spec = 73, RULE_type_procedure_spec = 74, RULE_return_type_spec = 75, 
		RULE_type_function_spec = 76, RULE_constructor_spec = 77, RULE_map_order_function_spec = 78, 
		RULE_pragma_clause = 79, RULE_pragma_elements = 80, RULE_drop_sequence = 81, 
		RULE_alter_sequence = 82, RULE_create_sequence = 83, RULE_sequence_spec = 84, 
		RULE_sequence_start_clause = 85, RULE_create_table = 86, RULE_create_view = 87, 
		RULE_drop_table = 88, RULE_comment_on_column = 89, RULE_create_synonym = 90, 
		RULE_comment_on_table = 91, RULE_alter_table = 92, RULE_add_constraint = 93, 
		RULE_foreign_key_clause = 94, RULE_references_clause = 95, RULE_on_delete_clause = 96, 
		RULE_unique_key_clause = 97, RULE_primary_key_clause = 98, RULE_anonymous_block = 99, 
		RULE_invoker_rights_clause = 100, RULE_compiler_parameters_clause = 101, 
		RULE_call_spec = 102, RULE_java_spec = 103, RULE_c_spec = 104, RULE_c_agent_in_clause = 105, 
		RULE_c_parameters_clause = 106, RULE_parameter = 107, RULE_default_value_part = 108, 
		RULE_declare_spec = 109, RULE_variable_declaration = 110, RULE_subtype_declaration = 111, 
		RULE_cursor_declaration = 112, RULE_parameter_specs = 113, RULE_parameter_spec = 114, 
		RULE_exception_declaration = 115, RULE_pragma_declaration = 116, RULE_record_type_def = 117, 
		RULE_field_spec = 118, RULE_ref_cursor_type_def = 119, RULE_type_declaration = 120, 
		RULE_table_type_def = 121, RULE_table_indexed_by_part = 122, RULE_varray_type_def = 123, 
		RULE_seq_of_statements = 124, RULE_label_declaration = 125, RULE_statement = 126, 
		RULE_assignment_statement = 127, RULE_continue_statement = 128, RULE_exit_statement = 129, 
		RULE_goto_statement = 130, RULE_if_statement = 131, RULE_elsif_part = 132, 
		RULE_else_part = 133, RULE_loop_statement = 134, RULE_cursor_loop_param = 135, 
		RULE_forall_statement = 136, RULE_bounds_clause = 137, RULE_between_bound = 138, 
		RULE_lower_bound = 139, RULE_upper_bound = 140, RULE_null_statement = 141, 
		RULE_raise_statement = 142, RULE_return_statement = 143, RULE_function_call = 144, 
		RULE_pipe_row_statement = 145, RULE_body = 146, RULE_exception_handler = 147, 
		RULE_trigger_block = 148, RULE_block = 149, RULE_sql_statement = 150, 
		RULE_execute_immediate = 151, RULE_dynamic_returning_clause = 152, RULE_data_manipulation_language_statements = 153, 
		RULE_cursor_manipulation_statements = 154, RULE_close_statement = 155, 
		RULE_open_statement = 156, RULE_fetch_statement = 157, RULE_open_for_statement = 158, 
		RULE_transaction_control_statements = 159, RULE_set_transaction_command = 160, 
		RULE_set_constraint_command = 161, RULE_commit_statement = 162, RULE_rollback_statement = 163, 
		RULE_savepoint_statement = 164, RULE_explain_statement = 165, RULE_select_statement = 166, 
		RULE_subquery_factoring_clause = 167, RULE_factoring_element = 168, RULE_search_clause = 169, 
		RULE_cycle_clause = 170, RULE_subquery = 171, RULE_subquery_operation_part = 172, 
		RULE_subquery_basic_elements = 173, RULE_query_block = 174, RULE_selected_element = 175, 
		RULE_from_clause = 176, RULE_select_list_elements = 177, RULE_table_ref_list = 178, 
		RULE_table_ref = 179, RULE_table_ref_aux = 180, RULE_table_ref_aux_internal = 181, 
		RULE_join_clause = 182, RULE_join_on_part = 183, RULE_join_using_part = 184, 
		RULE_outer_join_type = 185, RULE_query_partition_clause = 186, RULE_flashback_query_clause = 187, 
		RULE_pivot_clause = 188, RULE_pivot_element = 189, RULE_pivot_for_clause = 190, 
		RULE_pivot_in_clause = 191, RULE_pivot_in_clause_element = 192, RULE_pivot_in_clause_elements = 193, 
		RULE_unpivot_clause = 194, RULE_unpivot_in_clause = 195, RULE_unpivot_in_elements = 196, 
		RULE_hierarchical_query_clause = 197, RULE_start_part = 198, RULE_group_by_clause = 199, 
		RULE_group_by_elements = 200, RULE_rollup_cube_clause = 201, RULE_grouping_sets_clause = 202, 
		RULE_grouping_sets_elements = 203, RULE_having_clause = 204, RULE_model_clause = 205, 
		RULE_cell_reference_options = 206, RULE_return_rows_clause = 207, RULE_reference_model = 208, 
		RULE_main_model = 209, RULE_model_column_clauses = 210, RULE_model_column_partition_part = 211, 
		RULE_model_column_list = 212, RULE_model_column = 213, RULE_model_rules_clause = 214, 
		RULE_model_rules_part = 215, RULE_model_rules_element = 216, RULE_cell_assignment = 217, 
		RULE_model_iterate_clause = 218, RULE_until_part = 219, RULE_order_by_clause = 220, 
		RULE_order_by_elements = 221, RULE_for_update_clause = 222, RULE_for_update_of_part = 223, 
		RULE_for_update_options = 224, RULE_update_statement = 225, RULE_update_set_clause = 226, 
		RULE_column_based_update_set_clause = 227, RULE_delete_statement = 228, 
		RULE_insert_statement = 229, RULE_single_table_insert = 230, RULE_multi_table_insert = 231, 
		RULE_multi_table_element = 232, RULE_conditional_insert_clause = 233, 
		RULE_conditional_insert_when_part = 234, RULE_conditional_insert_else_part = 235, 
		RULE_insert_into_clause = 236, RULE_values_clause = 237, RULE_merge_statement = 238, 
		RULE_merge_update_clause = 239, RULE_merge_element = 240, RULE_merge_update_delete_part = 241, 
		RULE_merge_insert_clause = 242, RULE_selected_tableview = 243, RULE_lock_table_statement = 244, 
		RULE_wait_nowait_part = 245, RULE_lock_table_element = 246, RULE_lock_mode = 247, 
		RULE_general_table_ref = 248, RULE_static_returning_clause = 249, RULE_error_logging_clause = 250, 
		RULE_error_logging_into_part = 251, RULE_error_logging_reject_part = 252, 
		RULE_dml_table_expression_clause = 253, RULE_table_collection_expression = 254, 
		RULE_subquery_restriction_clause = 255, RULE_sample_clause = 256, RULE_seed_part = 257, 
		RULE_cursor_expression = 258, RULE_expression_list = 259, RULE_condition = 260, 
		RULE_expression = 261, RULE_logical_or_expression = 262, RULE_logical_and_expression = 263, 
		RULE_negated_expression = 264, RULE_equality_expression = 265, RULE_multiset_expression = 266, 
		RULE_multiset_type = 267, RULE_relational_expression = 268, RULE_relational_operator = 269, 
		RULE_compound_expression = 270, RULE_like_concatenation = 271, RULE_like_type = 272, 
		RULE_like_escape_part = 273, RULE_in_elements = 274, RULE_between_elements = 275, 
		RULE_concatenation = 276, RULE_additive_expression = 277, RULE_multiply_expression = 278, 
		RULE_datetime_expression = 279, RULE_interval_expression = 280, RULE_model_expression = 281, 
		RULE_model_expression_element = 282, RULE_single_column_for_loop = 283, 
		RULE_for_like_part = 284, RULE_for_increment_decrement_type = 285, RULE_multi_column_for_loop = 286, 
		RULE_unary_expression = 287, RULE_case_statement = 288, RULE_simple_case_statement = 289, 
		RULE_simple_case_when_part = 290, RULE_searched_case_statement = 291, 
		RULE_searched_case_when_part = 292, RULE_case_else_part = 293, RULE_atom = 294, 
		RULE_expression_or_vector = 295, RULE_vector_expr = 296, RULE_quantified_expression = 297, 
		RULE_string_function = 298, RULE_standard_function = 299, RULE_numeric_function_wrapper = 300, 
		RULE_numeric_function = 301, RULE_date_time_function = 302, RULE_other_function = 303, 
		RULE_over_clause_keyword = 304, RULE_within_or_over_clause_keyword = 305, 
		RULE_standard_prediction_function_keyword = 306, RULE_over_clause = 307, 
		RULE_windowing_clause = 308, RULE_windowing_type = 309, RULE_windowing_elements = 310, 
		RULE_using_clause = 311, RULE_using_element = 312, RULE_collect_order_by_part = 313, 
		RULE_within_or_over_part = 314, RULE_cost_matrix_clause = 315, RULE_xml_passing_clause = 316, 
		RULE_xml_attributes_clause = 317, RULE_xml_namespaces_clause = 318, RULE_xml_table_column = 319, 
		RULE_xml_general_default_part = 320, RULE_xml_multiuse_expression_element = 321, 
		RULE_xmlroot_param_version_part = 322, RULE_xmlroot_param_standalone_part = 323, 
		RULE_xmlserialize_param_enconding_part = 324, RULE_xmlserialize_param_version_part = 325, 
		RULE_xmlserialize_param_ident_part = 326, RULE_sql_plus_command = 327, 
		RULE_whenever_command = 328, RULE_set_command = 329, RULE_exit_command = 330, 
		RULE_prompt_command = 331, RULE_show_errors_command = 332, RULE_start_command = 333, 
		RULE_partition_extension_clause = 334, RULE_column_alias = 335, RULE_table_alias = 336, 
		RULE_alias_quoted_string = 337, RULE_where_clause = 338, RULE_current_of_clause = 339, 
		RULE_into_clause = 340, RULE_xml_column_name = 341, RULE_cost_class_name = 342, 
		RULE_attribute_name = 343, RULE_savepoint_name = 344, RULE_rollback_segment_name = 345, 
		RULE_table_var_name = 346, RULE_schema_name = 347, RULE_routine_name = 348, 
		RULE_package_name = 349, RULE_implementation_type_name = 350, RULE_parameter_name = 351, 
		RULE_reference_model_name = 352, RULE_main_model_name = 353, RULE_aggregate_function_name = 354, 
		RULE_query_name = 355, RULE_constraint_name = 356, RULE_label_name = 357, 
		RULE_type_name = 358, RULE_sequence_name = 359, RULE_exception_name = 360, 
		RULE_function_name = 361, RULE_procedure_name = 362, RULE_constructor_name = 363, 
		RULE_trigger_name = 364, RULE_variable_name = 365, RULE_index_name = 366, 
		RULE_cursor_name = 367, RULE_record_name = 368, RULE_collection_name = 369, 
		RULE_link_name = 370, RULE_column_name = 371, RULE_tableview_name = 372, 
		RULE_char_set_name = 373, RULE_synonym_name = 374, RULE_schema_object_name = 375, 
		RULE_keep_clause = 376, RULE_comma = 377, RULE_function_argument = 378, 
		RULE_function_argument_analytic = 379, RULE_function_argument_modeling = 380, 
		RULE_respect_or_ignore_nulls = 381, RULE_argument = 382, RULE_type_spec = 383, 
		RULE_datatype = 384, RULE_precision_part = 385, RULE_native_datatype_element = 386, 
		RULE_bind_variable = 387, RULE_general_element = 388, RULE_general_element_part = 389, 
		RULE_table_element = 390, RULE_constant = 391, RULE_numeric = 392, RULE_int_value = 393, 
		RULE_float_value = 394, RULE_numeric_negative = 395, RULE_quoted_string = 396, 
		RULE_identifier = 397, RULE_id_expression = 398, RULE_not_equal_op = 399, 
		RULE_greater_than_or_equals_op = 400, RULE_less_than_or_equals_op = 401, 
		RULE_concatenation_op = 402, RULE_outer_join_sign = 403, RULE_regular_id = 404, 
		RULE_string_function_name = 405, RULE_numeric_function_name = 406, RULE_date_time_function_name = 407, 
		RULE_conversion_function_name = 408, RULE_analytic_function_name = 409, 
		RULE_advanced_function_name = 410;
	public static final String[] ruleNames = {
		"parse", "swallow_to_semi", "unit_statement", "drop_function", "alter_function", 
		"create_function_body", "parallel_enable_clause", "partition_by_clause", 
		"result_cache_clause", "relies_on_part", "streaming_clause", "drop_package", 
		"alter_package", "create_package", "create_package_body", "package_obj_spec", 
		"procedure_spec", "function_spec", "package_obj_body", "drop_procedure", 
		"alter_procedure", "function_body", "procedure_body", "create_procedure_body", 
		"drop_trigger", "alter_trigger", "create_trigger", "trigger_follows_clause", 
		"trigger_when_clause", "simple_dml_trigger", "for_each_row", "compound_dml_trigger", 
		"non_dml_trigger", "trigger_body", "compound_trigger_block", "timing_point_section", 
		"non_dml_event", "dml_event_clause", "dml_event_element", "dml_event_nested_clause", 
		"referencing_clause", "referencing_element", "drop_type", "alter_type", 
		"compile_type_clause", "replace_type_clause", "alter_method_spec", "alter_method_element", 
		"alter_attribute_definition", "attribute_definition", "alter_collection_clauses", 
		"dependent_handling_clause", "dependent_exceptions_part", "create_type", 
		"create_type_body", "type_definition", "object_type_def", "object_as_part", 
		"object_under_part", "nested_table_type_def", "sqlj_object_type", "type_body", 
		"type_body_elements", "map_order_func_declaration", "subprog_decl_in_type", 
		"proc_decl_in_type", "func_decl_in_type", "constructor_declaration", "modifier_clause", 
		"object_member_spec", "sqlj_object_type_attr", "element_spec", "element_spec_options", 
		"subprogram_spec", "type_procedure_spec", "return_type_spec", "type_function_spec", 
		"constructor_spec", "map_order_function_spec", "pragma_clause", "pragma_elements", 
		"drop_sequence", "alter_sequence", "create_sequence", "sequence_spec", 
		"sequence_start_clause", "create_table", "create_view", "drop_table", 
		"comment_on_column", "create_synonym", "comment_on_table", "alter_table", 
		"add_constraint", "foreign_key_clause", "references_clause", "on_delete_clause", 
		"unique_key_clause", "primary_key_clause", "anonymous_block", "invoker_rights_clause", 
		"compiler_parameters_clause", "call_spec", "java_spec", "c_spec", "c_agent_in_clause", 
		"c_parameters_clause", "parameter", "default_value_part", "declare_spec", 
		"variable_declaration", "subtype_declaration", "cursor_declaration", "parameter_specs", 
		"parameter_spec", "exception_declaration", "pragma_declaration", "record_type_def", 
		"field_spec", "ref_cursor_type_def", "type_declaration", "table_type_def", 
		"table_indexed_by_part", "varray_type_def", "seq_of_statements", "label_declaration", 
		"statement", "assignment_statement", "continue_statement", "exit_statement", 
		"goto_statement", "if_statement", "elsif_part", "else_part", "loop_statement", 
		"cursor_loop_param", "forall_statement", "bounds_clause", "between_bound", 
		"lower_bound", "upper_bound", "null_statement", "raise_statement", "return_statement", 
		"function_call", "pipe_row_statement", "body", "exception_handler", "trigger_block", 
		"block", "sql_statement", "execute_immediate", "dynamic_returning_clause", 
		"data_manipulation_language_statements", "cursor_manipulation_statements", 
		"close_statement", "open_statement", "fetch_statement", "open_for_statement", 
		"transaction_control_statements", "set_transaction_command", "set_constraint_command", 
		"commit_statement", "rollback_statement", "savepoint_statement", "explain_statement", 
		"select_statement", "subquery_factoring_clause", "factoring_element", 
		"search_clause", "cycle_clause", "subquery", "subquery_operation_part", 
		"subquery_basic_elements", "query_block", "selected_element", "from_clause", 
		"select_list_elements", "table_ref_list", "table_ref", "table_ref_aux", 
		"table_ref_aux_internal", "join_clause", "join_on_part", "join_using_part", 
		"outer_join_type", "query_partition_clause", "flashback_query_clause", 
		"pivot_clause", "pivot_element", "pivot_for_clause", "pivot_in_clause", 
		"pivot_in_clause_element", "pivot_in_clause_elements", "unpivot_clause", 
		"unpivot_in_clause", "unpivot_in_elements", "hierarchical_query_clause", 
		"start_part", "group_by_clause", "group_by_elements", "rollup_cube_clause", 
		"grouping_sets_clause", "grouping_sets_elements", "having_clause", "model_clause", 
		"cell_reference_options", "return_rows_clause", "reference_model", "main_model", 
		"model_column_clauses", "model_column_partition_part", "model_column_list", 
		"model_column", "model_rules_clause", "model_rules_part", "model_rules_element", 
		"cell_assignment", "model_iterate_clause", "until_part", "order_by_clause", 
		"order_by_elements", "for_update_clause", "for_update_of_part", "for_update_options", 
		"update_statement", "update_set_clause", "column_based_update_set_clause", 
		"delete_statement", "insert_statement", "single_table_insert", "multi_table_insert", 
		"multi_table_element", "conditional_insert_clause", "conditional_insert_when_part", 
		"conditional_insert_else_part", "insert_into_clause", "values_clause", 
		"merge_statement", "merge_update_clause", "merge_element", "merge_update_delete_part", 
		"merge_insert_clause", "selected_tableview", "lock_table_statement", "wait_nowait_part", 
		"lock_table_element", "lock_mode", "general_table_ref", "static_returning_clause", 
		"error_logging_clause", "error_logging_into_part", "error_logging_reject_part", 
		"dml_table_expression_clause", "table_collection_expression", "subquery_restriction_clause", 
		"sample_clause", "seed_part", "cursor_expression", "expression_list", 
		"condition", "expression", "logical_or_expression", "logical_and_expression", 
		"negated_expression", "equality_expression", "multiset_expression", "multiset_type", 
		"relational_expression", "relational_operator", "compound_expression", 
		"like_concatenation", "like_type", "like_escape_part", "in_elements", 
		"between_elements", "concatenation", "additive_expression", "multiply_expression", 
		"datetime_expression", "interval_expression", "model_expression", "model_expression_element", 
		"single_column_for_loop", "for_like_part", "for_increment_decrement_type", 
		"multi_column_for_loop", "unary_expression", "case_statement", "simple_case_statement", 
		"simple_case_when_part", "searched_case_statement", "searched_case_when_part", 
		"case_else_part", "atom", "expression_or_vector", "vector_expr", "quantified_expression", 
		"string_function", "standard_function", "numeric_function_wrapper", "numeric_function", 
		"date_time_function", "other_function", "over_clause_keyword", "within_or_over_clause_keyword", 
		"standard_prediction_function_keyword", "over_clause", "windowing_clause", 
		"windowing_type", "windowing_elements", "using_clause", "using_element", 
		"collect_order_by_part", "within_or_over_part", "cost_matrix_clause", 
		"xml_passing_clause", "xml_attributes_clause", "xml_namespaces_clause", 
		"xml_table_column", "xml_general_default_part", "xml_multiuse_expression_element", 
		"xmlroot_param_version_part", "xmlroot_param_standalone_part", "xmlserialize_param_enconding_part", 
		"xmlserialize_param_version_part", "xmlserialize_param_ident_part", "sql_plus_command", 
		"whenever_command", "set_command", "exit_command", "prompt_command", "show_errors_command", 
		"start_command", "partition_extension_clause", "column_alias", "table_alias", 
		"alias_quoted_string", "where_clause", "current_of_clause", "into_clause", 
		"xml_column_name", "cost_class_name", "attribute_name", "savepoint_name", 
		"rollback_segment_name", "table_var_name", "schema_name", "routine_name", 
		"package_name", "implementation_type_name", "parameter_name", "reference_model_name", 
		"main_model_name", "aggregate_function_name", "query_name", "constraint_name", 
		"label_name", "type_name", "sequence_name", "exception_name", "function_name", 
		"procedure_name", "constructor_name", "trigger_name", "variable_name", 
		"index_name", "cursor_name", "record_name", "collection_name", "link_name", 
		"column_name", "tableview_name", "char_set_name", "synonym_name", "schema_object_name", 
		"keep_clause", "comma", "function_argument", "function_argument_analytic", 
		"function_argument_modeling", "respect_or_ignore_nulls", "argument", "type_spec", 
		"datatype", "precision_part", "native_datatype_element", "bind_variable", 
		"general_element", "general_element_part", "table_element", "constant", 
		"numeric", "int_value", "float_value", "numeric_negative", "quoted_string", 
		"identifier", "id_expression", "not_equal_op", "greater_than_or_equals_op", 
		"less_than_or_equals_op", "concatenation_op", "outer_join_sign", "regular_id", 
		"string_function_name", "numeric_function_name", "date_time_function_name", 
		"conversion_function_name", "analytic_function_name", "advanced_function_name"
	};

	private static final String[] _LITERAL_NAMES = {
		null, "'ABS'", "'ACOS'", "'ADD'", "'ADD_MONTHS'", "'AFTER'", "'AGENT'", 
		"'AGGREGATE'", "'A'", "'ALL'", "'ALTER'", "'ANALYZE'", "'AND'", "'ANY'", 
		"'ARRAY'", "'AS'", "'ASC'", "'ASCII'", "'ASCIISTR'", "'ASIN'", "'ASSOCIATE'", 
		"'ATAN2'", "'ATAN'", "'AT'", "'ATTRIBUTE'", "'AUDIT'", "'AUTHID'", "'AUTO'", 
		"'AUTOMATIC'", "'AUTONOMOUS_TRANSACTION'", "'BATCH'", "'BEFORE'", "'BEGIN'", 
		"'BETWEEN'", "'BFILE'", "'BFILENAME'", "'BINARY_DOUBLE'", "'BINARY_FLOAT'", 
		"'BINARY_INTEGER'", "'BIN_TO_NUM'", "'BITAND'", "'BLOB'", "'BLOCK'", "'BODY'", 
		"'BOOLEAN'", "'BOTH'", "'BREADTH'", "'BULK'", "'BY'", "'BYTE'", "'CALL'", 
		"'CANONICAL'", "'CARDINALITY'", "'CASCADE'", "'CASE'", "'CAST'", "'CEIL'", 
		"'CHARACTER'", "'CHAR'", "'CHAR_CS'", "'CHARTOROWID'", "'CHECK'", "'CHR'", 
		"'C'", "'CLOB'", "'CLOSE'", "'CLUSTER'", "'COALESCE'", "'COLLECT'", "'COMMENT ON COLUMN'", 
		"'COLUMNS'", "'COMMENT'", "'COMMIT'", "'COMMITTED'", "'COMPATIBILITY'", 
		"'COMPILE'", "'COMPOSE'", "'COMPOUND'", "'CONCAT'", "'CONNECT_BY_ROOT'", 
		"'CONNECT'", "'CONSTANT'", "'CONSTRAINT'", "'CONSTRAINTS'", "'CONSTRUCTOR'", 
		"'CONTENT'", "'CONTEXT'", "'CONTINUE'", "'CONVERT'", "'CORRUPT_XID_ALL'", 
		"'CORRUPT_XID'", "'COS'", "'COSH'", "'COST'", "'COUNT'", "'COVAR_POP'", 
		"'COVAR_SAMP'", "'CREATE'", "'CROSS'", "'CUBE'", "'CURRENT'", "'CURRENT_DATE'", 
		"'CURRENT_TIMESTAMP'", "'CURRENT_USER'", "'CURSOR'", "'CUSTOMDATUM'", 
		"'CYCLE'", "'DATABASE'", "'DATA'", "'DATE'", "'DAY'", "'DB_ROLE_CHANGE'", 
		"'DBTIMEZONE'", "'DDL'", "'DEBUG'", "'DEC'", "'DECIMAL'", "'DECLARE'", 
		"'DECOMPOSE'", "'DECREMENT'", "'DEFAULT'", "'DEFAULTS'", "'DEFERRED'", 
		"'DEFINER'", "'DELETE'", "'DEPTH'", "'DESC'", "'DETERMINISTIC'", "'DIMENSION'", 
		"'DISABLE'", "'DISASSOCIATE'", "'DISTINCT'", "'DOCUMENT'", "'DOUBLE'", 
		"'DROP'", "'DSINTERVAL_UNCONSTRAINED'", "'DUMP'", "'EACH'", "'ELEMENT'", 
		"'ELSE'", "'ELSIF'", "'EMPTY_BLOB'", "'EMPTY_CLOB'", "'EMPTY'", "'ENABLE'", 
		"'ENCODING'", "'END'", "'ENTITYESCAPING'", "'ERR'", "'ERRORS'", "'ESCAPE'", 
		"'EVALNAME'", "'EXCEPTION'", "'EXCEPTION_INIT'", "'EXCEPTIONS'", "'EXCLUDE'", 
		"'EXCLUSIVE'", "'EXECUTE'", "'EXISTS'", "'EXIT'", "'EXP'", "'EXPLAIN'", 
		"'EXTERNAL'", "'EXTRACT'", "'FAILURE'", "'FALSE'", "'FETCH'", "'FINAL'", 
		"'FIRST'", "'FIRST_VALUE'", "'FLOAT'", "'FLOOR'", "'FOLLOWING'", "'FOLLOWS'", 
		"'FORALL'", "'FORCE'", "'FOREIGN'", "'FOR'", "'FROM'", "'FROM_TZ'", "'FULL'", 
		"'FUNCTION'", "'GOTO'", "'GRANT'", "'GROUP'", "'GROUP_ID'", "'GROUPING'", 
		"'HASH'", "'HAVING'", "'HEXTORAW'", "'HIDE'", "'HOUR'", "'IF'", "'IGNORE'", 
		"'IMMEDIATE'", "'INCLUDE'", "'INCLUDING'", "'INCREMENT'", "'INDENT'", 
		"'INDEXED'", "'INDEX'", "'INDICATOR'", "'INDICES'", "'INFINITE'", "'IN'", 
		"'INITCAP'", "'INLINE'", "'INNER'", "'INOUT'", "'INSERT'", "'INSTANTIABLE'", 
		"'INSTEAD'", "'INSTR2'", "'INSTR4'", "'INSTRB'", "'INSTRC'", "'INSTR'", 
		"'INTERFACE'", "'INTEGER'", "'INTERSECT'", "'INTERVAL'", "'INT'", "'INTO'", 
		"'INVALIDATE'", "'IS'", "'ISOLATION'", "'ITERATE'", "'JAVA'", "'JOIN'", 
		"'KEEP'", "'KEY'", "'LANGUAGE'", "'LAST_DAY'", "'LAST'", "'LAST_VALUE'", 
		"'LEADING'", "'LEFT'", "'LENGTH2'", "'LENGTH4'", "'LENGTHB'", "'LENGTHC'", 
		"'LENGTH'", "'LEVEL'", "'LIBRARY'", "'LIKE2'", "'LIKE4'", "'LIKEC'", "'LIKE'", 
		"'LIMIT'", "'LN'", "'LNNVL'", "'LOCAL'", "'LOCALTIMESTAMP'", "'LOCKED'", 
		"'LOCK'", "'LOG'", "'LOGOFF'", "'LOGON'", "'LONG'", "'LOOP'", "'LOWER'", 
		"'LPAD'", "'LTRIM'", "'MAIN'", "'MAP'", "'MATCHED'", "'MAXVALUE'", "'MEASURES'", 
		"'MEMBER'", "'MERGE'", "'MINUS'", "'MINUTE'", "'MINVALUE'", "'MLSLABEL'", 
		"'MODEL'", "'MODE'", "'MODIFY'", "'MOD'", "'MONTH'", "'MONTHS_BETWEEN'", 
		"'MULTISET'", "'NAME'", "'NAN'", "'NANVL'", "'NATURAL'", "'NATURALN'", 
		"'NAV'", "'NCHAR_CS'", "'NCHAR'", "'NCHR'", "'NCLOB'", "'NESTED'", "'NEW'", 
		"'NEW_TIME'", "'NEXT_DAY'", "'NOAUDIT'", "'NOCACHE'", "'NOCOPY'", "'NOCYCLE'", 
		"'NOENTITYESCAPING'", "'NOMAXVALUE'", "'NOMINVALUE'", "'NONE'", "'NO'", 
		"'NOORDER'", "'NOSCHEMACHECK'", "'NOT'", "'NOWAIT'", "'NTH_VALUE'", "'NULLIF'", 
		"'NULL'", "'NULLS'", "'NUMBER'", "'NUMERIC'", "'NUMTODSINTERVAL'", "'NUMTOYMINTERVAL'", 
		"'NVARCHAR2'", "'NVL2'", "'OBJECT'", "'OFF'", "'OF'", "'OID'", "'OLD'", 
		"'ONLY'", "'ON'", "'OPAQUE'", "'OPEN'", "'OPTION'", "'ORADATA'", "'ORDER'", 
		"'ORDINALITY'", "'OR'", "'OSERROR'", "'OUTER'", "'OUT'", "'OVER'", "'OVERRIDING'", 
		"'PACKAGE'", "'PARALLEL_ENABLE'", "'PARAMETERS'", "'PARENT'", "'PARTITION'", 
		"'PASSING'", "'PATH'", "'%CHARSET'", "'%FOUND'", "'%ISOPEN'", "'%NOTFOUND'", 
		"'%ROWCOUNT'", "'%ROWTYPE'", "'%TYPE'", "'PIPELINED'", "'PIPE'", "'PIVOT'", 
		"'PLAN'", "'PLS_INTEGER'", "'POSITIVEN'", "'POSITIVE'", "'POWER'", "'PRAGMA'", 
		"'PRECEDING'", "'PRECISION'", "'PRESENT'", "'PRIMARY'", "'PRIOR'", "'PROCEDURE'", 
		"'PUBLIC'", "'RAISE'", "'RANGE'", "'RAW'", "'RAWTOHEX'", "'READ'", "'REAL'", 
		"'RECORD'", "'REFERENCE'", "'REFERENCES'", "'REFERENCING'", "'REF'", "'REGEXP_COUNT'", 
		"'REGEXP_INSTR'", "'REGEXP_REPLACE'", "'REGEXP_SUBSTR'", "'REJECT'", "'RELIES_ON'", 
		"'REMAINDER'", "'RENAME'", "'REPLACE'", "'RESPECT'", "'RESTRICT_REFERENCES'", 
		"'RESULT_CACHE'", "'RESULT'", "'RETURNING'", "'RETURN'", "'REUSE'", "'REVERSE'", 
		"'REVOKE'", "'RIGHT'", "'ROLLBACK'", "'ROLLUP'", "'ROWID'", "'ROWNUM'", 
		"'ROW'", "'ROWS'", "'RPAD'", "'RTRIM'", "'RULES'", "'SAMPLE'", "'SAVEPOINT'", 
		"'SAVE'", "'SCHEMACHECK'", "'SCHEMA'", "'SCN'", "'SEARCH'", "'SECOND'", 
		"'SEED'", "'SEGMENT'", "'SELECT'", "'SELF'", "'SEQUENCE'", "'SEQUENTIAL'", 
		"'SERIALIZABLE'", "'SERIALLY_REUSABLE'", "'SERVERERROR'", "'SESSIONTIMEZONE'", 
		"'SET'", "'SETS'", "'SETTINGS'", "'SHARE'", "'SHOW'", "'SHUTDOWN'", "'SIBLINGS'", 
		"'SIGN'", "'SIGNTYPE'", "'SIMPLE_INTEGER'", "'SINGLE'", "'SINH'", "'SIN'", 
		"'SIZE'", "'SKIP'", "'SMALLINT'", "'SNAPSHOT'", "'SOME'", "'SOUNDEX'", 
		"'SPECIFICATION'", "'SQLDATA'", "'SQLERROR'", "'SQRT'", "'STANDALONE'", 
		"'START'", "'STARTUP'", "'STATEMENT_ID'", "'STATEMENT'", "'STATIC'", "'STATISTICS'", 
		"'STRING'", "'SUBMULTISET'", "'SUBPARTITION'", "'SUBSTITUTABLE'", "'SUBTYPE'", 
		"'SUCCESS'", "'SUPPLEMENTAL_LOG_DATA'", "'SUSPEND'", "'SYNONYM'", "'SYS_CONTEXT'", 
		"'SYSDATE'", "'SYSTIMESTAMP'", "'TABLE'", "'TANH'", "'TAN'", "'THEN'", 
		"'THE'", "'TIMESTAMP_LTZ_UNCONSTRAINED'", "'TIMESTAMP'", "'TIMESTAMP_TZ_UNCONSTRAINED'", 
		"'TIMESTAMP_UNCONSTRAINED'", "'TIME'", "'TIME_TZ_UNCONSTRAINED'", "'TIME_UNCONSTRAINED'", 
		"'TIMEZONE_ABBR'", "'TIMEZONE_HOUR'", "'TIMEZONE_MINUTE'", "'TIMEZONE_REGION'", 
		"'TO_CLOB'", "'TO_DSINTERVAL'", "'TO_LOB'", "'TO_MULTI_BYTE'", "'TO_NCLOB'", 
		"'TO_NUMBER'", "'TO_SINGLE_BYTE'", "'TO_TIMESTAMP'", "'TO_TIMESTAMP_TZ'", 
		"'TO'", "'TO_YMINTERVAL'", "'TRAILING'", "'TRANSACTION'", "'TRANSLATE'", 
		"'TREAT'", "'TRIGGER'", "'TRUE'", "'TRUNCATE'", "'TRUNC'", "'TYPE'", "'TZ_OFFSET'", 
		"'UID'", "'UNBOUNDED'", "'UNDER'", "'UNION'", "'UNIQUE'", "'UNLIMITED'", 
		"'UNPIVOT'", "'UNTIL'", "'UPDATED'", "'UPDATE'", "'UPPER'", "'UPSERT'", 
		"'UROWID'", "'USERENV'", "'USER'", "'USE'", "'USING'", "'VALIDATE'", "'VALUES'", 
		"'VALUE'", "'VARCHAR2'", "'VARCHAR'", "'VARIABLE'", "'VAR_POP'", "'VARRAY'", 
		"'VAR_SAMP'", "'VARYING'", "'VERSIONS'", "'VERSION'", "'VIEW'", "'VSIZE'", 
		"'WAIT'", "'WARNING'", "'WELLFORMED'", "'WHENEVER'", "'WHEN'", "'WHERE'", 
		"'WHILE'", "'WITHIN'", "'WITH'", "'WORK'", "'WRITE'", "'XMLAGG'", "'XMLATTRIBUTES'", 
		"'XMLCAST'", "'XMLCOLATTVAL'", "'XMLELEMENT'", "'XMLEXISTS'", "'XMLFOREST'", 
		"'XMLNAMESPACES'", "'XMLPARSE'", "'XMLPI'", "'XMLQUERY'", "'XMLROOT'", 
		"'XMLSERIALIZE'", "'XMLTABLE'", "'XML'", "'YEAR'", "'YES'", "'YMINTERVAL_UNCONSTRAINED'", 
		"'ZONE'", "'PREDICTION'", "'PREDICTION_BOUNDS'", "'PREDICTION_COST'", 
		"'PREDICTION_DETAILS'", "'PREDICTION_PROBABILITY'", "'PREDICTION_SET'", 
		"'CUME_DIST'", "'DENSE_RANK'", "'LISTAGG'", "'PERCENT_RANK'", "'PERCENTILE_CONT'", 
		"'PERCENTILE_DISC'", "'RANK'", "'AVG'", "'CORR'", "'COVAR_'", "'DECODE'", 
		"'LAG'", "'LEAD'", "'MAX'", "'MEDIAN'", "'MIN'", "'NTILE'", "'NVL'", "'RATIO_TO_REPORT'", 
		"'REGR_'", "'ROUND'", "'ROW_NUMBER'", "'SUBSTR'", "'TO_CHAR'", "'TRIM'", 
		"'SUM'", "'STDDEV'", "'VAR_'", "'VARIANCE'", "'LEAST'", "'GREATEST'", 
		"'TO_DATE'", "'WM_CONCAT'", null, null, null, "'..'", "'.'", null, null, 
		"'Q'^'", "'^''", null, null, null, "'&'", null, null, "'**'", "'*'", "'+'", 
		"'-'", null, null, "'/'", "'@'", "':='", null, "':'", "';'", "'<='", "'<'", 
		"'>='", null, "'^'", "'~'", "'!'", "'>'", "'||'", "'|'", "'='", "'['", 
		"']'", "'_'", null, null, null, null, null, null, null, "'@!'"
	};
	private static final String[] _SYMBOLIC_NAMES = {
		null, "ABS", "ACOS", "ADD", "ADD_MONTHS", "AFTER", "AGENT", "AGGREGATE", 
		"A_LETTER", "ALL", "ALTER", "ANALYZE", "AND", "ANY", "ARRAY", "AS", "ASC", 
		"ASCII", "ASCIISTR", "ASIN", "ASSOCIATE", "ATAN2", "ATAN", "AT", "ATTRIBUTE", 
		"AUDIT", "AUTHID", "AUTO", "AUTOMATIC", "AUTONOMOUS_TRANSACTION", "BATCH", 
		"BEFORE", "BEGIN", "BETWEEN", "BFILE", "BFILENAME", "BINARY_DOUBLE", "BINARY_FLOAT", 
		"BINARY_INTEGER", "BIN_TO_NUM", "BITAND", "BLOB", "BLOCK", "BODY", "BOOLEAN", 
		"BOTH", "BREADTH", "BULK", "BY", "BYTE", "CALL", "CANONICAL", "CARDINALITY", 
		"CASCADE", "CASE", "CAST", "CEIL", "CHARACTER", "CHAR", "CHAR_CS", "CHARTOROWID", 
		"CHECK", "CHR", "C_LETTER", "CLOB", "CLOSE", "CLUSTER", "COALESCE", "COLLECT", 
		"COMMENT_ON_COLUMN", "COLUMNS", "COMMENT", "COMMIT", "COMMITTED", "COMPATIBILITY", 
		"COMPILE", "COMPOSE", "COMPOUND", "CONCAT", "CONNECT_BY_ROOT", "CONNECT", 
		"CONSTANT", "CONSTRAINT", "CONSTRAINTS", "CONSTRUCTOR", "CONTENT", "CONTEXT", 
		"CONTINUE", "CONVERT", "CORRUPT_XID_ALL", "CORRUPT_XID", "COS", "COSH", 
		"COST", "COUNT", "COVAR_POP", "COVAR_SAMP", "CREATE", "CROSS", "CUBE", 
		"CURRENT", "CURRENT_DATE", "CURRENT_TIMESTAMP", "CURRENT_USER", "CURSOR", 
		"CUSTOMDATUM", "CYCLE", "DATABASE", "DATA", "DATE", "DAY", "DB_ROLE_CHANGE", 
		"DBTIMEZONE", "DDL", "DEBUG", "DEC", "DECIMAL", "DECLARE", "DECOMPOSE", 
		"DECREMENT", "DEFAULT", "DEFAULTS", "DEFERRED", "DEFINER", "DELETE", "DEPTH", 
		"DESC", "DETERMINISTIC", "DIMENSION", "DISABLE", "DISASSOCIATE", "DISTINCT", 
		"DOCUMENT", "DOUBLE", "DROP", "DSINTERVAL_UNCONSTRAINED", "DUMP", "EACH", 
		"ELEMENT", "ELSE", "ELSIF", "EMPTY_BLOB", "EMPTY_CLOB", "EMPTY", "ENABLE", 
		"ENCODING", "END", "ENTITYESCAPING", "ERR", "ERRORS", "ESCAPE", "EVALNAME", 
		"EXCEPTION", "EXCEPTION_INIT", "EXCEPTIONS", "EXCLUDE", "EXCLUSIVE", "EXECUTE", 
		"EXISTS", "EXIT", "EXP", "EXPLAIN", "EXTERNAL", "EXTRACT", "FAILURE", 
		"FALSE", "FETCH", "FINAL", "FIRST", "FIRST_VALUE", "FLOAT", "FLOOR", "FOLLOWING", 
		"FOLLOWS", "FORALL", "FORCE", "FOREIGN", "FOR", "FROM", "FROM_TZ", "FULL", 
		"FUNCTION", "GOTO", "GRANT", "GROUP", "GROUP_ID", "GROUPING", "HASH", 
		"HAVING", "HEXTORAW", "HIDE", "HOUR", "IF", "IGNORE", "IMMEDIATE", "INCLUDE", 
		"INCLUDING", "INCREMENT", "INDENT", "INDEXED", "INDEX", "INDICATOR", "INDICES", 
		"INFINITE", "IN", "INITCAP", "INLINE", "INNER", "INOUT", "INSERT", "INSTANTIABLE", 
		"INSTEAD", "INSTR2", "INSTR4", "INSTRB", "INSTRC", "INSTR", "INTERFACE", 
		"INTEGER", "INTERSECT", "INTERVAL", "INT", "INTO", "INVALIDATE", "IS", 
		"ISOLATION", "ITERATE", "JAVA", "JOIN", "KEEP", "KEY", "LANGUAGE", "LAST_DAY", 
		"LAST", "LAST_VALUE", "LEADING", "LEFT", "LENGTH2", "LENGTH4", "LENGTHB", 
		"LENGTHC", "LENGTH", "LEVEL", "LIBRARY", "LIKE2", "LIKE4", "LIKEC", "LIKE", 
		"LIMIT", "LN", "LNNVL", "LOCAL", "LOCALTIMESTAMP", "LOCKED", "LOCK", "LOG", 
		"LOGOFF", "LOGON", "LONG", "LOOP", "LOWER", "LPAD", "LTRIM", "MAIN", "MAP", 
		"MATCHED", "MAXVALUE", "MEASURES", "MEMBER", "MERGE", "MINUS", "MINUTE", 
		"MINVALUE", "MLSLABEL", "MODEL", "MODE", "MODIFY", "MOD", "MONTH", "MONTHS_BETWEEN", 
		"MULTISET", "NAME", "NAN", "NANVL", "NATURAL", "NATURALN", "NAV", "NCHAR_CS", 
		"NCHAR", "NCHR", "NCLOB", "NESTED", "NEW", "NEW_TIME", "NEXT_DAY", "NOAUDIT", 
		"NOCACHE", "NOCOPY", "NOCYCLE", "NOENTITYESCAPING", "NOMAXVALUE", "NOMINVALUE", 
		"NONE", "NO", "NOORDER", "NOSCHEMACHECK", "NOT", "NOWAIT", "NTH_VALUE", 
		"NULLIF", "NULL", "NULLS", "NUMBER", "NUMERIC", "NUMTODSINTERVAL", "NUMTOYMINTERVAL", 
		"NVARCHAR2", "NVL2", "OBJECT", "OFF", "OF", "OID", "OLD", "ONLY", "ON", 
		"OPAQUE", "OPEN", "OPTION", "ORADATA", "ORDER", "ORDINALITY", "OR", "OSERROR", 
		"OUTER", "OUT", "OVER", "OVERRIDING", "PACKAGE", "PARALLEL_ENABLE", "PARAMETERS", 
		"PARENT", "PARTITION", "PASSING", "PATH", "PERCENT_CHARSET", "PERCENT_FOUND", 
		"PERCENT_ISOPEN", "PERCENT_NOTFOUND", "PERCENT_ROWCOUNT", "PERCENT_ROWTYPE", 
		"PERCENT_TYPE", "PIPELINED", "PIPE", "PIVOT", "PLAN", "PLS_INTEGER", "POSITIVEN", 
		"POSITIVE", "POWER", "PRAGMA", "PRECEDING", "PRECISION", "PRESENT", "PRIMARY", 
		"PRIOR", "PROCEDURE", "PUBLIC", "RAISE", "RANGE", "RAW", "RAWTOHEX", "READ", 
		"REAL", "RECORD", "REFERENCE", "REFERENCES", "REFERENCING", "REF", "REGEXP_COUNT", 
		"REGEXP_INSTR", "REGEXP_REPLACE", "REGEXP_SUBSTR", "REJECT", "RELIES_ON", 
		"REMAINDER", "RENAME", "REPLACE", "RESPECT", "RESTRICT_REFERENCES", "RESULT_CACHE", 
		"RESULT", "RETURNING", "RETURN", "REUSE", "REVERSE", "REVOKE", "RIGHT", 
		"ROLLBACK", "ROLLUP", "ROWID", "ROWNUM", "ROW", "ROWS", "RPAD", "RTRIM", 
		"RULES", "SAMPLE", "SAVEPOINT", "SAVE", "SCHEMACHECK", "SCHEMA", "SCN", 
		"SEARCH", "SECOND", "SEED", "SEGMENT", "SELECT", "SELF", "SEQUENCE", "SEQUENTIAL", 
		"SERIALIZABLE", "SERIALLY_REUSABLE", "SERVERERROR", "SESSIONTIMEZONE", 
		"SET", "SETS", "SETTINGS", "SHARE", "SHOW", "SHUTDOWN", "SIBLINGS", "SIGN", 
		"SIGNTYPE", "SIMPLE_INTEGER", "SINGLE", "SINH", "SIN", "SIZE", "SKIP_", 
		"SMALLINT", "SNAPSHOT", "SOME", "SOUNDEX", "SPECIFICATION", "SQLDATA", 
		"SQLERROR", "SQRT", "STANDALONE", "START", "STARTUP", "STATEMENT_ID", 
		"STATEMENT", "STATIC", "STATISTICS", "STRING", "SUBMULTISET", "SUBPARTITION", 
		"SUBSTITUTABLE", "SUBTYPE", "SUCCESS", "SUPPLEMENTAL_LOG_DATA", "SUSPEND", 
		"SYNONYM", "SYS_CONTEXT", "SYSDATE", "SYSTIMESTAMP", "TABLE", "TANH", 
		"TAN", "THEN", "THE", "TIMESTAMP_LTZ_UNCONSTRAINED", "TIMESTAMP", "TIMESTAMP_TZ_UNCONSTRAINED", 
		"TIMESTAMP_UNCONSTRAINED", "TIME", "TIME_TZ_UNCONSTRAINED", "TIME_UNCONSTRAINED", 
		"TIMEZONE_ABBR", "TIMEZONE_HOUR", "TIMEZONE_MINUTE", "TIMEZONE_REGION", 
		"TO_CLOB", "TO_DSINTERVAL", "TO_LOB", "TO_MULTI_BYTE", "TO_NCLOB", "TO_NUMBER", 
		"TO_SINGLE_BYTE", "TO_TIMESTAMP", "TO_TIMESTAMP_TZ", "TO", "TO_YMINTERVAL", 
		"TRAILING", "TRANSACTION", "TRANSLATE", "TREAT", "TRIGGER", "TRUE", "TRUNCATE", 
		"TRUNC", "TYPE", "TZ_OFFSET", "UID", "UNBOUNDED", "UNDER", "UNION", "UNIQUE", 
		"UNLIMITED", "UNPIVOT", "UNTIL", "UPDATED", "UPDATE", "UPPER", "UPSERT", 
		"UROWID", "USERENV", "USER", "USE", "USING", "VALIDATE", "VALUES", "VALUE", 
		"VARCHAR2", "VARCHAR", "VARIABLE", "VAR_POP", "VARRAY", "VAR_SAMP", "VARYING", 
		"VERSIONS", "VERSION", "VIEW", "VSIZE", "WAIT", "WARNING", "WELLFORMED", 
		"WHENEVER", "WHEN", "WHERE", "WHILE", "WITHIN", "WITH", "WORK", "WRITE", 
		"XMLAGG", "XMLATTRIBUTES", "XMLCAST", "XMLCOLATTVAL", "XMLELEMENT", "XMLEXISTS", 
		"XMLFOREST", "XMLNAMESPACES", "XMLPARSE", "XMLPI", "XMLQUERY", "XMLROOT", 
		"XMLSERIALIZE", "XMLTABLE", "XML", "YEAR", "YES", "YMINTERVAL_UNCONSTRAINED", 
		"ZONE", "PREDICTION", "PREDICTION_BOUNDS", "PREDICTION_COST", "PREDICTION_DETAILS", 
		"PREDICTION_PROBABILITY", "PREDICTION_SET", "CUME_DIST", "DENSE_RANK", 
		"LISTAGG", "PERCENT_RANK", "PERCENTILE_CONT", "PERCENTILE_DISC", "RANK", 
		"AVG", "CORR", "COVAR_", "DECODE", "LAG", "LEAD", "MAX", "MEDIAN", "MIN", 
		"NTILE", "NVL", "RATIO_TO_REPORT", "REGR_", "ROUND", "ROW_NUMBER", "SUBSTR", 
		"TO_CHAR", "TRIM", "SUM", "STDDEV", "VAR_", "VARIANCE", "LEAST", "GREATEST", 
		"TO_DATE", "WM_CONCAT", "NATIONAL_CHAR_STRING_LIT", "BIT_STRING_LIT", 
		"HEX_STRING_LIT", "DOUBLE_PERIOD", "PERIOD", "UNSIGNED_INTEGER", "APPROXIMATE_NUM_LIT", 
		"PLAIN_TEXT_START", "PLAIN_TEXT_END", "CHAR_STRING", "DELIMITED_ID", "PERCENT", 
		"AMPERSAND", "LEFT_PAREN", "RIGHT_PAREN", "DOUBLE_ASTERISK", "ASTERISK", 
		"PLUS_SIGN", "MINUS_SIGN", "MOD_SIGN", "COMMA", "SOLIDUS", "AT_SIGN", 
		"ASSIGN_OP", "BINDVAR", "COLON", "SEMI", "LESS_THAN_OR_EQUALS_OP", "LESS_THAN_OP", 
		"GREATER_THAN_OR_EQUALS_OP", "NOT_EQUAL_OP", "CARRET_OPERATOR_PART", "TILDE_OPERATOR_PART", 
		"EXCLAMATION_OPERATOR_PART", "GREATER_THAN_OP", "CONCATENATION_OP", "VERTICAL_BAR", 
		"EQUALS_OP", "LEFT_BRACKET", "RIGHT_BRACKET", "INTRODUCER", "SPACES", 
		"SINGLE_LINE_COMMENT", "MULTI_LINE_COMMENT", "CACHE_NUMBER", "PROMPT", 
		"START_CMD", "REGULAR_ID", "ZV"
	};
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}

	@Override
	public String getGrammarFileName() { return "OracleSQLStatementParser.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public ATN getATN() { return _ATN; }

	public OracleSQLStatementParser(TokenStream input) {
		super(input);
		_interp = new ParserATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}
	public static class ParseContext extends ParserRuleContext {
		public TerminalNode EOF() { return getToken(OracleSQLStatementParser.EOF, 0); }
		public List<Unit_statementContext> unit_statement() {
			return getRuleContexts(Unit_statementContext.class);
		}
		public Unit_statementContext unit_statement(int i) {
			return getRuleContext(Unit_statementContext.class,i);
		}
		public List<Sql_plus_commandContext> sql_plus_command() {
			return getRuleContexts(Sql_plus_commandContext.class);
		}
		public Sql_plus_commandContext sql_plus_command(int i) {
			return getRuleContext(Sql_plus_commandContext.class,i);
		}
		public List<TerminalNode> SEMI() { return getTokens(OracleSQLStatementParser.SEMI); }
		public TerminalNode SEMI(int i) {
			return getToken(OracleSQLStatementParser.SEMI, i);
		}
		public ParseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parse; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterParse(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitParse(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitParse(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ParseContext parse() throws RecognitionException {
		ParseContext _localctx = new ParseContext(_ctx, getState());
		enterRule(_localctx, 0, RULE_parse);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(831);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==ALTER || _la==BEGIN || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (COMMENT_ON_COLUMN - 69)) | (1L << (COMMENT - 69)) | (1L << (CREATE - 69)) | (1L << (DELETE - 69)))) != 0) || ((((_la - 134)) & ~0x3f) == 0 && ((1L << (_la - 134)) & ((1L << (DROP - 134)) | (1L << (EXIT - 134)) | (1L << (EXPLAIN - 134)))) != 0) || ((((_la - 209)) & ~0x3f) == 0 && ((1L << (_la - 209)) & ((1L << (INSERT - 209)) | (1L << (LOCK - 209)) | (1L << (MERGE - 209)))) != 0) || ((((_la - 416)) & ~0x3f) == 0 && ((1L << (_la - 416)) & ((1L << (SELECT - 416)) | (1L << (SET - 416)) | (1L << (SHOW - 416)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (UPDATE - 512)) | (1L << (WHENEVER - 512)) | (1L << (WITH - 512)))) != 0) || ((((_la - 616)) & ~0x3f) == 0 && ((1L << (_la - 616)) & ((1L << (LEFT_PAREN - 616)) | (1L << (SOLIDUS - 616)) | (1L << (PROMPT - 616)) | (1L << (START_CMD - 616)))) != 0)) {
				{
				{
				setState(824);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ALTER:
				case BEGIN:
				case COMMENT_ON_COLUMN:
				case COMMENT:
				case CREATE:
				case DELETE:
				case DROP:
				case EXPLAIN:
				case INSERT:
				case LOCK:
				case MERGE:
				case SELECT:
				case UPDATE:
				case WITH:
				case LEFT_PAREN:
					{
					setState(822);
					unit_statement();
					}
					break;
				case EXIT:
				case SET:
				case SHOW:
				case WHENEVER:
				case SOLIDUS:
				case PROMPT:
				case START_CMD:
					{
					setState(823);
					sql_plus_command();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(827);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SEMI) {
					{
					setState(826);
					match(SEMI);
					}
				}

				}
				}
				setState(833);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(834);
			match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Swallow_to_semiContext extends ParserRuleContext {
		public List<TerminalNode> SEMI() { return getTokens(OracleSQLStatementParser.SEMI); }
		public TerminalNode SEMI(int i) {
			return getToken(OracleSQLStatementParser.SEMI, i);
		}
		public Swallow_to_semiContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_swallow_to_semi; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterSwallow_to_semi(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitSwallow_to_semi(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitSwallow_to_semi(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Swallow_to_semiContext swallow_to_semi() throws RecognitionException {
		Swallow_to_semiContext _localctx = new Swallow_to_semiContext(_ctx, getState());
		enterRule(_localctx, 2, RULE_swallow_to_semi);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(837); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(836);
				_la = _input.LA(1);
				if ( _la <= 0 || (_la==SEMI) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				}
				setState(839); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABS) | (1L << ACOS) | (1L << ADD) | (1L << ADD_MONTHS) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ALL) | (1L << ALTER) | (1L << ANALYZE) | (1L << AND) | (1L << ANY) | (1L << ARRAY) | (1L << AS) | (1L << ASC) | (1L << ASCII) | (1L << ASCIISTR) | (1L << ASIN) | (1L << ASSOCIATE) | (1L << ATAN2) | (1L << ATAN) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BEGIN) | (1L << BETWEEN) | (1L << BFILE) | (1L << BFILENAME) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BIN_TO_NUM) | (1L << BITAND) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BREADTH) | (1L << BULK) | (1L << BY) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CARDINALITY) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CEIL) | (1L << CHARACTER) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARTOROWID) | (1L << CHECK) | (1L << CHR) | (1L << C_LETTER))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COLLECT - 64)) | (1L << (COMMENT_ON_COLUMN - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOSE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONCAT - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONNECT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COS - 64)) | (1L << (COSH - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (COVAR_POP - 64)) | (1L << (COVAR_SAMP - 64)) | (1L << (CREATE - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT - 64)) | (1L << (CURRENT_DATE - 64)) | (1L << (CURRENT_TIMESTAMP - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECLARE - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DEPTH - 64)) | (1L << (DESC - 64)) | (1L << (DETERMINISTIC - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (DIMENSION - 128)) | (1L << (DISABLE - 128)) | (1L << (DISASSOCIATE - 128)) | (1L << (DISTINCT - 128)) | (1L << (DOCUMENT - 128)) | (1L << (DOUBLE - 128)) | (1L << (DROP - 128)) | (1L << (DSINTERVAL_UNCONSTRAINED - 128)) | (1L << (DUMP - 128)) | (1L << (EACH - 128)) | (1L << (ELEMENT - 128)) | (1L << (ELSE - 128)) | (1L << (ELSIF - 128)) | (1L << (EMPTY_BLOB - 128)) | (1L << (EMPTY_CLOB - 128)) | (1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (END - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERR - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXCLUSIVE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXISTS - 128)) | (1L << (EXIT - 128)) | (1L << (EXP - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FALSE - 128)) | (1L << (FETCH - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FLOOR - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FOREIGN - 128)) | (1L << (FOR - 128)) | (1L << (FROM - 128)) | (1L << (FROM_TZ - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GOTO - 128)) | (1L << (GRANT - 128)) | (1L << (GROUP - 128)) | (1L << (GROUP_ID - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HAVING - 128)) | (1L << (HEXTORAW - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (IF - 192)) | (1L << (IGNORE - 192)) | (1L << (IMMEDIATE - 192)) | (1L << (INCLUDE - 192)) | (1L << (INCLUDING - 192)) | (1L << (INCREMENT - 192)) | (1L << (INDENT - 192)) | (1L << (INDEXED - 192)) | (1L << (INDEX - 192)) | (1L << (INDICATOR - 192)) | (1L << (INDICES - 192)) | (1L << (INFINITE - 192)) | (1L << (IN - 192)) | (1L << (INITCAP - 192)) | (1L << (INLINE - 192)) | (1L << (INNER - 192)) | (1L << (INOUT - 192)) | (1L << (INSERT - 192)) | (1L << (INSTANTIABLE - 192)) | (1L << (INSTEAD - 192)) | (1L << (INSTR2 - 192)) | (1L << (INSTR4 - 192)) | (1L << (INSTRB - 192)) | (1L << (INSTRC - 192)) | (1L << (INSTR - 192)) | (1L << (INTERFACE - 192)) | (1L << (INTEGER - 192)) | (1L << (INTERSECT - 192)) | (1L << (INTERVAL - 192)) | (1L << (INT - 192)) | (1L << (INTO - 192)) | (1L << (INVALIDATE - 192)) | (1L << (IS - 192)) | (1L << (ISOLATION - 192)) | (1L << (ITERATE - 192)) | (1L << (JAVA - 192)) | (1L << (JOIN - 192)) | (1L << (KEEP - 192)) | (1L << (KEY - 192)) | (1L << (LANGUAGE - 192)) | (1L << (LAST_DAY - 192)) | (1L << (LAST - 192)) | (1L << (LAST_VALUE - 192)) | (1L << (LEADING - 192)) | (1L << (LEFT - 192)) | (1L << (LENGTH2 - 192)) | (1L << (LENGTH4 - 192)) | (1L << (LENGTHB - 192)) | (1L << (LENGTHC - 192)) | (1L << (LENGTH - 192)) | (1L << (LEVEL - 192)) | (1L << (LIBRARY - 192)) | (1L << (LIKE2 - 192)) | (1L << (LIKE4 - 192)) | (1L << (LIKEC - 192)) | (1L << (LIKE - 192)) | (1L << (LIMIT - 192)) | (1L << (LN - 192)) | (1L << (LNNVL - 192)) | (1L << (LOCAL - 192)) | (1L << (LOCALTIMESTAMP - 192)) | (1L << (LOCKED - 192)) | (1L << (LOCK - 192)) | (1L << (LOG - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (LOGOFF - 256)) | (1L << (LOGON - 256)) | (1L << (LONG - 256)) | (1L << (LOOP - 256)) | (1L << (LOWER - 256)) | (1L << (LPAD - 256)) | (1L << (LTRIM - 256)) | (1L << (MAIN - 256)) | (1L << (MAP - 256)) | (1L << (MATCHED - 256)) | (1L << (MAXVALUE - 256)) | (1L << (MEASURES - 256)) | (1L << (MEMBER - 256)) | (1L << (MERGE - 256)) | (1L << (MINUS - 256)) | (1L << (MINUTE - 256)) | (1L << (MINVALUE - 256)) | (1L << (MLSLABEL - 256)) | (1L << (MODEL - 256)) | (1L << (MODE - 256)) | (1L << (MODIFY - 256)) | (1L << (MOD - 256)) | (1L << (MONTH - 256)) | (1L << (MONTHS_BETWEEN - 256)) | (1L << (MULTISET - 256)) | (1L << (NAME - 256)) | (1L << (NAN - 256)) | (1L << (NANVL - 256)) | (1L << (NATURAL - 256)) | (1L << (NATURALN - 256)) | (1L << (NAV - 256)) | (1L << (NCHAR_CS - 256)) | (1L << (NCHAR - 256)) | (1L << (NCHR - 256)) | (1L << (NCLOB - 256)) | (1L << (NESTED - 256)) | (1L << (NEW - 256)) | (1L << (NEW_TIME - 256)) | (1L << (NEXT_DAY - 256)) | (1L << (NOAUDIT - 256)) | (1L << (NOCACHE - 256)) | (1L << (NOCOPY - 256)) | (1L << (NOCYCLE - 256)) | (1L << (NOENTITYESCAPING - 256)) | (1L << (NOMAXVALUE - 256)) | (1L << (NOMINVALUE - 256)) | (1L << (NONE - 256)) | (1L << (NO - 256)) | (1L << (NOORDER - 256)) | (1L << (NOSCHEMACHECK - 256)) | (1L << (NOT - 256)) | (1L << (NOWAIT - 256)) | (1L << (NTH_VALUE - 256)) | (1L << (NULLIF - 256)) | (1L << (NULL - 256)) | (1L << (NULLS - 256)) | (1L << (NUMBER - 256)) | (1L << (NUMERIC - 256)) | (1L << (NUMTODSINTERVAL - 256)) | (1L << (NUMTOYMINTERVAL - 256)) | (1L << (NVARCHAR2 - 256)) | (1L << (NVL2 - 256)) | (1L << (OBJECT - 256)) | (1L << (OFF - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (OF - 320)) | (1L << (OID - 320)) | (1L << (OLD - 320)) | (1L << (ONLY - 320)) | (1L << (ON - 320)) | (1L << (OPAQUE - 320)) | (1L << (OPEN - 320)) | (1L << (OPTION - 320)) | (1L << (ORADATA - 320)) | (1L << (ORDER - 320)) | (1L << (ORDINALITY - 320)) | (1L << (OR - 320)) | (1L << (OSERROR - 320)) | (1L << (OUTER - 320)) | (1L << (OUT - 320)) | (1L << (OVER - 320)) | (1L << (OVERRIDING - 320)) | (1L << (PACKAGE - 320)) | (1L << (PARALLEL_ENABLE - 320)) | (1L << (PARAMETERS - 320)) | (1L << (PARENT - 320)) | (1L << (PARTITION - 320)) | (1L << (PASSING - 320)) | (1L << (PATH - 320)) | (1L << (PERCENT_CHARSET - 320)) | (1L << (PERCENT_FOUND - 320)) | (1L << (PERCENT_ISOPEN - 320)) | (1L << (PERCENT_NOTFOUND - 320)) | (1L << (PERCENT_ROWCOUNT - 320)) | (1L << (PERCENT_ROWTYPE - 320)) | (1L << (PERCENT_TYPE - 320)) | (1L << (PIPELINED - 320)) | (1L << (PIPE - 320)) | (1L << (PIVOT - 320)) | (1L << (PLAN - 320)) | (1L << (PLS_INTEGER - 320)) | (1L << (POSITIVEN - 320)) | (1L << (POSITIVE - 320)) | (1L << (POWER - 320)) | (1L << (PRAGMA - 320)) | (1L << (PRECEDING - 320)) | (1L << (PRECISION - 320)) | (1L << (PRESENT - 320)) | (1L << (PRIMARY - 320)) | (1L << (PRIOR - 320)) | (1L << (PROCEDURE - 320)) | (1L << (PUBLIC - 320)) | (1L << (RAISE - 320)) | (1L << (RANGE - 320)) | (1L << (RAW - 320)) | (1L << (RAWTOHEX - 320)) | (1L << (READ - 320)) | (1L << (REAL - 320)) | (1L << (RECORD - 320)) | (1L << (REFERENCE - 320)) | (1L << (REFERENCES - 320)) | (1L << (REFERENCING - 320)) | (1L << (REF - 320)) | (1L << (REGEXP_COUNT - 320)) | (1L << (REGEXP_INSTR - 320)) | (1L << (REGEXP_REPLACE - 320)) | (1L << (REGEXP_SUBSTR - 320)) | (1L << (REJECT - 320)) | (1L << (RELIES_ON - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (REMAINDER - 384)) | (1L << (RENAME - 384)) | (1L << (REPLACE - 384)) | (1L << (RESPECT - 384)) | (1L << (RESTRICT_REFERENCES - 384)) | (1L << (RESULT_CACHE - 384)) | (1L << (RESULT - 384)) | (1L << (RETURNING - 384)) | (1L << (RETURN - 384)) | (1L << (REUSE - 384)) | (1L << (REVERSE - 384)) | (1L << (REVOKE - 384)) | (1L << (RIGHT - 384)) | (1L << (ROLLBACK - 384)) | (1L << (ROLLUP - 384)) | (1L << (ROWID - 384)) | (1L << (ROWNUM - 384)) | (1L << (ROW - 384)) | (1L << (ROWS - 384)) | (1L << (RPAD - 384)) | (1L << (RTRIM - 384)) | (1L << (RULES - 384)) | (1L << (SAMPLE - 384)) | (1L << (SAVEPOINT - 384)) | (1L << (SAVE - 384)) | (1L << (SCHEMACHECK - 384)) | (1L << (SCHEMA - 384)) | (1L << (SCN - 384)) | (1L << (SEARCH - 384)) | (1L << (SECOND - 384)) | (1L << (SEED - 384)) | (1L << (SEGMENT - 384)) | (1L << (SELECT - 384)) | (1L << (SELF - 384)) | (1L << (SEQUENCE - 384)) | (1L << (SEQUENTIAL - 384)) | (1L << (SERIALIZABLE - 384)) | (1L << (SERIALLY_REUSABLE - 384)) | (1L << (SERVERERROR - 384)) | (1L << (SESSIONTIMEZONE - 384)) | (1L << (SET - 384)) | (1L << (SETS - 384)) | (1L << (SETTINGS - 384)) | (1L << (SHARE - 384)) | (1L << (SHOW - 384)) | (1L << (SHUTDOWN - 384)) | (1L << (SIBLINGS - 384)) | (1L << (SIGN - 384)) | (1L << (SIGNTYPE - 384)) | (1L << (SIMPLE_INTEGER - 384)) | (1L << (SINGLE - 384)) | (1L << (SINH - 384)) | (1L << (SIN - 384)) | (1L << (SIZE - 384)) | (1L << (SKIP_ - 384)) | (1L << (SMALLINT - 384)) | (1L << (SNAPSHOT - 384)) | (1L << (SOME - 384)) | (1L << (SOUNDEX - 384)) | (1L << (SPECIFICATION - 384)) | (1L << (SQLDATA - 384)) | (1L << (SQLERROR - 384)) | (1L << (SQRT - 384)) | (1L << (STANDALONE - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (START - 448)) | (1L << (STARTUP - 448)) | (1L << (STATEMENT_ID - 448)) | (1L << (STATEMENT - 448)) | (1L << (STATIC - 448)) | (1L << (STATISTICS - 448)) | (1L << (STRING - 448)) | (1L << (SUBMULTISET - 448)) | (1L << (SUBPARTITION - 448)) | (1L << (SUBSTITUTABLE - 448)) | (1L << (SUBTYPE - 448)) | (1L << (SUCCESS - 448)) | (1L << (SUPPLEMENTAL_LOG_DATA - 448)) | (1L << (SUSPEND - 448)) | (1L << (SYNONYM - 448)) | (1L << (SYS_CONTEXT - 448)) | (1L << (SYSDATE - 448)) | (1L << (SYSTIMESTAMP - 448)) | (1L << (TABLE - 448)) | (1L << (TANH - 448)) | (1L << (TAN - 448)) | (1L << (THEN - 448)) | (1L << (THE - 448)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 448)) | (1L << (TIMESTAMP - 448)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 448)) | (1L << (TIMESTAMP_UNCONSTRAINED - 448)) | (1L << (TIME - 448)) | (1L << (TIME_TZ_UNCONSTRAINED - 448)) | (1L << (TIME_UNCONSTRAINED - 448)) | (1L << (TIMEZONE_ABBR - 448)) | (1L << (TIMEZONE_HOUR - 448)) | (1L << (TIMEZONE_MINUTE - 448)) | (1L << (TIMEZONE_REGION - 448)) | (1L << (TO_CLOB - 448)) | (1L << (TO_DSINTERVAL - 448)) | (1L << (TO_LOB - 448)) | (1L << (TO_MULTI_BYTE - 448)) | (1L << (TO_NCLOB - 448)) | (1L << (TO_NUMBER - 448)) | (1L << (TO_SINGLE_BYTE - 448)) | (1L << (TO_TIMESTAMP - 448)) | (1L << (TO_TIMESTAMP_TZ - 448)) | (1L << (TO - 448)) | (1L << (TO_YMINTERVAL - 448)) | (1L << (TRAILING - 448)) | (1L << (TRANSACTION - 448)) | (1L << (TRANSLATE - 448)) | (1L << (TREAT - 448)) | (1L << (TRIGGER - 448)) | (1L << (TRUE - 448)) | (1L << (TRUNCATE - 448)) | (1L << (TRUNC - 448)) | (1L << (TYPE - 448)) | (1L << (TZ_OFFSET - 448)) | (1L << (UID - 448)) | (1L << (UNBOUNDED - 448)) | (1L << (UNDER - 448)) | (1L << (UNION - 448)) | (1L << (UNIQUE - 448)) | (1L << (UNLIMITED - 448)) | (1L << (UNPIVOT - 448)) | (1L << (UNTIL - 448)) | (1L << (UPDATED - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (UPDATE - 512)) | (1L << (UPPER - 512)) | (1L << (UPSERT - 512)) | (1L << (UROWID - 512)) | (1L << (USERENV - 512)) | (1L << (USER - 512)) | (1L << (USE - 512)) | (1L << (USING - 512)) | (1L << (VALIDATE - 512)) | (1L << (VALUES - 512)) | (1L << (VALUE - 512)) | (1L << (VARCHAR2 - 512)) | (1L << (VARCHAR - 512)) | (1L << (VARIABLE - 512)) | (1L << (VAR_POP - 512)) | (1L << (VARRAY - 512)) | (1L << (VAR_SAMP - 512)) | (1L << (VARYING - 512)) | (1L << (VERSIONS - 512)) | (1L << (VERSION - 512)) | (1L << (VIEW - 512)) | (1L << (VSIZE - 512)) | (1L << (WAIT - 512)) | (1L << (WARNING - 512)) | (1L << (WELLFORMED - 512)) | (1L << (WHENEVER - 512)) | (1L << (WHEN - 512)) | (1L << (WHERE - 512)) | (1L << (WHILE - 512)) | (1L << (WITHIN - 512)) | (1L << (WITH - 512)) | (1L << (WORK - 512)) | (1L << (WRITE - 512)) | (1L << (XMLAGG - 512)) | (1L << (XMLATTRIBUTES - 512)) | (1L << (XMLCAST - 512)) | (1L << (XMLCOLATTVAL - 512)) | (1L << (XMLELEMENT - 512)) | (1L << (XMLEXISTS - 512)) | (1L << (XMLFOREST - 512)) | (1L << (XMLNAMESPACES - 512)) | (1L << (XMLPARSE - 512)) | (1L << (XMLPI - 512)) | (1L << (XMLQUERY - 512)) | (1L << (XMLROOT - 512)) | (1L << (XMLSERIALIZE - 512)) | (1L << (XMLTABLE - 512)) | (1L << (XML - 512)) | (1L << (YEAR - 512)) | (1L << (YES - 512)) | (1L << (YMINTERVAL_UNCONSTRAINED - 512)) | (1L << (ZONE - 512)) | (1L << (PREDICTION - 512)) | (1L << (PREDICTION_BOUNDS - 512)) | (1L << (PREDICTION_COST - 512)) | (1L << (PREDICTION_DETAILS - 512)) | (1L << (PREDICTION_PROBABILITY - 512)) | (1L << (PREDICTION_SET - 512)) | (1L << (CUME_DIST - 512)) | (1L << (DENSE_RANK - 512)) | (1L << (LISTAGG - 512)) | (1L << (PERCENT_RANK - 512)) | (1L << (PERCENTILE_CONT - 512)) | (1L << (PERCENTILE_DISC - 512)))) != 0) || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & ((1L << (RANK - 576)) | (1L << (AVG - 576)) | (1L << (CORR - 576)) | (1L << (COVAR_ - 576)) | (1L << (DECODE - 576)) | (1L << (LAG - 576)) | (1L << (LEAD - 576)) | (1L << (MAX - 576)) | (1L << (MEDIAN - 576)) | (1L << (MIN - 576)) | (1L << (NTILE - 576)) | (1L << (NVL - 576)) | (1L << (RATIO_TO_REPORT - 576)) | (1L << (REGR_ - 576)) | (1L << (ROUND - 576)) | (1L << (ROW_NUMBER - 576)) | (1L << (SUBSTR - 576)) | (1L << (TO_CHAR - 576)) | (1L << (TRIM - 576)) | (1L << (SUM - 576)) | (1L << (STDDEV - 576)) | (1L << (VAR_ - 576)) | (1L << (VARIANCE - 576)) | (1L << (LEAST - 576)) | (1L << (GREATEST - 576)) | (1L << (TO_DATE - 576)) | (1L << (WM_CONCAT - 576)) | (1L << (NATIONAL_CHAR_STRING_LIT - 576)) | (1L << (BIT_STRING_LIT - 576)) | (1L << (HEX_STRING_LIT - 576)) | (1L << (DOUBLE_PERIOD - 576)) | (1L << (PERIOD - 576)) | (1L << (UNSIGNED_INTEGER - 576)) | (1L << (APPROXIMATE_NUM_LIT - 576)) | (1L << (PLAIN_TEXT_START - 576)) | (1L << (PLAIN_TEXT_END - 576)) | (1L << (CHAR_STRING - 576)) | (1L << (DELIMITED_ID - 576)) | (1L << (PERCENT - 576)) | (1L << (AMPERSAND - 576)) | (1L << (LEFT_PAREN - 576)) | (1L << (RIGHT_PAREN - 576)) | (1L << (DOUBLE_ASTERISK - 576)) | (1L << (ASTERISK - 576)) | (1L << (PLUS_SIGN - 576)) | (1L << (MINUS_SIGN - 576)) | (1L << (MOD_SIGN - 576)) | (1L << (COMMA - 576)) | (1L << (SOLIDUS - 576)) | (1L << (AT_SIGN - 576)) | (1L << (ASSIGN_OP - 576)) | (1L << (BINDVAR - 576)) | (1L << (COLON - 576)) | (1L << (LESS_THAN_OR_EQUALS_OP - 576)) | (1L << (LESS_THAN_OP - 576)) | (1L << (GREATER_THAN_OR_EQUALS_OP - 576)) | (1L << (NOT_EQUAL_OP - 576)) | (1L << (CARRET_OPERATOR_PART - 576)) | (1L << (TILDE_OPERATOR_PART - 576)) | (1L << (EXCLAMATION_OPERATOR_PART - 576)) | (1L << (GREATER_THAN_OP - 576)) | (1L << (CONCATENATION_OP - 576)) | (1L << (VERTICAL_BAR - 576)))) != 0) || ((((_la - 640)) & ~0x3f) == 0 && ((1L << (_la - 640)) & ((1L << (EQUALS_OP - 640)) | (1L << (LEFT_BRACKET - 640)) | (1L << (RIGHT_BRACKET - 640)) | (1L << (INTRODUCER - 640)) | (1L << (SPACES - 640)) | (1L << (SINGLE_LINE_COMMENT - 640)) | (1L << (MULTI_LINE_COMMENT - 640)) | (1L << (CACHE_NUMBER - 640)) | (1L << (PROMPT - 640)) | (1L << (START_CMD - 640)) | (1L << (REGULAR_ID - 640)) | (1L << (ZV - 640)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unit_statementContext extends ParserRuleContext {
		public Alter_functionContext alter_function() {
			return getRuleContext(Alter_functionContext.class,0);
		}
		public Alter_packageContext alter_package() {
			return getRuleContext(Alter_packageContext.class,0);
		}
		public Alter_procedureContext alter_procedure() {
			return getRuleContext(Alter_procedureContext.class,0);
		}
		public Alter_sequenceContext alter_sequence() {
			return getRuleContext(Alter_sequenceContext.class,0);
		}
		public Alter_triggerContext alter_trigger() {
			return getRuleContext(Alter_triggerContext.class,0);
		}
		public Alter_typeContext alter_type() {
			return getRuleContext(Alter_typeContext.class,0);
		}
		public Alter_tableContext alter_table() {
			return getRuleContext(Alter_tableContext.class,0);
		}
		public Create_function_bodyContext create_function_body() {
			return getRuleContext(Create_function_bodyContext.class,0);
		}
		public Create_procedure_bodyContext create_procedure_body() {
			return getRuleContext(Create_procedure_bodyContext.class,0);
		}
		public Create_packageContext create_package() {
			return getRuleContext(Create_packageContext.class,0);
		}
		public Create_package_bodyContext create_package_body() {
			return getRuleContext(Create_package_bodyContext.class,0);
		}
		public Create_typeContext create_type() {
			return getRuleContext(Create_typeContext.class,0);
		}
		public Create_type_bodyContext create_type_body() {
			return getRuleContext(Create_type_bodyContext.class,0);
		}
		public Create_tableContext create_table() {
			return getRuleContext(Create_tableContext.class,0);
		}
		public Create_viewContext create_view() {
			return getRuleContext(Create_viewContext.class,0);
		}
		public Create_sequenceContext create_sequence() {
			return getRuleContext(Create_sequenceContext.class,0);
		}
		public Create_triggerContext create_trigger() {
			return getRuleContext(Create_triggerContext.class,0);
		}
		public Create_synonymContext create_synonym() {
			return getRuleContext(Create_synonymContext.class,0);
		}
		public Drop_functionContext drop_function() {
			return getRuleContext(Drop_functionContext.class,0);
		}
		public Drop_packageContext drop_package() {
			return getRuleContext(Drop_packageContext.class,0);
		}
		public Drop_procedureContext drop_procedure() {
			return getRuleContext(Drop_procedureContext.class,0);
		}
		public Drop_sequenceContext drop_sequence() {
			return getRuleContext(Drop_sequenceContext.class,0);
		}
		public Drop_triggerContext drop_trigger() {
			return getRuleContext(Drop_triggerContext.class,0);
		}
		public Drop_typeContext drop_type() {
			return getRuleContext(Drop_typeContext.class,0);
		}
		public Data_manipulation_language_statementsContext data_manipulation_language_statements() {
			return getRuleContext(Data_manipulation_language_statementsContext.class,0);
		}
		public Drop_tableContext drop_table() {
			return getRuleContext(Drop_tableContext.class,0);
		}
		public Comment_on_columnContext comment_on_column() {
			return getRuleContext(Comment_on_columnContext.class,0);
		}
		public Comment_on_tableContext comment_on_table() {
			return getRuleContext(Comment_on_tableContext.class,0);
		}
		public Anonymous_blockContext anonymous_block() {
			return getRuleContext(Anonymous_blockContext.class,0);
		}
		public Unit_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unit_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterUnit_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitUnit_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitUnit_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Unit_statementContext unit_statement() throws RecognitionException {
		Unit_statementContext _localctx = new Unit_statementContext(_ctx, getState());
		enterRule(_localctx, 4, RULE_unit_statement);
		try {
			setState(870);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,4,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(841);
				alter_function();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(842);
				alter_package();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(843);
				alter_procedure();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(844);
				alter_sequence();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(845);
				alter_trigger();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(846);
				alter_type();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(847);
				alter_table();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(848);
				create_function_body();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(849);
				create_procedure_body();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(850);
				create_package();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(851);
				create_package_body();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(852);
				create_type();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(853);
				create_type_body();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(854);
				create_table();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(855);
				create_view();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(856);
				create_sequence();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(857);
				create_trigger();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(858);
				create_synonym();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(859);
				drop_function();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(860);
				drop_package();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(861);
				drop_procedure();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(862);
				drop_sequence();
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(863);
				drop_trigger();
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(864);
				drop_type();
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(865);
				data_manipulation_language_statements();
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(866);
				drop_table();
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(867);
				comment_on_column();
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(868);
				comment_on_table();
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(869);
				anonymous_block();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_functionContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(OracleSQLStatementParser.DROP, 0); }
		public TerminalNode FUNCTION() { return getToken(OracleSQLStatementParser.FUNCTION, 0); }
		public Function_nameContext function_name() {
			return getRuleContext(Function_nameContext.class,0);
		}
		public TerminalNode SEMI() { return getToken(OracleSQLStatementParser.SEMI, 0); }
		public Drop_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterDrop_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitDrop_function(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitDrop_function(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_functionContext drop_function() throws RecognitionException {
		Drop_functionContext _localctx = new Drop_functionContext(_ctx, getState());
		enterRule(_localctx, 6, RULE_drop_function);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(872);
			match(DROP);
			setState(873);
			match(FUNCTION);
			setState(874);
			function_name();
			setState(875);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_functionContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(OracleSQLStatementParser.ALTER, 0); }
		public TerminalNode FUNCTION() { return getToken(OracleSQLStatementParser.FUNCTION, 0); }
		public Function_nameContext function_name() {
			return getRuleContext(Function_nameContext.class,0);
		}
		public TerminalNode COMPILE() { return getToken(OracleSQLStatementParser.COMPILE, 0); }
		public TerminalNode SEMI() { return getToken(OracleSQLStatementParser.SEMI, 0); }
		public TerminalNode DEBUG() { return getToken(OracleSQLStatementParser.DEBUG, 0); }
		public List<Compiler_parameters_clauseContext> compiler_parameters_clause() {
			return getRuleContexts(Compiler_parameters_clauseContext.class);
		}
		public Compiler_parameters_clauseContext compiler_parameters_clause(int i) {
			return getRuleContext(Compiler_parameters_clauseContext.class,i);
		}
		public TerminalNode REUSE() { return getToken(OracleSQLStatementParser.REUSE, 0); }
		public TerminalNode SETTINGS() { return getToken(OracleSQLStatementParser.SETTINGS, 0); }
		public Alter_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterAlter_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitAlter_function(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitAlter_function(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_functionContext alter_function() throws RecognitionException {
		Alter_functionContext _localctx = new Alter_functionContext(_ctx, getState());
		enterRule(_localctx, 8, RULE_alter_function);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(877);
			match(ALTER);
			setState(878);
			match(FUNCTION);
			setState(879);
			function_name();
			setState(880);
			match(COMPILE);
			setState(882);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,5,_ctx) ) {
			case 1:
				{
				setState(881);
				match(DEBUG);
				}
				break;
			}
			setState(887);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,6,_ctx);
			while ( _alt!=2 && _alt!= ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(884);
					compiler_parameters_clause();
					}
					} 
				}
				setState(889);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,6,_ctx);
			}
			setState(892);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==REUSE) {
				{
				setState(890);
				match(REUSE);
				setState(891);
				match(SETTINGS);
				}
			}

			setState(894);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_function_bodyContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(OracleSQLStatementParser.CREATE, 0); }
		public TerminalNode FUNCTION() { return getToken(OracleSQLStatementParser.FUNCTION, 0); }
		public Function_nameContext function_name() {
			return getRuleContext(Function_nameContext.class,0);
		}
		public TerminalNode RETURN() { return getToken(OracleSQLStatementParser.RETURN, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode SEMI() { return getToken(OracleSQLStatementParser.SEMI, 0); }
		public TerminalNode USING() { return getToken(OracleSQLStatementParser.USING, 0); }
		public Implementation_type_nameContext implementation_type_name() {
			return getRuleContext(Implementation_type_nameContext.class,0);
		}
		public TerminalNode OR() { return getToken(OracleSQLStatementParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(OracleSQLStatementParser.REPLACE, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(OracleSQLStatementParser.LEFT_PAREN, 0); }
		public List<ParameterContext> parameter() {
			return getRuleContexts(ParameterContext.class);
		}
		public ParameterContext parameter(int i) {
			return getRuleContext(ParameterContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(OracleSQLStatementParser.RIGHT_PAREN, 0); }
		public List<Invoker_rights_clauseContext> invoker_rights_clause() {
			return getRuleContexts(Invoker_rights_clauseContext.class);
		}
		public Invoker_rights_clauseContext invoker_rights_clause(int i) {
			return getRuleContext(Invoker_rights_clauseContext.class,i);
		}
		public List<Parallel_enable_clauseContext> parallel_enable_clause() {
			return getRuleContexts(Parallel_enable_clauseContext.class);
		}
		public Parallel_enable_clauseContext parallel_enable_clause(int i) {
			return getRuleContext(Parallel_enable_clauseContext.class,i);
		}
		public List<Result_cache_clauseContext> result_cache_clause() {
			return getRuleContexts(Result_cache_clauseContext.class);
		}
		public Result_cache_clauseContext result_cache_clause(int i) {
			return getRuleContext(Result_cache_clauseContext.class,i);
		}
		public List<TerminalNode> DETERMINISTIC() { return getTokens(OracleSQLStatementParser.DETERMINISTIC); }
		public TerminalNode DETERMINISTIC(int i) {
			return getToken(OracleSQLStatementParser.DETERMINISTIC, i);
		}
		public TerminalNode PIPELINED() { return getToken(OracleSQLStatementParser.PIPELINED, 0); }
		public TerminalNode AGGREGATE() { return getToken(OracleSQLStatementParser.AGGREGATE, 0); }
		public TerminalNode IS() { return getToken(OracleSQLStatementParser.IS, 0); }
		public TerminalNode AS() { return getToken(OracleSQLStatementParser.AS, 0); }
		public List<TerminalNode> COMMA() { return getTokens(OracleSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(OracleSQLStatementParser.COMMA, i);
		}
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		public Call_specContext call_spec() {
			return getRuleContext(Call_specContext.class,0);
		}
		public TerminalNode DECLARE() { return getToken(OracleSQLStatementParser.DECLARE, 0); }
		public List<Declare_specContext> declare_spec() {
			return getRuleContexts(Declare_specContext.class);
		}
		public Declare_specContext declare_spec(int i) {
			return getRuleContext(Declare_specContext.class,i);
		}
		public Create_function_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_function_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterCreate_function_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitCreate_function_body(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitCreate_function_body(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_function_bodyContext create_function_body() throws RecognitionException {
		Create_function_bodyContext _localctx = new Create_function_bodyContext(_ctx, getState());
		enterRule(_localctx, 10, RULE_create_function_body);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(896);
			match(CREATE);
			setState(899);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(897);
				match(OR);
				setState(898);
				match(REPLACE);
				}
			}

			setState(901);
			match(FUNCTION);
			setState(902);
			function_name();
			setState(914);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(903);
				match(LEFT_PAREN);
				setState(904);
				parameter();
				setState(909);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(905);
					match(COMMA);
					setState(906);
					parameter();
					}
					}
					setState(911);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(912);
				match(RIGHT_PAREN);
				}
			}

			setState(916);
			match(RETURN);
			setState(917);
			type_spec();
			setState(924);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==AUTHID || _la==DETERMINISTIC || _la==PARALLEL_ENABLE || _la==RESULT_CACHE) {
				{
				setState(922);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case AUTHID:
					{
					setState(918);
					invoker_rights_clause();
					}
					break;
				case PARALLEL_ENABLE:
					{
					setState(919);
					parallel_enable_clause();
					}
					break;
				case RESULT_CACHE:
					{
					setState(920);
					result_cache_clause();
					}
					break;
				case DETERMINISTIC:
					{
					setState(921);
					match(DETERMINISTIC);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(926);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(947);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,17,_ctx) ) {
			case 1:
				{
				{
				setState(928);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PIPELINED) {
					{
					setState(927);
					match(PIPELINED);
					}
				}

				setState(930);
				_la = _input.LA(1);
				if ( !(_la==AS || _la==IS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(942);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,16,_ctx) ) {
				case 1:
					{
					setState(932);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==DECLARE) {
						{
						setState(931);
						match(DECLARE);
						}
					}

					setState(937);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABS) | (1L << ACOS) | (1L << ADD) | (1L << ADD_MONTHS) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASCII) | (1L << ASCIISTR) | (1L << ASIN) | (1L << ASSOCIATE) | (1L << ATAN2) | (1L << ATAN) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BFILENAME) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BIN_TO_NUM) | (1L << BITAND) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CARDINALITY) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CEIL) | (1L << CHARACTER) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARTOROWID) | (1L << CHR) | (1L << C_LETTER))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOSE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONCAT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COS - 64)) | (1L << (COSH - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_DATE - 64)) | (1L << (CURRENT_TIMESTAMP - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (DIMENSION - 128)) | (1L << (DISABLE - 128)) | (1L << (DISASSOCIATE - 128)) | (1L << (DOCUMENT - 128)) | (1L << (DOUBLE - 128)) | (1L << (DSINTERVAL_UNCONSTRAINED - 128)) | (1L << (DUMP - 128)) | (1L << (EACH - 128)) | (1L << (ELEMENT - 128)) | (1L << (EMPTY_BLOB - 128)) | (1L << (EMPTY_CLOB - 128)) | (1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERR - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXP - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FLOOR - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FROM_TZ - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUP_ID - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HEXTORAW - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (IGNORE - 193)) | (1L << (IMMEDIATE - 193)) | (1L << (INCLUDE - 193)) | (1L << (INCLUDING - 193)) | (1L << (INCREMENT - 193)) | (1L << (INDENT - 193)) | (1L << (INDEXED - 193)) | (1L << (INDICATOR - 193)) | (1L << (INDICES - 193)) | (1L << (INFINITE - 193)) | (1L << (INITCAP - 193)) | (1L << (INLINE - 193)) | (1L << (INNER - 193)) | (1L << (INOUT - 193)) | (1L << (INSTANTIABLE - 193)) | (1L << (INSTEAD - 193)) | (1L << (INSTR2 - 193)) | (1L << (INSTR4 - 193)) | (1L << (INSTRB - 193)) | (1L << (INSTRC - 193)) | (1L << (INSTR - 193)) | (1L << (INTERFACE - 193)) | (1L << (INTEGER - 193)) | (1L << (INTERVAL - 193)) | (1L << (INT - 193)) | (1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (KEY - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST_DAY - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LENGTH2 - 193)) | (1L << (LENGTH4 - 193)) | (1L << (LENGTHB - 193)) | (1L << (LENGTHC - 193)) | (1L << (LENGTH - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LN - 193)) | (1L << (LNNVL - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCALTIMESTAMP - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (LOGON - 257)) | (1L << (LONG - 257)) | (1L << (LOOP - 257)) | (1L << (LOWER - 257)) | (1L << (LPAD - 257)) | (1L << (LTRIM - 257)) | (1L << (MAIN - 257)) | (1L << (MAP - 257)) | (1L << (MATCHED - 257)) | (1L << (MAXVALUE - 257)) | (1L << (MEASURES - 257)) | (1L << (MEMBER - 257)) | (1L << (MERGE - 257)) | (1L << (MINUTE - 257)) | (1L << (MINVALUE - 257)) | (1L << (MLSLABEL - 257)) | (1L << (MODEL - 257)) | (1L << (MODIFY - 257)) | (1L << (MOD - 257)) | (1L << (MONTH - 257)) | (1L << (MONTHS_BETWEEN - 257)) | (1L << (MULTISET - 257)) | (1L << (NAME - 257)) | (1L << (NAN - 257)) | (1L << (NANVL - 257)) | (1L << (NATURAL - 257)) | (1L << (NATURALN - 257)) | (1L << (NAV - 257)) | (1L << (NCHAR_CS - 257)) | (1L << (NCHAR - 257)) | (1L << (NCHR - 257)) | (1L << (NCLOB - 257)) | (1L << (NESTED - 257)) | (1L << (NEW - 257)) | (1L << (NEW_TIME - 257)) | (1L << (NEXT_DAY - 257)) | (1L << (NOAUDIT - 257)) | (1L << (NOCOPY - 257)) | (1L << (NOCYCLE - 257)) | (1L << (NOENTITYESCAPING - 257)) | (1L << (NONE - 257)) | (1L << (NO - 257)) | (1L << (NOSCHEMACHECK - 257)) | (1L << (NULLIF - 257)) | (1L << (NULLS - 257)) | (1L << (NUMBER - 257)) | (1L << (NUMERIC - 257)) | (1L << (NUMTODSINTERVAL - 257)) | (1L << (NUMTOYMINTERVAL - 257)) | (1L << (NVARCHAR2 - 257)) | (1L << (NVL2 - 257)) | (1L << (OBJECT - 257)) | (1L << (OFF - 257)))) != 0) || ((((_la - 321)) & ~0x3f) == 0 && ((1L << (_la - 321)) & ((1L << (OID - 321)) | (1L << (OLD - 321)) | (1L << (ONLY - 321)) | (1L << (OPAQUE - 321)) | (1L << (OPEN - 321)) | (1L << (ORADATA - 321)) | (1L << (ORDINALITY - 321)) | (1L << (OSERROR - 321)) | (1L << (OUTER - 321)) | (1L << (OUT - 321)) | (1L << (OVER - 321)) | (1L << (OVERRIDING - 321)) | (1L << (PACKAGE - 321)) | (1L << (PARALLEL_ENABLE - 321)) | (1L << (PARAMETERS - 321)) | (1L << (PARENT - 321)) | (1L << (PARTITION - 321)) | (1L << (PASSING - 321)) | (1L << (PATH - 321)) | (1L << (PIPELINED - 321)) | (1L << (PLAN - 321)) | (1L << (PLS_INTEGER - 321)) | (1L << (POSITIVEN - 321)) | (1L << (POSITIVE - 321)) | (1L << (POWER - 321)) | (1L << (PRAGMA - 321)) | (1L << (PRECEDING - 321)) | (1L << (PRECISION - 321)) | (1L << (PRESENT - 321)) | (1L << (PRIOR - 321)) | (1L << (PROCEDURE - 321)) | (1L << (RAISE - 321)) | (1L << (RANGE - 321)) | (1L << (RAW - 321)) | (1L << (RAWTOHEX - 321)) | (1L << (READ - 321)) | (1L << (REAL - 321)) | (1L << (RECORD - 321)) | (1L << (REFERENCE - 321)) | (1L << (REFERENCING - 321)) | (1L << (REF - 321)) | (1L << (REGEXP_COUNT - 321)) | (1L << (REGEXP_INSTR - 321)) | (1L << (REGEXP_REPLACE - 321)) | (1L << (REGEXP_SUBSTR - 321)) | (1L << (REJECT - 321)) | (1L << (RELIES_ON - 321)) | (1L << (REMAINDER - 321)))) != 0) || ((((_la - 385)) & ~0x3f) == 0 && ((1L << (_la - 385)) & ((1L << (RENAME - 385)) | (1L << (REPLACE - 385)) | (1L << (RESPECT - 385)) | (1L << (RESTRICT_REFERENCES - 385)) | (1L << (RESULT_CACHE - 385)) | (1L << (RESULT - 385)) | (1L << (RETURNING - 385)) | (1L << (RETURN - 385)) | (1L << (REUSE - 385)) | (1L << (REVERSE - 385)) | (1L << (RIGHT - 385)) | (1L << (ROLLBACK - 385)) | (1L << (ROLLUP - 385)) | (1L << (ROWID - 385)) | (1L << (ROWNUM - 385)) | (1L << (ROW - 385)) | (1L << (ROWS - 385)) | (1L << (RPAD - 385)) | (1L << (RTRIM - 385)) | (1L << (RULES - 385)) | (1L << (SAMPLE - 385)) | (1L << (SAVEPOINT - 385)) | (1L << (SAVE - 385)) | (1L << (SCHEMACHECK - 385)) | (1L << (SCHEMA - 385)) | (1L << (SCN - 385)) | (1L << (SECOND - 385)) | (1L << (SEED - 385)) | (1L << (SEGMENT - 385)) | (1L << (SELF - 385)) | (1L << (SEQUENTIAL - 385)) | (1L << (SERIALIZABLE - 385)) | (1L << (SERIALLY_REUSABLE - 385)) | (1L << (SERVERERROR - 385)) | (1L << (SESSIONTIMEZONE - 385)) | (1L << (SET - 385)) | (1L << (SETS - 385)) | (1L << (SETTINGS - 385)) | (1L << (SHOW - 385)) | (1L << (SHUTDOWN - 385)) | (1L << (SIBLINGS - 385)) | (1L << (SIGN - 385)) | (1L << (SIGNTYPE - 385)) | (1L << (SIMPLE_INTEGER - 385)) | (1L << (SINGLE - 385)) | (1L << (SINH - 385)) | (1L << (SIN - 385)) | (1L << (SKIP_ - 385)) | (1L << (SMALLINT - 385)) | (1L << (SNAPSHOT - 385)) | (1L << (SOME - 385)) | (1L << (SOUNDEX - 385)) | (1L << (SPECIFICATION - 385)) | (1L << (SQLDATA - 385)) | (1L << (SQLERROR - 385)) | (1L << (SQRT - 385)) | (1L << (STANDALONE - 385)))) != 0) || ((((_la - 449)) & ~0x3f) == 0 && ((1L << (_la - 449)) & ((1L << (STARTUP - 449)) | (1L << (STATEMENT_ID - 449)) | (1L << (STATEMENT - 449)) | (1L << (STATIC - 449)) | (1L << (STATISTICS - 449)) | (1L << (STRING - 449)) | (1L << (SUBMULTISET - 449)) | (1L << (SUBPARTITION - 449)) | (1L << (SUBSTITUTABLE - 449)) | (1L << (SUBTYPE - 449)) | (1L << (SUCCESS - 449)) | (1L << (SUSPEND - 449)) | (1L << (SYS_CONTEXT - 449)) | (1L << (SYSDATE - 449)) | (1L << (SYSTIMESTAMP - 449)) | (1L << (TANH - 449)) | (1L << (TAN - 449)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 449)) | (1L << (TIMESTAMP - 449)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 449)) | (1L << (TIMESTAMP_UNCONSTRAINED - 449)) | (1L << (TIME - 449)) | (1L << (TIMEZONE_ABBR - 449)) | (1L << (TIMEZONE_HOUR - 449)) | (1L << (TIMEZONE_MINUTE - 449)) | (1L << (TIMEZONE_REGION - 449)) | (1L << (TO_CLOB - 449)) | (1L << (TO_DSINTERVAL - 449)) | (1L << (TO_LOB - 449)) | (1L << (TO_MULTI_BYTE - 449)) | (1L << (TO_NCLOB - 449)) | (1L << (TO_NUMBER - 449)) | (1L << (TO_SINGLE_BYTE - 449)) | (1L << (TO_TIMESTAMP - 449)) | (1L << (TO_TIMESTAMP_TZ - 449)) | (1L << (TO_YMINTERVAL - 449)) | (1L << (TRAILING - 449)) | (1L << (TRANSACTION - 449)) | (1L << (TRANSLATE - 449)) | (1L << (TREAT - 449)) | (1L << (TRIGGER - 449)) | (1L << (TRUNCATE - 449)) | (1L << (TRUNC - 449)) | (1L << (TYPE - 449)) | (1L << (TZ_OFFSET - 449)) | (1L << (UID - 449)) | (1L << (UNBOUNDED - 449)) | (1L << (UNDER - 449)) | (1L << (UNLIMITED - 449)) | (1L << (UNTIL - 449)) | (1L << (UPDATED - 449)))) != 0) || ((((_la - 513)) & ~0x3f) == 0 && ((1L << (_la - 513)) & ((1L << (UPPER - 513)) | (1L << (UPSERT - 513)) | (1L << (UROWID - 513)) | (1L << (USERENV - 513)) | (1L << (USER - 513)) | (1L << (USE - 513)) | (1L << (VALIDATE - 513)) | (1L << (VALUE - 513)) | (1L << (VARCHAR2 - 513)) | (1L << (VARCHAR - 513)) | (1L << (VARIABLE - 513)) | (1L << (VARRAY - 513)) | (1L << (VARYING - 513)) | (1L << (VERSIONS - 513)) | (1L << (VERSION - 513)) | (1L << (VSIZE - 513)) | (1L << (WAIT - 513)) | (1L << (WARNING - 513)) | (1L << (WELLFORMED - 513)) | (1L << (WHENEVER - 513)) | (1L << (WHILE - 513)) | (1L << (WITHIN - 513)) | (1L << (WORK - 513)) | (1L << (WRITE - 513)) | (1L << (XMLAGG - 513)) | (1L << (XMLATTRIBUTES - 513)) | (1L << (XMLCAST - 513)) | (1L << (XMLCOLATTVAL - 513)) | (1L << (XMLELEMENT - 513)) | (1L << (XMLEXISTS - 513)) | (1L << (XMLFOREST - 513)) | (1L << (XMLNAMESPACES - 513)) | (1L << (XMLPARSE - 513)) | (1L << (XMLPI - 513)) | (1L << (XMLQUERY - 513)) | (1L << (XMLROOT - 513)) | (1L << (XMLSERIALIZE - 513)) | (1L << (XMLTABLE - 513)) | (1L << (XML - 513)) | (1L << (YEAR - 513)) | (1L << (YES - 513)) | (1L << (YMINTERVAL_UNCONSTRAINED - 513)) | (1L << (ZONE - 513)) | (1L << (PREDICTION - 513)) | (1L << (PREDICTION_BOUNDS - 513)) | (1L << (PREDICTION_COST - 513)) | (1L << (PREDICTION_DETAILS - 513)) | (1L << (PREDICTION_PROBABILITY - 513)) | (1L << (PREDICTION_SET - 513)) | (1L << (CUME_DIST - 513)) | (1L << (DENSE_RANK - 513)) | (1L << (LISTAGG - 513)) | (1L << (PERCENT_RANK - 513)) | (1L << (PERCENTILE_CONT - 513)) | (1L << (PERCENTILE_DISC - 513)) | (1L << (RANK - 513)))) != 0) || ((((_la - 577)) & ~0x3f) == 0 && ((1L << (_la - 577)) & ((1L << (AVG - 577)) | (1L << (CORR - 577)) | (1L << (COVAR_ - 577)) | (1L << (DECODE - 577)) | (1L << (LAG - 577)) | (1L << (LEAD - 577)) | (1L << (MAX - 577)) | (1L << (MEDIAN - 577)) | (1L << (MIN - 577)) | (1L << (NTILE - 577)) | (1L << (NVL - 577)) | (1L << (RATIO_TO_REPORT - 577)) | (1L << (REGR_ - 577)) | (1L << (ROUND - 577)) | (1L << (ROW_NUMBER - 577)) | (1L << (SUBSTR - 577)) | (1L << (TO_CHAR - 577)) | (1L << (TRIM - 577)) | (1L << (SUM - 577)) | (1L << (STDDEV - 577)) | (1L << (VAR_ - 577)) | (1L << (VARIANCE - 577)) | (1L << (LEAST - 577)) | (1L << (GREATEST - 577)) | (1L << (TO_DATE - 577)) | (1L << (DELIMITED_ID - 577)) | (1L << (ASTERISK - 577)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
						{
						{
						setState(934);
						declare_spec();
						}
						}
						setState(939);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(940);
					body();
					}
					break;
				case 2:
					{
					setState(941);
					call_spec();
					}
					break;
				}
				}
				}
				break;
			case 2:
				{
				setState(944);
				_la = _input.LA(1);
				if ( !(_la==AGGREGATE || _la==PIPELINED) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(945);
				match(USING);
				setState(946);
				implementation_type_name();
				}
				break;
			}
			setState(949);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Parallel_enable_clauseContext extends ParserRuleContext {
		public TerminalNode PARALLEL_ENABLE() { return getToken(OracleSQLStatementParser.PARALLEL_ENABLE, 0); }
		public Partition_by_clauseContext partition_by_clause() {
			return getRuleContext(Partition_by_clauseContext.class,0);
		}
		public Parallel_enable_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parallel_enable_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterParallel_enable_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitParallel_enable_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitParallel_enable_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Parallel_enable_clauseContext parallel_enable_clause() throws RecognitionException {
		Parallel_enable_clauseContext _localctx = new Parallel_enable_clauseContext(_ctx, getState());
		enterRule(_localctx, 12, RULE_parallel_enable_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(951);
			match(PARALLEL_ENABLE);
			setState(953);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(952);
				partition_by_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Partition_by_clauseContext extends ParserRuleContext {
		public List<TerminalNode> LEFT_PAREN() { return getTokens(OracleSQLStatementParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(OracleSQLStatementParser.LEFT_PAREN, i);
		}
		public TerminalNode PARTITION() { return getToken(OracleSQLStatementParser.PARTITION, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode BY() { return getToken(OracleSQLStatementParser.BY, 0); }
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(OracleSQLStatementParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(OracleSQLStatementParser.RIGHT_PAREN, i);
		}
		public TerminalNode ANY() { return getToken(OracleSQLStatementParser.ANY, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public TerminalNode HASH() { return getToken(OracleSQLStatementParser.HASH, 0); }
		public TerminalNode RANGE() { return getToken(OracleSQLStatementParser.RANGE, 0); }
		public Streaming_clauseContext streaming_clause() {
			return getRuleContext(Streaming_clauseContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(OracleSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(OracleSQLStatementParser.COMMA, i);
		}
		public Partition_by_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partition_by_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterPartition_by_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitPartition_by_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitPartition_by_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Partition_by_clauseContext partition_by_clause() throws RecognitionException {
		Partition_by_clauseContext _localctx = new Partition_by_clauseContext(_ctx, getState());
		enterRule(_localctx, 14, RULE_partition_by_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(955);
			match(LEFT_PAREN);
			setState(956);
			match(PARTITION);
			setState(957);
			expression();
			setState(958);
			match(BY);
			setState(972);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ANY:
				{
				setState(959);
				match(ANY);
				}
				break;
			case HASH:
			case RANGE:
				{
				setState(960);
				_la = _input.LA(1);
				if ( !(_la==HASH || _la==RANGE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(961);
				match(LEFT_PAREN);
				setState(962);
				column_name();
				setState(967);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(963);
					match(COMMA);
					setState(964);
					column_name();
					}
					}
					setState(969);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(970);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(975);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CLUSTER || _la==ORDER) {
				{
				setState(974);
				streaming_clause();
				}
			}

			setState(977);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Result_cache_clauseContext extends ParserRuleContext {
		public TerminalNode RESULT_CACHE() { return getToken(OracleSQLStatementParser.RESULT_CACHE, 0); }
		public Relies_on_partContext relies_on_part() {
			return getRuleContext(Relies_on_partContext.class,0);
		}
		public Result_cache_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_result_cache_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterResult_cache_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitResult_cache_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitResult_cache_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Result_cache_clauseContext result_cache_clause() throws RecognitionException {
		Result_cache_clauseContext _localctx = new Result_cache_clauseContext(_ctx, getState());
		enterRule(_localctx, 16, RULE_result_cache_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(979);
			match(RESULT_CACHE);
			setState(981);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RELIES_ON) {
				{
				setState(980);
				relies_on_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Relies_on_partContext extends ParserRuleContext {
		public TerminalNode RELIES_ON() { return getToken(OracleSQLStatementParser.RELIES_ON, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(OracleSQLStatementParser.LEFT_PAREN, 0); }
		public List<Tableview_nameContext> tableview_name() {
			return getRuleContexts(Tableview_nameContext.class);
		}
		public Tableview_nameContext tableview_name(int i) {
			return getRuleContext(Tableview_nameContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(OracleSQLStatementParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(OracleSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(OracleSQLStatementParser.COMMA, i);
		}
		public Relies_on_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_relies_on_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterRelies_on_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitRelies_on_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitRelies_on_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Relies_on_partContext relies_on_part() throws RecognitionException {
		Relies_on_partContext _localctx = new Relies_on_partContext(_ctx, getState());
		enterRule(_localctx, 18, RULE_relies_on_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(983);
			match(RELIES_ON);
			setState(984);
			match(LEFT_PAREN);
			setState(985);
			tableview_name();
			setState(990);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(986);
				match(COMMA);
				setState(987);
				tableview_name();
				}
				}
				setState(992);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(993);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Streaming_clauseContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode BY() { return getToken(OracleSQLStatementParser.BY, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(OracleSQLStatementParser.LEFT_PAREN, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(OracleSQLStatementParser.RIGHT_PAREN, 0); }
		public TerminalNode ORDER() { return getToken(OracleSQLStatementParser.ORDER, 0); }
		public TerminalNode CLUSTER() { return getToken(OracleSQLStatementParser.CLUSTER, 0); }
		public List<TerminalNode> COMMA() { return getTokens(OracleSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(OracleSQLStatementParser.COMMA, i);
		}
		public Streaming_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_streaming_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterStreaming_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitStreaming_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitStreaming_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Streaming_clauseContext streaming_clause() throws RecognitionException {
		Streaming_clauseContext _localctx = new Streaming_clauseContext(_ctx, getState());
		enterRule(_localctx, 20, RULE_streaming_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(995);
			_la = _input.LA(1);
			if ( !(_la==CLUSTER || _la==ORDER) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(996);
			expression();
			setState(997);
			match(BY);
			setState(998);
			match(LEFT_PAREN);
			setState(999);
			column_name();
			setState(1004);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1000);
				match(COMMA);
				setState(1001);
				column_name();
				}
				}
				setState(1006);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1007);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_packageContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(OracleSQLStatementParser.DROP, 0); }
		public TerminalNode PACKAGE() { return getToken(OracleSQLStatementParser.PACKAGE, 0); }
		public Package_nameContext package_name() {
			return getRuleContext(Package_nameContext.class,0);
		}
		public TerminalNode SEMI() { return getToken(OracleSQLStatementParser.SEMI, 0); }
		public TerminalNode BODY() { return getToken(OracleSQLStatementParser.BODY, 0); }
		public Schema_object_nameContext schema_object_name() {
			return getRuleContext(Schema_object_nameContext.class,0);
		}
		public Drop_packageContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_package; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterDrop_package(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitDrop_package(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitDrop_package(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_packageContext drop_package() throws RecognitionException {
		Drop_packageContext _localctx = new Drop_packageContext(_ctx, getState());
		enterRule(_localctx, 22, RULE_drop_package);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1009);
			match(DROP);
			setState(1010);
			match(PACKAGE);
			setState(1012);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,25,_ctx) ) {
			case 1:
				{
				setState(1011);
				match(BODY);
				}
				break;
			}
			setState(1017);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,26,_ctx) ) {
			case 1:
				{
				setState(1014);
				schema_object_name();
				setState(1015);
				match(PERIOD);
				}
				break;
			}
			setState(1019);
			package_name();
			setState(1020);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_packageContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(OracleSQLStatementParser.ALTER, 0); }
		public List<TerminalNode> PACKAGE() { return getTokens(OracleSQLStatementParser.PACKAGE); }
		public TerminalNode PACKAGE(int i) {
			return getToken(OracleSQLStatementParser.PACKAGE, i);
		}
		public Package_nameContext package_name() {
			return getRuleContext(Package_nameContext.class,0);
		}
		public TerminalNode COMPILE() { return getToken(OracleSQLStatementParser.COMPILE, 0); }
		public TerminalNode SEMI() { return getToken(OracleSQLStatementParser.SEMI, 0); }
		public TerminalNode DEBUG() { return getToken(OracleSQLStatementParser.DEBUG, 0); }
		public List<Compiler_parameters_clauseContext> compiler_parameters_clause() {
			return getRuleContexts(Compiler_parameters_clauseContext.class);
		}
		public Compiler_parameters_clauseContext compiler_parameters_clause(int i) {
			return getRuleContext(Compiler_parameters_clauseContext.class,i);
		}
		public TerminalNode REUSE() { return getToken(OracleSQLStatementParser.REUSE, 0); }
		public TerminalNode SETTINGS() { return getToken(OracleSQLStatementParser.SETTINGS, 0); }
		public TerminalNode BODY() { return getToken(OracleSQLStatementParser.BODY, 0); }
		public TerminalNode SPECIFICATION() { return getToken(OracleSQLStatementParser.SPECIFICATION, 0); }
		public Alter_packageContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_package; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterAlter_package(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitAlter_package(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitAlter_package(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_packageContext alter_package() throws RecognitionException {
		Alter_packageContext _localctx = new Alter_packageContext(_ctx, getState());
		enterRule(_localctx, 24, RULE_alter_package);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1022);
			match(ALTER);
			setState(1023);
			match(PACKAGE);
			setState(1024);
			package_name();
			setState(1025);
			match(COMPILE);
			setState(1027);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,27,_ctx) ) {
			case 1:
				{
				setState(1026);
				match(DEBUG);
				}
				break;
			}
			setState(1030);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,28,_ctx) ) {
			case 1:
				{
				setState(1029);
				_la = _input.LA(1);
				if ( !(_la==BODY || _la==PACKAGE || _la==SPECIFICATION) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(1035);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,29,_ctx);
			while ( _alt!=2 && _alt!= ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1032);
					compiler_parameters_clause();
					}
					} 
				}
				setState(1037);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,29,_ctx);
			}
			setState(1040);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==REUSE) {
				{
				setState(1038);
				match(REUSE);
				setState(1039);
				match(SETTINGS);
				}
			}

			setState(1042);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_packageContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(OracleSQLStatementParser.CREATE, 0); }
		public TerminalNode PACKAGE() { return getToken(OracleSQLStatementParser.PACKAGE, 0); }
		public List<Package_nameContext> package_name() {
			return getRuleContexts(Package_nameContext.class);
		}
		public Package_nameContext package_name(int i) {
			return getRuleContext(Package_nameContext.class,i);
		}
		public TerminalNode END() { return getToken(OracleSQLStatementParser.END, 0); }
		public TerminalNode SEMI() { return getToken(OracleSQLStatementParser.SEMI, 0); }
		public TerminalNode IS() { return getToken(OracleSQLStatementParser.IS, 0); }
		public TerminalNode AS() { return getToken(OracleSQLStatementParser.AS, 0); }
		public TerminalNode OR() { return getToken(OracleSQLStatementParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(OracleSQLStatementParser.REPLACE, 0); }
		public Schema_object_nameContext schema_object_name() {
			return getRuleContext(Schema_object_nameContext.class,0);
		}
		public Invoker_rights_clauseContext invoker_rights_clause() {
			return getRuleContext(Invoker_rights_clauseContext.class,0);
		}
		public List<Package_obj_specContext> package_obj_spec() {
			return getRuleContexts(Package_obj_specContext.class);
		}
		public Package_obj_specContext package_obj_spec(int i) {
			return getRuleContext(Package_obj_specContext.class,i);
		}
		public Create_packageContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_package; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterCreate_package(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitCreate_package(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitCreate_package(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_packageContext create_package() throws RecognitionException {
		Create_packageContext _localctx = new Create_packageContext(_ctx, getState());
		enterRule(_localctx, 26, RULE_create_package);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1044);
			match(CREATE);
			setState(1047);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(1045);
				match(OR);
				setState(1046);
				match(REPLACE);
				}
			}

			setState(1049);
			match(PACKAGE);
			setState(1053);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,32,_ctx) ) {
			case 1:
				{
				setState(1050);
				schema_object_name();
				setState(1051);
				match(PERIOD);
				}
				break;
			}
			setState(1055);
			package_name();
			setState(1057);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTHID) {
				{
				setState(1056);
				invoker_rights_clause();
				}
			}

			setState(1059);
			_la = _input.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1063);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABS) | (1L << ACOS) | (1L << ADD) | (1L << ADD_MONTHS) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASCII) | (1L << ASCIISTR) | (1L << ASIN) | (1L << ASSOCIATE) | (1L << ATAN2) | (1L << ATAN) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BFILENAME) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BIN_TO_NUM) | (1L << BITAND) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CARDINALITY) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CEIL) | (1L << CHARACTER) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARTOROWID) | (1L << CHR) | (1L << C_LETTER))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOSE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONCAT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COS - 64)) | (1L << (COSH - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_DATE - 64)) | (1L << (CURRENT_TIMESTAMP - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (DIMENSION - 128)) | (1L << (DISABLE - 128)) | (1L << (DISASSOCIATE - 128)) | (1L << (DOCUMENT - 128)) | (1L << (DOUBLE - 128)) | (1L << (DSINTERVAL_UNCONSTRAINED - 128)) | (1L << (DUMP - 128)) | (1L << (EACH - 128)) | (1L << (ELEMENT - 128)) | (1L << (EMPTY_BLOB - 128)) | (1L << (EMPTY_CLOB - 128)) | (1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERR - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXP - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FLOOR - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FROM_TZ - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUP_ID - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HEXTORAW - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (IGNORE - 193)) | (1L << (IMMEDIATE - 193)) | (1L << (INCLUDE - 193)) | (1L << (INCLUDING - 193)) | (1L << (INCREMENT - 193)) | (1L << (INDENT - 193)) | (1L << (INDEXED - 193)) | (1L << (INDICATOR - 193)) | (1L << (INDICES - 193)) | (1L << (INFINITE - 193)) | (1L << (INITCAP - 193)) | (1L << (INLINE - 193)) | (1L << (INNER - 193)) | (1L << (INOUT - 193)) | (1L << (INSTANTIABLE - 193)) | (1L << (INSTEAD - 193)) | (1L << (INSTR2 - 193)) | (1L << (INSTR4 - 193)) | (1L << (INSTRB - 193)) | (1L << (INSTRC - 193)) | (1L << (INSTR - 193)) | (1L << (INTERFACE - 193)) | (1L << (INTEGER - 193)) | (1L << (INTERVAL - 193)) | (1L << (INT - 193)) | (1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (KEY - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST_DAY - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LENGTH2 - 193)) | (1L << (LENGTH4 - 193)) | (1L << (LENGTHB - 193)) | (1L << (LENGTHC - 193)) | (1L << (LENGTH - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LN - 193)) | (1L << (LNNVL - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCALTIMESTAMP - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (LOGON - 257)) | (1L << (LONG - 257)) | (1L << (LOOP - 257)) | (1L << (LOWER - 257)) | (1L << (LPAD - 257)) | (1L << (LTRIM - 257)) | (1L << (MAIN - 257)) | (1L << (MAP - 257)) | (1L << (MATCHED - 257)) | (1L << (MAXVALUE - 257)) | (1L << (MEASURES - 257)) | (1L << (MEMBER - 257)) | (1L << (MERGE - 257)) | (1L << (MINUTE - 257)) | (1L << (MINVALUE - 257)) | (1L << (MLSLABEL - 257)) | (1L << (MODEL - 257)) | (1L << (MODIFY - 257)) | (1L << (MOD - 257)) | (1L << (MONTH - 257)) | (1L << (MONTHS_BETWEEN - 257)) | (1L << (MULTISET - 257)) | (1L << (NAME - 257)) | (1L << (NAN - 257)) | (1L << (NANVL - 257)) | (1L << (NATURAL - 257)) | (1L << (NATURALN - 257)) | (1L << (NAV - 257)) | (1L << (NCHAR_CS - 257)) | (1L << (NCHAR - 257)) | (1L << (NCHR - 257)) | (1L << (NCLOB - 257)) | (1L << (NESTED - 257)) | (1L << (NEW - 257)) | (1L << (NEW_TIME - 257)) | (1L << (NEXT_DAY - 257)) | (1L << (NOAUDIT - 257)) | (1L << (NOCOPY - 257)) | (1L << (NOCYCLE - 257)) | (1L << (NOENTITYESCAPING - 257)) | (1L << (NONE - 257)) | (1L << (NO - 257)) | (1L << (NOSCHEMACHECK - 257)) | (1L << (NULLIF - 257)) | (1L << (NULLS - 257)) | (1L << (NUMBER - 257)) | (1L << (NUMERIC - 257)) | (1L << (NUMTODSINTERVAL - 257)) | (1L << (NUMTOYMINTERVAL - 257)) | (1L << (NVARCHAR2 - 257)) | (1L << (NVL2 - 257)) | (1L << (OBJECT - 257)) | (1L << (OFF - 257)))) != 0) || ((((_la - 321)) & ~0x3f) == 0 && ((1L << (_la - 321)) & ((1L << (OID - 321)) | (1L << (OLD - 321)) | (1L << (ONLY - 321)) | (1L << (OPAQUE - 321)) | (1L << (OPEN - 321)) | (1L << (ORADATA - 321)) | (1L << (ORDINALITY - 321)) | (1L << (OSERROR - 321)) | (1L << (OUTER - 321)) | (1L << (OUT - 321)) | (1L << (OVER - 321)) | (1L << (OVERRIDING - 321)) | (1L << (PACKAGE - 321)) | (1L << (PARALLEL_ENABLE - 321)) | (1L << (PARAMETERS - 321)) | (1L << (PARENT - 321)) | (1L << (PARTITION - 321)) | (1L << (PASSING - 321)) | (1L << (PATH - 321)) | (1L << (PIPELINED - 321)) | (1L << (PLAN - 321)) | (1L << (PLS_INTEGER - 321)) | (1L << (POSITIVEN - 321)) | (1L << (POSITIVE - 321)) | (1L << (POWER - 321)) | (1L << (PRAGMA - 321)) | (1L << (PRECEDING - 321)) | (1L << (PRECISION - 321)) | (1L << (PRESENT - 321)) | (1L << (PRIOR - 321)) | (1L << (PROCEDURE - 321)) | (1L << (RAISE - 321)) | (1L << (RANGE - 321)) | (1L << (RAW - 321)) | (1L << (RAWTOHEX - 321)) | (1L << (READ - 321)) | (1L << (REAL - 321)) | (1L << (RECORD - 321)) | (1L << (REFERENCE - 321)) | (1L << (REFERENCING - 321)) | (1L << (REF - 321)) | (1L << (REGEXP_COUNT - 321)) | (1L << (REGEXP_INSTR - 321)) | (1L << (REGEXP_REPLACE - 321)) | (1L << (REGEXP_SUBSTR - 321)) | (1L << (REJECT - 321)) | (1L << (RELIES_ON - 321)) | (1L << (REMAINDER - 321)))) != 0) || ((((_la - 385)) & ~0x3f) == 0 && ((1L << (_la - 385)) & ((1L << (RENAME - 385)) | (1L << (REPLACE - 385)) | (1L << (RESPECT - 385)) | (1L << (RESTRICT_REFERENCES - 385)) | (1L << (RESULT_CACHE - 385)) | (1L << (RESULT - 385)) | (1L << (RETURNING - 385)) | (1L << (RETURN - 385)) | (1L << (REUSE - 385)) | (1L << (REVERSE - 385)) | (1L << (RIGHT - 385)) | (1L << (ROLLBACK - 385)) | (1L << (ROLLUP - 385)) | (1L << (ROWID - 385)) | (1L << (ROWNUM - 385)) | (1L << (ROW - 385)) | (1L << (ROWS - 385)) | (1L << (RPAD - 385)) | (1L << (RTRIM - 385)) | (1L << (RULES - 385)) | (1L << (SAMPLE - 385)) | (1L << (SAVEPOINT - 385)) | (1L << (SAVE - 385)) | (1L << (SCHEMACHECK - 385)) | (1L << (SCHEMA - 385)) | (1L << (SCN - 385)) | (1L << (SECOND - 385)) | (1L << (SEED - 385)) | (1L << (SEGMENT - 385)) | (1L << (SELF - 385)) | (1L << (SEQUENTIAL - 385)) | (1L << (SERIALIZABLE - 385)) | (1L << (SERIALLY_REUSABLE - 385)) | (1L << (SERVERERROR - 385)) | (1L << (SESSIONTIMEZONE - 385)) | (1L << (SET - 385)) | (1L << (SETS - 385)) | (1L << (SETTINGS - 385)) | (1L << (SHOW - 385)) | (1L << (SHUTDOWN - 385)) | (1L << (SIBLINGS - 385)) | (1L << (SIGN - 385)) | (1L << (SIGNTYPE - 385)) | (1L << (SIMPLE_INTEGER - 385)) | (1L << (SINGLE - 385)) | (1L << (SINH - 385)) | (1L << (SIN - 385)) | (1L << (SKIP_ - 385)) | (1L << (SMALLINT - 385)) | (1L << (SNAPSHOT - 385)) | (1L << (SOME - 385)) | (1L << (SOUNDEX - 385)) | (1L << (SPECIFICATION - 385)) | (1L << (SQLDATA - 385)) | (1L << (SQLERROR - 385)) | (1L << (SQRT - 385)) | (1L << (STANDALONE - 385)))) != 0) || ((((_la - 449)) & ~0x3f) == 0 && ((1L << (_la - 449)) & ((1L << (STARTUP - 449)) | (1L << (STATEMENT_ID - 449)) | (1L << (STATEMENT - 449)) | (1L << (STATIC - 449)) | (1L << (STATISTICS - 449)) | (1L << (STRING - 449)) | (1L << (SUBMULTISET - 449)) | (1L << (SUBPARTITION - 449)) | (1L << (SUBSTITUTABLE - 449)) | (1L << (SUBTYPE - 449)) | (1L << (SUCCESS - 449)) | (1L << (SUSPEND - 449)) | (1L << (SYS_CONTEXT - 449)) | (1L << (SYSDATE - 449)) | (1L << (SYSTIMESTAMP - 449)) | (1L << (TANH - 449)) | (1L << (TAN - 449)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 449)) | (1L << (TIMESTAMP - 449)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 449)) | (1L << (TIMESTAMP_UNCONSTRAINED - 449)) | (1L << (TIME - 449)) | (1L << (TIMEZONE_ABBR - 449)) | (1L << (TIMEZONE_HOUR - 449)) | (1L << (TIMEZONE_MINUTE - 449)) | (1L << (TIMEZONE_REGION - 449)) | (1L << (TO_CLOB - 449)) | (1L << (TO_DSINTERVAL - 449)) | (1L << (TO_LOB - 449)) | (1L << (TO_MULTI_BYTE - 449)) | (1L << (TO_NCLOB - 449)) | (1L << (TO_NUMBER - 449)) | (1L << (TO_SINGLE_BYTE - 449)) | (1L << (TO_TIMESTAMP - 449)) | (1L << (TO_TIMESTAMP_TZ - 449)) | (1L << (TO_YMINTERVAL - 449)) | (1L << (TRAILING - 449)) | (1L << (TRANSACTION - 449)) | (1L << (TRANSLATE - 449)) | (1L << (TREAT - 449)) | (1L << (TRIGGER - 449)) | (1L << (TRUNCATE - 449)) | (1L << (TRUNC - 449)) | (1L << (TYPE - 449)) | (1L << (TZ_OFFSET - 449)) | (1L << (UID - 449)) | (1L << (UNBOUNDED - 449)) | (1L << (UNDER - 449)) | (1L << (UNLIMITED - 449)) | (1L << (UNTIL - 449)) | (1L << (UPDATED - 449)))) != 0) || ((((_la - 513)) & ~0x3f) == 0 && ((1L << (_la - 513)) & ((1L << (UPPER - 513)) | (1L << (UPSERT - 513)) | (1L << (UROWID - 513)) | (1L << (USERENV - 513)) | (1L << (USER - 513)) | (1L << (USE - 513)) | (1L << (VALIDATE - 513)) | (1L << (VALUE - 513)) | (1L << (VARCHAR2 - 513)) | (1L << (VARCHAR - 513)) | (1L << (VARIABLE - 513)) | (1L << (VARRAY - 513)) | (1L << (VARYING - 513)) | (1L << (VERSIONS - 513)) | (1L << (VERSION - 513)) | (1L << (VSIZE - 513)) | (1L << (WAIT - 513)) | (1L << (WARNING - 513)) | (1L << (WELLFORMED - 513)) | (1L << (WHENEVER - 513)) | (1L << (WHILE - 513)) | (1L << (WITHIN - 513)) | (1L << (WORK - 513)) | (1L << (WRITE - 513)) | (1L << (XMLAGG - 513)) | (1L << (XMLATTRIBUTES - 513)) | (1L << (XMLCAST - 513)) | (1L << (XMLCOLATTVAL - 513)) | (1L << (XMLELEMENT - 513)) | (1L << (XMLEXISTS - 513)) | (1L << (XMLFOREST - 513)) | (1L << (XMLNAMESPACES - 513)) | (1L << (XMLPARSE - 513)) | (1L << (XMLPI - 513)) | (1L << (XMLQUERY - 513)) | (1L << (XMLROOT - 513)) | (1L << (XMLSERIALIZE - 513)) | (1L << (XMLTABLE - 513)) | (1L << (XML - 513)) | (1L << (YEAR - 513)) | (1L << (YES - 513)) | (1L << (YMINTERVAL_UNCONSTRAINED - 513)) | (1L << (ZONE - 513)) | (1L << (PREDICTION - 513)) | (1L << (PREDICTION_BOUNDS - 513)) | (1L << (PREDICTION_COST - 513)) | (1L << (PREDICTION_DETAILS - 513)) | (1L << (PREDICTION_PROBABILITY - 513)) | (1L << (PREDICTION_SET - 513)) | (1L << (CUME_DIST - 513)) | (1L << (DENSE_RANK - 513)) | (1L << (LISTAGG - 513)) | (1L << (PERCENT_RANK - 513)) | (1L << (PERCENTILE_CONT - 513)) | (1L << (PERCENTILE_DISC - 513)) | (1L << (RANK - 513)))) != 0) || ((((_la - 577)) & ~0x3f) == 0 && ((1L << (_la - 577)) & ((1L << (AVG - 577)) | (1L << (CORR - 577)) | (1L << (COVAR_ - 577)) | (1L << (DECODE - 577)) | (1L << (LAG - 577)) | (1L << (LEAD - 577)) | (1L << (MAX - 577)) | (1L << (MEDIAN - 577)) | (1L << (MIN - 577)) | (1L << (NTILE - 577)) | (1L << (NVL - 577)) | (1L << (RATIO_TO_REPORT - 577)) | (1L << (REGR_ - 577)) | (1L << (ROUND - 577)) | (1L << (ROW_NUMBER - 577)) | (1L << (SUBSTR - 577)) | (1L << (TO_CHAR - 577)) | (1L << (TRIM - 577)) | (1L << (SUM - 577)) | (1L << (STDDEV - 577)) | (1L << (VAR_ - 577)) | (1L << (VARIANCE - 577)) | (1L << (LEAST - 577)) | (1L << (GREATEST - 577)) | (1L << (TO_DATE - 577)) | (1L << (DELIMITED_ID - 577)) | (1L << (ASTERISK - 577)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
				{
				{
				setState(1060);
				package_obj_spec();
				}
				}
				setState(1065);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1066);
			match(END);
			setState(1068);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABS) | (1L << ACOS) | (1L << ADD) | (1L << ADD_MONTHS) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASCII) | (1L << ASCIISTR) | (1L << ASIN) | (1L << ASSOCIATE) | (1L << ATAN2) | (1L << ATAN) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BFILENAME) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BIN_TO_NUM) | (1L << BITAND) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CARDINALITY) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CEIL) | (1L << CHARACTER) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARTOROWID) | (1L << CHR) | (1L << C_LETTER))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOSE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONCAT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COS - 64)) | (1L << (COSH - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_DATE - 64)) | (1L << (CURRENT_TIMESTAMP - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (DIMENSION - 128)) | (1L << (DISABLE - 128)) | (1L << (DISASSOCIATE - 128)) | (1L << (DOCUMENT - 128)) | (1L << (DOUBLE - 128)) | (1L << (DSINTERVAL_UNCONSTRAINED - 128)) | (1L << (DUMP - 128)) | (1L << (EACH - 128)) | (1L << (ELEMENT - 128)) | (1L << (EMPTY_BLOB - 128)) | (1L << (EMPTY_CLOB - 128)) | (1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERR - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXP - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FLOOR - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FROM_TZ - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUP_ID - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HEXTORAW - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (IGNORE - 193)) | (1L << (IMMEDIATE - 193)) | (1L << (INCLUDE - 193)) | (1L << (INCLUDING - 193)) | (1L << (INCREMENT - 193)) | (1L << (INDENT - 193)) | (1L << (INDEXED - 193)) | (1L << (INDICATOR - 193)) | (1L << (INDICES - 193)) | (1L << (INFINITE - 193)) | (1L << (INITCAP - 193)) | (1L << (INLINE - 193)) | (1L << (INNER - 193)) | (1L << (INOUT - 193)) | (1L << (INSTANTIABLE - 193)) | (1L << (INSTEAD - 193)) | (1L << (INSTR2 - 193)) | (1L << (INSTR4 - 193)) | (1L << (INSTRB - 193)) | (1L << (INSTRC - 193)) | (1L << (INSTR - 193)) | (1L << (INTERFACE - 193)) | (1L << (INTEGER - 193)) | (1L << (INTERVAL - 193)) | (1L << (INT - 193)) | (1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (KEY - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST_DAY - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LENGTH2 - 193)) | (1L << (LENGTH4 - 193)) | (1L << (LENGTHB - 193)) | (1L << (LENGTHC - 193)) | (1L << (LENGTH - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LN - 193)) | (1L << (LNNVL - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCALTIMESTAMP - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (LOGON - 257)) | (1L << (LONG - 257)) | (1L << (LOOP - 257)) | (1L << (LOWER - 257)) | (1L << (LPAD - 257)) | (1L << (LTRIM - 257)) | (1L << (MAIN - 257)) | (1L << (MAP - 257)) | (1L << (MATCHED - 257)) | (1L << (MAXVALUE - 257)) | (1L << (MEASURES - 257)) | (1L << (MEMBER - 257)) | (1L << (MERGE - 257)) | (1L << (MINUTE - 257)) | (1L << (MINVALUE - 257)) | (1L << (MLSLABEL - 257)) | (1L << (MODEL - 257)) | (1L << (MODIFY - 257)) | (1L << (MOD - 257)) | (1L << (MONTH - 257)) | (1L << (MONTHS_BETWEEN - 257)) | (1L << (MULTISET - 257)) | (1L << (NAME - 257)) | (1L << (NAN - 257)) | (1L << (NANVL - 257)) | (1L << (NATURAL - 257)) | (1L << (NATURALN - 257)) | (1L << (NAV - 257)) | (1L << (NCHAR_CS - 257)) | (1L << (NCHAR - 257)) | (1L << (NCHR - 257)) | (1L << (NCLOB - 257)) | (1L << (NESTED - 257)) | (1L << (NEW - 257)) | (1L << (NEW_TIME - 257)) | (1L << (NEXT_DAY - 257)) | (1L << (NOAUDIT - 257)) | (1L << (NOCOPY - 257)) | (1L << (NOCYCLE - 257)) | (1L << (NOENTITYESCAPING - 257)) | (1L << (NONE - 257)) | (1L << (NO - 257)) | (1L << (NOSCHEMACHECK - 257)) | (1L << (NULLIF - 257)) | (1L << (NULLS - 257)) | (1L << (NUMBER - 257)) | (1L << (NUMERIC - 257)) | (1L << (NUMTODSINTERVAL - 257)) | (1L << (NUMTOYMINTERVAL - 257)) | (1L << (NVARCHAR2 - 257)) | (1L << (NVL2 - 257)) | (1L << (OBJECT - 257)) | (1L << (OFF - 257)))) != 0) || ((((_la - 321)) & ~0x3f) == 0 && ((1L << (_la - 321)) & ((1L << (OID - 321)) | (1L << (OLD - 321)) | (1L << (ONLY - 321)) | (1L << (OPAQUE - 321)) | (1L << (OPEN - 321)) | (1L << (ORADATA - 321)) | (1L << (ORDINALITY - 321)) | (1L << (OSERROR - 321)) | (1L << (OUTER - 321)) | (1L << (OUT - 321)) | (1L << (OVER - 321)) | (1L << (OVERRIDING - 321)) | (1L << (PACKAGE - 321)) | (1L << (PARALLEL_ENABLE - 321)) | (1L << (PARAMETERS - 321)) | (1L << (PARENT - 321)) | (1L << (PARTITION - 321)) | (1L << (PASSING - 321)) | (1L << (PATH - 321)) | (1L << (PIPELINED - 321)) | (1L << (PLAN - 321)) | (1L << (PLS_INTEGER - 321)) | (1L << (POSITIVEN - 321)) | (1L << (POSITIVE - 321)) | (1L << (POWER - 321)) | (1L << (PRAGMA - 321)) | (1L << (PRECEDING - 321)) | (1L << (PRECISION - 321)) | (1L << (PRESENT - 321)) | (1L << (PRIOR - 321)) | (1L << (PROCEDURE - 321)) | (1L << (RAISE - 321)) | (1L << (RANGE - 321)) | (1L << (RAW - 321)) | (1L << (RAWTOHEX - 321)) | (1L << (READ - 321)) | (1L << (REAL - 321)) | (1L << (RECORD - 321)) | (1L << (REFERENCE - 321)) | (1L << (REFERENCING - 321)) | (1L << (REF - 321)) | (1L << (REGEXP_COUNT - 321)) | (1L << (REGEXP_INSTR - 321)) | (1L << (REGEXP_REPLACE - 321)) | (1L << (REGEXP_SUBSTR - 321)) | (1L << (REJECT - 321)) | (1L << (RELIES_ON - 321)) | (1L << (REMAINDER - 321)))) != 0) || ((((_la - 385)) & ~0x3f) == 0 && ((1L << (_la - 385)) & ((1L << (RENAME - 385)) | (1L << (REPLACE - 385)) | (1L << (RESPECT - 385)) | (1L << (RESTRICT_REFERENCES - 385)) | (1L << (RESULT_CACHE - 385)) | (1L << (RESULT - 385)) | (1L << (RETURNING - 385)) | (1L << (RETURN - 385)) | (1L << (REUSE - 385)) | (1L << (REVERSE - 385)) | (1L << (RIGHT - 385)) | (1L << (ROLLBACK - 385)) | (1L << (ROLLUP - 385)) | (1L << (ROWID - 385)) | (1L << (ROWNUM - 385)) | (1L << (ROW - 385)) | (1L << (ROWS - 385)) | (1L << (RPAD - 385)) | (1L << (RTRIM - 385)) | (1L << (RULES - 385)) | (1L << (SAMPLE - 385)) | (1L << (SAVEPOINT - 385)) | (1L << (SAVE - 385)) | (1L << (SCHEMACHECK - 385)) | (1L << (SCHEMA - 385)) | (1L << (SCN - 385)) | (1L << (SECOND - 385)) | (1L << (SEED - 385)) | (1L << (SEGMENT - 385)) | (1L << (SELF - 385)) | (1L << (SEQUENTIAL - 385)) | (1L << (SERIALIZABLE - 385)) | (1L << (SERIALLY_REUSABLE - 385)) | (1L << (SERVERERROR - 385)) | (1L << (SESSIONTIMEZONE - 385)) | (1L << (SET - 385)) | (1L << (SETS - 385)) | (1L << (SETTINGS - 385)) | (1L << (SHOW - 385)) | (1L << (SHUTDOWN - 385)) | (1L << (SIBLINGS - 385)) | (1L << (SIGN - 385)) | (1L << (SIGNTYPE - 385)) | (1L << (SIMPLE_INTEGER - 385)) | (1L << (SINGLE - 385)) | (1L << (SINH - 385)) | (1L << (SIN - 385)) | (1L << (SKIP_ - 385)) | (1L << (SMALLINT - 385)) | (1L << (SNAPSHOT - 385)) | (1L << (SOME - 385)) | (1L << (SOUNDEX - 385)) | (1L << (SPECIFICATION - 385)) | (1L << (SQLDATA - 385)) | (1L << (SQLERROR - 385)) | (1L << (SQRT - 385)) | (1L << (STANDALONE - 385)))) != 0) || ((((_la - 449)) & ~0x3f) == 0 && ((1L << (_la - 449)) & ((1L << (STARTUP - 449)) | (1L << (STATEMENT_ID - 449)) | (1L << (STATEMENT - 449)) | (1L << (STATIC - 449)) | (1L << (STATISTICS - 449)) | (1L << (STRING - 449)) | (1L << (SUBMULTISET - 449)) | (1L << (SUBPARTITION - 449)) | (1L << (SUBSTITUTABLE - 449)) | (1L << (SUBTYPE - 449)) | (1L << (SUCCESS - 449)) | (1L << (SUSPEND - 449)) | (1L << (SYS_CONTEXT - 449)) | (1L << (SYSDATE - 449)) | (1L << (SYSTIMESTAMP - 449)) | (1L << (TANH - 449)) | (1L << (TAN - 449)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 449)) | (1L << (TIMESTAMP - 449)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 449)) | (1L << (TIMESTAMP_UNCONSTRAINED - 449)) | (1L << (TIME - 449)) | (1L << (TIMEZONE_ABBR - 449)) | (1L << (TIMEZONE_HOUR - 449)) | (1L << (TIMEZONE_MINUTE - 449)) | (1L << (TIMEZONE_REGION - 449)) | (1L << (TO_CLOB - 449)) | (1L << (TO_DSINTERVAL - 449)) | (1L << (TO_LOB - 449)) | (1L << (TO_MULTI_BYTE - 449)) | (1L << (TO_NCLOB - 449)) | (1L << (TO_NUMBER - 449)) | (1L << (TO_SINGLE_BYTE - 449)) | (1L << (TO_TIMESTAMP - 449)) | (1L << (TO_TIMESTAMP_TZ - 449)) | (1L << (TO_YMINTERVAL - 449)) | (1L << (TRAILING - 449)) | (1L << (TRANSACTION - 449)) | (1L << (TRANSLATE - 449)) | (1L << (TREAT - 449)) | (1L << (TRIGGER - 449)) | (1L << (TRUNCATE - 449)) | (1L << (TRUNC - 449)) | (1L << (TYPE - 449)) | (1L << (TZ_OFFSET - 449)) | (1L << (UID - 449)) | (1L << (UNBOUNDED - 449)) | (1L << (UNDER - 449)) | (1L << (UNLIMITED - 449)) | (1L << (UNTIL - 449)) | (1L << (UPDATED - 449)))) != 0) || ((((_la - 513)) & ~0x3f) == 0 && ((1L << (_la - 513)) & ((1L << (UPPER - 513)) | (1L << (UPSERT - 513)) | (1L << (UROWID - 513)) | (1L << (USERENV - 513)) | (1L << (USER - 513)) | (1L << (USE - 513)) | (1L << (VALIDATE - 513)) | (1L << (VALUE - 513)) | (1L << (VARCHAR2 - 513)) | (1L << (VARCHAR - 513)) | (1L << (VARIABLE - 513)) | (1L << (VARRAY - 513)) | (1L << (VARYING - 513)) | (1L << (VERSIONS - 513)) | (1L << (VERSION - 513)) | (1L << (VSIZE - 513)) | (1L << (WAIT - 513)) | (1L << (WARNING - 513)) | (1L << (WELLFORMED - 513)) | (1L << (WHENEVER - 513)) | (1L << (WHILE - 513)) | (1L << (WITHIN - 513)) | (1L << (WORK - 513)) | (1L << (WRITE - 513)) | (1L << (XMLAGG - 513)) | (1L << (XMLATTRIBUTES - 513)) | (1L << (XMLCAST - 513)) | (1L << (XMLCOLATTVAL - 513)) | (1L << (XMLELEMENT - 513)) | (1L << (XMLEXISTS - 513)) | (1L << (XMLFOREST - 513)) | (1L << (XMLNAMESPACES - 513)) | (1L << (XMLPARSE - 513)) | (1L << (XMLPI - 513)) | (1L << (XMLQUERY - 513)) | (1L << (XMLROOT - 513)) | (1L << (XMLSERIALIZE - 513)) | (1L << (XMLTABLE - 513)) | (1L << (XML - 513)) | (1L << (YEAR - 513)) | (1L << (YES - 513)) | (1L << (YMINTERVAL_UNCONSTRAINED - 513)) | (1L << (ZONE - 513)) | (1L << (PREDICTION - 513)) | (1L << (PREDICTION_BOUNDS - 513)) | (1L << (PREDICTION_COST - 513)) | (1L << (PREDICTION_DETAILS - 513)) | (1L << (PREDICTION_PROBABILITY - 513)) | (1L << (PREDICTION_SET - 513)) | (1L << (CUME_DIST - 513)) | (1L << (DENSE_RANK - 513)) | (1L << (LISTAGG - 513)) | (1L << (PERCENT_RANK - 513)) | (1L << (PERCENTILE_CONT - 513)) | (1L << (PERCENTILE_DISC - 513)) | (1L << (RANK - 513)))) != 0) || ((((_la - 577)) & ~0x3f) == 0 && ((1L << (_la - 577)) & ((1L << (AVG - 577)) | (1L << (CORR - 577)) | (1L << (COVAR_ - 577)) | (1L << (DECODE - 577)) | (1L << (LAG - 577)) | (1L << (LEAD - 577)) | (1L << (MAX - 577)) | (1L << (MEDIAN - 577)) | (1L << (MIN - 577)) | (1L << (NTILE - 577)) | (1L << (NVL - 577)) | (1L << (RATIO_TO_REPORT - 577)) | (1L << (REGR_ - 577)) | (1L << (ROUND - 577)) | (1L << (ROW_NUMBER - 577)) | (1L << (SUBSTR - 577)) | (1L << (TO_CHAR - 577)) | (1L << (TRIM - 577)) | (1L << (SUM - 577)) | (1L << (STDDEV - 577)) | (1L << (VAR_ - 577)) | (1L << (VARIANCE - 577)) | (1L << (LEAST - 577)) | (1L << (GREATEST - 577)) | (1L << (TO_DATE - 577)) | (1L << (DELIMITED_ID - 577)) | (1L << (ASTERISK - 577)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
				{
				setState(1067);
				package_name();
				}
			}

			setState(1070);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_package_bodyContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(OracleSQLStatementParser.CREATE, 0); }
		public TerminalNode PACKAGE() { return getToken(OracleSQLStatementParser.PACKAGE, 0); }
		public TerminalNode BODY() { return getToken(OracleSQLStatementParser.BODY, 0); }
		public List<Package_nameContext> package_name() {
			return getRuleContexts(Package_nameContext.class);
		}
		public Package_nameContext package_name(int i) {
			return getRuleContext(Package_nameContext.class,i);
		}
		public TerminalNode END() { return getToken(OracleSQLStatementParser.END, 0); }
		public TerminalNode SEMI() { return getToken(OracleSQLStatementParser.SEMI, 0); }
		public TerminalNode IS() { return getToken(OracleSQLStatementParser.IS, 0); }
		public TerminalNode AS() { return getToken(OracleSQLStatementParser.AS, 0); }
		public TerminalNode OR() { return getToken(OracleSQLStatementParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(OracleSQLStatementParser.REPLACE, 0); }
		public Schema_object_nameContext schema_object_name() {
			return getRuleContext(Schema_object_nameContext.class,0);
		}
		public List<Package_obj_bodyContext> package_obj_body() {
			return getRuleContexts(Package_obj_bodyContext.class);
		}
		public Package_obj_bodyContext package_obj_body(int i) {
			return getRuleContext(Package_obj_bodyContext.class,i);
		}
		public TerminalNode BEGIN() { return getToken(OracleSQLStatementParser.BEGIN, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public Create_package_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_package_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterCreate_package_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitCreate_package_body(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitCreate_package_body(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_package_bodyContext create_package_body() throws RecognitionException {
		Create_package_bodyContext _localctx = new Create_package_bodyContext(_ctx, getState());
		enterRule(_localctx, 28, RULE_create_package_body);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1072);
			match(CREATE);
			setState(1075);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(1073);
				match(OR);
				setState(1074);
				match(REPLACE);
				}
			}

			setState(1077);
			match(PACKAGE);
			setState(1078);
			match(BODY);
			setState(1082);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,37,_ctx) ) {
			case 1:
				{
				setState(1079);
				schema_object_name();
				setState(1080);
				match(PERIOD);
				}
				break;
			}
			setState(1084);
			package_name();
			setState(1085);
			_la = _input.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1089);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABS) | (1L << ACOS) | (1L << ADD) | (1L << ADD_MONTHS) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASCII) | (1L << ASCIISTR) | (1L << ASIN) | (1L << ASSOCIATE) | (1L << ATAN2) | (1L << ATAN) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BFILENAME) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BIN_TO_NUM) | (1L << BITAND) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CARDINALITY) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CEIL) | (1L << CHARACTER) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARTOROWID) | (1L << CHR) | (1L << C_LETTER))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOSE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONCAT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COS - 64)) | (1L << (COSH - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_DATE - 64)) | (1L << (CURRENT_TIMESTAMP - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (DIMENSION - 128)) | (1L << (DISABLE - 128)) | (1L << (DISASSOCIATE - 128)) | (1L << (DOCUMENT - 128)) | (1L << (DOUBLE - 128)) | (1L << (DSINTERVAL_UNCONSTRAINED - 128)) | (1L << (DUMP - 128)) | (1L << (EACH - 128)) | (1L << (ELEMENT - 128)) | (1L << (EMPTY_BLOB - 128)) | (1L << (EMPTY_CLOB - 128)) | (1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERR - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXP - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FLOOR - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FROM_TZ - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUP_ID - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HEXTORAW - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (IGNORE - 193)) | (1L << (IMMEDIATE - 193)) | (1L << (INCLUDE - 193)) | (1L << (INCLUDING - 193)) | (1L << (INCREMENT - 193)) | (1L << (INDENT - 193)) | (1L << (INDEXED - 193)) | (1L << (INDICATOR - 193)) | (1L << (INDICES - 193)) | (1L << (INFINITE - 193)) | (1L << (INITCAP - 193)) | (1L << (INLINE - 193)) | (1L << (INNER - 193)) | (1L << (INOUT - 193)) | (1L << (INSTANTIABLE - 193)) | (1L << (INSTEAD - 193)) | (1L << (INSTR2 - 193)) | (1L << (INSTR4 - 193)) | (1L << (INSTRB - 193)) | (1L << (INSTRC - 193)) | (1L << (INSTR - 193)) | (1L << (INTERFACE - 193)) | (1L << (INTEGER - 193)) | (1L << (INTERVAL - 193)) | (1L << (INT - 193)) | (1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (KEY - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST_DAY - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LENGTH2 - 193)) | (1L << (LENGTH4 - 193)) | (1L << (LENGTHB - 193)) | (1L << (LENGTHC - 193)) | (1L << (LENGTH - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LN - 193)) | (1L << (LNNVL - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCALTIMESTAMP - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (LOGON - 257)) | (1L << (LONG - 257)) | (1L << (LOOP - 257)) | (1L << (LOWER - 257)) | (1L << (LPAD - 257)) | (1L << (LTRIM - 257)) | (1L << (MAIN - 257)) | (1L << (MAP - 257)) | (1L << (MATCHED - 257)) | (1L << (MAXVALUE - 257)) | (1L << (MEASURES - 257)) | (1L << (MEMBER - 257)) | (1L << (MERGE - 257)) | (1L << (MINUTE - 257)) | (1L << (MINVALUE - 257)) | (1L << (MLSLABEL - 257)) | (1L << (MODEL - 257)) | (1L << (MODIFY - 257)) | (1L << (MOD - 257)) | (1L << (MONTH - 257)) | (1L << (MONTHS_BETWEEN - 257)) | (1L << (MULTISET - 257)) | (1L << (NAME - 257)) | (1L << (NAN - 257)) | (1L << (NANVL - 257)) | (1L << (NATURAL - 257)) | (1L << (NATURALN - 257)) | (1L << (NAV - 257)) | (1L << (NCHAR_CS - 257)) | (1L << (NCHAR - 257)) | (1L << (NCHR - 257)) | (1L << (NCLOB - 257)) | (1L << (NESTED - 257)) | (1L << (NEW - 257)) | (1L << (NEW_TIME - 257)) | (1L << (NEXT_DAY - 257)) | (1L << (NOAUDIT - 257)) | (1L << (NOCOPY - 257)) | (1L << (NOCYCLE - 257)) | (1L << (NOENTITYESCAPING - 257)) | (1L << (NONE - 257)) | (1L << (NO - 257)) | (1L << (NOSCHEMACHECK - 257)) | (1L << (NULLIF - 257)) | (1L << (NULLS - 257)) | (1L << (NUMBER - 257)) | (1L << (NUMERIC - 257)) | (1L << (NUMTODSINTERVAL - 257)) | (1L << (NUMTOYMINTERVAL - 257)) | (1L << (NVARCHAR2 - 257)) | (1L << (NVL2 - 257)) | (1L << (OBJECT - 257)) | (1L << (OFF - 257)))) != 0) || ((((_la - 321)) & ~0x3f) == 0 && ((1L << (_la - 321)) & ((1L << (OID - 321)) | (1L << (OLD - 321)) | (1L << (ONLY - 321)) | (1L << (OPAQUE - 321)) | (1L << (OPEN - 321)) | (1L << (ORADATA - 321)) | (1L << (ORDINALITY - 321)) | (1L << (OSERROR - 321)) | (1L << (OUTER - 321)) | (1L << (OUT - 321)) | (1L << (OVER - 321)) | (1L << (OVERRIDING - 321)) | (1L << (PACKAGE - 321)) | (1L << (PARALLEL_ENABLE - 321)) | (1L << (PARAMETERS - 321)) | (1L << (PARENT - 321)) | (1L << (PARTITION - 321)) | (1L << (PASSING - 321)) | (1L << (PATH - 321)) | (1L << (PIPELINED - 321)) | (1L << (PLAN - 321)) | (1L << (PLS_INTEGER - 321)) | (1L << (POSITIVEN - 321)) | (1L << (POSITIVE - 321)) | (1L << (POWER - 321)) | (1L << (PRAGMA - 321)) | (1L << (PRECEDING - 321)) | (1L << (PRECISION - 321)) | (1L << (PRESENT - 321)) | (1L << (PRIOR - 321)) | (1L << (PROCEDURE - 321)) | (1L << (RAISE - 321)) | (1L << (RANGE - 321)) | (1L << (RAW - 321)) | (1L << (RAWTOHEX - 321)) | (1L << (READ - 321)) | (1L << (REAL - 321)) | (1L << (RECORD - 321)) | (1L << (REFERENCE - 321)) | (1L << (REFERENCING - 321)) | (1L << (REF - 321)) | (1L << (REGEXP_COUNT - 321)) | (1L << (REGEXP_INSTR - 321)) | (1L << (REGEXP_REPLACE - 321)) | (1L << (REGEXP_SUBSTR - 321)) | (1L << (REJECT - 321)) | (1L << (RELIES_ON - 321)) | (1L << (REMAINDER - 321)))) != 0) || ((((_la - 385)) & ~0x3f) == 0 && ((1L << (_la - 385)) & ((1L << (RENAME - 385)) | (1L << (REPLACE - 385)) | (1L << (RESPECT - 385)) | (1L << (RESTRICT_REFERENCES - 385)) | (1L << (RESULT_CACHE - 385)) | (1L << (RESULT - 385)) | (1L << (RETURNING - 385)) | (1L << (RETURN - 385)) | (1L << (REUSE - 385)) | (1L << (REVERSE - 385)) | (1L << (RIGHT - 385)) | (1L << (ROLLBACK - 385)) | (1L << (ROLLUP - 385)) | (1L << (ROWID - 385)) | (1L << (ROWNUM - 385)) | (1L << (ROW - 385)) | (1L << (ROWS - 385)) | (1L << (RPAD - 385)) | (1L << (RTRIM - 385)) | (1L << (RULES - 385)) | (1L << (SAMPLE - 385)) | (1L << (SAVEPOINT - 385)) | (1L << (SAVE - 385)) | (1L << (SCHEMACHECK - 385)) | (1L << (SCHEMA - 385)) | (1L << (SCN - 385)) | (1L << (SECOND - 385)) | (1L << (SEED - 385)) | (1L << (SEGMENT - 385)) | (1L << (SELF - 385)) | (1L << (SEQUENTIAL - 385)) | (1L << (SERIALIZABLE - 385)) | (1L << (SERIALLY_REUSABLE - 385)) | (1L << (SERVERERROR - 385)) | (1L << (SESSIONTIMEZONE - 385)) | (1L << (SET - 385)) | (1L << (SETS - 385)) | (1L << (SETTINGS - 385)) | (1L << (SHOW - 385)) | (1L << (SHUTDOWN - 385)) | (1L << (SIBLINGS - 385)) | (1L << (SIGN - 385)) | (1L << (SIGNTYPE - 385)) | (1L << (SIMPLE_INTEGER - 385)) | (1L << (SINGLE - 385)) | (1L << (SINH - 385)) | (1L << (SIN - 385)) | (1L << (SKIP_ - 385)) | (1L << (SMALLINT - 385)) | (1L << (SNAPSHOT - 385)) | (1L << (SOME - 385)) | (1L << (SOUNDEX - 385)) | (1L << (SPECIFICATION - 385)) | (1L << (SQLDATA - 385)) | (1L << (SQLERROR - 385)) | (1L << (SQRT - 385)) | (1L << (STANDALONE - 385)))) != 0) || ((((_la - 449)) & ~0x3f) == 0 && ((1L << (_la - 449)) & ((1L << (STARTUP - 449)) | (1L << (STATEMENT_ID - 449)) | (1L << (STATEMENT - 449)) | (1L << (STATIC - 449)) | (1L << (STATISTICS - 449)) | (1L << (STRING - 449)) | (1L << (SUBMULTISET - 449)) | (1L << (SUBPARTITION - 449)) | (1L << (SUBSTITUTABLE - 449)) | (1L << (SUBTYPE - 449)) | (1L << (SUCCESS - 449)) | (1L << (SUSPEND - 449)) | (1L << (SYS_CONTEXT - 449)) | (1L << (SYSDATE - 449)) | (1L << (SYSTIMESTAMP - 449)) | (1L << (TANH - 449)) | (1L << (TAN - 449)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 449)) | (1L << (TIMESTAMP - 449)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 449)) | (1L << (TIMESTAMP_UNCONSTRAINED - 449)) | (1L << (TIME - 449)) | (1L << (TIMEZONE_ABBR - 449)) | (1L << (TIMEZONE_HOUR - 449)) | (1L << (TIMEZONE_MINUTE - 449)) | (1L << (TIMEZONE_REGION - 449)) | (1L << (TO_CLOB - 449)) | (1L << (TO_DSINTERVAL - 449)) | (1L << (TO_LOB - 449)) | (1L << (TO_MULTI_BYTE - 449)) | (1L << (TO_NCLOB - 449)) | (1L << (TO_NUMBER - 449)) | (1L << (TO_SINGLE_BYTE - 449)) | (1L << (TO_TIMESTAMP - 449)) | (1L << (TO_TIMESTAMP_TZ - 449)) | (1L << (TO_YMINTERVAL - 449)) | (1L << (TRAILING - 449)) | (1L << (TRANSACTION - 449)) | (1L << (TRANSLATE - 449)) | (1L << (TREAT - 449)) | (1L << (TRIGGER - 449)) | (1L << (TRUNCATE - 449)) | (1L << (TRUNC - 449)) | (1L << (TYPE - 449)) | (1L << (TZ_OFFSET - 449)) | (1L << (UID - 449)) | (1L << (UNBOUNDED - 449)) | (1L << (UNDER - 449)) | (1L << (UNLIMITED - 449)) | (1L << (UNTIL - 449)) | (1L << (UPDATED - 449)))) != 0) || ((((_la - 513)) & ~0x3f) == 0 && ((1L << (_la - 513)) & ((1L << (UPPER - 513)) | (1L << (UPSERT - 513)) | (1L << (UROWID - 513)) | (1L << (USERENV - 513)) | (1L << (USER - 513)) | (1L << (USE - 513)) | (1L << (VALIDATE - 513)) | (1L << (VALUE - 513)) | (1L << (VARCHAR2 - 513)) | (1L << (VARCHAR - 513)) | (1L << (VARIABLE - 513)) | (1L << (VARRAY - 513)) | (1L << (VARYING - 513)) | (1L << (VERSIONS - 513)) | (1L << (VERSION - 513)) | (1L << (VSIZE - 513)) | (1L << (WAIT - 513)) | (1L << (WARNING - 513)) | (1L << (WELLFORMED - 513)) | (1L << (WHENEVER - 513)) | (1L << (WHILE - 513)) | (1L << (WITHIN - 513)) | (1L << (WORK - 513)) | (1L << (WRITE - 513)) | (1L << (XMLAGG - 513)) | (1L << (XMLATTRIBUTES - 513)) | (1L << (XMLCAST - 513)) | (1L << (XMLCOLATTVAL - 513)) | (1L << (XMLELEMENT - 513)) | (1L << (XMLEXISTS - 513)) | (1L << (XMLFOREST - 513)) | (1L << (XMLNAMESPACES - 513)) | (1L << (XMLPARSE - 513)) | (1L << (XMLPI - 513)) | (1L << (XMLQUERY - 513)) | (1L << (XMLROOT - 513)) | (1L << (XMLSERIALIZE - 513)) | (1L << (XMLTABLE - 513)) | (1L << (XML - 513)) | (1L << (YEAR - 513)) | (1L << (YES - 513)) | (1L << (YMINTERVAL_UNCONSTRAINED - 513)) | (1L << (ZONE - 513)) | (1L << (PREDICTION - 513)) | (1L << (PREDICTION_BOUNDS - 513)) | (1L << (PREDICTION_COST - 513)) | (1L << (PREDICTION_DETAILS - 513)) | (1L << (PREDICTION_PROBABILITY - 513)) | (1L << (PREDICTION_SET - 513)) | (1L << (CUME_DIST - 513)) | (1L << (DENSE_RANK - 513)) | (1L << (LISTAGG - 513)) | (1L << (PERCENT_RANK - 513)) | (1L << (PERCENTILE_CONT - 513)) | (1L << (PERCENTILE_DISC - 513)) | (1L << (RANK - 513)))) != 0) || ((((_la - 577)) & ~0x3f) == 0 && ((1L << (_la - 577)) & ((1L << (AVG - 577)) | (1L << (CORR - 577)) | (1L << (COVAR_ - 577)) | (1L << (DECODE - 577)) | (1L << (LAG - 577)) | (1L << (LEAD - 577)) | (1L << (MAX - 577)) | (1L << (MEDIAN - 577)) | (1L << (MIN - 577)) | (1L << (NTILE - 577)) | (1L << (NVL - 577)) | (1L << (RATIO_TO_REPORT - 577)) | (1L << (REGR_ - 577)) | (1L << (ROUND - 577)) | (1L << (ROW_NUMBER - 577)) | (1L << (SUBSTR - 577)) | (1L << (TO_CHAR - 577)) | (1L << (TRIM - 577)) | (1L << (SUM - 577)) | (1L << (STDDEV - 577)) | (1L << (VAR_ - 577)) | (1L << (VARIANCE - 577)) | (1L << (LEAST - 577)) | (1L << (GREATEST - 577)) | (1L << (TO_DATE - 577)) | (1L << (DELIMITED_ID - 577)) | (1L << (ASTERISK - 577)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
				{
				{
				setState(1086);
				package_obj_body();
				}
				}
				setState(1091);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1094);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==BEGIN) {
				{
				setState(1092);
				match(BEGIN);
				setState(1093);
				seq_of_statements();
				}
			}

			setState(1096);
			match(END);
			setState(1098);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABS) | (1L << ACOS) | (1L << ADD) | (1L << ADD_MONTHS) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASCII) | (1L << ASCIISTR) | (1L << ASIN) | (1L << ASSOCIATE) | (1L << ATAN2) | (1L << ATAN) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BFILENAME) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BIN_TO_NUM) | (1L << BITAND) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CARDINALITY) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CEIL) | (1L << CHARACTER) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARTOROWID) | (1L << CHR) | (1L << C_LETTER))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOSE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONCAT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COS - 64)) | (1L << (COSH - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_DATE - 64)) | (1L << (CURRENT_TIMESTAMP - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (DIMENSION - 128)) | (1L << (DISABLE - 128)) | (1L << (DISASSOCIATE - 128)) | (1L << (DOCUMENT - 128)) | (1L << (DOUBLE - 128)) | (1L << (DSINTERVAL_UNCONSTRAINED - 128)) | (1L << (DUMP - 128)) | (1L << (EACH - 128)) | (1L << (ELEMENT - 128)) | (1L << (EMPTY_BLOB - 128)) | (1L << (EMPTY_CLOB - 128)) | (1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERR - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXP - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FLOOR - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FROM_TZ - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUP_ID - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HEXTORAW - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (IGNORE - 193)) | (1L << (IMMEDIATE - 193)) | (1L << (INCLUDE - 193)) | (1L << (INCLUDING - 193)) | (1L << (INCREMENT - 193)) | (1L << (INDENT - 193)) | (1L << (INDEXED - 193)) | (1L << (INDICATOR - 193)) | (1L << (INDICES - 193)) | (1L << (INFINITE - 193)) | (1L << (INITCAP - 193)) | (1L << (INLINE - 193)) | (1L << (INNER - 193)) | (1L << (INOUT - 193)) | (1L << (INSTANTIABLE - 193)) | (1L << (INSTEAD - 193)) | (1L << (INSTR2 - 193)) | (1L << (INSTR4 - 193)) | (1L << (INSTRB - 193)) | (1L << (INSTRC - 193)) | (1L << (INSTR - 193)) | (1L << (INTERFACE - 193)) | (1L << (INTEGER - 193)) | (1L << (INTERVAL - 193)) | (1L << (INT - 193)) | (1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (KEY - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST_DAY - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LENGTH2 - 193)) | (1L << (LENGTH4 - 193)) | (1L << (LENGTHB - 193)) | (1L << (LENGTHC - 193)) | (1L << (LENGTH - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LN - 193)) | (1L << (LNNVL - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCALTIMESTAMP - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (LOGON - 257)) | (1L << (LONG - 257)) | (1L << (LOOP - 257)) | (1L << (LOWER - 257)) | (1L << (LPAD - 257)) | (1L << (LTRIM - 257)) | (1L << (MAIN - 257)) | (1L << (MAP - 257)) | (1L << (MATCHED - 257)) | (1L << (MAXVALUE - 257)) | (1L << (MEASURES - 257)) | (1L << (MEMBER - 257)) | (1L << (MERGE - 257)) | (1L << (MINUTE - 257)) | (1L << (MINVALUE - 257)) | (1L << (MLSLABEL - 257)) | (1L << (MODEL - 257)) | (1L << (MODIFY - 257)) | (1L << (MOD - 257)) | (1L << (MONTH - 257)) | (1L << (MONTHS_BETWEEN - 257)) | (1L << (MULTISET - 257)) | (1L << (NAME - 257)) | (1L << (NAN - 257)) | (1L << (NANVL - 257)) | (1L << (NATURAL - 257)) | (1L << (NATURALN - 257)) | (1L << (NAV - 257)) | (1L << (NCHAR_CS - 257)) | (1L << (NCHAR - 257)) | (1L << (NCHR - 257)) | (1L << (NCLOB - 257)) | (1L << (NESTED - 257)) | (1L << (NEW - 257)) | (1L << (NEW_TIME - 257)) | (1L << (NEXT_DAY - 257)) | (1L << (NOAUDIT - 257)) | (1L << (NOCOPY - 257)) | (1L << (NOCYCLE - 257)) | (1L << (NOENTITYESCAPING - 257)) | (1L << (NONE - 257)) | (1L << (NO - 257)) | (1L << (NOSCHEMACHECK - 257)) | (1L << (NULLIF - 257)) | (1L << (NULLS - 257)) | (1L << (NUMBER - 257)) | (1L << (NUMERIC - 257)) | (1L << (NUMTODSINTERVAL - 257)) | (1L << (NUMTOYMINTERVAL - 257)) | (1L << (NVARCHAR2 - 257)) | (1L << (NVL2 - 257)) | (1L << (OBJECT - 257)) | (1L << (OFF - 257)))) != 0) || ((((_la - 321)) & ~0x3f) == 0 && ((1L << (_la - 321)) & ((1L << (OID - 321)) | (1L << (OLD - 321)) | (1L << (ONLY - 321)) | (1L << (OPAQUE - 321)) | (1L << (OPEN - 321)) | (1L << (ORADATA - 321)) | (1L << (ORDINALITY - 321)) | (1L << (OSERROR - 321)) | (1L << (OUTER - 321)) | (1L << (OUT - 321)) | (1L << (OVER - 321)) | (1L << (OVERRIDING - 321)) | (1L << (PACKAGE - 321)) | (1L << (PARALLEL_ENABLE - 321)) | (1L << (PARAMETERS - 321)) | (1L << (PARENT - 321)) | (1L << (PARTITION - 321)) | (1L << (PASSING - 321)) | (1L << (PATH - 321)) | (1L << (PIPELINED - 321)) | (1L << (PLAN - 321)) | (1L << (PLS_INTEGER - 321)) | (1L << (POSITIVEN - 321)) | (1L << (POSITIVE - 321)) | (1L << (POWER - 321)) | (1L << (PRAGMA - 321)) | (1L << (PRECEDING - 321)) | (1L << (PRECISION - 321)) | (1L << (PRESENT - 321)) | (1L << (PRIOR - 321)) | (1L << (PROCEDURE - 321)) | (1L << (RAISE - 321)) | (1L << (RANGE - 321)) | (1L << (RAW - 321)) | (1L << (RAWTOHEX - 321)) | (1L << (READ - 321)) | (1L << (REAL - 321)) | (1L << (RECORD - 321)) | (1L << (REFERENCE - 321)) | (1L << (REFERENCING - 321)) | (1L << (REF - 321)) | (1L << (REGEXP_COUNT - 321)) | (1L << (REGEXP_INSTR - 321)) | (1L << (REGEXP_REPLACE - 321)) | (1L << (REGEXP_SUBSTR - 321)) | (1L << (REJECT - 321)) | (1L << (RELIES_ON - 321)) | (1L << (REMAINDER - 321)))) != 0) || ((((_la - 385)) & ~0x3f) == 0 && ((1L << (_la - 385)) & ((1L << (RENAME - 385)) | (1L << (REPLACE - 385)) | (1L << (RESPECT - 385)) | (1L << (RESTRICT_REFERENCES - 385)) | (1L << (RESULT_CACHE - 385)) | (1L << (RESULT - 385)) | (1L << (RETURNING - 385)) | (1L << (RETURN - 385)) | (1L << (REUSE - 385)) | (1L << (REVERSE - 385)) | (1L << (RIGHT - 385)) | (1L << (ROLLBACK - 385)) | (1L << (ROLLUP - 385)) | (1L << (ROWID - 385)) | (1L << (ROWNUM - 385)) | (1L << (ROW - 385)) | (1L << (ROWS - 385)) | (1L << (RPAD - 385)) | (1L << (RTRIM - 385)) | (1L << (RULES - 385)) | (1L << (SAMPLE - 385)) | (1L << (SAVEPOINT - 385)) | (1L << (SAVE - 385)) | (1L << (SCHEMACHECK - 385)) | (1L << (SCHEMA - 385)) | (1L << (SCN - 385)) | (1L << (SECOND - 385)) | (1L << (SEED - 385)) | (1L << (SEGMENT - 385)) | (1L << (SELF - 385)) | (1L << (SEQUENTIAL - 385)) | (1L << (SERIALIZABLE - 385)) | (1L << (SERIALLY_REUSABLE - 385)) | (1L << (SERVERERROR - 385)) | (1L << (SESSIONTIMEZONE - 385)) | (1L << (SET - 385)) | (1L << (SETS - 385)) | (1L << (SETTINGS - 385)) | (1L << (SHOW - 385)) | (1L << (SHUTDOWN - 385)) | (1L << (SIBLINGS - 385)) | (1L << (SIGN - 385)) | (1L << (SIGNTYPE - 385)) | (1L << (SIMPLE_INTEGER - 385)) | (1L << (SINGLE - 385)) | (1L << (SINH - 385)) | (1L << (SIN - 385)) | (1L << (SKIP_ - 385)) | (1L << (SMALLINT - 385)) | (1L << (SNAPSHOT - 385)) | (1L << (SOME - 385)) | (1L << (SOUNDEX - 385)) | (1L << (SPECIFICATION - 385)) | (1L << (SQLDATA - 385)) | (1L << (SQLERROR - 385)) | (1L << (SQRT - 385)) | (1L << (STANDALONE - 385)))) != 0) || ((((_la - 449)) & ~0x3f) == 0 && ((1L << (_la - 449)) & ((1L << (STARTUP - 449)) | (1L << (STATEMENT_ID - 449)) | (1L << (STATEMENT - 449)) | (1L << (STATIC - 449)) | (1L << (STATISTICS - 449)) | (1L << (STRING - 449)) | (1L << (SUBMULTISET - 449)) | (1L << (SUBPARTITION - 449)) | (1L << (SUBSTITUTABLE - 449)) | (1L << (SUBTYPE - 449)) | (1L << (SUCCESS - 449)) | (1L << (SUSPEND - 449)) | (1L << (SYS_CONTEXT - 449)) | (1L << (SYSDATE - 449)) | (1L << (SYSTIMESTAMP - 449)) | (1L << (TANH - 449)) | (1L << (TAN - 449)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 449)) | (1L << (TIMESTAMP - 449)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 449)) | (1L << (TIMESTAMP_UNCONSTRAINED - 449)) | (1L << (TIME - 449)) | (1L << (TIMEZONE_ABBR - 449)) | (1L << (TIMEZONE_HOUR - 449)) | (1L << (TIMEZONE_MINUTE - 449)) | (1L << (TIMEZONE_REGION - 449)) | (1L << (TO_CLOB - 449)) | (1L << (TO_DSINTERVAL - 449)) | (1L << (TO_LOB - 449)) | (1L << (TO_MULTI_BYTE - 449)) | (1L << (TO_NCLOB - 449)) | (1L << (TO_NUMBER - 449)) | (1L << (TO_SINGLE_BYTE - 449)) | (1L << (TO_TIMESTAMP - 449)) | (1L << (TO_TIMESTAMP_TZ - 449)) | (1L << (TO_YMINTERVAL - 449)) | (1L << (TRAILING - 449)) | (1L << (TRANSACTION - 449)) | (1L << (TRANSLATE - 449)) | (1L << (TREAT - 449)) | (1L << (TRIGGER - 449)) | (1L << (TRUNCATE - 449)) | (1L << (TRUNC - 449)) | (1L << (TYPE - 449)) | (1L << (TZ_OFFSET - 449)) | (1L << (UID - 449)) | (1L << (UNBOUNDED - 449)) | (1L << (UNDER - 449)) | (1L << (UNLIMITED - 449)) | (1L << (UNTIL - 449)) | (1L << (UPDATED - 449)))) != 0) || ((((_la - 513)) & ~0x3f) == 0 && ((1L << (_la - 513)) & ((1L << (UPPER - 513)) | (1L << (UPSERT - 513)) | (1L << (UROWID - 513)) | (1L << (USERENV - 513)) | (1L << (USER - 513)) | (1L << (USE - 513)) | (1L << (VALIDATE - 513)) | (1L << (VALUE - 513)) | (1L << (VARCHAR2 - 513)) | (1L << (VARCHAR - 513)) | (1L << (VARIABLE - 513)) | (1L << (VARRAY - 513)) | (1L << (VARYING - 513)) | (1L << (VERSIONS - 513)) | (1L << (VERSION - 513)) | (1L << (VSIZE - 513)) | (1L << (WAIT - 513)) | (1L << (WARNING - 513)) | (1L << (WELLFORMED - 513)) | (1L << (WHENEVER - 513)) | (1L << (WHILE - 513)) | (1L << (WITHIN - 513)) | (1L << (WORK - 513)) | (1L << (WRITE - 513)) | (1L << (XMLAGG - 513)) | (1L << (XMLATTRIBUTES - 513)) | (1L << (XMLCAST - 513)) | (1L << (XMLCOLATTVAL - 513)) | (1L << (XMLELEMENT - 513)) | (1L << (XMLEXISTS - 513)) | (1L << (XMLFOREST - 513)) | (1L << (XMLNAMESPACES - 513)) | (1L << (XMLPARSE - 513)) | (1L << (XMLPI - 513)) | (1L << (XMLQUERY - 513)) | (1L << (XMLROOT - 513)) | (1L << (XMLSERIALIZE - 513)) | (1L << (XMLTABLE - 513)) | (1L << (XML - 513)) | (1L << (YEAR - 513)) | (1L << (YES - 513)) | (1L << (YMINTERVAL_UNCONSTRAINED - 513)) | (1L << (ZONE - 513)) | (1L << (PREDICTION - 513)) | (1L << (PREDICTION_BOUNDS - 513)) | (1L << (PREDICTION_COST - 513)) | (1L << (PREDICTION_DETAILS - 513)) | (1L << (PREDICTION_PROBABILITY - 513)) | (1L << (PREDICTION_SET - 513)) | (1L << (CUME_DIST - 513)) | (1L << (DENSE_RANK - 513)) | (1L << (LISTAGG - 513)) | (1L << (PERCENT_RANK - 513)) | (1L << (PERCENTILE_CONT - 513)) | (1L << (PERCENTILE_DISC - 513)) | (1L << (RANK - 513)))) != 0) || ((((_la - 577)) & ~0x3f) == 0 && ((1L << (_la - 577)) & ((1L << (AVG - 577)) | (1L << (CORR - 577)) | (1L << (COVAR_ - 577)) | (1L << (DECODE - 577)) | (1L << (LAG - 577)) | (1L << (LEAD - 577)) | (1L << (MAX - 577)) | (1L << (MEDIAN - 577)) | (1L << (MIN - 577)) | (1L << (NTILE - 577)) | (1L << (NVL - 577)) | (1L << (RATIO_TO_REPORT - 577)) | (1L << (REGR_ - 577)) | (1L << (ROUND - 577)) | (1L << (ROW_NUMBER - 577)) | (1L << (SUBSTR - 577)) | (1L << (TO_CHAR - 577)) | (1L << (TRIM - 577)) | (1L << (SUM - 577)) | (1L << (STDDEV - 577)) | (1L << (VAR_ - 577)) | (1L << (VARIANCE - 577)) | (1L << (LEAST - 577)) | (1L << (GREATEST - 577)) | (1L << (TO_DATE - 577)) | (1L << (DELIMITED_ID - 577)) | (1L << (ASTERISK - 577)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
				{
				setState(1097);
				package_name();
				}
			}

			setState(1100);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Package_obj_specContext extends ParserRuleContext {
		public Exception_declarationContext exception_declaration() {
			return getRuleContext(Exception_declarationContext.class,0);
		}
		public Pragma_declarationContext pragma_declaration() {
			return getRuleContext(Pragma_declarationContext.class,0);
		}
		public Procedure_specContext procedure_spec() {
			return getRuleContext(Procedure_specContext.class,0);
		}
		public Function_specContext function_spec() {
			return getRuleContext(Function_specContext.class,0);
		}
		public Variable_declarationContext variable_declaration() {
			return getRuleContext(Variable_declarationContext.class,0);
		}
		public Subtype_declarationContext subtype_declaration() {
			return getRuleContext(Subtype_declarationContext.class,0);
		}
		public Cursor_declarationContext cursor_declaration() {
			return getRuleContext(Cursor_declarationContext.class,0);
		}
		public Type_declarationContext type_declaration() {
			return getRuleContext(Type_declarationContext.class,0);
		}
		public Package_obj_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_package_obj_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterPackage_obj_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitPackage_obj_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitPackage_obj_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Package_obj_specContext package_obj_spec() throws RecognitionException {
		Package_obj_specContext _localctx = new Package_obj_specContext(_ctx, getState());
		enterRule(_localctx, 30, RULE_package_obj_spec);
		try {
			setState(1110);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,41,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1102);
				exception_declaration();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1103);
				pragma_declaration();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1104);
				procedure_spec();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1105);
				function_spec();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1106);
				variable_declaration();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1107);
				subtype_declaration();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1108);
				cursor_declaration();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1109);
				type_declaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Procedure_specContext extends ParserRuleContext {
		public TerminalNode PROCEDURE() { return getToken(OracleSQLStatementParser.PROCEDURE, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode SEMI() { return getToken(OracleSQLStatementParser.SEMI, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(OracleSQLStatementParser.LEFT_PAREN, 0); }
		public List<ParameterContext> parameter() {
			return getRuleContexts(ParameterContext.class);
		}
		public ParameterContext parameter(int i) {
			return getRuleContext(ParameterContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(OracleSQLStatementParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(OracleSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(OracleSQLStatementParser.COMMA, i);
		}
		public Procedure_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedure_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterProcedure_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitProcedure_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitProcedure_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Procedure_specContext procedure_spec() throws RecognitionException {
		Procedure_specContext _localctx = new Procedure_specContext(_ctx, getState());
		enterRule(_localctx, 32, RULE_procedure_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1112);
			match(PROCEDURE);
			setState(1113);
			identifier();
			setState(1125);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(1114);
				match(LEFT_PAREN);
				setState(1115);
				parameter();
				setState(1120);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1116);
					match(COMMA);
					setState(1117);
					parameter();
					}
					}
					setState(1122);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1123);
				match(RIGHT_PAREN);
				}
			}

			setState(1127);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_specContext extends ParserRuleContext {
		public TerminalNode FUNCTION() { return getToken(OracleSQLStatementParser.FUNCTION, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode RETURN() { return getToken(OracleSQLStatementParser.RETURN, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode SEMI() { return getToken(OracleSQLStatementParser.SEMI, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(OracleSQLStatementParser.LEFT_PAREN, 0); }
		public List<ParameterContext> parameter() {
			return getRuleContexts(ParameterContext.class);
		}
		public ParameterContext parameter(int i) {
			return getRuleContext(ParameterContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(OracleSQLStatementParser.RIGHT_PAREN, 0); }
		public Parallel_enable_clauseContext parallel_enable_clause() {
			return getRuleContext(Parallel_enable_clauseContext.class,0);
		}
		public TerminalNode DETERMINISTIC() { return getToken(OracleSQLStatementParser.DETERMINISTIC, 0); }
		public TerminalNode PIPELINED() { return getToken(OracleSQLStatementParser.PIPELINED, 0); }
		public TerminalNode RESULT_CACHE() { return getToken(OracleSQLStatementParser.RESULT_CACHE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(OracleSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(OracleSQLStatementParser.COMMA, i);
		}
		public Function_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterFunction_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitFunction_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitFunction_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Function_specContext function_spec() throws RecognitionException {
		Function_specContext _localctx = new Function_specContext(_ctx, getState());
		enterRule(_localctx, 34, RULE_function_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1129);
			match(FUNCTION);
			setState(1130);
			identifier();
			setState(1142);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(1131);
				match(LEFT_PAREN);
				setState(1132);
				parameter();
				setState(1137);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1133);
					match(COMMA);
					setState(1134);
					parameter();
					}
					}
					setState(1139);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1140);
				match(RIGHT_PAREN);
				}
			}

			setState(1144);
			match(RETURN);
			setState(1145);
			type_spec();
			setState(1147);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARALLEL_ENABLE) {
				{
				setState(1146);
				parallel_enable_clause();
				}
			}

			setState(1150);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DETERMINISTIC) {
				{
				setState(1149);
				match(DETERMINISTIC);
				}
			}

			setState(1153);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PIPELINED) {
				{
				setState(1152);
				match(PIPELINED);
				}
			}

			setState(1156);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RESULT_CACHE) {
				{
				setState(1155);
				match(RESULT_CACHE);
				}
			}

			setState(1158);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Package_obj_bodyContext extends ParserRuleContext {
		public Exception_declarationContext exception_declaration() {
			return getRuleContext(Exception_declarationContext.class,0);
		}
		public Pragma_declarationContext pragma_declaration() {
			return getRuleContext(Pragma_declarationContext.class,0);
		}
		public Procedure_specContext procedure_spec() {
			return getRuleContext(Procedure_specContext.class,0);
		}
		public Function_specContext function_spec() {
			return getRuleContext(Function_specContext.class,0);
		}
		public Variable_declarationContext variable_declaration() {
			return getRuleContext(Variable_declarationContext.class,0);
		}
		public Subtype_declarationContext subtype_declaration() {
			return getRuleContext(Subtype_declarationContext.class,0);
		}
		public Cursor_declarationContext cursor_declaration() {
			return getRuleContext(Cursor_declarationContext.class,0);
		}
		public Type_declarationContext type_declaration() {
			return getRuleContext(Type_declarationContext.class,0);
		}
		public Procedure_bodyContext procedure_body() {
			return getRuleContext(Procedure_bodyContext.class,0);
		}
		public Function_bodyContext function_body() {
			return getRuleContext(Function_bodyContext.class,0);
		}
		public Package_obj_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_package_obj_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterPackage_obj_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitPackage_obj_body(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitPackage_obj_body(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Package_obj_bodyContext package_obj_body() throws RecognitionException {
		Package_obj_bodyContext _localctx = new Package_obj_bodyContext(_ctx, getState());
		enterRule(_localctx, 36, RULE_package_obj_body);
		try {
			setState(1170);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,50,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1160);
				exception_declaration();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1161);
				pragma_declaration();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1162);
				procedure_spec();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1163);
				function_spec();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1164);
				variable_declaration();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1165);
				subtype_declaration();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1166);
				cursor_declaration();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1167);
				type_declaration();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1168);
				procedure_body();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(1169);
				function_body();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_procedureContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(OracleSQLStatementParser.DROP, 0); }
		public TerminalNode PROCEDURE() { return getToken(OracleSQLStatementParser.PROCEDURE, 0); }
		public Procedure_nameContext procedure_name() {
			return getRuleContext(Procedure_nameContext.class,0);
		}
		public TerminalNode SEMI() { return getToken(OracleSQLStatementParser.SEMI, 0); }
		public Drop_procedureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_procedure; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterDrop_procedure(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitDrop_procedure(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitDrop_procedure(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_procedureContext drop_procedure() throws RecognitionException {
		Drop_procedureContext _localctx = new Drop_procedureContext(_ctx, getState());
		enterRule(_localctx, 38, RULE_drop_procedure);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1172);
			match(DROP);
			setState(1173);
			match(PROCEDURE);
			setState(1174);
			procedure_name();
			setState(1175);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_procedureContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(OracleSQLStatementParser.ALTER, 0); }
		public TerminalNode PROCEDURE() { return getToken(OracleSQLStatementParser.PROCEDURE, 0); }
		public Procedure_nameContext procedure_name() {
			return getRuleContext(Procedure_nameContext.class,0);
		}
		public TerminalNode COMPILE() { return getToken(OracleSQLStatementParser.COMPILE, 0); }
		public TerminalNode SEMI() { return getToken(OracleSQLStatementParser.SEMI, 0); }
		public TerminalNode DEBUG() { return getToken(OracleSQLStatementParser.DEBUG, 0); }
		public List<Compiler_parameters_clauseContext> compiler_parameters_clause() {
			return getRuleContexts(Compiler_parameters_clauseContext.class);
		}
		public Compiler_parameters_clauseContext compiler_parameters_clause(int i) {
			return getRuleContext(Compiler_parameters_clauseContext.class,i);
		}
		public TerminalNode REUSE() { return getToken(OracleSQLStatementParser.REUSE, 0); }
		public TerminalNode SETTINGS() { return getToken(OracleSQLStatementParser.SETTINGS, 0); }
		public Alter_procedureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_procedure; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterAlter_procedure(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitAlter_procedure(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitAlter_procedure(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_procedureContext alter_procedure() throws RecognitionException {
		Alter_procedureContext _localctx = new Alter_procedureContext(_ctx, getState());
		enterRule(_localctx, 40, RULE_alter_procedure);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1177);
			match(ALTER);
			setState(1178);
			match(PROCEDURE);
			setState(1179);
			procedure_name();
			setState(1180);
			match(COMPILE);
			setState(1182);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,51,_ctx) ) {
			case 1:
				{
				setState(1181);
				match(DEBUG);
				}
				break;
			}
			setState(1187);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,52,_ctx);
			while ( _alt!=2 && _alt!= ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1184);
					compiler_parameters_clause();
					}
					} 
				}
				setState(1189);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,52,_ctx);
			}
			setState(1192);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==REUSE) {
				{
				setState(1190);
				match(REUSE);
				setState(1191);
				match(SETTINGS);
				}
			}

			setState(1194);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_bodyContext extends ParserRuleContext {
		public TerminalNode FUNCTION() { return getToken(OracleSQLStatementParser.FUNCTION, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode RETURN() { return getToken(OracleSQLStatementParser.RETURN, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode SEMI() { return getToken(OracleSQLStatementParser.SEMI, 0); }
		public TerminalNode USING() { return getToken(OracleSQLStatementParser.USING, 0); }
		public Implementation_type_nameContext implementation_type_name() {
			return getRuleContext(Implementation_type_nameContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(OracleSQLStatementParser.LEFT_PAREN, 0); }
		public List<ParameterContext> parameter() {
			return getRuleContexts(ParameterContext.class);
		}
		public ParameterContext parameter(int i) {
			return getRuleContext(ParameterContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(OracleSQLStatementParser.RIGHT_PAREN, 0); }
		public List<Invoker_rights_clauseContext> invoker_rights_clause() {
			return getRuleContexts(Invoker_rights_clauseContext.class);
		}
		public Invoker_rights_clauseContext invoker_rights_clause(int i) {
			return getRuleContext(Invoker_rights_clauseContext.class,i);
		}
		public List<Parallel_enable_clauseContext> parallel_enable_clause() {
			return getRuleContexts(Parallel_enable_clauseContext.class);
		}
		public Parallel_enable_clauseContext parallel_enable_clause(int i) {
			return getRuleContext(Parallel_enable_clauseContext.class,i);
		}
		public List<Result_cache_clauseContext> result_cache_clause() {
			return getRuleContexts(Result_cache_clauseContext.class);
		}
		public Result_cache_clauseContext result_cache_clause(int i) {
			return getRuleContext(Result_cache_clauseContext.class,i);
		}
		public List<TerminalNode> DETERMINISTIC() { return getTokens(OracleSQLStatementParser.DETERMINISTIC); }
		public TerminalNode DETERMINISTIC(int i) {
			return getToken(OracleSQLStatementParser.DETERMINISTIC, i);
		}
		public TerminalNode PIPELINED() { return getToken(OracleSQLStatementParser.PIPELINED, 0); }
		public TerminalNode AGGREGATE() { return getToken(OracleSQLStatementParser.AGGREGATE, 0); }
		public TerminalNode IS() { return getToken(OracleSQLStatementParser.IS, 0); }
		public TerminalNode AS() { return getToken(OracleSQLStatementParser.AS, 0); }
		public List<TerminalNode> COMMA() { return getTokens(OracleSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(OracleSQLStatementParser.COMMA, i);
		}
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		public Call_specContext call_spec() {
			return getRuleContext(Call_specContext.class,0);
		}
		public TerminalNode DECLARE() { return getToken(OracleSQLStatementParser.DECLARE, 0); }
		public List<Declare_specContext> declare_spec() {
			return getRuleContexts(Declare_specContext.class);
		}
		public Declare_specContext declare_spec(int i) {
			return getRuleContext(Declare_specContext.class,i);
		}
		public Function_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterFunction_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitFunction_body(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitFunction_body(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Function_bodyContext function_body() throws RecognitionException {
		Function_bodyContext _localctx = new Function_bodyContext(_ctx, getState());
		enterRule(_localctx, 42, RULE_function_body);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1196);
			match(FUNCTION);
			setState(1197);
			identifier();
			setState(1209);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(1198);
				match(LEFT_PAREN);
				setState(1199);
				parameter();
				setState(1204);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1200);
					match(COMMA);
					setState(1201);
					parameter();
					}
					}
					setState(1206);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1207);
				match(RIGHT_PAREN);
				}
			}

			setState(1211);
			match(RETURN);
			setState(1212);
			type_spec();
			setState(1219);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==AUTHID || _la==DETERMINISTIC || _la==PARALLEL_ENABLE || _la==RESULT_CACHE) {
				{
				setState(1217);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case AUTHID:
					{
					setState(1213);
					invoker_rights_clause();
					}
					break;
				case PARALLEL_ENABLE:
					{
					setState(1214);
					parallel_enable_clause();
					}
					break;
				case RESULT_CACHE:
					{
					setState(1215);
					result_cache_clause();
					}
					break;
				case DETERMINISTIC:
					{
					setState(1216);
					match(DETERMINISTIC);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(1221);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1242);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,62,_ctx) ) {
			case 1:
				{
				{
				setState(1223);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PIPELINED) {
					{
					setState(1222);
					match(PIPELINED);
					}
				}

				setState(1225);
				_la = _input.LA(1);
				if ( !(_la==AS || _la==IS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1237);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,61,_ctx) ) {
				case 1:
					{
					setState(1227);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==DECLARE) {
						{
						setState(1226);
						match(DECLARE);
						}
					}

					setState(1232);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABS) | (1L << ACOS) | (1L << ADD) | (1L << ADD_MONTHS) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASCII) | (1L << ASCIISTR) | (1L << ASIN) | (1L << ASSOCIATE) | (1L << ATAN2) | (1L << ATAN) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BFILENAME) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BIN_TO_NUM) | (1L << BITAND) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CARDINALITY) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CEIL) | (1L << CHARACTER) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARTOROWID) | (1L << CHR) | (1L << C_LETTER))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOSE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONCAT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COS - 64)) | (1L << (COSH - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_DATE - 64)) | (1L << (CURRENT_TIMESTAMP - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (DIMENSION - 128)) | (1L << (DISABLE - 128)) | (1L << (DISASSOCIATE - 128)) | (1L << (DOCUMENT - 128)) | (1L << (DOUBLE - 128)) | (1L << (DSINTERVAL_UNCONSTRAINED - 128)) | (1L << (DUMP - 128)) | (1L << (EACH - 128)) | (1L << (ELEMENT - 128)) | (1L << (EMPTY_BLOB - 128)) | (1L << (EMPTY_CLOB - 128)) | (1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERR - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXP - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FLOOR - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FROM_TZ - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUP_ID - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HEXTORAW - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (IGNORE - 193)) | (1L << (IMMEDIATE - 193)) | (1L << (INCLUDE - 193)) | (1L << (INCLUDING - 193)) | (1L << (INCREMENT - 193)) | (1L << (INDENT - 193)) | (1L << (INDEXED - 193)) | (1L << (INDICATOR - 193)) | (1L << (INDICES - 193)) | (1L << (INFINITE - 193)) | (1L << (INITCAP - 193)) | (1L << (INLINE - 193)) | (1L << (INNER - 193)) | (1L << (INOUT - 193)) | (1L << (INSTANTIABLE - 193)) | (1L << (INSTEAD - 193)) | (1L << (INSTR2 - 193)) | (1L << (INSTR4 - 193)) | (1L << (INSTRB - 193)) | (1L << (INSTRC - 193)) | (1L << (INSTR - 193)) | (1L << (INTERFACE - 193)) | (1L << (INTEGER - 193)) | (1L << (INTERVAL - 193)) | (1L << (INT - 193)) | (1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (KEY - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST_DAY - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LENGTH2 - 193)) | (1L << (LENGTH4 - 193)) | (1L << (LENGTHB - 193)) | (1L << (LENGTHC - 193)) | (1L << (LENGTH - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LN - 193)) | (1L << (LNNVL - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCALTIMESTAMP - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (LOGON - 257)) | (1L << (LONG - 257)) | (1L << (LOOP - 257)) | (1L << (LOWER - 257)) | (1L << (LPAD - 257)) | (1L << (LTRIM - 257)) | (1L << (MAIN - 257)) | (1L << (MAP - 257)) | (1L << (MATCHED - 257)) | (1L << (MAXVALUE - 257)) | (1L << (MEASURES - 257)) | (1L << (MEMBER - 257)) | (1L << (MERGE - 257)) | (1L << (MINUTE - 257)) | (1L << (MINVALUE - 257)) | (1L << (MLSLABEL - 257)) | (1L << (MODEL - 257)) | (1L << (MODIFY - 257)) | (1L << (MOD - 257)) | (1L << (MONTH - 257)) | (1L << (MONTHS_BETWEEN - 257)) | (1L << (MULTISET - 257)) | (1L << (NAME - 257)) | (1L << (NAN - 257)) | (1L << (NANVL - 257)) | (1L << (NATURAL - 257)) | (1L << (NATURALN - 257)) | (1L << (NAV - 257)) | (1L << (NCHAR_CS - 257)) | (1L << (NCHAR - 257)) | (1L << (NCHR - 257)) | (1L << (NCLOB - 257)) | (1L << (NESTED - 257)) | (1L << (NEW - 257)) | (1L << (NEW_TIME - 257)) | (1L << (NEXT_DAY - 257)) | (1L << (NOAUDIT - 257)) | (1L << (NOCOPY - 257)) | (1L << (NOCYCLE - 257)) | (1L << (NOENTITYESCAPING - 257)) | (1L << (NONE - 257)) | (1L << (NO - 257)) | (1L << (NOSCHEMACHECK - 257)) | (1L << (NULLIF - 257)) | (1L << (NULLS - 257)) | (1L << (NUMBER - 257)) | (1L << (NUMERIC - 257)) | (1L << (NUMTODSINTERVAL - 257)) | (1L << (NUMTOYMINTERVAL - 257)) | (1L << (NVARCHAR2 - 257)) | (1L << (NVL2 - 257)) | (1L << (OBJECT - 257)) | (1L << (OFF - 257)))) != 0) || ((((_la - 321)) & ~0x3f) == 0 && ((1L << (_la - 321)) & ((1L << (OID - 321)) | (1L << (OLD - 321)) | (1L << (ONLY - 321)) | (1L << (OPAQUE - 321)) | (1L << (OPEN - 321)) | (1L << (ORADATA - 321)) | (1L << (ORDINALITY - 321)) | (1L << (OSERROR - 321)) | (1L << (OUTER - 321)) | (1L << (OUT - 321)) | (1L << (OVER - 321)) | (1L << (OVERRIDING - 321)) | (1L << (PACKAGE - 321)) | (1L << (PARALLEL_ENABLE - 321)) | (1L << (PARAMETERS - 321)) | (1L << (PARENT - 321)) | (1L << (PARTITION - 321)) | (1L << (PASSING - 321)) | (1L << (PATH - 321)) | (1L << (PIPELINED - 321)) | (1L << (PLAN - 321)) | (1L << (PLS_INTEGER - 321)) | (1L << (POSITIVEN - 321)) | (1L << (POSITIVE - 321)) | (1L << (POWER - 321)) | (1L << (PRAGMA - 321)) | (1L << (PRECEDING - 321)) | (1L << (PRECISION - 321)) | (1L << (PRESENT - 321)) | (1L << (PRIOR - 321)) | (1L << (PROCEDURE - 321)) | (1L << (RAISE - 321)) | (1L << (RANGE - 321)) | (1L << (RAW - 321)) | (1L << (RAWTOHEX - 321)) | (1L << (READ - 321)) | (1L << (REAL - 321)) | (1L << (RECORD - 321)) | (1L << (REFERENCE - 321)) | (1L << (REFERENCING - 321)) | (1L << (REF - 321)) | (1L << (REGEXP_COUNT - 321)) | (1L << (REGEXP_INSTR - 321)) | (1L << (REGEXP_REPLACE - 321)) | (1L << (REGEXP_SUBSTR - 321)) | (1L << (REJECT - 321)) | (1L << (RELIES_ON - 321)) | (1L << (REMAINDER - 321)))) != 0) || ((((_la - 385)) & ~0x3f) == 0 && ((1L << (_la - 385)) & ((1L << (RENAME - 385)) | (1L << (REPLACE - 385)) | (1L << (RESPECT - 385)) | (1L << (RESTRICT_REFERENCES - 385)) | (1L << (RESULT_CACHE - 385)) | (1L << (RESULT - 385)) | (1L << (RETURNING - 385)) | (1L << (RETURN - 385)) | (1L << (REUSE - 385)) | (1L << (REVERSE - 385)) | (1L << (RIGHT - 385)) | (1L << (ROLLBACK - 385)) | (1L << (ROLLUP - 385)) | (1L << (ROWID - 385)) | (1L << (ROWNUM - 385)) | (1L << (ROW - 385)) | (1L << (ROWS - 385)) | (1L << (RPAD - 385)) | (1L << (RTRIM - 385)) | (1L << (RULES - 385)) | (1L << (SAMPLE - 385)) | (1L << (SAVEPOINT - 385)) | (1L << (SAVE - 385)) | (1L << (SCHEMACHECK - 385)) | (1L << (SCHEMA - 385)) | (1L << (SCN - 385)) | (1L << (SECOND - 385)) | (1L << (SEED - 385)) | (1L << (SEGMENT - 385)) | (1L << (SELF - 385)) | (1L << (SEQUENTIAL - 385)) | (1L << (SERIALIZABLE - 385)) | (1L << (SERIALLY_REUSABLE - 385)) | (1L << (SERVERERROR - 385)) | (1L << (SESSIONTIMEZONE - 385)) | (1L << (SET - 385)) | (1L << (SETS - 385)) | (1L << (SETTINGS - 385)) | (1L << (SHOW - 385)) | (1L << (SHUTDOWN - 385)) | (1L << (SIBLINGS - 385)) | (1L << (SIGN - 385)) | (1L << (SIGNTYPE - 385)) | (1L << (SIMPLE_INTEGER - 385)) | (1L << (SINGLE - 385)) | (1L << (SINH - 385)) | (1L << (SIN - 385)) | (1L << (SKIP_ - 385)) | (1L << (SMALLINT - 385)) | (1L << (SNAPSHOT - 385)) | (1L << (SOME - 385)) | (1L << (SOUNDEX - 385)) | (1L << (SPECIFICATION - 385)) | (1L << (SQLDATA - 385)) | (1L << (SQLERROR - 385)) | (1L << (SQRT - 385)) | (1L << (STANDALONE - 385)))) != 0) || ((((_la - 449)) & ~0x3f) == 0 && ((1L << (_la - 449)) & ((1L << (STARTUP - 449)) | (1L << (STATEMENT_ID - 449)) | (1L << (STATEMENT - 449)) | (1L << (STATIC - 449)) | (1L << (STATISTICS - 449)) | (1L << (STRING - 449)) | (1L << (SUBMULTISET - 449)) | (1L << (SUBPARTITION - 449)) | (1L << (SUBSTITUTABLE - 449)) | (1L << (SUBTYPE - 449)) | (1L << (SUCCESS - 449)) | (1L << (SUSPEND - 449)) | (1L << (SYS_CONTEXT - 449)) | (1L << (SYSDATE - 449)) | (1L << (SYSTIMESTAMP - 449)) | (1L << (TANH - 449)) | (1L << (TAN - 449)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 449)) | (1L << (TIMESTAMP - 449)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 449)) | (1L << (TIMESTAMP_UNCONSTRAINED - 449)) | (1L << (TIME - 449)) | (1L << (TIMEZONE_ABBR - 449)) | (1L << (TIMEZONE_HOUR - 449)) | (1L << (TIMEZONE_MINUTE - 449)) | (1L << (TIMEZONE_REGION - 449)) | (1L << (TO_CLOB - 449)) | (1L << (TO_DSINTERVAL - 449)) | (1L << (TO_LOB - 449)) | (1L << (TO_MULTI_BYTE - 449)) | (1L << (TO_NCLOB - 449)) | (1L << (TO_NUMBER - 449)) | (1L << (TO_SINGLE_BYTE - 449)) | (1L << (TO_TIMESTAMP - 449)) | (1L << (TO_TIMESTAMP_TZ - 449)) | (1L << (TO_YMINTERVAL - 449)) | (1L << (TRAILING - 449)) | (1L << (TRANSACTION - 449)) | (1L << (TRANSLATE - 449)) | (1L << (TREAT - 449)) | (1L << (TRIGGER - 449)) | (1L << (TRUNCATE - 449)) | (1L << (TRUNC - 449)) | (1L << (TYPE - 449)) | (1L << (TZ_OFFSET - 449)) | (1L << (UID - 449)) | (1L << (UNBOUNDED - 449)) | (1L << (UNDER - 449)) | (1L << (UNLIMITED - 449)) | (1L << (UNTIL - 449)) | (1L << (UPDATED - 449)))) != 0) || ((((_la - 513)) & ~0x3f) == 0 && ((1L << (_la - 513)) & ((1L << (UPPER - 513)) | (1L << (UPSERT - 513)) | (1L << (UROWID - 513)) | (1L << (USERENV - 513)) | (1L << (USER - 513)) | (1L << (USE - 513)) | (1L << (VALIDATE - 513)) | (1L << (VALUE - 513)) | (1L << (VARCHAR2 - 513)) | (1L << (VARCHAR - 513)) | (1L << (VARIABLE - 513)) | (1L << (VARRAY - 513)) | (1L << (VARYING - 513)) | (1L << (VERSIONS - 513)) | (1L << (VERSION - 513)) | (1L << (VSIZE - 513)) | (1L << (WAIT - 513)) | (1L << (WARNING - 513)) | (1L << (WELLFORMED - 513)) | (1L << (WHENEVER - 513)) | (1L << (WHILE - 513)) | (1L << (WITHIN - 513)) | (1L << (WORK - 513)) | (1L << (WRITE - 513)) | (1L << (XMLAGG - 513)) | (1L << (XMLATTRIBUTES - 513)) | (1L << (XMLCAST - 513)) | (1L << (XMLCOLATTVAL - 513)) | (1L << (XMLELEMENT - 513)) | (1L << (XMLEXISTS - 513)) | (1L << (XMLFOREST - 513)) | (1L << (XMLNAMESPACES - 513)) | (1L << (XMLPARSE - 513)) | (1L << (XMLPI - 513)) | (1L << (XMLQUERY - 513)) | (1L << (XMLROOT - 513)) | (1L << (XMLSERIALIZE - 513)) | (1L << (XMLTABLE - 513)) | (1L << (XML - 513)) | (1L << (YEAR - 513)) | (1L << (YES - 513)) | (1L << (YMINTERVAL_UNCONSTRAINED - 513)) | (1L << (ZONE - 513)) | (1L << (PREDICTION - 513)) | (1L << (PREDICTION_BOUNDS - 513)) | (1L << (PREDICTION_COST - 513)) | (1L << (PREDICTION_DETAILS - 513)) | (1L << (PREDICTION_PROBABILITY - 513)) | (1L << (PREDICTION_SET - 513)) | (1L << (CUME_DIST - 513)) | (1L << (DENSE_RANK - 513)) | (1L << (LISTAGG - 513)) | (1L << (PERCENT_RANK - 513)) | (1L << (PERCENTILE_CONT - 513)) | (1L << (PERCENTILE_DISC - 513)) | (1L << (RANK - 513)))) != 0) || ((((_la - 577)) & ~0x3f) == 0 && ((1L << (_la - 577)) & ((1L << (AVG - 577)) | (1L << (CORR - 577)) | (1L << (COVAR_ - 577)) | (1L << (DECODE - 577)) | (1L << (LAG - 577)) | (1L << (LEAD - 577)) | (1L << (MAX - 577)) | (1L << (MEDIAN - 577)) | (1L << (MIN - 577)) | (1L << (NTILE - 577)) | (1L << (NVL - 577)) | (1L << (RATIO_TO_REPORT - 577)) | (1L << (REGR_ - 577)) | (1L << (ROUND - 577)) | (1L << (ROW_NUMBER - 577)) | (1L << (SUBSTR - 577)) | (1L << (TO_CHAR - 577)) | (1L << (TRIM - 577)) | (1L << (SUM - 577)) | (1L << (STDDEV - 577)) | (1L << (VAR_ - 577)) | (1L << (VARIANCE - 577)) | (1L << (LEAST - 577)) | (1L << (GREATEST - 577)) | (1L << (TO_DATE - 577)) | (1L << (DELIMITED_ID - 577)) | (1L << (ASTERISK - 577)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
						{
						{
						setState(1229);
						declare_spec();
						}
						}
						setState(1234);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(1235);
					body();
					}
					break;
				case 2:
					{
					setState(1236);
					call_spec();
					}
					break;
				}
				}
				}
				break;
			case 2:
				{
				setState(1239);
				_la = _input.LA(1);
				if ( !(_la==AGGREGATE || _la==PIPELINED) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1240);
				match(USING);
				setState(1241);
				implementation_type_name();
				}
				break;
			}
			setState(1244);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Procedure_bodyContext extends ParserRuleContext {
		public TerminalNode PROCEDURE() { return getToken(OracleSQLStatementParser.PROCEDURE, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode SEMI() { return getToken(OracleSQLStatementParser.SEMI, 0); }
		public TerminalNode IS() { return getToken(OracleSQLStatementParser.IS, 0); }
		public TerminalNode AS() { return getToken(OracleSQLStatementParser.AS, 0); }
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		public Call_specContext call_spec() {
			return getRuleContext(Call_specContext.class,0);
		}
		public TerminalNode EXTERNAL() { return getToken(OracleSQLStatementParser.EXTERNAL, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(OracleSQLStatementParser.LEFT_PAREN, 0); }
		public List<ParameterContext> parameter() {
			return getRuleContexts(ParameterContext.class);
		}
		public ParameterContext parameter(int i) {
			return getRuleContext(ParameterContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(OracleSQLStatementParser.RIGHT_PAREN, 0); }
		public TerminalNode DECLARE() { return getToken(OracleSQLStatementParser.DECLARE, 0); }
		public List<Declare_specContext> declare_spec() {
			return getRuleContexts(Declare_specContext.class);
		}
		public Declare_specContext declare_spec(int i) {
			return getRuleContext(Declare_specContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(OracleSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(OracleSQLStatementParser.COMMA, i);
		}
		public Procedure_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedure_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterProcedure_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitProcedure_body(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitProcedure_body(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Procedure_bodyContext procedure_body() throws RecognitionException {
		Procedure_bodyContext _localctx = new Procedure_bodyContext(_ctx, getState());
		enterRule(_localctx, 44, RULE_procedure_body);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1246);
			match(PROCEDURE);
			setState(1247);
			identifier();
			setState(1259);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(1248);
				match(LEFT_PAREN);
				setState(1249);
				parameter();
				setState(1254);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1250);
					match(COMMA);
					setState(1251);
					parameter();
					}
					}
					setState(1256);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1257);
				match(RIGHT_PAREN);
				}
			}

			setState(1261);
			_la = _input.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1274);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,67,_ctx) ) {
			case 1:
				{
				setState(1263);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DECLARE) {
					{
					setState(1262);
					match(DECLARE);
					}
				}

				setState(1268);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABS) | (1L << ACOS) | (1L << ADD) | (1L << ADD_MONTHS) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASCII) | (1L << ASCIISTR) | (1L << ASIN) | (1L << ASSOCIATE) | (1L << ATAN2) | (1L << ATAN) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BFILENAME) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BIN_TO_NUM) | (1L << BITAND) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CARDINALITY) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CEIL) | (1L << CHARACTER) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARTOROWID) | (1L << CHR) | (1L << C_LETTER))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOSE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONCAT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COS - 64)) | (1L << (COSH - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_DATE - 64)) | (1L << (CURRENT_TIMESTAMP - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (DIMENSION - 128)) | (1L << (DISABLE - 128)) | (1L << (DISASSOCIATE - 128)) | (1L << (DOCUMENT - 128)) | (1L << (DOUBLE - 128)) | (1L << (DSINTERVAL_UNCONSTRAINED - 128)) | (1L << (DUMP - 128)) | (1L << (EACH - 128)) | (1L << (ELEMENT - 128)) | (1L << (EMPTY_BLOB - 128)) | (1L << (EMPTY_CLOB - 128)) | (1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERR - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXP - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FLOOR - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FROM_TZ - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUP_ID - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HEXTORAW - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (IGNORE - 193)) | (1L << (IMMEDIATE - 193)) | (1L << (INCLUDE - 193)) | (1L << (INCLUDING - 193)) | (1L << (INCREMENT - 193)) | (1L << (INDENT - 193)) | (1L << (INDEXED - 193)) | (1L << (INDICATOR - 193)) | (1L << (INDICES - 193)) | (1L << (INFINITE - 193)) | (1L << (INITCAP - 193)) | (1L << (INLINE - 193)) | (1L << (INNER - 193)) | (1L << (INOUT - 193)) | (1L << (INSTANTIABLE - 193)) | (1L << (INSTEAD - 193)) | (1L << (INSTR2 - 193)) | (1L << (INSTR4 - 193)) | (1L << (INSTRB - 193)) | (1L << (INSTRC - 193)) | (1L << (INSTR - 193)) | (1L << (INTERFACE - 193)) | (1L << (INTEGER - 193)) | (1L << (INTERVAL - 193)) | (1L << (INT - 193)) | (1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (KEY - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST_DAY - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LENGTH2 - 193)) | (1L << (LENGTH4 - 193)) | (1L << (LENGTHB - 193)) | (1L << (LENGTHC - 193)) | (1L << (LENGTH - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LN - 193)) | (1L << (LNNVL - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCALTIMESTAMP - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (LOGON - 257)) | (1L << (LONG - 257)) | (1L << (LOOP - 257)) | (1L << (LOWER - 257)) | (1L << (LPAD - 257)) | (1L << (LTRIM - 257)) | (1L << (MAIN - 257)) | (1L << (MAP - 257)) | (1L << (MATCHED - 257)) | (1L << (MAXVALUE - 257)) | (1L << (MEASURES - 257)) | (1L << (MEMBER - 257)) | (1L << (MERGE - 257)) | (1L << (MINUTE - 257)) | (1L << (MINVALUE - 257)) | (1L << (MLSLABEL - 257)) | (1L << (MODEL - 257)) | (1L << (MODIFY - 257)) | (1L << (MOD - 257)) | (1L << (MONTH - 257)) | (1L << (MONTHS_BETWEEN - 257)) | (1L << (MULTISET - 257)) | (1L << (NAME - 257)) | (1L << (NAN - 257)) | (1L << (NANVL - 257)) | (1L << (NATURAL - 257)) | (1L << (NATURALN - 257)) | (1L << (NAV - 257)) | (1L << (NCHAR_CS - 257)) | (1L << (NCHAR - 257)) | (1L << (NCHR - 257)) | (1L << (NCLOB - 257)) | (1L << (NESTED - 257)) | (1L << (NEW - 257)) | (1L << (NEW_TIME - 257)) | (1L << (NEXT_DAY - 257)) | (1L << (NOAUDIT - 257)) | (1L << (NOCOPY - 257)) | (1L << (NOCYCLE - 257)) | (1L << (NOENTITYESCAPING - 257)) | (1L << (NONE - 257)) | (1L << (NO - 257)) | (1L << (NOSCHEMACHECK - 257)) | (1L << (NULLIF - 257)) | (1L << (NULLS - 257)) | (1L << (NUMBER - 257)) | (1L << (NUMERIC - 257)) | (1L << (NUMTODSINTERVAL - 257)) | (1L << (NUMTOYMINTERVAL - 257)) | (1L << (NVARCHAR2 - 257)) | (1L << (NVL2 - 257)) | (1L << (OBJECT - 257)) | (1L << (OFF - 257)))) != 0) || ((((_la - 321)) & ~0x3f) == 0 && ((1L << (_la - 321)) & ((1L << (OID - 321)) | (1L << (OLD - 321)) | (1L << (ONLY - 321)) | (1L << (OPAQUE - 321)) | (1L << (OPEN - 321)) | (1L << (ORADATA - 321)) | (1L << (ORDINALITY - 321)) | (1L << (OSERROR - 321)) | (1L << (OUTER - 321)) | (1L << (OUT - 321)) | (1L << (OVER - 321)) | (1L << (OVERRIDING - 321)) | (1L << (PACKAGE - 321)) | (1L << (PARALLEL_ENABLE - 321)) | (1L << (PARAMETERS - 321)) | (1L << (PARENT - 321)) | (1L << (PARTITION - 321)) | (1L << (PASSING - 321)) | (1L << (PATH - 321)) | (1L << (PIPELINED - 321)) | (1L << (PLAN - 321)) | (1L << (PLS_INTEGER - 321)) | (1L << (POSITIVEN - 321)) | (1L << (POSITIVE - 321)) | (1L << (POWER - 321)) | (1L << (PRAGMA - 321)) | (1L << (PRECEDING - 321)) | (1L << (PRECISION - 321)) | (1L << (PRESENT - 321)) | (1L << (PRIOR - 321)) | (1L << (PROCEDURE - 321)) | (1L << (RAISE - 321)) | (1L << (RANGE - 321)) | (1L << (RAW - 321)) | (1L << (RAWTOHEX - 321)) | (1L << (READ - 321)) | (1L << (REAL - 321)) | (1L << (RECORD - 321)) | (1L << (REFERENCE - 321)) | (1L << (REFERENCING - 321)) | (1L << (REF - 321)) | (1L << (REGEXP_COUNT - 321)) | (1L << (REGEXP_INSTR - 321)) | (1L << (REGEXP_REPLACE - 321)) | (1L << (REGEXP_SUBSTR - 321)) | (1L << (REJECT - 321)) | (1L << (RELIES_ON - 321)) | (1L << (REMAINDER - 321)))) != 0) || ((((_la - 385)) & ~0x3f) == 0 && ((1L << (_la - 385)) & ((1L << (RENAME - 385)) | (1L << (REPLACE - 385)) | (1L << (RESPECT - 385)) | (1L << (RESTRICT_REFERENCES - 385)) | (1L << (RESULT_CACHE - 385)) | (1L << (RESULT - 385)) | (1L << (RETURNING - 385)) | (1L << (RETURN - 385)) | (1L << (REUSE - 385)) | (1L << (REVERSE - 385)) | (1L << (RIGHT - 385)) | (1L << (ROLLBACK - 385)) | (1L << (ROLLUP - 385)) | (1L << (ROWID - 385)) | (1L << (ROWNUM - 385)) | (1L << (ROW - 385)) | (1L << (ROWS - 385)) | (1L << (RPAD - 385)) | (1L << (RTRIM - 385)) | (1L << (RULES - 385)) | (1L << (SAMPLE - 385)) | (1L << (SAVEPOINT - 385)) | (1L << (SAVE - 385)) | (1L << (SCHEMACHECK - 385)) | (1L << (SCHEMA - 385)) | (1L << (SCN - 385)) | (1L << (SECOND - 385)) | (1L << (SEED - 385)) | (1L << (SEGMENT - 385)) | (1L << (SELF - 385)) | (1L << (SEQUENTIAL - 385)) | (1L << (SERIALIZABLE - 385)) | (1L << (SERIALLY_REUSABLE - 385)) | (1L << (SERVERERROR - 385)) | (1L << (SESSIONTIMEZONE - 385)) | (1L << (SET - 385)) | (1L << (SETS - 385)) | (1L << (SETTINGS - 385)) | (1L << (SHOW - 385)) | (1L << (SHUTDOWN - 385)) | (1L << (SIBLINGS - 385)) | (1L << (SIGN - 385)) | (1L << (SIGNTYPE - 385)) | (1L << (SIMPLE_INTEGER - 385)) | (1L << (SINGLE - 385)) | (1L << (SINH - 385)) | (1L << (SIN - 385)) | (1L << (SKIP_ - 385)) | (1L << (SMALLINT - 385)) | (1L << (SNAPSHOT - 385)) | (1L << (SOME - 385)) | (1L << (SOUNDEX - 385)) | (1L << (SPECIFICATION - 385)) | (1L << (SQLDATA - 385)) | (1L << (SQLERROR - 385)) | (1L << (SQRT - 385)) | (1L << (STANDALONE - 385)))) != 0) || ((((_la - 449)) & ~0x3f) == 0 && ((1L << (_la - 449)) & ((1L << (STARTUP - 449)) | (1L << (STATEMENT_ID - 449)) | (1L << (STATEMENT - 449)) | (1L << (STATIC - 449)) | (1L << (STATISTICS - 449)) | (1L << (STRING - 449)) | (1L << (SUBMULTISET - 449)) | (1L << (SUBPARTITION - 449)) | (1L << (SUBSTITUTABLE - 449)) | (1L << (SUBTYPE - 449)) | (1L << (SUCCESS - 449)) | (1L << (SUSPEND - 449)) | (1L << (SYS_CONTEXT - 449)) | (1L << (SYSDATE - 449)) | (1L << (SYSTIMESTAMP - 449)) | (1L << (TANH - 449)) | (1L << (TAN - 449)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 449)) | (1L << (TIMESTAMP - 449)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 449)) | (1L << (TIMESTAMP_UNCONSTRAINED - 449)) | (1L << (TIME - 449)) | (1L << (TIMEZONE_ABBR - 449)) | (1L << (TIMEZONE_HOUR - 449)) | (1L << (TIMEZONE_MINUTE - 449)) | (1L << (TIMEZONE_REGION - 449)) | (1L << (TO_CLOB - 449)) | (1L << (TO_DSINTERVAL - 449)) | (1L << (TO_LOB - 449)) | (1L << (TO_MULTI_BYTE - 449)) | (1L << (TO_NCLOB - 449)) | (1L << (TO_NUMBER - 449)) | (1L << (TO_SINGLE_BYTE - 449)) | (1L << (TO_TIMESTAMP - 449)) | (1L << (TO_TIMESTAMP_TZ - 449)) | (1L << (TO_YMINTERVAL - 449)) | (1L << (TRAILING - 449)) | (1L << (TRANSACTION - 449)) | (1L << (TRANSLATE - 449)) | (1L << (TREAT - 449)) | (1L << (TRIGGER - 449)) | (1L << (TRUNCATE - 449)) | (1L << (TRUNC - 449)) | (1L << (TYPE - 449)) | (1L << (TZ_OFFSET - 449)) | (1L << (UID - 449)) | (1L << (UNBOUNDED - 449)) | (1L << (UNDER - 449)) | (1L << (UNLIMITED - 449)) | (1L << (UNTIL - 449)) | (1L << (UPDATED - 449)))) != 0) || ((((_la - 513)) & ~0x3f) == 0 && ((1L << (_la - 513)) & ((1L << (UPPER - 513)) | (1L << (UPSERT - 513)) | (1L << (UROWID - 513)) | (1L << (USERENV - 513)) | (1L << (USER - 513)) | (1L << (USE - 513)) | (1L << (VALIDATE - 513)) | (1L << (VALUE - 513)) | (1L << (VARCHAR2 - 513)) | (1L << (VARCHAR - 513)) | (1L << (VARIABLE - 513)) | (1L << (VARRAY - 513)) | (1L << (VARYING - 513)) | (1L << (VERSIONS - 513)) | (1L << (VERSION - 513)) | (1L << (VSIZE - 513)) | (1L << (WAIT - 513)) | (1L << (WARNING - 513)) | (1L << (WELLFORMED - 513)) | (1L << (WHENEVER - 513)) | (1L << (WHILE - 513)) | (1L << (WITHIN - 513)) | (1L << (WORK - 513)) | (1L << (WRITE - 513)) | (1L << (XMLAGG - 513)) | (1L << (XMLATTRIBUTES - 513)) | (1L << (XMLCAST - 513)) | (1L << (XMLCOLATTVAL - 513)) | (1L << (XMLELEMENT - 513)) | (1L << (XMLEXISTS - 513)) | (1L << (XMLFOREST - 513)) | (1L << (XMLNAMESPACES - 513)) | (1L << (XMLPARSE - 513)) | (1L << (XMLPI - 513)) | (1L << (XMLQUERY - 513)) | (1L << (XMLROOT - 513)) | (1L << (XMLSERIALIZE - 513)) | (1L << (XMLTABLE - 513)) | (1L << (XML - 513)) | (1L << (YEAR - 513)) | (1L << (YES - 513)) | (1L << (YMINTERVAL_UNCONSTRAINED - 513)) | (1L << (ZONE - 513)) | (1L << (PREDICTION - 513)) | (1L << (PREDICTION_BOUNDS - 513)) | (1L << (PREDICTION_COST - 513)) | (1L << (PREDICTION_DETAILS - 513)) | (1L << (PREDICTION_PROBABILITY - 513)) | (1L << (PREDICTION_SET - 513)) | (1L << (CUME_DIST - 513)) | (1L << (DENSE_RANK - 513)) | (1L << (LISTAGG - 513)) | (1L << (PERCENT_RANK - 513)) | (1L << (PERCENTILE_CONT - 513)) | (1L << (PERCENTILE_DISC - 513)) | (1L << (RANK - 513)))) != 0) || ((((_la - 577)) & ~0x3f) == 0 && ((1L << (_la - 577)) & ((1L << (AVG - 577)) | (1L << (CORR - 577)) | (1L << (COVAR_ - 577)) | (1L << (DECODE - 577)) | (1L << (LAG - 577)) | (1L << (LEAD - 577)) | (1L << (MAX - 577)) | (1L << (MEDIAN - 577)) | (1L << (MIN - 577)) | (1L << (NTILE - 577)) | (1L << (NVL - 577)) | (1L << (RATIO_TO_REPORT - 577)) | (1L << (REGR_ - 577)) | (1L << (ROUND - 577)) | (1L << (ROW_NUMBER - 577)) | (1L << (SUBSTR - 577)) | (1L << (TO_CHAR - 577)) | (1L << (TRIM - 577)) | (1L << (SUM - 577)) | (1L << (STDDEV - 577)) | (1L << (VAR_ - 577)) | (1L << (VARIANCE - 577)) | (1L << (LEAST - 577)) | (1L << (GREATEST - 577)) | (1L << (TO_DATE - 577)) | (1L << (DELIMITED_ID - 577)) | (1L << (ASTERISK - 577)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
					{
					{
					setState(1265);
					declare_spec();
					}
					}
					setState(1270);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1271);
				body();
				}
				break;
			case 2:
				{
				setState(1272);
				call_spec();
				}
				break;
			case 3:
				{
				setState(1273);
				match(EXTERNAL);
				}
				break;
			}
			setState(1276);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_procedure_bodyContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(OracleSQLStatementParser.CREATE, 0); }
		public TerminalNode PROCEDURE() { return getToken(OracleSQLStatementParser.PROCEDURE, 0); }
		public Procedure_nameContext procedure_name() {
			return getRuleContext(Procedure_nameContext.class,0);
		}
		public TerminalNode SEMI() { return getToken(OracleSQLStatementParser.SEMI, 0); }
		public TerminalNode IS() { return getToken(OracleSQLStatementParser.IS, 0); }
		public TerminalNode AS() { return getToken(OracleSQLStatementParser.AS, 0); }
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		public Call_specContext call_spec() {
			return getRuleContext(Call_specContext.class,0);
		}
		public TerminalNode EXTERNAL() { return getToken(OracleSQLStatementParser.EXTERNAL, 0); }
		public TerminalNode OR() { return getToken(OracleSQLStatementParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(OracleSQLStatementParser.REPLACE, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(OracleSQLStatementParser.LEFT_PAREN, 0); }
		public List<ParameterContext> parameter() {
			return getRuleContexts(ParameterContext.class);
		}
		public ParameterContext parameter(int i) {
			return getRuleContext(ParameterContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(OracleSQLStatementParser.RIGHT_PAREN, 0); }
		public Invoker_rights_clauseContext invoker_rights_clause() {
			return getRuleContext(Invoker_rights_clauseContext.class,0);
		}
		public TerminalNode DECLARE() { return getToken(OracleSQLStatementParser.DECLARE, 0); }
		public List<Declare_specContext> declare_spec() {
			return getRuleContexts(Declare_specContext.class);
		}
		public Declare_specContext declare_spec(int i) {
			return getRuleContext(Declare_specContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(OracleSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(OracleSQLStatementParser.COMMA, i);
		}
		public Create_procedure_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_procedure_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterCreate_procedure_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitCreate_procedure_body(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitCreate_procedure_body(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_procedure_bodyContext create_procedure_body() throws RecognitionException {
		Create_procedure_bodyContext _localctx = new Create_procedure_bodyContext(_ctx, getState());
		enterRule(_localctx, 46, RULE_create_procedure_body);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1278);
			match(CREATE);
			setState(1281);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(1279);
				match(OR);
				setState(1280);
				match(REPLACE);
				}
			}

			setState(1283);
			match(PROCEDURE);
			setState(1284);
			procedure_name();
			setState(1296);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(1285);
				match(LEFT_PAREN);
				setState(1286);
				parameter();
				setState(1291);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1287);
					match(COMMA);
					setState(1288);
					parameter();
					}
					}
					setState(1293);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1294);
				match(RIGHT_PAREN);
				}
			}

			setState(1299);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTHID) {
				{
				setState(1298);
				invoker_rights_clause();
				}
			}

			setState(1301);
			_la = _input.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1314);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,74,_ctx) ) {
			case 1:
				{
				setState(1303);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DECLARE) {
					{
					setState(1302);
					match(DECLARE);
					}
				}

				setState(1308);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABS) | (1L << ACOS) | (1L << ADD) | (1L << ADD_MONTHS) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASCII) | (1L << ASCIISTR) | (1L << ASIN) | (1L << ASSOCIATE) | (1L << ATAN2) | (1L << ATAN) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BFILENAME) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BIN_TO_NUM) | (1L << BITAND) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CARDINALITY) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CEIL) | (1L << CHARACTER) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARTOROWID) | (1L << CHR) | (1L << C_LETTER))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOSE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONCAT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COS - 64)) | (1L << (COSH - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_DATE - 64)) | (1L << (CURRENT_TIMESTAMP - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (DIMENSION - 128)) | (1L << (DISABLE - 128)) | (1L << (DISASSOCIATE - 128)) | (1L << (DOCUMENT - 128)) | (1L << (DOUBLE - 128)) | (1L << (DSINTERVAL_UNCONSTRAINED - 128)) | (1L << (DUMP - 128)) | (1L << (EACH - 128)) | (1L << (ELEMENT - 128)) | (1L << (EMPTY_BLOB - 128)) | (1L << (EMPTY_CLOB - 128)) | (1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERR - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXP - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FLOOR - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FROM_TZ - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUP_ID - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HEXTORAW - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (IGNORE - 193)) | (1L << (IMMEDIATE - 193)) | (1L << (INCLUDE - 193)) | (1L << (INCLUDING - 193)) | (1L << (INCREMENT - 193)) | (1L << (INDENT - 193)) | (1L << (INDEXED - 193)) | (1L << (INDICATOR - 193)) | (1L << (INDICES - 193)) | (1L << (INFINITE - 193)) | (1L << (INITCAP - 193)) | (1L << (INLINE - 193)) | (1L << (INNER - 193)) | (1L << (INOUT - 193)) | (1L << (INSTANTIABLE - 193)) | (1L << (INSTEAD - 193)) | (1L << (INSTR2 - 193)) | (1L << (INSTR4 - 193)) | (1L << (INSTRB - 193)) | (1L << (INSTRC - 193)) | (1L << (INSTR - 193)) | (1L << (INTERFACE - 193)) | (1L << (INTEGER - 193)) | (1L << (INTERVAL - 193)) | (1L << (INT - 193)) | (1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (KEY - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST_DAY - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LENGTH2 - 193)) | (1L << (LENGTH4 - 193)) | (1L << (LENGTHB - 193)) | (1L << (LENGTHC - 193)) | (1L << (LENGTH - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LN - 193)) | (1L << (LNNVL - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCALTIMESTAMP - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (LOGON - 257)) | (1L << (LONG - 257)) | (1L << (LOOP - 257)) | (1L << (LOWER - 257)) | (1L << (LPAD - 257)) | (1L << (LTRIM - 257)) | (1L << (MAIN - 257)) | (1L << (MAP - 257)) | (1L << (MATCHED - 257)) | (1L << (MAXVALUE - 257)) | (1L << (MEASURES - 257)) | (1L << (MEMBER - 257)) | (1L << (MERGE - 257)) | (1L << (MINUTE - 257)) | (1L << (MINVALUE - 257)) | (1L << (MLSLABEL - 257)) | (1L << (MODEL - 257)) | (1L << (MODIFY - 257)) | (1L << (MOD - 257)) | (1L << (MONTH - 257)) | (1L << (MONTHS_BETWEEN - 257)) | (1L << (MULTISET - 257)) | (1L << (NAME - 257)) | (1L << (NAN - 257)) | (1L << (NANVL - 257)) | (1L << (NATURAL - 257)) | (1L << (NATURALN - 257)) | (1L << (NAV - 257)) | (1L << (NCHAR_CS - 257)) | (1L << (NCHAR - 257)) | (1L << (NCHR - 257)) | (1L << (NCLOB - 257)) | (1L << (NESTED - 257)) | (1L << (NEW - 257)) | (1L << (NEW_TIME - 257)) | (1L << (NEXT_DAY - 257)) | (1L << (NOAUDIT - 257)) | (1L << (NOCOPY - 257)) | (1L << (NOCYCLE - 257)) | (1L << (NOENTITYESCAPING - 257)) | (1L << (NONE - 257)) | (1L << (NO - 257)) | (1L << (NOSCHEMACHECK - 257)) | (1L << (NULLIF - 257)) | (1L << (NULLS - 257)) | (1L << (NUMBER - 257)) | (1L << (NUMERIC - 257)) | (1L << (NUMTODSINTERVAL - 257)) | (1L << (NUMTOYMINTERVAL - 257)) | (1L << (NVARCHAR2 - 257)) | (1L << (NVL2 - 257)) | (1L << (OBJECT - 257)) | (1L << (OFF - 257)))) != 0) || ((((_la - 321)) & ~0x3f) == 0 && ((1L << (_la - 321)) & ((1L << (OID - 321)) | (1L << (OLD - 321)) | (1L << (ONLY - 321)) | (1L << (OPAQUE - 321)) | (1L << (OPEN - 321)) | (1L << (ORADATA - 321)) | (1L << (ORDINALITY - 321)) | (1L << (OSERROR - 321)) | (1L << (OUTER - 321)) | (1L << (OUT - 321)) | (1L << (OVER - 321)) | (1L << (OVERRIDING - 321)) | (1L << (PACKAGE - 321)) | (1L << (PARALLEL_ENABLE - 321)) | (1L << (PARAMETERS - 321)) | (1L << (PARENT - 321)) | (1L << (PARTITION - 321)) | (1L << (PASSING - 321)) | (1L << (PATH - 321)) | (1L << (PIPELINED - 321)) | (1L << (PLAN - 321)) | (1L << (PLS_INTEGER - 321)) | (1L << (POSITIVEN - 321)) | (1L << (POSITIVE - 321)) | (1L << (POWER - 321)) | (1L << (PRAGMA - 321)) | (1L << (PRECEDING - 321)) | (1L << (PRECISION - 321)) | (1L << (PRESENT - 321)) | (1L << (PRIOR - 321)) | (1L << (PROCEDURE - 321)) | (1L << (RAISE - 321)) | (1L << (RANGE - 321)) | (1L << (RAW - 321)) | (1L << (RAWTOHEX - 321)) | (1L << (READ - 321)) | (1L << (REAL - 321)) | (1L << (RECORD - 321)) | (1L << (REFERENCE - 321)) | (1L << (REFERENCING - 321)) | (1L << (REF - 321)) | (1L << (REGEXP_COUNT - 321)) | (1L << (REGEXP_INSTR - 321)) | (1L << (REGEXP_REPLACE - 321)) | (1L << (REGEXP_SUBSTR - 321)) | (1L << (REJECT - 321)) | (1L << (RELIES_ON - 321)) | (1L << (REMAINDER - 321)))) != 0) || ((((_la - 385)) & ~0x3f) == 0 && ((1L << (_la - 385)) & ((1L << (RENAME - 385)) | (1L << (REPLACE - 385)) | (1L << (RESPECT - 385)) | (1L << (RESTRICT_REFERENCES - 385)) | (1L << (RESULT_CACHE - 385)) | (1L << (RESULT - 385)) | (1L << (RETURNING - 385)) | (1L << (RETURN - 385)) | (1L << (REUSE - 385)) | (1L << (REVERSE - 385)) | (1L << (RIGHT - 385)) | (1L << (ROLLBACK - 385)) | (1L << (ROLLUP - 385)) | (1L << (ROWID - 385)) | (1L << (ROWNUM - 385)) | (1L << (ROW - 385)) | (1L << (ROWS - 385)) | (1L << (RPAD - 385)) | (1L << (RTRIM - 385)) | (1L << (RULES - 385)) | (1L << (SAMPLE - 385)) | (1L << (SAVEPOINT - 385)) | (1L << (SAVE - 385)) | (1L << (SCHEMACHECK - 385)) | (1L << (SCHEMA - 385)) | (1L << (SCN - 385)) | (1L << (SECOND - 385)) | (1L << (SEED - 385)) | (1L << (SEGMENT - 385)) | (1L << (SELF - 385)) | (1L << (SEQUENTIAL - 385)) | (1L << (SERIALIZABLE - 385)) | (1L << (SERIALLY_REUSABLE - 385)) | (1L << (SERVERERROR - 385)) | (1L << (SESSIONTIMEZONE - 385)) | (1L << (SET - 385)) | (1L << (SETS - 385)) | (1L << (SETTINGS - 385)) | (1L << (SHOW - 385)) | (1L << (SHUTDOWN - 385)) | (1L << (SIBLINGS - 385)) | (1L << (SIGN - 385)) | (1L << (SIGNTYPE - 385)) | (1L << (SIMPLE_INTEGER - 385)) | (1L << (SINGLE - 385)) | (1L << (SINH - 385)) | (1L << (SIN - 385)) | (1L << (SKIP_ - 385)) | (1L << (SMALLINT - 385)) | (1L << (SNAPSHOT - 385)) | (1L << (SOME - 385)) | (1L << (SOUNDEX - 385)) | (1L << (SPECIFICATION - 385)) | (1L << (SQLDATA - 385)) | (1L << (SQLERROR - 385)) | (1L << (SQRT - 385)) | (1L << (STANDALONE - 385)))) != 0) || ((((_la - 449)) & ~0x3f) == 0 && ((1L << (_la - 449)) & ((1L << (STARTUP - 449)) | (1L << (STATEMENT_ID - 449)) | (1L << (STATEMENT - 449)) | (1L << (STATIC - 449)) | (1L << (STATISTICS - 449)) | (1L << (STRING - 449)) | (1L << (SUBMULTISET - 449)) | (1L << (SUBPARTITION - 449)) | (1L << (SUBSTITUTABLE - 449)) | (1L << (SUBTYPE - 449)) | (1L << (SUCCESS - 449)) | (1L << (SUSPEND - 449)) | (1L << (SYS_CONTEXT - 449)) | (1L << (SYSDATE - 449)) | (1L << (SYSTIMESTAMP - 449)) | (1L << (TANH - 449)) | (1L << (TAN - 449)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 449)) | (1L << (TIMESTAMP - 449)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 449)) | (1L << (TIMESTAMP_UNCONSTRAINED - 449)) | (1L << (TIME - 449)) | (1L << (TIMEZONE_ABBR - 449)) | (1L << (TIMEZONE_HOUR - 449)) | (1L << (TIMEZONE_MINUTE - 449)) | (1L << (TIMEZONE_REGION - 449)) | (1L << (TO_CLOB - 449)) | (1L << (TO_DSINTERVAL - 449)) | (1L << (TO_LOB - 449)) | (1L << (TO_MULTI_BYTE - 449)) | (1L << (TO_NCLOB - 449)) | (1L << (TO_NUMBER - 449)) | (1L << (TO_SINGLE_BYTE - 449)) | (1L << (TO_TIMESTAMP - 449)) | (1L << (TO_TIMESTAMP_TZ - 449)) | (1L << (TO_YMINTERVAL - 449)) | (1L << (TRAILING - 449)) | (1L << (TRANSACTION - 449)) | (1L << (TRANSLATE - 449)) | (1L << (TREAT - 449)) | (1L << (TRIGGER - 449)) | (1L << (TRUNCATE - 449)) | (1L << (TRUNC - 449)) | (1L << (TYPE - 449)) | (1L << (TZ_OFFSET - 449)) | (1L << (UID - 449)) | (1L << (UNBOUNDED - 449)) | (1L << (UNDER - 449)) | (1L << (UNLIMITED - 449)) | (1L << (UNTIL - 449)) | (1L << (UPDATED - 449)))) != 0) || ((((_la - 513)) & ~0x3f) == 0 && ((1L << (_la - 513)) & ((1L << (UPPER - 513)) | (1L << (UPSERT - 513)) | (1L << (UROWID - 513)) | (1L << (USERENV - 513)) | (1L << (USER - 513)) | (1L << (USE - 513)) | (1L << (VALIDATE - 513)) | (1L << (VALUE - 513)) | (1L << (VARCHAR2 - 513)) | (1L << (VARCHAR - 513)) | (1L << (VARIABLE - 513)) | (1L << (VARRAY - 513)) | (1L << (VARYING - 513)) | (1L << (VERSIONS - 513)) | (1L << (VERSION - 513)) | (1L << (VSIZE - 513)) | (1L << (WAIT - 513)) | (1L << (WARNING - 513)) | (1L << (WELLFORMED - 513)) | (1L << (WHENEVER - 513)) | (1L << (WHILE - 513)) | (1L << (WITHIN - 513)) | (1L << (WORK - 513)) | (1L << (WRITE - 513)) | (1L << (XMLAGG - 513)) | (1L << (XMLATTRIBUTES - 513)) | (1L << (XMLCAST - 513)) | (1L << (XMLCOLATTVAL - 513)) | (1L << (XMLELEMENT - 513)) | (1L << (XMLEXISTS - 513)) | (1L << (XMLFOREST - 513)) | (1L << (XMLNAMESPACES - 513)) | (1L << (XMLPARSE - 513)) | (1L << (XMLPI - 513)) | (1L << (XMLQUERY - 513)) | (1L << (XMLROOT - 513)) | (1L << (XMLSERIALIZE - 513)) | (1L << (XMLTABLE - 513)) | (1L << (XML - 513)) | (1L << (YEAR - 513)) | (1L << (YES - 513)) | (1L << (YMINTERVAL_UNCONSTRAINED - 513)) | (1L << (ZONE - 513)) | (1L << (PREDICTION - 513)) | (1L << (PREDICTION_BOUNDS - 513)) | (1L << (PREDICTION_COST - 513)) | (1L << (PREDICTION_DETAILS - 513)) | (1L << (PREDICTION_PROBABILITY - 513)) | (1L << (PREDICTION_SET - 513)) | (1L << (CUME_DIST - 513)) | (1L << (DENSE_RANK - 513)) | (1L << (LISTAGG - 513)) | (1L << (PERCENT_RANK - 513)) | (1L << (PERCENTILE_CONT - 513)) | (1L << (PERCENTILE_DISC - 513)) | (1L << (RANK - 513)))) != 0) || ((((_la - 577)) & ~0x3f) == 0 && ((1L << (_la - 577)) & ((1L << (AVG - 577)) | (1L << (CORR - 577)) | (1L << (COVAR_ - 577)) | (1L << (DECODE - 577)) | (1L << (LAG - 577)) | (1L << (LEAD - 577)) | (1L << (MAX - 577)) | (1L << (MEDIAN - 577)) | (1L << (MIN - 577)) | (1L << (NTILE - 577)) | (1L << (NVL - 577)) | (1L << (RATIO_TO_REPORT - 577)) | (1L << (REGR_ - 577)) | (1L << (ROUND - 577)) | (1L << (ROW_NUMBER - 577)) | (1L << (SUBSTR - 577)) | (1L << (TO_CHAR - 577)) | (1L << (TRIM - 577)) | (1L << (SUM - 577)) | (1L << (STDDEV - 577)) | (1L << (VAR_ - 577)) | (1L << (VARIANCE - 577)) | (1L << (LEAST - 577)) | (1L << (GREATEST - 577)) | (1L << (TO_DATE - 577)) | (1L << (DELIMITED_ID - 577)) | (1L << (ASTERISK - 577)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
					{
					{
					setState(1305);
					declare_spec();
					}
					}
					setState(1310);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1311);
				body();
				}
				break;
			case 2:
				{
				setState(1312);
				call_spec();
				}
				break;
			case 3:
				{
				setState(1313);
				match(EXTERNAL);
				}
				break;
			}
			setState(1316);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_triggerContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(OracleSQLStatementParser.DROP, 0); }
		public TerminalNode TRIGGER() { return getToken(OracleSQLStatementParser.TRIGGER, 0); }
		public Trigger_nameContext trigger_name() {
			return getRuleContext(Trigger_nameContext.class,0);
		}
		public TerminalNode SEMI() { return getToken(OracleSQLStatementParser.SEMI, 0); }
		public Drop_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_trigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterDrop_trigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitDrop_trigger(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitDrop_trigger(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_triggerContext drop_trigger() throws RecognitionException {
		Drop_triggerContext _localctx = new Drop_triggerContext(_ctx, getState());
		enterRule(_localctx, 48, RULE_drop_trigger);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1318);
			match(DROP);
			setState(1319);
			match(TRIGGER);
			setState(1320);
			trigger_name();
			setState(1321);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_triggerContext extends ParserRuleContext {
		public Trigger_nameContext tn1;
		public Trigger_nameContext tn2;
		public TerminalNode ALTER() { return getToken(OracleSQLStatementParser.ALTER, 0); }
		public TerminalNode TRIGGER() { return getToken(OracleSQLStatementParser.TRIGGER, 0); }
		public TerminalNode SEMI() { return getToken(OracleSQLStatementParser.SEMI, 0); }
		public List<Trigger_nameContext> trigger_name() {
			return getRuleContexts(Trigger_nameContext.class);
		}
		public Trigger_nameContext trigger_name(int i) {
			return getRuleContext(Trigger_nameContext.class,i);
		}
		public TerminalNode RENAME() { return getToken(OracleSQLStatementParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(OracleSQLStatementParser.TO, 0); }
		public TerminalNode COMPILE() { return getToken(OracleSQLStatementParser.COMPILE, 0); }
		public TerminalNode ENABLE() { return getToken(OracleSQLStatementParser.ENABLE, 0); }
		public TerminalNode DISABLE() { return getToken(OracleSQLStatementParser.DISABLE, 0); }
		public TerminalNode DEBUG() { return getToken(OracleSQLStatementParser.DEBUG, 0); }
		public List<Compiler_parameters_clauseContext> compiler_parameters_clause() {
			return getRuleContexts(Compiler_parameters_clauseContext.class);
		}
		public Compiler_parameters_clauseContext compiler_parameters_clause(int i) {
			return getRuleContext(Compiler_parameters_clauseContext.class,i);
		}
		public TerminalNode REUSE() { return getToken(OracleSQLStatementParser.REUSE, 0); }
		public TerminalNode SETTINGS() { return getToken(OracleSQLStatementParser.SETTINGS, 0); }
		public Alter_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_trigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterAlter_trigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitAlter_trigger(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitAlter_trigger(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_triggerContext alter_trigger() throws RecognitionException {
		Alter_triggerContext _localctx = new Alter_triggerContext(_ctx, getState());
		enterRule(_localctx, 50, RULE_alter_trigger);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1323);
			match(ALTER);
			setState(1324);
			match(TRIGGER);
			setState(1325);
			((Alter_triggerContext)_localctx).tn1 = trigger_name();
			setState(1344);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DISABLE:
			case ENABLE:
				{
				setState(1326);
				_la = _input.LA(1);
				if ( !(_la==DISABLE || _la==ENABLE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case RENAME:
				{
				setState(1327);
				match(RENAME);
				setState(1328);
				match(TO);
				setState(1329);
				((Alter_triggerContext)_localctx).tn2 = trigger_name();
				}
				break;
			case COMPILE:
				{
				setState(1330);
				match(COMPILE);
				setState(1332);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,75,_ctx) ) {
				case 1:
					{
					setState(1331);
					match(DEBUG);
					}
					break;
				}
				setState(1337);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,76,_ctx);
				while ( _alt!=2 && _alt!= ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(1334);
						compiler_parameters_clause();
						}
						} 
					}
					setState(1339);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,76,_ctx);
				}
				setState(1342);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==REUSE) {
					{
					setState(1340);
					match(REUSE);
					setState(1341);
					match(SETTINGS);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(1346);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_triggerContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(OracleSQLStatementParser.CREATE, 0); }
		public TerminalNode TRIGGER() { return getToken(OracleSQLStatementParser.TRIGGER, 0); }
		public Trigger_nameContext trigger_name() {
			return getRuleContext(Trigger_nameContext.class,0);
		}
		public Trigger_bodyContext trigger_body() {
			return getRuleContext(Trigger_bodyContext.class,0);
		}
		public TerminalNode SEMI() { return getToken(OracleSQLStatementParser.SEMI, 0); }
		public Simple_dml_triggerContext simple_dml_trigger() {
			return getRuleContext(Simple_dml_triggerContext.class,0);
		}
		public Compound_dml_triggerContext compound_dml_trigger() {
			return getRuleContext(Compound_dml_triggerContext.class,0);
		}
		public Non_dml_triggerContext non_dml_trigger() {
			return getRuleContext(Non_dml_triggerContext.class,0);
		}
		public TerminalNode OR() { return getToken(OracleSQLStatementParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(OracleSQLStatementParser.REPLACE, 0); }
		public Trigger_follows_clauseContext trigger_follows_clause() {
			return getRuleContext(Trigger_follows_clauseContext.class,0);
		}
		public Trigger_when_clauseContext trigger_when_clause() {
			return getRuleContext(Trigger_when_clauseContext.class,0);
		}
		public TerminalNode ENABLE() { return getToken(OracleSQLStatementParser.ENABLE, 0); }
		public TerminalNode DISABLE() { return getToken(OracleSQLStatementParser.DISABLE, 0); }
		public Create_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_trigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterCreate_trigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitCreate_trigger(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitCreate_trigger(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_triggerContext create_trigger() throws RecognitionException {
		Create_triggerContext _localctx = new Create_triggerContext(_ctx, getState());
		enterRule(_localctx, 52, RULE_create_trigger);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1348);
			match(CREATE);
			setState(1351);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(1349);
				match(OR);
				setState(1350);
				match(REPLACE);
				}
			}

			setState(1353);
			match(TRIGGER);
			setState(1354);
			trigger_name();
			setState(1358);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,80,_ctx) ) {
			case 1:
				{
				setState(1355);
				simple_dml_trigger();
				}
				break;
			case 2:
				{
				setState(1356);
				compound_dml_trigger();
				}
				break;
			case 3:
				{
				setState(1357);
				non_dml_trigger();
				}
				break;
			}
			setState(1361);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,81,_ctx) ) {
			case 1:
				{
				setState(1360);
				trigger_follows_clause();
				}
				break;
			}
			setState(1364);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,82,_ctx) ) {
			case 1:
				{
				setState(1363);
				_la = _input.LA(1);
				if ( !(_la==DISABLE || _la==ENABLE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(1367);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHEN) {
				{
				setState(1366);
				trigger_when_clause();
				}
			}

			setState(1369);
			trigger_body();
			setState(1370);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Trigger_follows_clauseContext extends ParserRuleContext {
		public TerminalNode FOLLOWS() { return getToken(OracleSQLStatementParser.FOLLOWS, 0); }
		public List<Trigger_nameContext> trigger_name() {
			return getRuleContexts(Trigger_nameContext.class);
		}
		public Trigger_nameContext trigger_name(int i) {
			return getRuleContext(Trigger_nameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(OracleSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(OracleSQLStatementParser.COMMA, i);
		}
		public Trigger_follows_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trigger_follows_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterTrigger_follows_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitTrigger_follows_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitTrigger_follows_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Trigger_follows_clauseContext trigger_follows_clause() throws RecognitionException {
		Trigger_follows_clauseContext _localctx = new Trigger_follows_clauseContext(_ctx, getState());
		enterRule(_localctx, 54, RULE_trigger_follows_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1372);
			match(FOLLOWS);
			setState(1373);
			trigger_name();
			setState(1378);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1374);
				match(COMMA);
				setState(1375);
				trigger_name();
				}
				}
				setState(1380);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Trigger_when_clauseContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(OracleSQLStatementParser.WHEN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(OracleSQLStatementParser.LEFT_PAREN, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(OracleSQLStatementParser.RIGHT_PAREN, 0); }
		public Trigger_when_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trigger_when_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterTrigger_when_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitTrigger_when_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitTrigger_when_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Trigger_when_clauseContext trigger_when_clause() throws RecognitionException {
		Trigger_when_clauseContext _localctx = new Trigger_when_clauseContext(_ctx, getState());
		enterRule(_localctx, 56, RULE_trigger_when_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1381);
			match(WHEN);
			setState(1382);
			match(LEFT_PAREN);
			setState(1383);
			condition();
			setState(1384);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Simple_dml_triggerContext extends ParserRuleContext {
		public Dml_event_clauseContext dml_event_clause() {
			return getRuleContext(Dml_event_clauseContext.class,0);
		}
		public TerminalNode BEFORE() { return getToken(OracleSQLStatementParser.BEFORE, 0); }
		public TerminalNode AFTER() { return getToken(OracleSQLStatementParser.AFTER, 0); }
		public TerminalNode INSTEAD() { return getToken(OracleSQLStatementParser.INSTEAD, 0); }
		public TerminalNode OF() { return getToken(OracleSQLStatementParser.OF, 0); }
		public Referencing_clauseContext referencing_clause() {
			return getRuleContext(Referencing_clauseContext.class,0);
		}
		public For_each_rowContext for_each_row() {
			return getRuleContext(For_each_rowContext.class,0);
		}
		public Simple_dml_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simple_dml_trigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterSimple_dml_trigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitSimple_dml_trigger(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitSimple_dml_trigger(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Simple_dml_triggerContext simple_dml_trigger() throws RecognitionException {
		Simple_dml_triggerContext _localctx = new Simple_dml_triggerContext(_ctx, getState());
		enterRule(_localctx, 58, RULE_simple_dml_trigger);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1390);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BEFORE:
				{
				setState(1386);
				match(BEFORE);
				}
				break;
			case AFTER:
				{
				setState(1387);
				match(AFTER);
				}
				break;
			case INSTEAD:
				{
				setState(1388);
				match(INSTEAD);
				setState(1389);
				match(OF);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(1392);
			dml_event_clause();
			setState(1394);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,86,_ctx) ) {
			case 1:
				{
				setState(1393);
				referencing_clause();
				}
				break;
			}
			setState(1397);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(1396);
				for_each_row();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class For_each_rowContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(OracleSQLStatementParser.FOR, 0); }
		public TerminalNode EACH() { return getToken(OracleSQLStatementParser.EACH, 0); }
		public TerminalNode ROW() { return getToken(OracleSQLStatementParser.ROW, 0); }
		public For_each_rowContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_each_row; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterFor_each_row(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitFor_each_row(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitFor_each_row(this);
			else return visitor.visitChildren(this);
		}
	}

	public final For_each_rowContext for_each_row() throws RecognitionException {
		For_each_rowContext _localctx = new For_each_rowContext(_ctx, getState());
		enterRule(_localctx, 60, RULE_for_each_row);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1399);
			match(FOR);
			setState(1400);
			match(EACH);
			setState(1401);
			match(ROW);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Compound_dml_triggerContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(OracleSQLStatementParser.FOR, 0); }
		public Dml_event_clauseContext dml_event_clause() {
			return getRuleContext(Dml_event_clauseContext.class,0);
		}
		public Referencing_clauseContext referencing_clause() {
			return getRuleContext(Referencing_clauseContext.class,0);
		}
		public Compound_dml_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compound_dml_trigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterCompound_dml_trigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitCompound_dml_trigger(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitCompound_dml_trigger(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Compound_dml_triggerContext compound_dml_trigger() throws RecognitionException {
		Compound_dml_triggerContext _localctx = new Compound_dml_triggerContext(_ctx, getState());
		enterRule(_localctx, 62, RULE_compound_dml_trigger);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1403);
			match(FOR);
			setState(1404);
			dml_event_clause();
			setState(1406);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,88,_ctx) ) {
			case 1:
				{
				setState(1405);
				referencing_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Non_dml_triggerContext extends ParserRuleContext {
		public List<Non_dml_eventContext> non_dml_event() {
			return getRuleContexts(Non_dml_eventContext.class);
		}
		public Non_dml_eventContext non_dml_event(int i) {
			return getRuleContext(Non_dml_eventContext.class,i);
		}
		public TerminalNode ON() { return getToken(OracleSQLStatementParser.ON, 0); }
		public TerminalNode BEFORE() { return getToken(OracleSQLStatementParser.BEFORE, 0); }
		public TerminalNode AFTER() { return getToken(OracleSQLStatementParser.AFTER, 0); }
		public TerminalNode DATABASE() { return getToken(OracleSQLStatementParser.DATABASE, 0); }
		public TerminalNode SCHEMA() { return getToken(OracleSQLStatementParser.SCHEMA, 0); }
		public List<TerminalNode> OR() { return getTokens(OracleSQLStatementParser.OR); }
		public TerminalNode OR(int i) {
			return getToken(OracleSQLStatementParser.OR, i);
		}
		public Schema_nameContext schema_name() {
			return getRuleContext(Schema_nameContext.class,0);
		}
		public Non_dml_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_non_dml_trigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterNon_dml_trigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitNon_dml_trigger(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitNon_dml_trigger(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Non_dml_triggerContext non_dml_trigger() throws RecognitionException {
		Non_dml_triggerContext _localctx = new Non_dml_triggerContext(_ctx, getState());
		enterRule(_localctx, 64, RULE_non_dml_trigger);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1408);
			_la = _input.LA(1);
			if ( !(_la==AFTER || _la==BEFORE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1409);
			non_dml_event();
			setState(1414);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==OR) {
				{
				{
				setState(1410);
				match(OR);
				setState(1411);
				non_dml_event();
				}
				}
				setState(1416);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1417);
			match(ON);
			setState(1425);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,91,_ctx) ) {
			case 1:
				{
				setState(1418);
				match(DATABASE);
				}
				break;
			case 2:
				{
				setState(1422);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,90,_ctx) ) {
				case 1:
					{
					setState(1419);
					schema_name();
					setState(1420);
					match(PERIOD);
					}
					break;
				}
				setState(1424);
				match(SCHEMA);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Trigger_bodyContext extends ParserRuleContext {
		public TerminalNode COMPOUND() { return getToken(OracleSQLStatementParser.COMPOUND, 0); }
		public TerminalNode TRIGGER() { return getToken(OracleSQLStatementParser.TRIGGER, 0); }
		public TerminalNode CALL() { return getToken(OracleSQLStatementParser.CALL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Trigger_blockContext trigger_block() {
			return getRuleContext(Trigger_blockContext.class,0);
		}
		public Trigger_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trigger_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterTrigger_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitTrigger_body(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitTrigger_body(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Trigger_bodyContext trigger_body() throws RecognitionException {
		Trigger_bodyContext _localctx = new Trigger_bodyContext(_ctx, getState());
		enterRule(_localctx, 66, RULE_trigger_body);
		try {
			setState(1432);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,92,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1427);
				match(COMPOUND);
				setState(1428);
				match(TRIGGER);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1429);
				match(CALL);
				setState(1430);
				identifier();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1431);
				trigger_block();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Compound_trigger_blockContext extends ParserRuleContext {
		public TerminalNode COMPOUND() { return getToken(OracleSQLStatementParser.COMPOUND, 0); }
		public TerminalNode TRIGGER() { return getToken(OracleSQLStatementParser.TRIGGER, 0); }
		public TerminalNode END() { return getToken(OracleSQLStatementParser.END, 0); }
		public Trigger_nameContext trigger_name() {
			return getRuleContext(Trigger_nameContext.class,0);
		}
		public List<Declare_specContext> declare_spec() {
			return getRuleContexts(Declare_specContext.class);
		}
		public Declare_specContext declare_spec(int i) {
			return getRuleContext(Declare_specContext.class,i);
		}
		public List<Timing_point_sectionContext> timing_point_section() {
			return getRuleContexts(Timing_point_sectionContext.class);
		}
		public Timing_point_sectionContext timing_point_section(int i) {
			return getRuleContext(Timing_point_sectionContext.class,i);
		}
		public Compound_trigger_blockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compound_trigger_block; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterCompound_trigger_block(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitCompound_trigger_block(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitCompound_trigger_block(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Compound_trigger_blockContext compound_trigger_block() throws RecognitionException {
		Compound_trigger_blockContext _localctx = new Compound_trigger_blockContext(_ctx, getState());
		enterRule(_localctx, 68, RULE_compound_trigger_block);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1434);
			match(COMPOUND);
			setState(1435);
			match(TRIGGER);
			setState(1439);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,93,_ctx);
			while ( _alt!=2 && _alt!= ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1436);
					declare_spec();
					}
					} 
				}
				setState(1441);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,93,_ctx);
			}
			setState(1443); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1442);
				timing_point_section();
				}
				}
				setState(1445); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==AFTER || _la==BEFORE );
			setState(1447);
			match(END);
			setState(1448);
			trigger_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Timing_point_sectionContext extends ParserRuleContext {
		public Token bk;
		public Token ak;
		public List<TerminalNode> STATEMENT() { return getTokens(OracleSQLStatementParser.STATEMENT); }
		public TerminalNode STATEMENT(int i) {
			return getToken(OracleSQLStatementParser.STATEMENT, i);
		}
		public TerminalNode IS() { return getToken(OracleSQLStatementParser.IS, 0); }
		public Trigger_blockContext trigger_block() {
			return getRuleContext(Trigger_blockContext.class,0);
		}
		public List<TerminalNode> BEFORE() { return getTokens(OracleSQLStatementParser.BEFORE); }
		public TerminalNode BEFORE(int i) {
			return getToken(OracleSQLStatementParser.BEFORE, i);
		}
		public TerminalNode SEMI() { return getToken(OracleSQLStatementParser.SEMI, 0); }
		public List<TerminalNode> EACH() { return getTokens(OracleSQLStatementParser.EACH); }
		public TerminalNode EACH(int i) {
			return getToken(OracleSQLStatementParser.EACH, i);
		}
		public List<TerminalNode> ROW() { return getTokens(OracleSQLStatementParser.ROW); }
		public TerminalNode ROW(int i) {
			return getToken(OracleSQLStatementParser.ROW, i);
		}
		public List<TerminalNode> AFTER() { return getTokens(OracleSQLStatementParser.AFTER); }
		public TerminalNode AFTER(int i) {
			return getToken(OracleSQLStatementParser.AFTER, i);
		}
		public Timing_point_sectionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_timing_point_section; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterTiming_point_section(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitTiming_point_section(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitTiming_point_section(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Timing_point_sectionContext timing_point_section() throws RecognitionException {
		Timing_point_sectionContext _localctx = new Timing_point_sectionContext(_ctx, getState());
		enterRule(_localctx, 70, RULE_timing_point_section);
		try {
			setState(1486);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,95,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1450);
				((Timing_point_sectionContext)_localctx).bk = match(BEFORE);
				setState(1451);
				match(STATEMENT);
				setState(1452);
				match(IS);
				setState(1453);
				trigger_block();
				setState(1454);
				match(BEFORE);
				setState(1455);
				match(STATEMENT);
				setState(1456);
				match(SEMI);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1458);
				((Timing_point_sectionContext)_localctx).bk = match(BEFORE);
				setState(1459);
				match(EACH);
				setState(1460);
				match(ROW);
				setState(1461);
				match(IS);
				setState(1462);
				trigger_block();
				setState(1463);
				match(BEFORE);
				setState(1464);
				match(EACH);
				setState(1465);
				match(ROW);
				setState(1466);
				match(SEMI);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1468);
				((Timing_point_sectionContext)_localctx).ak = match(AFTER);
				setState(1469);
				match(STATEMENT);
				setState(1470);
				match(IS);
				setState(1471);
				trigger_block();
				setState(1472);
				match(AFTER);
				setState(1473);
				match(STATEMENT);
				setState(1474);
				match(SEMI);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1476);
				((Timing_point_sectionContext)_localctx).ak = match(AFTER);
				setState(1477);
				match(EACH);
				setState(1478);
				match(ROW);
				setState(1479);
				match(IS);
				setState(1480);
				trigger_block();
				setState(1481);
				match(AFTER);
				setState(1482);
				match(EACH);
				setState(1483);
				match(ROW);
				setState(1484);
				match(SEMI);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Non_dml_eventContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(OracleSQLStatementParser.ALTER, 0); }
		public TerminalNode ANALYZE() { return getToken(OracleSQLStatementParser.ANALYZE, 0); }
		public TerminalNode ASSOCIATE() { return getToken(OracleSQLStatementParser.ASSOCIATE, 0); }
		public TerminalNode STATISTICS() { return getToken(OracleSQLStatementParser.STATISTICS, 0); }
		public TerminalNode AUDIT() { return getToken(OracleSQLStatementParser.AUDIT, 0); }
		public TerminalNode COMMENT() { return getToken(OracleSQLStatementParser.COMMENT, 0); }
		public TerminalNode CREATE() { return getToken(OracleSQLStatementParser.CREATE, 0); }
		public TerminalNode DISASSOCIATE() { return getToken(OracleSQLStatementParser.DISASSOCIATE, 0); }
		public TerminalNode DROP() { return getToken(OracleSQLStatementParser.DROP, 0); }
		public TerminalNode GRANT() { return getToken(OracleSQLStatementParser.GRANT, 0); }
		public TerminalNode NOAUDIT() { return getToken(OracleSQLStatementParser.NOAUDIT, 0); }
		public TerminalNode RENAME() { return getToken(OracleSQLStatementParser.RENAME, 0); }
		public TerminalNode REVOKE() { return getToken(OracleSQLStatementParser.REVOKE, 0); }
		public TerminalNode TRUNCATE() { return getToken(OracleSQLStatementParser.TRUNCATE, 0); }
		public TerminalNode DDL() { return getToken(OracleSQLStatementParser.DDL, 0); }
		public TerminalNode STARTUP() { return getToken(OracleSQLStatementParser.STARTUP, 0); }
		public TerminalNode SHUTDOWN() { return getToken(OracleSQLStatementParser.SHUTDOWN, 0); }
		public TerminalNode DB_ROLE_CHANGE() { return getToken(OracleSQLStatementParser.DB_ROLE_CHANGE, 0); }
		public TerminalNode LOGON() { return getToken(OracleSQLStatementParser.LOGON, 0); }
		public TerminalNode LOGOFF() { return getToken(OracleSQLStatementParser.LOGOFF, 0); }
		public TerminalNode SERVERERROR() { return getToken(OracleSQLStatementParser.SERVERERROR, 0); }
		public TerminalNode SUSPEND() { return getToken(OracleSQLStatementParser.SUSPEND, 0); }
		public TerminalNode DATABASE() { return getToken(OracleSQLStatementParser.DATABASE, 0); }
		public TerminalNode SCHEMA() { return getToken(OracleSQLStatementParser.SCHEMA, 0); }
		public TerminalNode FOLLOWS() { return getToken(OracleSQLStatementParser.FOLLOWS, 0); }
		public Non_dml_eventContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_non_dml_event; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterNon_dml_event(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitNon_dml_event(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitNon_dml_event(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Non_dml_eventContext non_dml_event() throws RecognitionException {
		Non_dml_eventContext _localctx = new Non_dml_eventContext(_ctx, getState());
		enterRule(_localctx, 72, RULE_non_dml_event);
		try {
			setState(1514);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALTER:
				enterOuterAlt(_localctx, 1);
				{
				setState(1488);
				match(ALTER);
				}
				break;
			case ANALYZE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1489);
				match(ANALYZE);
				}
				break;
			case ASSOCIATE:
				enterOuterAlt(_localctx, 3);
				{
				setState(1490);
				match(ASSOCIATE);
				setState(1491);
				match(STATISTICS);
				}
				break;
			case AUDIT:
				enterOuterAlt(_localctx, 4);
				{
				setState(1492);
				match(AUDIT);
				}
				break;
			case COMMENT:
				enterOuterAlt(_localctx, 5);
				{
				setState(1493);
				match(COMMENT);
				}
				break;
			case CREATE:
				enterOuterAlt(_localctx, 6);
				{
				setState(1494);
				match(CREATE);
				}
				break;
			case DISASSOCIATE:
				enterOuterAlt(_localctx, 7);
				{
				setState(1495);
				match(DISASSOCIATE);
				setState(1496);
				match(STATISTICS);
				}
				break;
			case DROP:
				enterOuterAlt(_localctx, 8);
				{
				setState(1497);
				match(DROP);
				}
				break;
			case GRANT:
				enterOuterAlt(_localctx, 9);
				{
				setState(1498);
				match(GRANT);
				}
				break;
			case NOAUDIT:
				enterOuterAlt(_localctx, 10);
				{
				setState(1499);
				match(NOAUDIT);
				}
				break;
			case RENAME:
				enterOuterAlt(_localctx, 11);
				{
				setState(1500);
				match(RENAME);
				}
				break;
			case REVOKE:
				enterOuterAlt(_localctx, 12);
				{
				setState(1501);
				match(REVOKE);
				}
				break;
			case TRUNCATE:
				enterOuterAlt(_localctx, 13);
				{
				setState(1502);
				match(TRUNCATE);
				}
				break;
			case DDL:
				enterOuterAlt(_localctx, 14);
				{
				setState(1503);
				match(DDL);
				}
				break;
			case STARTUP:
				enterOuterAlt(_localctx, 15);
				{
				setState(1504);
				match(STARTUP);
				}
				break;
			case SHUTDOWN:
				enterOuterAlt(_localctx, 16);
				{
				setState(1505);
				match(SHUTDOWN);
				}
				break;
			case DB_ROLE_CHANGE:
				enterOuterAlt(_localctx, 17);
				{
				setState(1506);
				match(DB_ROLE_CHANGE);
				}
				break;
			case LOGON:
				enterOuterAlt(_localctx, 18);
				{
				setState(1507);
				match(LOGON);
				}
				break;
			case LOGOFF:
				enterOuterAlt(_localctx, 19);
				{
				setState(1508);
				match(LOGOFF);
				}
				break;
			case SERVERERROR:
				enterOuterAlt(_localctx, 20);
				{
				setState(1509);
				match(SERVERERROR);
				}
				break;
			case SUSPEND:
				enterOuterAlt(_localctx, 21);
				{
				setState(1510);
				match(SUSPEND);
				}
				break;
			case DATABASE:
				enterOuterAlt(_localctx, 22);
				{
				setState(1511);
				match(DATABASE);
				}
				break;
			case SCHEMA:
				enterOuterAlt(_localctx, 23);
				{
				setState(1512);
				match(SCHEMA);
				}
				break;
			case FOLLOWS:
				enterOuterAlt(_localctx, 24);
				{
				setState(1513);
				match(FOLLOWS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dml_event_clauseContext extends ParserRuleContext {
		public List<Dml_event_elementContext> dml_event_element() {
			return getRuleContexts(Dml_event_elementContext.class);
		}
		public Dml_event_elementContext dml_event_element(int i) {
			return getRuleContext(Dml_event_elementContext.class,i);
		}
		public TerminalNode ON() { return getToken(OracleSQLStatementParser.ON, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public List<TerminalNode> OR() { return getTokens(OracleSQLStatementParser.OR); }
		public TerminalNode OR(int i) {
			return getToken(OracleSQLStatementParser.OR, i);
		}
		public Dml_event_nested_clauseContext dml_event_nested_clause() {
			return getRuleContext(Dml_event_nested_clauseContext.class,0);
		}
		public Dml_event_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dml_event_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterDml_event_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitDml_event_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitDml_event_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Dml_event_clauseContext dml_event_clause() throws RecognitionException {
		Dml_event_clauseContext _localctx = new Dml_event_clauseContext(_ctx, getState());
		enterRule(_localctx, 74, RULE_dml_event_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1516);
			dml_event_element();
			setState(1521);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==OR) {
				{
				{
				setState(1517);
				match(OR);
				setState(1518);
				dml_event_element();
				}
				}
				setState(1523);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1524);
			match(ON);
			setState(1526);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,98,_ctx) ) {
			case 1:
				{
				setState(1525);
				dml_event_nested_clause();
				}
				break;
			}
			setState(1528);
			tableview_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dml_event_elementContext extends ParserRuleContext {
		public TerminalNode DELETE() { return getToken(OracleSQLStatementParser.DELETE, 0); }
		public TerminalNode INSERT() { return getToken(OracleSQLStatementParser.INSERT, 0); }
		public TerminalNode UPDATE() { return getToken(OracleSQLStatementParser.UPDATE, 0); }
		public TerminalNode OF() { return getToken(OracleSQLStatementParser.OF, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(OracleSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(OracleSQLStatementParser.COMMA, i);
		}
		public Dml_event_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dml_event_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterDml_event_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitDml_event_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitDml_event_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Dml_event_elementContext dml_event_element() throws RecognitionException {
		Dml_event_elementContext _localctx = new Dml_event_elementContext(_ctx, getState());
		enterRule(_localctx, 76, RULE_dml_event_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1530);
			_la = _input.LA(1);
			if ( !(_la==DELETE || _la==INSERT || _la==UPDATE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1540);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OF) {
				{
				setState(1531);
				match(OF);
				setState(1532);
				column_name();
				setState(1537);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1533);
					match(COMMA);
					setState(1534);
					column_name();
					}
					}
					setState(1539);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dml_event_nested_clauseContext extends ParserRuleContext {
		public TerminalNode NESTED() { return getToken(OracleSQLStatementParser.NESTED, 0); }
		public TerminalNode TABLE() { return getToken(OracleSQLStatementParser.TABLE, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public TerminalNode OF() { return getToken(OracleSQLStatementParser.OF, 0); }
		public Dml_event_nested_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dml_event_nested_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterDml_event_nested_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitDml_event_nested_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitDml_event_nested_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Dml_event_nested_clauseContext dml_event_nested_clause() throws RecognitionException {
		Dml_event_nested_clauseContext _localctx = new Dml_event_nested_clauseContext(_ctx, getState());
		enterRule(_localctx, 78, RULE_dml_event_nested_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1542);
			match(NESTED);
			setState(1543);
			match(TABLE);
			setState(1544);
			tableview_name();
			setState(1545);
			match(OF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Referencing_clauseContext extends ParserRuleContext {
		public TerminalNode REFERENCING() { return getToken(OracleSQLStatementParser.REFERENCING, 0); }
		public List<Referencing_elementContext> referencing_element() {
			return getRuleContexts(Referencing_elementContext.class);
		}
		public Referencing_elementContext referencing_element(int i) {
			return getRuleContext(Referencing_elementContext.class,i);
		}
		public Referencing_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_referencing_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterReferencing_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitReferencing_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitReferencing_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Referencing_clauseContext referencing_clause() throws RecognitionException {
		Referencing_clauseContext _localctx = new Referencing_clauseContext(_ctx, getState());
		enterRule(_localctx, 80, RULE_referencing_clause);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1547);
			match(REFERENCING);
			setState(1549); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(1548);
					referencing_element();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1551); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,101,_ctx);
			} while ( _alt!=2 && _alt!= ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Referencing_elementContext extends ParserRuleContext {
		public Column_aliasContext column_alias() {
			return getRuleContext(Column_aliasContext.class,0);
		}
		public TerminalNode NEW() { return getToken(OracleSQLStatementParser.NEW, 0); }
		public TerminalNode OLD() { return getToken(OracleSQLStatementParser.OLD, 0); }
		public TerminalNode PARENT() { return getToken(OracleSQLStatementParser.PARENT, 0); }
		public Referencing_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_referencing_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterReferencing_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitReferencing_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitReferencing_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Referencing_elementContext referencing_element() throws RecognitionException {
		Referencing_elementContext _localctx = new Referencing_elementContext(_ctx, getState());
		enterRule(_localctx, 82, RULE_referencing_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1553);
			_la = _input.LA(1);
			if ( !(((((_la - 292)) & ~0x3f) == 0 && ((1L << (_la - 292)) & ((1L << (NEW - 292)) | (1L << (OLD - 292)) | (1L << (PARENT - 292)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1554);
			column_alias();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_typeContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(OracleSQLStatementParser.DROP, 0); }
		public TerminalNode TYPE() { return getToken(OracleSQLStatementParser.TYPE, 0); }
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		public TerminalNode SEMI() { return getToken(OracleSQLStatementParser.SEMI, 0); }
		public TerminalNode BODY() { return getToken(OracleSQLStatementParser.BODY, 0); }
		public TerminalNode FORCE() { return getToken(OracleSQLStatementParser.FORCE, 0); }
		public TerminalNode VALIDATE() { return getToken(OracleSQLStatementParser.VALIDATE, 0); }
		public Drop_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterDrop_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitDrop_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitDrop_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_typeContext drop_type() throws RecognitionException {
		Drop_typeContext _localctx = new Drop_typeContext(_ctx, getState());
		enterRule(_localctx, 84, RULE_drop_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1556);
			match(DROP);
			setState(1557);
			match(TYPE);
			setState(1559);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,102,_ctx) ) {
			case 1:
				{
				setState(1558);
				match(BODY);
				}
				break;
			}
			setState(1561);
			type_name();
			setState(1563);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FORCE || _la==VALIDATE) {
				{
				setState(1562);
				_la = _input.LA(1);
				if ( !(_la==FORCE || _la==VALIDATE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(1565);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_typeContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(OracleSQLStatementParser.ALTER, 0); }
		public TerminalNode TYPE() { return getToken(OracleSQLStatementParser.TYPE, 0); }
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		public TerminalNode SEMI() { return getToken(OracleSQLStatementParser.SEMI, 0); }
		public Compile_type_clauseContext compile_type_clause() {
			return getRuleContext(Compile_type_clauseContext.class,0);
		}
		public Replace_type_clauseContext replace_type_clause() {
			return getRuleContext(Replace_type_clauseContext.class,0);
		}
		public Alter_method_specContext alter_method_spec() {
			return getRuleContext(Alter_method_specContext.class,0);
		}
		public Alter_collection_clausesContext alter_collection_clauses() {
			return getRuleContext(Alter_collection_clausesContext.class,0);
		}
		public Modifier_clauseContext modifier_clause() {
			return getRuleContext(Modifier_clauseContext.class,0);
		}
		public Dependent_handling_clauseContext dependent_handling_clause() {
			return getRuleContext(Dependent_handling_clauseContext.class,0);
		}
		public Alter_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterAlter_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitAlter_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitAlter_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_typeContext alter_type() throws RecognitionException {
		Alter_typeContext _localctx = new Alter_typeContext(_ctx, getState());
		enterRule(_localctx, 86, RULE_alter_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1567);
			match(ALTER);
			setState(1568);
			match(TYPE);
			setState(1569);
			type_name();
			setState(1575);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case COMPILE:
				{
				setState(1570);
				compile_type_clause();
				}
				break;
			case REPLACE:
				{
				setState(1571);
				replace_type_clause();
				}
				break;
			case ADD:
			case DROP:
				{
				setState(1572);
				alter_method_spec();
				}
				break;
			case MODIFY:
				{
				setState(1573);
				alter_collection_clauses();
				}
				break;
			case FINAL:
			case INSTANTIABLE:
			case NOT:
			case OVERRIDING:
				{
				setState(1574);
				modifier_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(1578);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==INVALIDATE) {
				{
				setState(1577);
				dependent_handling_clause();
				}
			}

			setState(1580);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Compile_type_clauseContext extends ParserRuleContext {
		public TerminalNode COMPILE() { return getToken(OracleSQLStatementParser.COMPILE, 0); }
		public TerminalNode DEBUG() { return getToken(OracleSQLStatementParser.DEBUG, 0); }
		public List<Compiler_parameters_clauseContext> compiler_parameters_clause() {
			return getRuleContexts(Compiler_parameters_clauseContext.class);
		}
		public Compiler_parameters_clauseContext compiler_parameters_clause(int i) {
			return getRuleContext(Compiler_parameters_clauseContext.class,i);
		}
		public TerminalNode REUSE() { return getToken(OracleSQLStatementParser.REUSE, 0); }
		public TerminalNode SETTINGS() { return getToken(OracleSQLStatementParser.SETTINGS, 0); }
		public TerminalNode SPECIFICATION() { return getToken(OracleSQLStatementParser.SPECIFICATION, 0); }
		public TerminalNode BODY() { return getToken(OracleSQLStatementParser.BODY, 0); }
		public Compile_type_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compile_type_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterCompile_type_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitCompile_type_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitCompile_type_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Compile_type_clauseContext compile_type_clause() throws RecognitionException {
		Compile_type_clauseContext _localctx = new Compile_type_clauseContext(_ctx, getState());
		enterRule(_localctx, 88, RULE_compile_type_clause);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1582);
			match(COMPILE);
			setState(1584);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,106,_ctx) ) {
			case 1:
				{
				setState(1583);
				match(DEBUG);
				}
				break;
			}
			setState(1587);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,107,_ctx) ) {
			case 1:
				{
				setState(1586);
				_la = _input.LA(1);
				if ( !(_la==BODY || _la==SPECIFICATION) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(1592);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,108,_ctx);
			while ( _alt!=2 && _alt!= ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1589);
					compiler_parameters_clause();
					}
					} 
				}
				setState(1594);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,108,_ctx);
			}
			setState(1597);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==REUSE) {
				{
				setState(1595);
				match(REUSE);
				setState(1596);
				match(SETTINGS);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Replace_type_clauseContext extends ParserRuleContext {
		public TerminalNode REPLACE() { return getToken(OracleSQLStatementParser.REPLACE, 0); }
		public TerminalNode AS() { return getToken(OracleSQLStatementParser.AS, 0); }
		public TerminalNode OBJECT() { return getToken(OracleSQLStatementParser.OBJECT, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(OracleSQLStatementParser.LEFT_PAREN, 0); }
		public List<Object_member_specContext> object_member_spec() {
			return getRuleContexts(Object_member_specContext.class);
		}
		public Object_member_specContext object_member_spec(int i) {
			return getRuleContext(Object_member_specContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(OracleSQLStatementParser.RIGHT_PAREN, 0); }
		public Invoker_rights_clauseContext invoker_rights_clause() {
			return getRuleContext(Invoker_rights_clauseContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(OracleSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(OracleSQLStatementParser.COMMA, i);
		}
		public Replace_type_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_replace_type_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterReplace_type_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitReplace_type_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitReplace_type_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Replace_type_clauseContext replace_type_clause() throws RecognitionException {
		Replace_type_clauseContext _localctx = new Replace_type_clauseContext(_ctx, getState());
		enterRule(_localctx, 90, RULE_replace_type_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1599);
			match(REPLACE);
			setState(1601);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTHID) {
				{
				setState(1600);
				invoker_rights_clause();
				}
			}

			setState(1603);
			match(AS);
			setState(1604);
			match(OBJECT);
			setState(1605);
			match(LEFT_PAREN);
			setState(1606);
			object_member_spec();
			setState(1611);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1607);
				match(COMMA);
				setState(1608);
				object_member_spec();
				}
				}
				setState(1613);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1614);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_method_specContext extends ParserRuleContext {
		public List<Alter_method_elementContext> alter_method_element() {
			return getRuleContexts(Alter_method_elementContext.class);
		}
		public Alter_method_elementContext alter_method_element(int i) {
			return getRuleContext(Alter_method_elementContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(OracleSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(OracleSQLStatementParser.COMMA, i);
		}
		public Alter_method_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_method_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterAlter_method_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitAlter_method_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitAlter_method_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_method_specContext alter_method_spec() throws RecognitionException {
		Alter_method_specContext _localctx = new Alter_method_specContext(_ctx, getState());
		enterRule(_localctx, 92, RULE_alter_method_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1616);
			alter_method_element();
			setState(1621);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1617);
				match(COMMA);
				setState(1618);
				alter_method_element();
				}
				}
				setState(1623);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_method_elementContext extends ParserRuleContext {
		public TerminalNode ADD() { return getToken(OracleSQLStatementParser.ADD, 0); }
		public TerminalNode DROP() { return getToken(OracleSQLStatementParser.DROP, 0); }
		public Map_order_function_specContext map_order_function_spec() {
			return getRuleContext(Map_order_function_specContext.class,0);
		}
		public Subprogram_specContext subprogram_spec() {
			return getRuleContext(Subprogram_specContext.class,0);
		}
		public Alter_method_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_method_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterAlter_method_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitAlter_method_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitAlter_method_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_method_elementContext alter_method_element() throws RecognitionException {
		Alter_method_elementContext _localctx = new Alter_method_elementContext(_ctx, getState());
		enterRule(_localctx, 94, RULE_alter_method_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1624);
			_la = _input.LA(1);
			if ( !(_la==ADD || _la==DROP) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1627);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MAP:
			case ORDER:
				{
				setState(1625);
				map_order_function_spec();
				}
				break;
			case MEMBER:
			case STATIC:
				{
				setState(1626);
				subprogram_spec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_attribute_definitionContext extends ParserRuleContext {
		public TerminalNode ATTRIBUTE() { return getToken(OracleSQLStatementParser.ATTRIBUTE, 0); }
		public TerminalNode ADD() { return getToken(OracleSQLStatementParser.ADD, 0); }
		public TerminalNode MODIFY() { return getToken(OracleSQLStatementParser.MODIFY, 0); }
		public TerminalNode DROP() { return getToken(OracleSQLStatementParser.DROP, 0); }
		public List<Attribute_definitionContext> attribute_definition() {
			return getRuleContexts(Attribute_definitionContext.class);
		}
		public Attribute_definitionContext attribute_definition(int i) {
			return getRuleContext(Attribute_definitionContext.class,i);
		}
		public TerminalNode LEFT_PAREN() { return getToken(OracleSQLStatementParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(OracleSQLStatementParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(OracleSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(OracleSQLStatementParser.COMMA, i);
		}
		public Alter_attribute_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_attribute_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterAlter_attribute_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitAlter_attribute_definition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitAlter_attribute_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_attribute_definitionContext alter_attribute_definition() throws RecognitionException {
		Alter_attribute_definitionContext _localctx = new Alter_attribute_definitionContext(_ctx, getState());
		enterRule(_localctx, 96, RULE_alter_attribute_definition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1629);
			_la = _input.LA(1);
			if ( !(_la==ADD || _la==DROP || _la==MODIFY) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1630);
			match(ATTRIBUTE);
			setState(1643);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ABS:
			case ACOS:
			case ADD:
			case ADD_MONTHS:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASCII:
			case ASCIISTR:
			case ASIN:
			case ASSOCIATE:
			case ATAN2:
			case ATAN:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BFILENAME:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BIN_TO_NUM:
			case BITAND:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CARDINALITY:
			case CASCADE:
			case CASE:
			case CAST:
			case CEIL:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHARTOROWID:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOSE:
			case COMPOUND:
			case CONCAT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COS:
			case COSH:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_DATE:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case DUMP:
			case EACH:
			case ELEMENT:
			case EMPTY_BLOB:
			case EMPTY_CLOB:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXP:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FLOOR:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FROM_TZ:
			case FULL:
			case FUNCTION:
			case GROUP_ID:
			case GROUPING:
			case HASH:
			case HEXTORAW:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INITCAP:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INSTR2:
			case INSTR4:
			case INSTRB:
			case INSTRC:
			case INSTR:
			case INTERFACE:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST_DAY:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LENGTH2:
			case LENGTH4:
			case LENGTHB:
			case LENGTHC:
			case LENGTH:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LN:
			case LNNVL:
			case LOCAL:
			case LOCALTIMESTAMP:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MOD:
			case MONTH:
			case MONTHS_BETWEEN:
			case MULTISET:
			case NAME:
			case NAN:
			case NANVL:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCHR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NEW_TIME:
			case NEXT_DAY:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLIF:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NUMTODSINTERVAL:
			case NUMTOYMINTERVAL:
			case NVARCHAR2:
			case NVL2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPAQUE:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case POWER:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case PROCEDURE:
			case RAISE:
			case RANGE:
			case RAW:
			case RAWTOHEX:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_REPLACE:
			case REGEXP_SUBSTR:
			case REJECT:
			case RELIES_ON:
			case REMAINDER:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROWNUM:
			case ROW:
			case ROWS:
			case RPAD:
			case RTRIM:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGN:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SINH:
			case SIN:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SOUNDEX:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case SQRT:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYS_CONTEXT:
			case SYSDATE:
			case SYSTIMESTAMP:
			case TANH:
			case TAN:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TO_CLOB:
			case TO_DSINTERVAL:
			case TO_LOB:
			case TO_MULTI_BYTE:
			case TO_NCLOB:
			case TO_NUMBER:
			case TO_SINGLE_BYTE:
			case TO_TIMESTAMP:
			case TO_TIMESTAMP_TZ:
			case TO_YMINTERVAL:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TRUNC:
			case TYPE:
			case TZ_OFFSET:
			case UID:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPPER:
			case UPSERT:
			case UROWID:
			case USERENV:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case VSIZE:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case DECODE:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case NVL:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROUND:
			case ROW_NUMBER:
			case SUBSTR:
			case TO_CHAR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case LEAST:
			case GREATEST:
			case TO_DATE:
			case DELIMITED_ID:
			case ASTERISK:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(1631);
				attribute_definition();
				}
				break;
			case LEFT_PAREN:
				{
				setState(1632);
				match(LEFT_PAREN);
				setState(1633);
				attribute_definition();
				setState(1638);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1634);
					match(COMMA);
					setState(1635);
					attribute_definition();
					}
					}
					setState(1640);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1641);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Attribute_definitionContext extends ParserRuleContext {
		public Attribute_nameContext attribute_name() {
			return getRuleContext(Attribute_nameContext.class,0);
		}
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Attribute_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_attribute_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterAttribute_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitAttribute_definition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitAttribute_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Attribute_definitionContext attribute_definition() throws RecognitionException {
		Attribute_definitionContext _localctx = new Attribute_definitionContext(_ctx, getState());
		enterRule(_localctx, 98, RULE_attribute_definition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1645);
			attribute_name();
			setState(1647);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABS) | (1L << ACOS) | (1L << ADD) | (1L << ADD_MONTHS) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASCII) | (1L << ASCIISTR) | (1L << ASIN) | (1L << ASSOCIATE) | (1L << ATAN2) | (1L << ATAN) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BFILENAME) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BIN_TO_NUM) | (1L << BITAND) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CARDINALITY) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CEIL) | (1L << CHARACTER) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARTOROWID) | (1L << CHR) | (1L << C_LETTER))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOSE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONCAT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COS - 64)) | (1L << (COSH - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_DATE - 64)) | (1L << (CURRENT_TIMESTAMP - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (DIMENSION - 128)) | (1L << (DISABLE - 128)) | (1L << (DISASSOCIATE - 128)) | (1L << (DOCUMENT - 128)) | (1L << (DOUBLE - 128)) | (1L << (DSINTERVAL_UNCONSTRAINED - 128)) | (1L << (DUMP - 128)) | (1L << (EACH - 128)) | (1L << (ELEMENT - 128)) | (1L << (EMPTY_BLOB - 128)) | (1L << (EMPTY_CLOB - 128)) | (1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERR - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXP - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FLOOR - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FROM_TZ - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUP_ID - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HEXTORAW - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (IGNORE - 193)) | (1L << (IMMEDIATE - 193)) | (1L << (INCLUDE - 193)) | (1L << (INCLUDING - 193)) | (1L << (INCREMENT - 193)) | (1L << (INDENT - 193)) | (1L << (INDEXED - 193)) | (1L << (INDICATOR - 193)) | (1L << (INDICES - 193)) | (1L << (INFINITE - 193)) | (1L << (INITCAP - 193)) | (1L << (INLINE - 193)) | (1L << (INNER - 193)) | (1L << (INOUT - 193)) | (1L << (INSTANTIABLE - 193)) | (1L << (INSTEAD - 193)) | (1L << (INSTR2 - 193)) | (1L << (INSTR4 - 193)) | (1L << (INSTRB - 193)) | (1L << (INSTRC - 193)) | (1L << (INSTR - 193)) | (1L << (INTERFACE - 193)) | (1L << (INTEGER - 193)) | (1L << (INTERVAL - 193)) | (1L << (INT - 193)) | (1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (KEY - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST_DAY - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LENGTH2 - 193)) | (1L << (LENGTH4 - 193)) | (1L << (LENGTHB - 193)) | (1L << (LENGTHC - 193)) | (1L << (LENGTH - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LN - 193)) | (1L << (LNNVL - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCALTIMESTAMP - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (LOGON - 257)) | (1L << (LONG - 257)) | (1L << (LOOP - 257)) | (1L << (LOWER - 257)) | (1L << (LPAD - 257)) | (1L << (LTRIM - 257)) | (1L << (MAIN - 257)) | (1L << (MAP - 257)) | (1L << (MATCHED - 257)) | (1L << (MAXVALUE - 257)) | (1L << (MEASURES - 257)) | (1L << (MEMBER - 257)) | (1L << (MERGE - 257)) | (1L << (MINUTE - 257)) | (1L << (MINVALUE - 257)) | (1L << (MLSLABEL - 257)) | (1L << (MODEL - 257)) | (1L << (MODIFY - 257)) | (1L << (MOD - 257)) | (1L << (MONTH - 257)) | (1L << (MONTHS_BETWEEN - 257)) | (1L << (MULTISET - 257)) | (1L << (NAME - 257)) | (1L << (NAN - 257)) | (1L << (NANVL - 257)) | (1L << (NATURAL - 257)) | (1L << (NATURALN - 257)) | (1L << (NAV - 257)) | (1L << (NCHAR_CS - 257)) | (1L << (NCHAR - 257)) | (1L << (NCHR - 257)) | (1L << (NCLOB - 257)) | (1L << (NESTED - 257)) | (1L << (NEW - 257)) | (1L << (NEW_TIME - 257)) | (1L << (NEXT_DAY - 257)) | (1L << (NOAUDIT - 257)) | (1L << (NOCOPY - 257)) | (1L << (NOCYCLE - 257)) | (1L << (NOENTITYESCAPING - 257)) | (1L << (NONE - 257)) | (1L << (NO - 257)) | (1L << (NOSCHEMACHECK - 257)) | (1L << (NULLIF - 257)) | (1L << (NULLS - 257)) | (1L << (NUMBER - 257)) | (1L << (NUMERIC - 257)) | (1L << (NUMTODSINTERVAL - 257)) | (1L << (NUMTOYMINTERVAL - 257)) | (1L << (NVARCHAR2 - 257)) | (1L << (NVL2 - 257)) | (1L << (OBJECT - 257)) | (1L << (OFF - 257)))) != 0) || ((((_la - 321)) & ~0x3f) == 0 && ((1L << (_la - 321)) & ((1L << (OID - 321)) | (1L << (OLD - 321)) | (1L << (ONLY - 321)) | (1L << (OPAQUE - 321)) | (1L << (OPEN - 321)) | (1L << (ORADATA - 321)) | (1L << (ORDINALITY - 321)) | (1L << (OSERROR - 321)) | (1L << (OUTER - 321)) | (1L << (OUT - 321)) | (1L << (OVER - 321)) | (1L << (OVERRIDING - 321)) | (1L << (PACKAGE - 321)) | (1L << (PARALLEL_ENABLE - 321)) | (1L << (PARAMETERS - 321)) | (1L << (PARENT - 321)) | (1L << (PARTITION - 321)) | (1L << (PASSING - 321)) | (1L << (PATH - 321)) | (1L << (PIPELINED - 321)) | (1L << (PLAN - 321)) | (1L << (PLS_INTEGER - 321)) | (1L << (POSITIVEN - 321)) | (1L << (POSITIVE - 321)) | (1L << (POWER - 321)) | (1L << (PRAGMA - 321)) | (1L << (PRECEDING - 321)) | (1L << (PRECISION - 321)) | (1L << (PRESENT - 321)) | (1L << (PRIOR - 321)) | (1L << (PROCEDURE - 321)) | (1L << (RAISE - 321)) | (1L << (RANGE - 321)) | (1L << (RAW - 321)) | (1L << (RAWTOHEX - 321)) | (1L << (READ - 321)) | (1L << (REAL - 321)) | (1L << (RECORD - 321)) | (1L << (REFERENCE - 321)) | (1L << (REFERENCING - 321)) | (1L << (REF - 321)) | (1L << (REGEXP_COUNT - 321)) | (1L << (REGEXP_INSTR - 321)) | (1L << (REGEXP_REPLACE - 321)) | (1L << (REGEXP_SUBSTR - 321)) | (1L << (REJECT - 321)) | (1L << (RELIES_ON - 321)) | (1L << (REMAINDER - 321)))) != 0) || ((((_la - 385)) & ~0x3f) == 0 && ((1L << (_la - 385)) & ((1L << (RENAME - 385)) | (1L << (REPLACE - 385)) | (1L << (RESPECT - 385)) | (1L << (RESTRICT_REFERENCES - 385)) | (1L << (RESULT_CACHE - 385)) | (1L << (RESULT - 385)) | (1L << (RETURNING - 385)) | (1L << (RETURN - 385)) | (1L << (REUSE - 385)) | (1L << (REVERSE - 385)) | (1L << (RIGHT - 385)) | (1L << (ROLLBACK - 385)) | (1L << (ROLLUP - 385)) | (1L << (ROWID - 385)) | (1L << (ROWNUM - 385)) | (1L << (ROW - 385)) | (1L << (ROWS - 385)) | (1L << (RPAD - 385)) | (1L << (RTRIM - 385)) | (1L << (RULES - 385)) | (1L << (SAMPLE - 385)) | (1L << (SAVEPOINT - 385)) | (1L << (SAVE - 385)) | (1L << (SCHEMACHECK - 385)) | (1L << (SCHEMA - 385)) | (1L << (SCN - 385)) | (1L << (SECOND - 385)) | (1L << (SEED - 385)) | (1L << (SEGMENT - 385)) | (1L << (SELF - 385)) | (1L << (SEQUENTIAL - 385)) | (1L << (SERIALIZABLE - 385)) | (1L << (SERIALLY_REUSABLE - 385)) | (1L << (SERVERERROR - 385)) | (1L << (SESSIONTIMEZONE - 385)) | (1L << (SET - 385)) | (1L << (SETS - 385)) | (1L << (SETTINGS - 385)) | (1L << (SHOW - 385)) | (1L << (SHUTDOWN - 385)) | (1L << (SIBLINGS - 385)) | (1L << (SIGN - 385)) | (1L << (SIGNTYPE - 385)) | (1L << (SIMPLE_INTEGER - 385)) | (1L << (SINGLE - 385)) | (1L << (SINH - 385)) | (1L << (SIN - 385)) | (1L << (SKIP_ - 385)) | (1L << (SMALLINT - 385)) | (1L << (SNAPSHOT - 385)) | (1L << (SOME - 385)) | (1L << (SOUNDEX - 385)) | (1L << (SPECIFICATION - 385)) | (1L << (SQLDATA - 385)) | (1L << (SQLERROR - 385)) | (1L << (SQRT - 385)) | (1L << (STANDALONE - 385)))) != 0) || ((((_la - 449)) & ~0x3f) == 0 && ((1L << (_la - 449)) & ((1L << (STARTUP - 449)) | (1L << (STATEMENT_ID - 449)) | (1L << (STATEMENT - 449)) | (1L << (STATIC - 449)) | (1L << (STATISTICS - 449)) | (1L << (STRING - 449)) | (1L << (SUBMULTISET - 449)) | (1L << (SUBPARTITION - 449)) | (1L << (SUBSTITUTABLE - 449)) | (1L << (SUBTYPE - 449)) | (1L << (SUCCESS - 449)) | (1L << (SUSPEND - 449)) | (1L << (SYS_CONTEXT - 449)) | (1L << (SYSDATE - 449)) | (1L << (SYSTIMESTAMP - 449)) | (1L << (TANH - 449)) | (1L << (TAN - 449)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 449)) | (1L << (TIMESTAMP - 449)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 449)) | (1L << (TIMESTAMP_UNCONSTRAINED - 449)) | (1L << (TIME - 449)) | (1L << (TIME_TZ_UNCONSTRAINED - 449)) | (1L << (TIME_UNCONSTRAINED - 449)) | (1L << (TIMEZONE_ABBR - 449)) | (1L << (TIMEZONE_HOUR - 449)) | (1L << (TIMEZONE_MINUTE - 449)) | (1L << (TIMEZONE_REGION - 449)) | (1L << (TO_CLOB - 449)) | (1L << (TO_DSINTERVAL - 449)) | (1L << (TO_LOB - 449)) | (1L << (TO_MULTI_BYTE - 449)) | (1L << (TO_NCLOB - 449)) | (1L << (TO_NUMBER - 449)) | (1L << (TO_SINGLE_BYTE - 449)) | (1L << (TO_TIMESTAMP - 449)) | (1L << (TO_TIMESTAMP_TZ - 449)) | (1L << (TO_YMINTERVAL - 449)) | (1L << (TRAILING - 449)) | (1L << (TRANSACTION - 449)) | (1L << (TRANSLATE - 449)) | (1L << (TREAT - 449)) | (1L << (TRIGGER - 449)) | (1L << (TRUNCATE - 449)) | (1L << (TRUNC - 449)) | (1L << (TYPE - 449)) | (1L << (TZ_OFFSET - 449)) | (1L << (UID - 449)) | (1L << (UNBOUNDED - 449)) | (1L << (UNDER - 449)) | (1L << (UNLIMITED - 449)) | (1L << (UNTIL - 449)) | (1L << (UPDATED - 449)))) != 0) || ((((_la - 513)) & ~0x3f) == 0 && ((1L << (_la - 513)) & ((1L << (UPPER - 513)) | (1L << (UPSERT - 513)) | (1L << (UROWID - 513)) | (1L << (USERENV - 513)) | (1L << (USER - 513)) | (1L << (USE - 513)) | (1L << (VALIDATE - 513)) | (1L << (VALUE - 513)) | (1L << (VARCHAR2 - 513)) | (1L << (VARCHAR - 513)) | (1L << (VARIABLE - 513)) | (1L << (VARRAY - 513)) | (1L << (VARYING - 513)) | (1L << (VERSIONS - 513)) | (1L << (VERSION - 513)) | (1L << (VSIZE - 513)) | (1L << (WAIT - 513)) | (1L << (WARNING - 513)) | (1L << (WELLFORMED - 513)) | (1L << (WHENEVER - 513)) | (1L << (WHILE - 513)) | (1L << (WITHIN - 513)) | (1L << (WORK - 513)) | (1L << (WRITE - 513)) | (1L << (XMLAGG - 513)) | (1L << (XMLATTRIBUTES - 513)) | (1L << (XMLCAST - 513)) | (1L << (XMLCOLATTVAL - 513)) | (1L << (XMLELEMENT - 513)) | (1L << (XMLEXISTS - 513)) | (1L << (XMLFOREST - 513)) | (1L << (XMLNAMESPACES - 513)) | (1L << (XMLPARSE - 513)) | (1L << (XMLPI - 513)) | (1L << (XMLQUERY - 513)) | (1L << (XMLROOT - 513)) | (1L << (XMLSERIALIZE - 513)) | (1L << (XMLTABLE - 513)) | (1L << (XML - 513)) | (1L << (YEAR - 513)) | (1L << (YES - 513)) | (1L << (YMINTERVAL_UNCONSTRAINED - 513)) | (1L << (ZONE - 513)) | (1L << (PREDICTION - 513)) | (1L << (PREDICTION_BOUNDS - 513)) | (1L << (PREDICTION_COST - 513)) | (1L << (PREDICTION_DETAILS - 513)) | (1L << (PREDICTION_PROBABILITY - 513)) | (1L << (PREDICTION_SET - 513)) | (1L << (CUME_DIST - 513)) | (1L << (DENSE_RANK - 513)) | (1L << (LISTAGG - 513)) | (1L << (PERCENT_RANK - 513)) | (1L << (PERCENTILE_CONT - 513)) | (1L << (PERCENTILE_DISC - 513)) | (1L << (RANK - 513)))) != 0) || ((((_la - 577)) & ~0x3f) == 0 && ((1L << (_la - 577)) & ((1L << (AVG - 577)) | (1L << (CORR - 577)) | (1L << (COVAR_ - 577)) | (1L << (DECODE - 577)) | (1L << (LAG - 577)) | (1L << (LEAD - 577)) | (1L << (MAX - 577)) | (1L << (MEDIAN - 577)) | (1L << (MIN - 577)) | (1L << (NTILE - 577)) | (1L << (NVL - 577)) | (1L << (RATIO_TO_REPORT - 577)) | (1L << (REGR_ - 577)) | (1L << (ROUND - 577)) | (1L << (ROW_NUMBER - 577)) | (1L << (SUBSTR - 577)) | (1L << (TO_CHAR - 577)) | (1L << (TRIM - 577)) | (1L << (SUM - 577)) | (1L << (STDDEV - 577)) | (1L << (VAR_ - 577)) | (1L << (VARIANCE - 577)) | (1L << (LEAST - 577)) | (1L << (GREATEST - 577)) | (1L << (TO_DATE - 577)) | (1L << (DELIMITED_ID - 577)) | (1L << (ASTERISK - 577)))) != 0) || _la==REGULAR_ID) {
				{
				setState(1646);
				type_spec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_collection_clausesContext extends ParserRuleContext {
		public TerminalNode MODIFY() { return getToken(OracleSQLStatementParser.MODIFY, 0); }
		public TerminalNode LIMIT() { return getToken(OracleSQLStatementParser.LIMIT, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode ELEMENT() { return getToken(OracleSQLStatementParser.ELEMENT, 0); }
		public TerminalNode TYPE() { return getToken(OracleSQLStatementParser.TYPE, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Alter_collection_clausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_collection_clauses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterAlter_collection_clauses(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitAlter_collection_clauses(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitAlter_collection_clauses(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_collection_clausesContext alter_collection_clauses() throws RecognitionException {
		Alter_collection_clausesContext _localctx = new Alter_collection_clausesContext(_ctx, getState());
		enterRule(_localctx, 100, RULE_alter_collection_clauses);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1649);
			match(MODIFY);
			setState(1655);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LIMIT:
				{
				setState(1650);
				match(LIMIT);
				setState(1651);
				expression();
				}
				break;
			case ELEMENT:
				{
				setState(1652);
				match(ELEMENT);
				setState(1653);
				match(TYPE);
				setState(1654);
				type_spec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dependent_handling_clauseContext extends ParserRuleContext {
		public TerminalNode INVALIDATE() { return getToken(OracleSQLStatementParser.INVALIDATE, 0); }
		public TerminalNode CASCADE() { return getToken(OracleSQLStatementParser.CASCADE, 0); }
		public TerminalNode CONVERT() { return getToken(OracleSQLStatementParser.CONVERT, 0); }
		public TerminalNode TO() { return getToken(OracleSQLStatementParser.TO, 0); }
		public TerminalNode SUBSTITUTABLE() { return getToken(OracleSQLStatementParser.SUBSTITUTABLE, 0); }
		public TerminalNode INCLUDING() { return getToken(OracleSQLStatementParser.INCLUDING, 0); }
		public TerminalNode TABLE() { return getToken(OracleSQLStatementParser.TABLE, 0); }
		public TerminalNode DATA() { return getToken(OracleSQLStatementParser.DATA, 0); }
		public Dependent_exceptions_partContext dependent_exceptions_part() {
			return getRuleContext(Dependent_exceptions_partContext.class,0);
		}
		public TerminalNode NOT() { return getToken(OracleSQLStatementParser.NOT, 0); }
		public Dependent_handling_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dependent_handling_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterDependent_handling_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitDependent_handling_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitDependent_handling_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Dependent_handling_clauseContext dependent_handling_clause() throws RecognitionException {
		Dependent_handling_clauseContext _localctx = new Dependent_handling_clauseContext(_ctx, getState());
		enterRule(_localctx, 102, RULE_dependent_handling_clause);
		int _la;
		try {
			setState(1673);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INVALIDATE:
				enterOuterAlt(_localctx, 1);
				{
				setState(1657);
				match(INVALIDATE);
				}
				break;
			case CASCADE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1658);
				match(CASCADE);
				setState(1668);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CONVERT:
					{
					setState(1659);
					match(CONVERT);
					setState(1660);
					match(TO);
					setState(1661);
					match(SUBSTITUTABLE);
					}
					break;
				case INCLUDING:
				case NOT:
					{
					setState(1663);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==NOT) {
						{
						setState(1662);
						match(NOT);
						}
					}

					setState(1665);
					match(INCLUDING);
					setState(1666);
					match(TABLE);
					setState(1667);
					match(DATA);
					}
					break;
				case EXCEPTIONS:
				case FORCE:
				case SEMI:
					break;
				default:
					break;
				}
				setState(1671);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EXCEPTIONS || _la==FORCE) {
					{
					setState(1670);
					dependent_exceptions_part();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dependent_exceptions_partContext extends ParserRuleContext {
		public TerminalNode EXCEPTIONS() { return getToken(OracleSQLStatementParser.EXCEPTIONS, 0); }
		public TerminalNode INTO() { return getToken(OracleSQLStatementParser.INTO, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public TerminalNode FORCE() { return getToken(OracleSQLStatementParser.FORCE, 0); }
		public Dependent_exceptions_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dependent_exceptions_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterDependent_exceptions_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitDependent_exceptions_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitDependent_exceptions_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Dependent_exceptions_partContext dependent_exceptions_part() throws RecognitionException {
		Dependent_exceptions_partContext _localctx = new Dependent_exceptions_partContext(_ctx, getState());
		enterRule(_localctx, 104, RULE_dependent_exceptions_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1676);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FORCE) {
				{
				setState(1675);
				match(FORCE);
				}
			}

			setState(1678);
			match(EXCEPTIONS);
			setState(1679);
			match(INTO);
			setState(1680);
			tableview_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_typeContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(OracleSQLStatementParser.CREATE, 0); }
		public TerminalNode TYPE() { return getToken(OracleSQLStatementParser.TYPE, 0); }
		public Type_definitionContext type_definition() {
			return getRuleContext(Type_definitionContext.class,0);
		}
		public TerminalNode OR() { return getToken(OracleSQLStatementParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(OracleSQLStatementParser.REPLACE, 0); }
		public TerminalNode SEMI() { return getToken(OracleSQLStatementParser.SEMI, 0); }
		public Create_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterCreate_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitCreate_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitCreate_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_typeContext create_type() throws RecognitionException {
		Create_typeContext _localctx = new Create_typeContext(_ctx, getState());
		enterRule(_localctx, 106, RULE_create_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1682);
			match(CREATE);
			setState(1685);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(1683);
				match(OR);
				setState(1684);
				match(REPLACE);
				}
			}

			setState(1687);
			match(TYPE);
			setState(1688);
			type_definition();
			setState(1690);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,124,_ctx) ) {
			case 1:
				{
				setState(1689);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_type_bodyContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(OracleSQLStatementParser.CREATE, 0); }
		public TerminalNode TYPE() { return getToken(OracleSQLStatementParser.TYPE, 0); }
		public Type_bodyContext type_body() {
			return getRuleContext(Type_bodyContext.class,0);
		}
		public TerminalNode OR() { return getToken(OracleSQLStatementParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(OracleSQLStatementParser.REPLACE, 0); }
		public TerminalNode SEMI() { return getToken(OracleSQLStatementParser.SEMI, 0); }
		public Create_type_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_type_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterCreate_type_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitCreate_type_body(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitCreate_type_body(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_type_bodyContext create_type_body() throws RecognitionException {
		Create_type_bodyContext _localctx = new Create_type_bodyContext(_ctx, getState());
		enterRule(_localctx, 108, RULE_create_type_body);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1692);
			match(CREATE);
			setState(1695);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(1693);
				match(OR);
				setState(1694);
				match(REPLACE);
				}
			}

			setState(1697);
			match(TYPE);
			setState(1698);
			type_body();
			setState(1700);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,126,_ctx) ) {
			case 1:
				{
				setState(1699);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_definitionContext extends ParserRuleContext {
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		public TerminalNode OID() { return getToken(OracleSQLStatementParser.OID, 0); }
		public TerminalNode CHAR_STRING() { return getToken(OracleSQLStatementParser.CHAR_STRING, 0); }
		public Object_type_defContext object_type_def() {
			return getRuleContext(Object_type_defContext.class,0);
		}
		public Type_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterType_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitType_definition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitType_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Type_definitionContext type_definition() throws RecognitionException {
		Type_definitionContext _localctx = new Type_definitionContext(_ctx, getState());
		enterRule(_localctx, 110, RULE_type_definition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1702);
			type_name();
			setState(1705);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OID) {
				{
				setState(1703);
				match(OID);
				setState(1704);
				match(CHAR_STRING);
				}
			}

			setState(1708);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS || _la==AUTHID || _la==IS || _la==UNDER) {
				{
				setState(1707);
				object_type_def();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Object_type_defContext extends ParserRuleContext {
		public Object_as_partContext object_as_part() {
			return getRuleContext(Object_as_partContext.class,0);
		}
		public Object_under_partContext object_under_part() {
			return getRuleContext(Object_under_partContext.class,0);
		}
		public Invoker_rights_clauseContext invoker_rights_clause() {
			return getRuleContext(Invoker_rights_clauseContext.class,0);
		}
		public Sqlj_object_typeContext sqlj_object_type() {
			return getRuleContext(Sqlj_object_typeContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(OracleSQLStatementParser.LEFT_PAREN, 0); }
		public List<Object_member_specContext> object_member_spec() {
			return getRuleContexts(Object_member_specContext.class);
		}
		public Object_member_specContext object_member_spec(int i) {
			return getRuleContext(Object_member_specContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(OracleSQLStatementParser.RIGHT_PAREN, 0); }
		public List<Modifier_clauseContext> modifier_clause() {
			return getRuleContexts(Modifier_clauseContext.class);
		}
		public Modifier_clauseContext modifier_clause(int i) {
			return getRuleContext(Modifier_clauseContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(OracleSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(OracleSQLStatementParser.COMMA, i);
		}
		public Object_type_defContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_object_type_def; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterObject_type_def(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitObject_type_def(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitObject_type_def(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Object_type_defContext object_type_def() throws RecognitionException {
		Object_type_defContext _localctx = new Object_type_defContext(_ctx, getState());
		enterRule(_localctx, 112, RULE_object_type_def);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1711);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTHID) {
				{
				setState(1710);
				invoker_rights_clause();
				}
			}

			setState(1715);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AS:
			case IS:
				{
				setState(1713);
				object_as_part();
				}
				break;
			case UNDER:
				{
				setState(1714);
				object_under_part();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(1718);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXTERNAL) {
				{
				setState(1717);
				sqlj_object_type();
				}
			}

			setState(1731);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,133,_ctx) ) {
			case 1:
				{
				setState(1720);
				match(LEFT_PAREN);
				setState(1721);
				object_member_spec();
				setState(1726);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1722);
					match(COMMA);
					setState(1723);
					object_member_spec();
					}
					}
					setState(1728);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1729);
				match(RIGHT_PAREN);
				}
				break;
			}
			setState(1736);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==FINAL || _la==INSTANTIABLE || _la==NOT || _la==OVERRIDING) {
				{
				{
				setState(1733);
				modifier_clause();
				}
				}
				setState(1738);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Object_as_partContext extends ParserRuleContext {
		public TerminalNode IS() { return getToken(OracleSQLStatementParser.IS, 0); }
		public TerminalNode AS() { return getToken(OracleSQLStatementParser.AS, 0); }
		public TerminalNode OBJECT() { return getToken(OracleSQLStatementParser.OBJECT, 0); }
		public Varray_type_defContext varray_type_def() {
			return getRuleContext(Varray_type_defContext.class,0);
		}
		public Nested_table_type_defContext nested_table_type_def() {
			return getRuleContext(Nested_table_type_defContext.class,0);
		}
		public Object_as_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_object_as_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterObject_as_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitObject_as_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitObject_as_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Object_as_partContext object_as_part() throws RecognitionException {
		Object_as_partContext _localctx = new Object_as_partContext(_ctx, getState());
		enterRule(_localctx, 114, RULE_object_as_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1739);
			_la = _input.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1743);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OBJECT:
				{
				setState(1740);
				match(OBJECT);
				}
				break;
			case VARRAY:
			case VARYING:
				{
				setState(1741);
				varray_type_def();
				}
				break;
			case TABLE:
				{
				setState(1742);
				nested_table_type_def();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Object_under_partContext extends ParserRuleContext {
		public TerminalNode UNDER() { return getToken(OracleSQLStatementParser.UNDER, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Object_under_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_object_under_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterObject_under_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitObject_under_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitObject_under_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Object_under_partContext object_under_part() throws RecognitionException {
		Object_under_partContext _localctx = new Object_under_partContext(_ctx, getState());
		enterRule(_localctx, 116, RULE_object_under_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1745);
			match(UNDER);
			setState(1746);
			type_spec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Nested_table_type_defContext extends ParserRuleContext {
		public TerminalNode TABLE() { return getToken(OracleSQLStatementParser.TABLE, 0); }
		public TerminalNode OF() { return getToken(OracleSQLStatementParser.OF, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode NOT() { return getToken(OracleSQLStatementParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(OracleSQLStatementParser.NULL, 0); }
		public Nested_table_type_defContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nested_table_type_def; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterNested_table_type_def(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitNested_table_type_def(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitNested_table_type_def(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Nested_table_type_defContext nested_table_type_def() throws RecognitionException {
		Nested_table_type_defContext _localctx = new Nested_table_type_defContext(_ctx, getState());
		enterRule(_localctx, 118, RULE_nested_table_type_def);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1748);
			match(TABLE);
			setState(1749);
			match(OF);
			setState(1750);
			type_spec();
			setState(1753);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,136,_ctx) ) {
			case 1:
				{
				setState(1751);
				match(NOT);
				setState(1752);
				match(NULL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sqlj_object_typeContext extends ParserRuleContext {
		public TerminalNode EXTERNAL() { return getToken(OracleSQLStatementParser.EXTERNAL, 0); }
		public TerminalNode NAME() { return getToken(OracleSQLStatementParser.NAME, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode LANGUAGE() { return getToken(OracleSQLStatementParser.LANGUAGE, 0); }
		public TerminalNode JAVA() { return getToken(OracleSQLStatementParser.JAVA, 0); }
		public TerminalNode USING() { return getToken(OracleSQLStatementParser.USING, 0); }
		public TerminalNode SQLDATA() { return getToken(OracleSQLStatementParser.SQLDATA, 0); }
		public TerminalNode CUSTOMDATUM() { return getToken(OracleSQLStatementParser.CUSTOMDATUM, 0); }
		public TerminalNode ORADATA() { return getToken(OracleSQLStatementParser.ORADATA, 0); }
		public Sqlj_object_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sqlj_object_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterSqlj_object_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitSqlj_object_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitSqlj_object_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sqlj_object_typeContext sqlj_object_type() throws RecognitionException {
		Sqlj_object_typeContext _localctx = new Sqlj_object_typeContext(_ctx, getState());
		enterRule(_localctx, 120, RULE_sqlj_object_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1755);
			match(EXTERNAL);
			setState(1756);
			match(NAME);
			setState(1757);
			expression();
			setState(1758);
			match(LANGUAGE);
			setState(1759);
			match(JAVA);
			setState(1760);
			match(USING);
			setState(1761);
			_la = _input.LA(1);
			if ( !(_la==CUSTOMDATUM || _la==ORADATA || _la==SQLDATA) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_bodyContext extends ParserRuleContext {
		public TerminalNode BODY() { return getToken(OracleSQLStatementParser.BODY, 0); }
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		public TerminalNode END() { return getToken(OracleSQLStatementParser.END, 0); }
		public TerminalNode IS() { return getToken(OracleSQLStatementParser.IS, 0); }
		public TerminalNode AS() { return getToken(OracleSQLStatementParser.AS, 0); }
		public List<Type_body_elementsContext> type_body_elements() {
			return getRuleContexts(Type_body_elementsContext.class);
		}
		public Type_body_elementsContext type_body_elements(int i) {
			return getRuleContext(Type_body_elementsContext.class,i);
		}
		public Type_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterType_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitType_body(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitType_body(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Type_bodyContext type_body() throws RecognitionException {
		Type_bodyContext _localctx = new Type_bodyContext(_ctx, getState());
		enterRule(_localctx, 122, RULE_type_body);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1763);
			match(BODY);
			setState(1764);
			type_name();
			setState(1765);
			_la = _input.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1767); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1766);
				type_body_elements();
				}
				}
				setState(1769); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==CONSTRUCTOR || ((((_la - 167)) & ~0x3f) == 0 && ((1L << (_la - 167)) & ((1L << (FINAL - 167)) | (1L << (FUNCTION - 167)) | (1L << (INSTANTIABLE - 167)))) != 0) || _la==MAP || _la==MEMBER || _la==ORDER || _la==PROCEDURE || _la==STATIC );
			setState(1771);
			match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_body_elementsContext extends ParserRuleContext {
		public Map_order_func_declarationContext map_order_func_declaration() {
			return getRuleContext(Map_order_func_declarationContext.class,0);
		}
		public Subprog_decl_in_typeContext subprog_decl_in_type() {
			return getRuleContext(Subprog_decl_in_typeContext.class,0);
		}
		public Type_body_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_body_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterType_body_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitType_body_elements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitType_body_elements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Type_body_elementsContext type_body_elements() throws RecognitionException {
		Type_body_elementsContext _localctx = new Type_body_elementsContext(_ctx, getState());
		enterRule(_localctx, 124, RULE_type_body_elements);
		try {
			setState(1775);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MAP:
			case ORDER:
				enterOuterAlt(_localctx, 1);
				{
				setState(1773);
				map_order_func_declaration();
				}
				break;
			case CONSTRUCTOR:
			case FINAL:
			case FUNCTION:
			case INSTANTIABLE:
			case MEMBER:
			case PROCEDURE:
			case STATIC:
				enterOuterAlt(_localctx, 2);
				{
				setState(1774);
				subprog_decl_in_type();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Map_order_func_declarationContext extends ParserRuleContext {
		public TerminalNode MEMBER() { return getToken(OracleSQLStatementParser.MEMBER, 0); }
		public Func_decl_in_typeContext func_decl_in_type() {
			return getRuleContext(Func_decl_in_typeContext.class,0);
		}
		public TerminalNode MAP() { return getToken(OracleSQLStatementParser.MAP, 0); }
		public TerminalNode ORDER() { return getToken(OracleSQLStatementParser.ORDER, 0); }
		public Map_order_func_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_map_order_func_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterMap_order_func_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitMap_order_func_declaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitMap_order_func_declaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Map_order_func_declarationContext map_order_func_declaration() throws RecognitionException {
		Map_order_func_declarationContext _localctx = new Map_order_func_declarationContext(_ctx, getState());
		enterRule(_localctx, 126, RULE_map_order_func_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1777);
			_la = _input.LA(1);
			if ( !(_la==MAP || _la==ORDER) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1778);
			match(MEMBER);
			setState(1779);
			func_decl_in_type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Subprog_decl_in_typeContext extends ParserRuleContext {
		public Proc_decl_in_typeContext proc_decl_in_type() {
			return getRuleContext(Proc_decl_in_typeContext.class,0);
		}
		public Func_decl_in_typeContext func_decl_in_type() {
			return getRuleContext(Func_decl_in_typeContext.class,0);
		}
		public Constructor_declarationContext constructor_declaration() {
			return getRuleContext(Constructor_declarationContext.class,0);
		}
		public TerminalNode MEMBER() { return getToken(OracleSQLStatementParser.MEMBER, 0); }
		public TerminalNode STATIC() { return getToken(OracleSQLStatementParser.STATIC, 0); }
		public Subprog_decl_in_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subprog_decl_in_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterSubprog_decl_in_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitSubprog_decl_in_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitSubprog_decl_in_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Subprog_decl_in_typeContext subprog_decl_in_type() throws RecognitionException {
		Subprog_decl_in_typeContext _localctx = new Subprog_decl_in_typeContext(_ctx, getState());
		enterRule(_localctx, 128, RULE_subprog_decl_in_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1782);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==MEMBER || _la==STATIC) {
				{
				setState(1781);
				_la = _input.LA(1);
				if ( !(_la==MEMBER || _la==STATIC) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(1787);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PROCEDURE:
				{
				setState(1784);
				proc_decl_in_type();
				}
				break;
			case FUNCTION:
				{
				setState(1785);
				func_decl_in_type();
				}
				break;
			case CONSTRUCTOR:
			case FINAL:
			case INSTANTIABLE:
				{
				setState(1786);
				constructor_declaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Proc_decl_in_typeContext extends ParserRuleContext {
		public TerminalNode PROCEDURE() { return getToken(OracleSQLStatementParser.PROCEDURE, 0); }
		public Procedure_nameContext procedure_name() {
			return getRuleContext(Procedure_nameContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(OracleSQLStatementParser.LEFT_PAREN, 0); }
		public List<ParameterContext> parameter() {
			return getRuleContexts(ParameterContext.class);
		}
		public ParameterContext parameter(int i) {
			return getRuleContext(ParameterContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(OracleSQLStatementParser.RIGHT_PAREN, 0); }
		public TerminalNode IS() { return getToken(OracleSQLStatementParser.IS, 0); }
		public TerminalNode AS() { return getToken(OracleSQLStatementParser.AS, 0); }
		public Call_specContext call_spec() {
			return getRuleContext(Call_specContext.class,0);
		}
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		public TerminalNode SEMI() { return getToken(OracleSQLStatementParser.SEMI, 0); }
		public List<TerminalNode> COMMA() { return getTokens(OracleSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(OracleSQLStatementParser.COMMA, i);
		}
		public TerminalNode DECLARE() { return getToken(OracleSQLStatementParser.DECLARE, 0); }
		public List<Declare_specContext> declare_spec() {
			return getRuleContexts(Declare_specContext.class);
		}
		public Declare_specContext declare_spec(int i) {
			return getRuleContext(Declare_specContext.class,i);
		}
		public Proc_decl_in_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_proc_decl_in_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterProc_decl_in_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitProc_decl_in_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitProc_decl_in_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Proc_decl_in_typeContext proc_decl_in_type() throws RecognitionException {
		Proc_decl_in_typeContext _localctx = new Proc_decl_in_typeContext(_ctx, getState());
		enterRule(_localctx, 130, RULE_proc_decl_in_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1789);
			match(PROCEDURE);
			setState(1790);
			procedure_name();
			setState(1791);
			match(LEFT_PAREN);
			setState(1792);
			parameter();
			setState(1797);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1793);
				match(COMMA);
				setState(1794);
				parameter();
				}
				}
				setState(1799);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1800);
			match(RIGHT_PAREN);
			setState(1801);
			_la = _input.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1815);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,144,_ctx) ) {
			case 1:
				{
				setState(1802);
				call_spec();
				}
				break;
			case 2:
				{
				setState(1804);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DECLARE) {
					{
					setState(1803);
					match(DECLARE);
					}
				}

				setState(1809);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABS) | (1L << ACOS) | (1L << ADD) | (1L << ADD_MONTHS) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASCII) | (1L << ASCIISTR) | (1L << ASIN) | (1L << ASSOCIATE) | (1L << ATAN2) | (1L << ATAN) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BFILENAME) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BIN_TO_NUM) | (1L << BITAND) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CARDINALITY) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CEIL) | (1L << CHARACTER) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARTOROWID) | (1L << CHR) | (1L << C_LETTER))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOSE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONCAT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COS - 64)) | (1L << (COSH - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_DATE - 64)) | (1L << (CURRENT_TIMESTAMP - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (DIMENSION - 128)) | (1L << (DISABLE - 128)) | (1L << (DISASSOCIATE - 128)) | (1L << (DOCUMENT - 128)) | (1L << (DOUBLE - 128)) | (1L << (DSINTERVAL_UNCONSTRAINED - 128)) | (1L << (DUMP - 128)) | (1L << (EACH - 128)) | (1L << (ELEMENT - 128)) | (1L << (EMPTY_BLOB - 128)) | (1L << (EMPTY_CLOB - 128)) | (1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERR - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXP - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FLOOR - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FROM_TZ - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUP_ID - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HEXTORAW - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (IGNORE - 193)) | (1L << (IMMEDIATE - 193)) | (1L << (INCLUDE - 193)) | (1L << (INCLUDING - 193)) | (1L << (INCREMENT - 193)) | (1L << (INDENT - 193)) | (1L << (INDEXED - 193)) | (1L << (INDICATOR - 193)) | (1L << (INDICES - 193)) | (1L << (INFINITE - 193)) | (1L << (INITCAP - 193)) | (1L << (INLINE - 193)) | (1L << (INNER - 193)) | (1L << (INOUT - 193)) | (1L << (INSTANTIABLE - 193)) | (1L << (INSTEAD - 193)) | (1L << (INSTR2 - 193)) | (1L << (INSTR4 - 193)) | (1L << (INSTRB - 193)) | (1L << (INSTRC - 193)) | (1L << (INSTR - 193)) | (1L << (INTERFACE - 193)) | (1L << (INTEGER - 193)) | (1L << (INTERVAL - 193)) | (1L << (INT - 193)) | (1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (KEY - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST_DAY - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LENGTH2 - 193)) | (1L << (LENGTH4 - 193)) | (1L << (LENGTHB - 193)) | (1L << (LENGTHC - 193)) | (1L << (LENGTH - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LN - 193)) | (1L << (LNNVL - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCALTIMESTAMP - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (LOGON - 257)) | (1L << (LONG - 257)) | (1L << (LOOP - 257)) | (1L << (LOWER - 257)) | (1L << (LPAD - 257)) | (1L << (LTRIM - 257)) | (1L << (MAIN - 257)) | (1L << (MAP - 257)) | (1L << (MATCHED - 257)) | (1L << (MAXVALUE - 257)) | (1L << (MEASURES - 257)) | (1L << (MEMBER - 257)) | (1L << (MERGE - 257)) | (1L << (MINUTE - 257)) | (1L << (MINVALUE - 257)) | (1L << (MLSLABEL - 257)) | (1L << (MODEL - 257)) | (1L << (MODIFY - 257)) | (1L << (MOD - 257)) | (1L << (MONTH - 257)) | (1L << (MONTHS_BETWEEN - 257)) | (1L << (MULTISET - 257)) | (1L << (NAME - 257)) | (1L << (NAN - 257)) | (1L << (NANVL - 257)) | (1L << (NATURAL - 257)) | (1L << (NATURALN - 257)) | (1L << (NAV - 257)) | (1L << (NCHAR_CS - 257)) | (1L << (NCHAR - 257)) | (1L << (NCHR - 257)) | (1L << (NCLOB - 257)) | (1L << (NESTED - 257)) | (1L << (NEW - 257)) | (1L << (NEW_TIME - 257)) | (1L << (NEXT_DAY - 257)) | (1L << (NOAUDIT - 257)) | (1L << (NOCOPY - 257)) | (1L << (NOCYCLE - 257)) | (1L << (NOENTITYESCAPING - 257)) | (1L << (NONE - 257)) | (1L << (NO - 257)) | (1L << (NOSCHEMACHECK - 257)) | (1L << (NULLIF - 257)) | (1L << (NULLS - 257)) | (1L << (NUMBER - 257)) | (1L << (NUMERIC - 257)) | (1L << (NUMTODSINTERVAL - 257)) | (1L << (NUMTOYMINTERVAL - 257)) | (1L << (NVARCHAR2 - 257)) | (1L << (NVL2 - 257)) | (1L << (OBJECT - 257)) | (1L << (OFF - 257)))) != 0) || ((((_la - 321)) & ~0x3f) == 0 && ((1L << (_la - 321)) & ((1L << (OID - 321)) | (1L << (OLD - 321)) | (1L << (ONLY - 321)) | (1L << (OPAQUE - 321)) | (1L << (OPEN - 321)) | (1L << (ORADATA - 321)) | (1L << (ORDINALITY - 321)) | (1L << (OSERROR - 321)) | (1L << (OUTER - 321)) | (1L << (OUT - 321)) | (1L << (OVER - 321)) | (1L << (OVERRIDING - 321)) | (1L << (PACKAGE - 321)) | (1L << (PARALLEL_ENABLE - 321)) | (1L << (PARAMETERS - 321)) | (1L << (PARENT - 321)) | (1L << (PARTITION - 321)) | (1L << (PASSING - 321)) | (1L << (PATH - 321)) | (1L << (PIPELINED - 321)) | (1L << (PLAN - 321)) | (1L << (PLS_INTEGER - 321)) | (1L << (POSITIVEN - 321)) | (1L << (POSITIVE - 321)) | (1L << (POWER - 321)) | (1L << (PRAGMA - 321)) | (1L << (PRECEDING - 321)) | (1L << (PRECISION - 321)) | (1L << (PRESENT - 321)) | (1L << (PRIOR - 321)) | (1L << (PROCEDURE - 321)) | (1L << (RAISE - 321)) | (1L << (RANGE - 321)) | (1L << (RAW - 321)) | (1L << (RAWTOHEX - 321)) | (1L << (READ - 321)) | (1L << (REAL - 321)) | (1L << (RECORD - 321)) | (1L << (REFERENCE - 321)) | (1L << (REFERENCING - 321)) | (1L << (REF - 321)) | (1L << (REGEXP_COUNT - 321)) | (1L << (REGEXP_INSTR - 321)) | (1L << (REGEXP_REPLACE - 321)) | (1L << (REGEXP_SUBSTR - 321)) | (1L << (REJECT - 321)) | (1L << (RELIES_ON - 321)) | (1L << (REMAINDER - 321)))) != 0) || ((((_la - 385)) & ~0x3f) == 0 && ((1L << (_la - 385)) & ((1L << (RENAME - 385)) | (1L << (REPLACE - 385)) | (1L << (RESPECT - 385)) | (1L << (RESTRICT_REFERENCES - 385)) | (1L << (RESULT_CACHE - 385)) | (1L << (RESULT - 385)) | (1L << (RETURNING - 385)) | (1L << (RETURN - 385)) | (1L << (REUSE - 385)) | (1L << (REVERSE - 385)) | (1L << (RIGHT - 385)) | (1L << (ROLLBACK - 385)) | (1L << (ROLLUP - 385)) | (1L << (ROWID - 385)) | (1L << (ROWNUM - 385)) | (1L << (ROW - 385)) | (1L << (ROWS - 385)) | (1L << (RPAD - 385)) | (1L << (RTRIM - 385)) | (1L << (RULES - 385)) | (1L << (SAMPLE - 385)) | (1L << (SAVEPOINT - 385)) | (1L << (SAVE - 385)) | (1L << (SCHEMACHECK - 385)) | (1L << (SCHEMA - 385)) | (1L << (SCN - 385)) | (1L << (SECOND - 385)) | (1L << (SEED - 385)) | (1L << (SEGMENT - 385)) | (1L << (SELF - 385)) | (1L << (SEQUENTIAL - 385)) | (1L << (SERIALIZABLE - 385)) | (1L << (SERIALLY_REUSABLE - 385)) | (1L << (SERVERERROR - 385)) | (1L << (SESSIONTIMEZONE - 385)) | (1L << (SET - 385)) | (1L << (SETS - 385)) | (1L << (SETTINGS - 385)) | (1L << (SHOW - 385)) | (1L << (SHUTDOWN - 385)) | (1L << (SIBLINGS - 385)) | (1L << (SIGN - 385)) | (1L << (SIGNTYPE - 385)) | (1L << (SIMPLE_INTEGER - 385)) | (1L << (SINGLE - 385)) | (1L << (SINH - 385)) | (1L << (SIN - 385)) | (1L << (SKIP_ - 385)) | (1L << (SMALLINT - 385)) | (1L << (SNAPSHOT - 385)) | (1L << (SOME - 385)) | (1L << (SOUNDEX - 385)) | (1L << (SPECIFICATION - 385)) | (1L << (SQLDATA - 385)) | (1L << (SQLERROR - 385)) | (1L << (SQRT - 385)) | (1L << (STANDALONE - 385)))) != 0) || ((((_la - 449)) & ~0x3f) == 0 && ((1L << (_la - 449)) & ((1L << (STARTUP - 449)) | (1L << (STATEMENT_ID - 449)) | (1L << (STATEMENT - 449)) | (1L << (STATIC - 449)) | (1L << (STATISTICS - 449)) | (1L << (STRING - 449)) | (1L << (SUBMULTISET - 449)) | (1L << (SUBPARTITION - 449)) | (1L << (SUBSTITUTABLE - 449)) | (1L << (SUBTYPE - 449)) | (1L << (SUCCESS - 449)) | (1L << (SUSPEND - 449)) | (1L << (SYS_CONTEXT - 449)) | (1L << (SYSDATE - 449)) | (1L << (SYSTIMESTAMP - 449)) | (1L << (TANH - 449)) | (1L << (TAN - 449)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 449)) | (1L << (TIMESTAMP - 449)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 449)) | (1L << (TIMESTAMP_UNCONSTRAINED - 449)) | (1L << (TIME - 449)) | (1L << (TIMEZONE_ABBR - 449)) | (1L << (TIMEZONE_HOUR - 449)) | (1L << (TIMEZONE_MINUTE - 449)) | (1L << (TIMEZONE_REGION - 449)) | (1L << (TO_CLOB - 449)) | (1L << (TO_DSINTERVAL - 449)) | (1L << (TO_LOB - 449)) | (1L << (TO_MULTI_BYTE - 449)) | (1L << (TO_NCLOB - 449)) | (1L << (TO_NUMBER - 449)) | (1L << (TO_SINGLE_BYTE - 449)) | (1L << (TO_TIMESTAMP - 449)) | (1L << (TO_TIMESTAMP_TZ - 449)) | (1L << (TO_YMINTERVAL - 449)) | (1L << (TRAILING - 449)) | (1L << (TRANSACTION - 449)) | (1L << (TRANSLATE - 449)) | (1L << (TREAT - 449)) | (1L << (TRIGGER - 449)) | (1L << (TRUNCATE - 449)) | (1L << (TRUNC - 449)) | (1L << (TYPE - 449)) | (1L << (TZ_OFFSET - 449)) | (1L << (UID - 449)) | (1L << (UNBOUNDED - 449)) | (1L << (UNDER - 449)) | (1L << (UNLIMITED - 449)) | (1L << (UNTIL - 449)) | (1L << (UPDATED - 449)))) != 0) || ((((_la - 513)) & ~0x3f) == 0 && ((1L << (_la - 513)) & ((1L << (UPPER - 513)) | (1L << (UPSERT - 513)) | (1L << (UROWID - 513)) | (1L << (USERENV - 513)) | (1L << (USER - 513)) | (1L << (USE - 513)) | (1L << (VALIDATE - 513)) | (1L << (VALUE - 513)) | (1L << (VARCHAR2 - 513)) | (1L << (VARCHAR - 513)) | (1L << (VARIABLE - 513)) | (1L << (VARRAY - 513)) | (1L << (VARYING - 513)) | (1L << (VERSIONS - 513)) | (1L << (VERSION - 513)) | (1L << (VSIZE - 513)) | (1L << (WAIT - 513)) | (1L << (WARNING - 513)) | (1L << (WELLFORMED - 513)) | (1L << (WHENEVER - 513)) | (1L << (WHILE - 513)) | (1L << (WITHIN - 513)) | (1L << (WORK - 513)) | (1L << (WRITE - 513)) | (1L << (XMLAGG - 513)) | (1L << (XMLATTRIBUTES - 513)) | (1L << (XMLCAST - 513)) | (1L << (XMLCOLATTVAL - 513)) | (1L << (XMLELEMENT - 513)) | (1L << (XMLEXISTS - 513)) | (1L << (XMLFOREST - 513)) | (1L << (XMLNAMESPACES - 513)) | (1L << (XMLPARSE - 513)) | (1L << (XMLPI - 513)) | (1L << (XMLQUERY - 513)) | (1L << (XMLROOT - 513)) | (1L << (XMLSERIALIZE - 513)) | (1L << (XMLTABLE - 513)) | (1L << (XML - 513)) | (1L << (YEAR - 513)) | (1L << (YES - 513)) | (1L << (YMINTERVAL_UNCONSTRAINED - 513)) | (1L << (ZONE - 513)) | (1L << (PREDICTION - 513)) | (1L << (PREDICTION_BOUNDS - 513)) | (1L << (PREDICTION_COST - 513)) | (1L << (PREDICTION_DETAILS - 513)) | (1L << (PREDICTION_PROBABILITY - 513)) | (1L << (PREDICTION_SET - 513)) | (1L << (CUME_DIST - 513)) | (1L << (DENSE_RANK - 513)) | (1L << (LISTAGG - 513)) | (1L << (PERCENT_RANK - 513)) | (1L << (PERCENTILE_CONT - 513)) | (1L << (PERCENTILE_DISC - 513)) | (1L << (RANK - 513)))) != 0) || ((((_la - 577)) & ~0x3f) == 0 && ((1L << (_la - 577)) & ((1L << (AVG - 577)) | (1L << (CORR - 577)) | (1L << (COVAR_ - 577)) | (1L << (DECODE - 577)) | (1L << (LAG - 577)) | (1L << (LEAD - 577)) | (1L << (MAX - 577)) | (1L << (MEDIAN - 577)) | (1L << (MIN - 577)) | (1L << (NTILE - 577)) | (1L << (NVL - 577)) | (1L << (RATIO_TO_REPORT - 577)) | (1L << (REGR_ - 577)) | (1L << (ROUND - 577)) | (1L << (ROW_NUMBER - 577)) | (1L << (SUBSTR - 577)) | (1L << (TO_CHAR - 577)) | (1L << (TRIM - 577)) | (1L << (SUM - 577)) | (1L << (STDDEV - 577)) | (1L << (VAR_ - 577)) | (1L << (VARIANCE - 577)) | (1L << (LEAST - 577)) | (1L << (GREATEST - 577)) | (1L << (TO_DATE - 577)) | (1L << (DELIMITED_ID - 577)) | (1L << (ASTERISK - 577)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
					{
					{
					setState(1806);
					declare_spec();
					}
					}
					setState(1811);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1812);
				body();
				setState(1813);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_decl_in_typeContext extends ParserRuleContext {
		public TerminalNode FUNCTION() { return getToken(OracleSQLStatementParser.FUNCTION, 0); }
		public Function_nameContext function_name() {
			return getRuleContext(Function_nameContext.class,0);
		}
		public TerminalNode RETURN() { return getToken(OracleSQLStatementParser.RETURN, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode IS() { return getToken(OracleSQLStatementParser.IS, 0); }
		public TerminalNode AS() { return getToken(OracleSQLStatementParser.AS, 0); }
		public Call_specContext call_spec() {
			return getRuleContext(Call_specContext.class,0);
		}
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		public TerminalNode SEMI() { return getToken(OracleSQLStatementParser.SEMI, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(OracleSQLStatementParser.LEFT_PAREN, 0); }
		public List<ParameterContext> parameter() {
			return getRuleContexts(ParameterContext.class);
		}
		public ParameterContext parameter(int i) {
			return getRuleContext(ParameterContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(OracleSQLStatementParser.RIGHT_PAREN, 0); }
		public TerminalNode DECLARE() { return getToken(OracleSQLStatementParser.DECLARE, 0); }
		public List<Declare_specContext> declare_spec() {
			return getRuleContexts(Declare_specContext.class);
		}
		public Declare_specContext declare_spec(int i) {
			return getRuleContext(Declare_specContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(OracleSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(OracleSQLStatementParser.COMMA, i);
		}
		public Func_decl_in_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_decl_in_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterFunc_decl_in_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitFunc_decl_in_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitFunc_decl_in_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_decl_in_typeContext func_decl_in_type() throws RecognitionException {
		Func_decl_in_typeContext _localctx = new Func_decl_in_typeContext(_ctx, getState());
		enterRule(_localctx, 132, RULE_func_decl_in_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1817);
			match(FUNCTION);
			setState(1818);
			function_name();
			setState(1830);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(1819);
				match(LEFT_PAREN);
				setState(1820);
				parameter();
				setState(1825);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1821);
					match(COMMA);
					setState(1822);
					parameter();
					}
					}
					setState(1827);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1828);
				match(RIGHT_PAREN);
				}
			}

			setState(1832);
			match(RETURN);
			setState(1833);
			type_spec();
			setState(1834);
			_la = _input.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1848);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,149,_ctx) ) {
			case 1:
				{
				setState(1835);
				call_spec();
				}
				break;
			case 2:
				{
				setState(1837);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DECLARE) {
					{
					setState(1836);
					match(DECLARE);
					}
				}

				setState(1842);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABS) | (1L << ACOS) | (1L << ADD) | (1L << ADD_MONTHS) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASCII) | (1L << ASCIISTR) | (1L << ASIN) | (1L << ASSOCIATE) | (1L << ATAN2) | (1L << ATAN) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BFILENAME) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BIN_TO_NUM) | (1L << BITAND) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CARDINALITY) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CEIL) | (1L << CHARACTER) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARTOROWID) | (1L << CHR) | (1L << C_LETTER))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOSE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONCAT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COS - 64)) | (1L << (COSH - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_DATE - 64)) | (1L << (CURRENT_TIMESTAMP - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (DIMENSION - 128)) | (1L << (DISABLE - 128)) | (1L << (DISASSOCIATE - 128)) | (1L << (DOCUMENT - 128)) | (1L << (DOUBLE - 128)) | (1L << (DSINTERVAL_UNCONSTRAINED - 128)) | (1L << (DUMP - 128)) | (1L << (EACH - 128)) | (1L << (ELEMENT - 128)) | (1L << (EMPTY_BLOB - 128)) | (1L << (EMPTY_CLOB - 128)) | (1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERR - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXP - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FLOOR - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FROM_TZ - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUP_ID - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HEXTORAW - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (IGNORE - 193)) | (1L << (IMMEDIATE - 193)) | (1L << (INCLUDE - 193)) | (1L << (INCLUDING - 193)) | (1L << (INCREMENT - 193)) | (1L << (INDENT - 193)) | (1L << (INDEXED - 193)) | (1L << (INDICATOR - 193)) | (1L << (INDICES - 193)) | (1L << (INFINITE - 193)) | (1L << (INITCAP - 193)) | (1L << (INLINE - 193)) | (1L << (INNER - 193)) | (1L << (INOUT - 193)) | (1L << (INSTANTIABLE - 193)) | (1L << (INSTEAD - 193)) | (1L << (INSTR2 - 193)) | (1L << (INSTR4 - 193)) | (1L << (INSTRB - 193)) | (1L << (INSTRC - 193)) | (1L << (INSTR - 193)) | (1L << (INTERFACE - 193)) | (1L << (INTEGER - 193)) | (1L << (INTERVAL - 193)) | (1L << (INT - 193)) | (1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (KEY - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST_DAY - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LENGTH2 - 193)) | (1L << (LENGTH4 - 193)) | (1L << (LENGTHB - 193)) | (1L << (LENGTHC - 193)) | (1L << (LENGTH - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LN - 193)) | (1L << (LNNVL - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCALTIMESTAMP - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (LOGON - 257)) | (1L << (LONG - 257)) | (1L << (LOOP - 257)) | (1L << (LOWER - 257)) | (1L << (LPAD - 257)) | (1L << (LTRIM - 257)) | (1L << (MAIN - 257)) | (1L << (MAP - 257)) | (1L << (MATCHED - 257)) | (1L << (MAXVALUE - 257)) | (1L << (MEASURES - 257)) | (1L << (MEMBER - 257)) | (1L << (MERGE - 257)) | (1L << (MINUTE - 257)) | (1L << (MINVALUE - 257)) | (1L << (MLSLABEL - 257)) | (1L << (MODEL - 257)) | (1L << (MODIFY - 257)) | (1L << (MOD - 257)) | (1L << (MONTH - 257)) | (1L << (MONTHS_BETWEEN - 257)) | (1L << (MULTISET - 257)) | (1L << (NAME - 257)) | (1L << (NAN - 257)) | (1L << (NANVL - 257)) | (1L << (NATURAL - 257)) | (1L << (NATURALN - 257)) | (1L << (NAV - 257)) | (1L << (NCHAR_CS - 257)) | (1L << (NCHAR - 257)) | (1L << (NCHR - 257)) | (1L << (NCLOB - 257)) | (1L << (NESTED - 257)) | (1L << (NEW - 257)) | (1L << (NEW_TIME - 257)) | (1L << (NEXT_DAY - 257)) | (1L << (NOAUDIT - 257)) | (1L << (NOCOPY - 257)) | (1L << (NOCYCLE - 257)) | (1L << (NOENTITYESCAPING - 257)) | (1L << (NONE - 257)) | (1L << (NO - 257)) | (1L << (NOSCHEMACHECK - 257)) | (1L << (NULLIF - 257)) | (1L << (NULLS - 257)) | (1L << (NUMBER - 257)) | (1L << (NUMERIC - 257)) | (1L << (NUMTODSINTERVAL - 257)) | (1L << (NUMTOYMINTERVAL - 257)) | (1L << (NVARCHAR2 - 257)) | (1L << (NVL2 - 257)) | (1L << (OBJECT - 257)) | (1L << (OFF - 257)))) != 0) || ((((_la - 321)) & ~0x3f) == 0 && ((1L << (_la - 321)) & ((1L << (OID - 321)) | (1L << (OLD - 321)) | (1L << (ONLY - 321)) | (1L << (OPAQUE - 321)) | (1L << (OPEN - 321)) | (1L << (ORADATA - 321)) | (1L << (ORDINALITY - 321)) | (1L << (OSERROR - 321)) | (1L << (OUTER - 321)) | (1L << (OUT - 321)) | (1L << (OVER - 321)) | (1L << (OVERRIDING - 321)) | (1L << (PACKAGE - 321)) | (1L << (PARALLEL_ENABLE - 321)) | (1L << (PARAMETERS - 321)) | (1L << (PARENT - 321)) | (1L << (PARTITION - 321)) | (1L << (PASSING - 321)) | (1L << (PATH - 321)) | (1L << (PIPELINED - 321)) | (1L << (PLAN - 321)) | (1L << (PLS_INTEGER - 321)) | (1L << (POSITIVEN - 321)) | (1L << (POSITIVE - 321)) | (1L << (POWER - 321)) | (1L << (PRAGMA - 321)) | (1L << (PRECEDING - 321)) | (1L << (PRECISION - 321)) | (1L << (PRESENT - 321)) | (1L << (PRIOR - 321)) | (1L << (PROCEDURE - 321)) | (1L << (RAISE - 321)) | (1L << (RANGE - 321)) | (1L << (RAW - 321)) | (1L << (RAWTOHEX - 321)) | (1L << (READ - 321)) | (1L << (REAL - 321)) | (1L << (RECORD - 321)) | (1L << (REFERENCE - 321)) | (1L << (REFERENCING - 321)) | (1L << (REF - 321)) | (1L << (REGEXP_COUNT - 321)) | (1L << (REGEXP_INSTR - 321)) | (1L << (REGEXP_REPLACE - 321)) | (1L << (REGEXP_SUBSTR - 321)) | (1L << (REJECT - 321)) | (1L << (RELIES_ON - 321)) | (1L << (REMAINDER - 321)))) != 0) || ((((_la - 385)) & ~0x3f) == 0 && ((1L << (_la - 385)) & ((1L << (RENAME - 385)) | (1L << (REPLACE - 385)) | (1L << (RESPECT - 385)) | (1L << (RESTRICT_REFERENCES - 385)) | (1L << (RESULT_CACHE - 385)) | (1L << (RESULT - 385)) | (1L << (RETURNING - 385)) | (1L << (RETURN - 385)) | (1L << (REUSE - 385)) | (1L << (REVERSE - 385)) | (1L << (RIGHT - 385)) | (1L << (ROLLBACK - 385)) | (1L << (ROLLUP - 385)) | (1L << (ROWID - 385)) | (1L << (ROWNUM - 385)) | (1L << (ROW - 385)) | (1L << (ROWS - 385)) | (1L << (RPAD - 385)) | (1L << (RTRIM - 385)) | (1L << (RULES - 385)) | (1L << (SAMPLE - 385)) | (1L << (SAVEPOINT - 385)) | (1L << (SAVE - 385)) | (1L << (SCHEMACHECK - 385)) | (1L << (SCHEMA - 385)) | (1L << (SCN - 385)) | (1L << (SECOND - 385)) | (1L << (SEED - 385)) | (1L << (SEGMENT - 385)) | (1L << (SELF - 385)) | (1L << (SEQUENTIAL - 385)) | (1L << (SERIALIZABLE - 385)) | (1L << (SERIALLY_REUSABLE - 385)) | (1L << (SERVERERROR - 385)) | (1L << (SESSIONTIMEZONE - 385)) | (1L << (SET - 385)) | (1L << (SETS - 385)) | (1L << (SETTINGS - 385)) | (1L << (SHOW - 385)) | (1L << (SHUTDOWN - 385)) | (1L << (SIBLINGS - 385)) | (1L << (SIGN - 385)) | (1L << (SIGNTYPE - 385)) | (1L << (SIMPLE_INTEGER - 385)) | (1L << (SINGLE - 385)) | (1L << (SINH - 385)) | (1L << (SIN - 385)) | (1L << (SKIP_ - 385)) | (1L << (SMALLINT - 385)) | (1L << (SNAPSHOT - 385)) | (1L << (SOME - 385)) | (1L << (SOUNDEX - 385)) | (1L << (SPECIFICATION - 385)) | (1L << (SQLDATA - 385)) | (1L << (SQLERROR - 385)) | (1L << (SQRT - 385)) | (1L << (STANDALONE - 385)))) != 0) || ((((_la - 449)) & ~0x3f) == 0 && ((1L << (_la - 449)) & ((1L << (STARTUP - 449)) | (1L << (STATEMENT_ID - 449)) | (1L << (STATEMENT - 449)) | (1L << (STATIC - 449)) | (1L << (STATISTICS - 449)) | (1L << (STRING - 449)) | (1L << (SUBMULTISET - 449)) | (1L << (SUBPARTITION - 449)) | (1L << (SUBSTITUTABLE - 449)) | (1L << (SUBTYPE - 449)) | (1L << (SUCCESS - 449)) | (1L << (SUSPEND - 449)) | (1L << (SYS_CONTEXT - 449)) | (1L << (SYSDATE - 449)) | (1L << (SYSTIMESTAMP - 449)) | (1L << (TANH - 449)) | (1L << (TAN - 449)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 449)) | (1L << (TIMESTAMP - 449)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 449)) | (1L << (TIMESTAMP_UNCONSTRAINED - 449)) | (1L << (TIME - 449)) | (1L << (TIMEZONE_ABBR - 449)) | (1L << (TIMEZONE_HOUR - 449)) | (1L << (TIMEZONE_MINUTE - 449)) | (1L << (TIMEZONE_REGION - 449)) | (1L << (TO_CLOB - 449)) | (1L << (TO_DSINTERVAL - 449)) | (1L << (TO_LOB - 449)) | (1L << (TO_MULTI_BYTE - 449)) | (1L << (TO_NCLOB - 449)) | (1L << (TO_NUMBER - 449)) | (1L << (TO_SINGLE_BYTE - 449)) | (1L << (TO_TIMESTAMP - 449)) | (1L << (TO_TIMESTAMP_TZ - 449)) | (1L << (TO_YMINTERVAL - 449)) | (1L << (TRAILING - 449)) | (1L << (TRANSACTION - 449)) | (1L << (TRANSLATE - 449)) | (1L << (TREAT - 449)) | (1L << (TRIGGER - 449)) | (1L << (TRUNCATE - 449)) | (1L << (TRUNC - 449)) | (1L << (TYPE - 449)) | (1L << (TZ_OFFSET - 449)) | (1L << (UID - 449)) | (1L << (UNBOUNDED - 449)) | (1L << (UNDER - 449)) | (1L << (UNLIMITED - 449)) | (1L << (UNTIL - 449)) | (1L << (UPDATED - 449)))) != 0) || ((((_la - 513)) & ~0x3f) == 0 && ((1L << (_la - 513)) & ((1L << (UPPER - 513)) | (1L << (UPSERT - 513)) | (1L << (UROWID - 513)) | (1L << (USERENV - 513)) | (1L << (USER - 513)) | (1L << (USE - 513)) | (1L << (VALIDATE - 513)) | (1L << (VALUE - 513)) | (1L << (VARCHAR2 - 513)) | (1L << (VARCHAR - 513)) | (1L << (VARIABLE - 513)) | (1L << (VARRAY - 513)) | (1L << (VARYING - 513)) | (1L << (VERSIONS - 513)) | (1L << (VERSION - 513)) | (1L << (VSIZE - 513)) | (1L << (WAIT - 513)) | (1L << (WARNING - 513)) | (1L << (WELLFORMED - 513)) | (1L << (WHENEVER - 513)) | (1L << (WHILE - 513)) | (1L << (WITHIN - 513)) | (1L << (WORK - 513)) | (1L << (WRITE - 513)) | (1L << (XMLAGG - 513)) | (1L << (XMLATTRIBUTES - 513)) | (1L << (XMLCAST - 513)) | (1L << (XMLCOLATTVAL - 513)) | (1L << (XMLELEMENT - 513)) | (1L << (XMLEXISTS - 513)) | (1L << (XMLFOREST - 513)) | (1L << (XMLNAMESPACES - 513)) | (1L << (XMLPARSE - 513)) | (1L << (XMLPI - 513)) | (1L << (XMLQUERY - 513)) | (1L << (XMLROOT - 513)) | (1L << (XMLSERIALIZE - 513)) | (1L << (XMLTABLE - 513)) | (1L << (XML - 513)) | (1L << (YEAR - 513)) | (1L << (YES - 513)) | (1L << (YMINTERVAL_UNCONSTRAINED - 513)) | (1L << (ZONE - 513)) | (1L << (PREDICTION - 513)) | (1L << (PREDICTION_BOUNDS - 513)) | (1L << (PREDICTION_COST - 513)) | (1L << (PREDICTION_DETAILS - 513)) | (1L << (PREDICTION_PROBABILITY - 513)) | (1L << (PREDICTION_SET - 513)) | (1L << (CUME_DIST - 513)) | (1L << (DENSE_RANK - 513)) | (1L << (LISTAGG - 513)) | (1L << (PERCENT_RANK - 513)) | (1L << (PERCENTILE_CONT - 513)) | (1L << (PERCENTILE_DISC - 513)) | (1L << (RANK - 513)))) != 0) || ((((_la - 577)) & ~0x3f) == 0 && ((1L << (_la - 577)) & ((1L << (AVG - 577)) | (1L << (CORR - 577)) | (1L << (COVAR_ - 577)) | (1L << (DECODE - 577)) | (1L << (LAG - 577)) | (1L << (LEAD - 577)) | (1L << (MAX - 577)) | (1L << (MEDIAN - 577)) | (1L << (MIN - 577)) | (1L << (NTILE - 577)) | (1L << (NVL - 577)) | (1L << (RATIO_TO_REPORT - 577)) | (1L << (REGR_ - 577)) | (1L << (ROUND - 577)) | (1L << (ROW_NUMBER - 577)) | (1L << (SUBSTR - 577)) | (1L << (TO_CHAR - 577)) | (1L << (TRIM - 577)) | (1L << (SUM - 577)) | (1L << (STDDEV - 577)) | (1L << (VAR_ - 577)) | (1L << (VARIANCE - 577)) | (1L << (LEAST - 577)) | (1L << (GREATEST - 577)) | (1L << (TO_DATE - 577)) | (1L << (DELIMITED_ID - 577)) | (1L << (ASTERISK - 577)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
					{
					{
					setState(1839);
					declare_spec();
					}
					}
					setState(1844);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1845);
				body();
				setState(1846);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Constructor_declarationContext extends ParserRuleContext {
		public TerminalNode CONSTRUCTOR() { return getToken(OracleSQLStatementParser.CONSTRUCTOR, 0); }
		public TerminalNode FUNCTION() { return getToken(OracleSQLStatementParser.FUNCTION, 0); }
		public Constructor_nameContext constructor_name() {
			return getRuleContext(Constructor_nameContext.class,0);
		}
		public TerminalNode RETURN() { return getToken(OracleSQLStatementParser.RETURN, 0); }
		public List<TerminalNode> SELF() { return getTokens(OracleSQLStatementParser.SELF); }
		public TerminalNode SELF(int i) {
			return getToken(OracleSQLStatementParser.SELF, i);
		}
		public List<TerminalNode> AS() { return getTokens(OracleSQLStatementParser.AS); }
		public TerminalNode AS(int i) {
			return getToken(OracleSQLStatementParser.AS, i);
		}
		public TerminalNode RESULT() { return getToken(OracleSQLStatementParser.RESULT, 0); }
		public TerminalNode IS() { return getToken(OracleSQLStatementParser.IS, 0); }
		public Call_specContext call_spec() {
			return getRuleContext(Call_specContext.class,0);
		}
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		public TerminalNode SEMI() { return getToken(OracleSQLStatementParser.SEMI, 0); }
		public TerminalNode FINAL() { return getToken(OracleSQLStatementParser.FINAL, 0); }
		public TerminalNode INSTANTIABLE() { return getToken(OracleSQLStatementParser.INSTANTIABLE, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(OracleSQLStatementParser.LEFT_PAREN, 0); }
		public List<ParameterContext> parameter() {
			return getRuleContexts(ParameterContext.class);
		}
		public ParameterContext parameter(int i) {
			return getRuleContext(ParameterContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(OracleSQLStatementParser.RIGHT_PAREN, 0); }
		public TerminalNode DECLARE() { return getToken(OracleSQLStatementParser.DECLARE, 0); }
		public List<Declare_specContext> declare_spec() {
			return getRuleContexts(Declare_specContext.class);
		}
		public Declare_specContext declare_spec(int i) {
			return getRuleContext(Declare_specContext.class,i);
		}
		public TerminalNode IN() { return getToken(OracleSQLStatementParser.IN, 0); }
		public TerminalNode OUT() { return getToken(OracleSQLStatementParser.OUT, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(OracleSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(OracleSQLStatementParser.COMMA, i);
		}
		public Constructor_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constructor_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterConstructor_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitConstructor_declaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitConstructor_declaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Constructor_declarationContext constructor_declaration() throws RecognitionException {
		Constructor_declarationContext _localctx = new Constructor_declarationContext(_ctx, getState());
		enterRule(_localctx, 134, RULE_constructor_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1851);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FINAL) {
				{
				setState(1850);
				match(FINAL);
				}
			}

			setState(1854);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INSTANTIABLE) {
				{
				setState(1853);
				match(INSTANTIABLE);
				}
			}

			setState(1856);
			match(CONSTRUCTOR);
			setState(1857);
			match(FUNCTION);
			setState(1858);
			constructor_name();
			setState(1878);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(1859);
				match(LEFT_PAREN);
				setState(1866);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,152,_ctx) ) {
				case 1:
					{
					setState(1860);
					match(SELF);
					setState(1861);
					match(IN);
					setState(1862);
					match(OUT);
					setState(1863);
					type_spec();
					setState(1864);
					match(COMMA);
					}
					break;
				}
				setState(1868);
				parameter();
				setState(1873);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1869);
					match(COMMA);
					setState(1870);
					parameter();
					}
					}
					setState(1875);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1876);
				match(RIGHT_PAREN);
				}
			}

			setState(1880);
			match(RETURN);
			setState(1881);
			match(SELF);
			setState(1882);
			match(AS);
			setState(1883);
			match(RESULT);
			setState(1884);
			_la = _input.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1898);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,157,_ctx) ) {
			case 1:
				{
				setState(1885);
				call_spec();
				}
				break;
			case 2:
				{
				setState(1887);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DECLARE) {
					{
					setState(1886);
					match(DECLARE);
					}
				}

				setState(1892);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABS) | (1L << ACOS) | (1L << ADD) | (1L << ADD_MONTHS) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASCII) | (1L << ASCIISTR) | (1L << ASIN) | (1L << ASSOCIATE) | (1L << ATAN2) | (1L << ATAN) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BFILENAME) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BIN_TO_NUM) | (1L << BITAND) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CARDINALITY) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CEIL) | (1L << CHARACTER) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARTOROWID) | (1L << CHR) | (1L << C_LETTER))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOSE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONCAT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COS - 64)) | (1L << (COSH - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_DATE - 64)) | (1L << (CURRENT_TIMESTAMP - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (DIMENSION - 128)) | (1L << (DISABLE - 128)) | (1L << (DISASSOCIATE - 128)) | (1L << (DOCUMENT - 128)) | (1L << (DOUBLE - 128)) | (1L << (DSINTERVAL_UNCONSTRAINED - 128)) | (1L << (DUMP - 128)) | (1L << (EACH - 128)) | (1L << (ELEMENT - 128)) | (1L << (EMPTY_BLOB - 128)) | (1L << (EMPTY_CLOB - 128)) | (1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERR - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXP - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FLOOR - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FROM_TZ - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUP_ID - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HEXTORAW - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (IGNORE - 193)) | (1L << (IMMEDIATE - 193)) | (1L << (INCLUDE - 193)) | (1L << (INCLUDING - 193)) | (1L << (INCREMENT - 193)) | (1L << (INDENT - 193)) | (1L << (INDEXED - 193)) | (1L << (INDICATOR - 193)) | (1L << (INDICES - 193)) | (1L << (INFINITE - 193)) | (1L << (INITCAP - 193)) | (1L << (INLINE - 193)) | (1L << (INNER - 193)) | (1L << (INOUT - 193)) | (1L << (INSTANTIABLE - 193)) | (1L << (INSTEAD - 193)) | (1L << (INSTR2 - 193)) | (1L << (INSTR4 - 193)) | (1L << (INSTRB - 193)) | (1L << (INSTRC - 193)) | (1L << (INSTR - 193)) | (1L << (INTERFACE - 193)) | (1L << (INTEGER - 193)) | (1L << (INTERVAL - 193)) | (1L << (INT - 193)) | (1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (KEY - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST_DAY - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LENGTH2 - 193)) | (1L << (LENGTH4 - 193)) | (1L << (LENGTHB - 193)) | (1L << (LENGTHC - 193)) | (1L << (LENGTH - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LN - 193)) | (1L << (LNNVL - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCALTIMESTAMP - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (LOGON - 257)) | (1L << (LONG - 257)) | (1L << (LOOP - 257)) | (1L << (LOWER - 257)) | (1L << (LPAD - 257)) | (1L << (LTRIM - 257)) | (1L << (MAIN - 257)) | (1L << (MAP - 257)) | (1L << (MATCHED - 257)) | (1L << (MAXVALUE - 257)) | (1L << (MEASURES - 257)) | (1L << (MEMBER - 257)) | (1L << (MERGE - 257)) | (1L << (MINUTE - 257)) | (1L << (MINVALUE - 257)) | (1L << (MLSLABEL - 257)) | (1L << (MODEL - 257)) | (1L << (MODIFY - 257)) | (1L << (MOD - 257)) | (1L << (MONTH - 257)) | (1L << (MONTHS_BETWEEN - 257)) | (1L << (MULTISET - 257)) | (1L << (NAME - 257)) | (1L << (NAN - 257)) | (1L << (NANVL - 257)) | (1L << (NATURAL - 257)) | (1L << (NATURALN - 257)) | (1L << (NAV - 257)) | (1L << (NCHAR_CS - 257)) | (1L << (NCHAR - 257)) | (1L << (NCHR - 257)) | (1L << (NCLOB - 257)) | (1L << (NESTED - 257)) | (1L << (NEW - 257)) | (1L << (NEW_TIME - 257)) | (1L << (NEXT_DAY - 257)) | (1L << (NOAUDIT - 257)) | (1L << (NOCOPY - 257)) | (1L << (NOCYCLE - 257)) | (1L << (NOENTITYESCAPING - 257)) | (1L << (NONE - 257)) | (1L << (NO - 257)) | (1L << (NOSCHEMACHECK - 257)) | (1L << (NULLIF - 257)) | (1L << (NULLS - 257)) | (1L << (NUMBER - 257)) | (1L << (NUMERIC - 257)) | (1L << (NUMTODSINTERVAL - 257)) | (1L << (NUMTOYMINTERVAL - 257)) | (1L << (NVARCHAR2 - 257)) | (1L << (NVL2 - 257)) | (1L << (OBJECT - 257)) | (1L << (OFF - 257)))) != 0) || ((((_la - 321)) & ~0x3f) == 0 && ((1L << (_la - 321)) & ((1L << (OID - 321)) | (1L << (OLD - 321)) | (1L << (ONLY - 321)) | (1L << (OPAQUE - 321)) | (1L << (OPEN - 321)) | (1L << (ORADATA - 321)) | (1L << (ORDINALITY - 321)) | (1L << (OSERROR - 321)) | (1L << (OUTER - 321)) | (1L << (OUT - 321)) | (1L << (OVER - 321)) | (1L << (OVERRIDING - 321)) | (1L << (PACKAGE - 321)) | (1L << (PARALLEL_ENABLE - 321)) | (1L << (PARAMETERS - 321)) | (1L << (PARENT - 321)) | (1L << (PARTITION - 321)) | (1L << (PASSING - 321)) | (1L << (PATH - 321)) | (1L << (PIPELINED - 321)) | (1L << (PLAN - 321)) | (1L << (PLS_INTEGER - 321)) | (1L << (POSITIVEN - 321)) | (1L << (POSITIVE - 321)) | (1L << (POWER - 321)) | (1L << (PRAGMA - 321)) | (1L << (PRECEDING - 321)) | (1L << (PRECISION - 321)) | (1L << (PRESENT - 321)) | (1L << (PRIOR - 321)) | (1L << (PROCEDURE - 321)) | (1L << (RAISE - 321)) | (1L << (RANGE - 321)) | (1L << (RAW - 321)) | (1L << (RAWTOHEX - 321)) | (1L << (READ - 321)) | (1L << (REAL - 321)) | (1L << (RECORD - 321)) | (1L << (REFERENCE - 321)) | (1L << (REFERENCING - 321)) | (1L << (REF - 321)) | (1L << (REGEXP_COUNT - 321)) | (1L << (REGEXP_INSTR - 321)) | (1L << (REGEXP_REPLACE - 321)) | (1L << (REGEXP_SUBSTR - 321)) | (1L << (REJECT - 321)) | (1L << (RELIES_ON - 321)) | (1L << (REMAINDER - 321)))) != 0) || ((((_la - 385)) & ~0x3f) == 0 && ((1L << (_la - 385)) & ((1L << (RENAME - 385)) | (1L << (REPLACE - 385)) | (1L << (RESPECT - 385)) | (1L << (RESTRICT_REFERENCES - 385)) | (1L << (RESULT_CACHE - 385)) | (1L << (RESULT - 385)) | (1L << (RETURNING - 385)) | (1L << (RETURN - 385)) | (1L << (REUSE - 385)) | (1L << (REVERSE - 385)) | (1L << (RIGHT - 385)) | (1L << (ROLLBACK - 385)) | (1L << (ROLLUP - 385)) | (1L << (ROWID - 385)) | (1L << (ROWNUM - 385)) | (1L << (ROW - 385)) | (1L << (ROWS - 385)) | (1L << (RPAD - 385)) | (1L << (RTRIM - 385)) | (1L << (RULES - 385)) | (1L << (SAMPLE - 385)) | (1L << (SAVEPOINT - 385)) | (1L << (SAVE - 385)) | (1L << (SCHEMACHECK - 385)) | (1L << (SCHEMA - 385)) | (1L << (SCN - 385)) | (1L << (SECOND - 385)) | (1L << (SEED - 385)) | (1L << (SEGMENT - 385)) | (1L << (SELF - 385)) | (1L << (SEQUENTIAL - 385)) | (1L << (SERIALIZABLE - 385)) | (1L << (SERIALLY_REUSABLE - 385)) | (1L << (SERVERERROR - 385)) | (1L << (SESSIONTIMEZONE - 385)) | (1L << (SET - 385)) | (1L << (SETS - 385)) | (1L << (SETTINGS - 385)) | (1L << (SHOW - 385)) | (1L << (SHUTDOWN - 385)) | (1L << (SIBLINGS - 385)) | (1L << (SIGN - 385)) | (1L << (SIGNTYPE - 385)) | (1L << (SIMPLE_INTEGER - 385)) | (1L << (SINGLE - 385)) | (1L << (SINH - 385)) | (1L << (SIN - 385)) | (1L << (SKIP_ - 385)) | (1L << (SMALLINT - 385)) | (1L << (SNAPSHOT - 385)) | (1L << (SOME - 385)) | (1L << (SOUNDEX - 385)) | (1L << (SPECIFICATION - 385)) | (1L << (SQLDATA - 385)) | (1L << (SQLERROR - 385)) | (1L << (SQRT - 385)) | (1L << (STANDALONE - 385)))) != 0) || ((((_la - 449)) & ~0x3f) == 0 && ((1L << (_la - 449)) & ((1L << (STARTUP - 449)) | (1L << (STATEMENT_ID - 449)) | (1L << (STATEMENT - 449)) | (1L << (STATIC - 449)) | (1L << (STATISTICS - 449)) | (1L << (STRING - 449)) | (1L << (SUBMULTISET - 449)) | (1L << (SUBPARTITION - 449)) | (1L << (SUBSTITUTABLE - 449)) | (1L << (SUBTYPE - 449)) | (1L << (SUCCESS - 449)) | (1L << (SUSPEND - 449)) | (1L << (SYS_CONTEXT - 449)) | (1L << (SYSDATE - 449)) | (1L << (SYSTIMESTAMP - 449)) | (1L << (TANH - 449)) | (1L << (TAN - 449)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 449)) | (1L << (TIMESTAMP - 449)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 449)) | (1L << (TIMESTAMP_UNCONSTRAINED - 449)) | (1L << (TIME - 449)) | (1L << (TIMEZONE_ABBR - 449)) | (1L << (TIMEZONE_HOUR - 449)) | (1L << (TIMEZONE_MINUTE - 449)) | (1L << (TIMEZONE_REGION - 449)) | (1L << (TO_CLOB - 449)) | (1L << (TO_DSINTERVAL - 449)) | (1L << (TO_LOB - 449)) | (1L << (TO_MULTI_BYTE - 449)) | (1L << (TO_NCLOB - 449)) | (1L << (TO_NUMBER - 449)) | (1L << (TO_SINGLE_BYTE - 449)) | (1L << (TO_TIMESTAMP - 449)) | (1L << (TO_TIMESTAMP_TZ - 449)) | (1L << (TO_YMINTERVAL - 449)) | (1L << (TRAILING - 449)) | (1L << (TRANSACTION - 449)) | (1L << (TRANSLATE - 449)) | (1L << (TREAT - 449)) | (1L << (TRIGGER - 449)) | (1L << (TRUNCATE - 449)) | (1L << (TRUNC - 449)) | (1L << (TYPE - 449)) | (1L << (TZ_OFFSET - 449)) | (1L << (UID - 449)) | (1L << (UNBOUNDED - 449)) | (1L << (UNDER - 449)) | (1L << (UNLIMITED - 449)) | (1L << (UNTIL - 449)) | (1L << (UPDATED - 449)))) != 0) || ((((_la - 513)) & ~0x3f) == 0 && ((1L << (_la - 513)) & ((1L << (UPPER - 513)) | (1L << (UPSERT - 513)) | (1L << (UROWID - 513)) | (1L << (USERENV - 513)) | (1L << (USER - 513)) | (1L << (USE - 513)) | (1L << (VALIDATE - 513)) | (1L << (VALUE - 513)) | (1L << (VARCHAR2 - 513)) | (1L << (VARCHAR - 513)) | (1L << (VARIABLE - 513)) | (1L << (VARRAY - 513)) | (1L << (VARYING - 513)) | (1L << (VERSIONS - 513)) | (1L << (VERSION - 513)) | (1L << (VSIZE - 513)) | (1L << (WAIT - 513)) | (1L << (WARNING - 513)) | (1L << (WELLFORMED - 513)) | (1L << (WHENEVER - 513)) | (1L << (WHILE - 513)) | (1L << (WITHIN - 513)) | (1L << (WORK - 513)) | (1L << (WRITE - 513)) | (1L << (XMLAGG - 513)) | (1L << (XMLATTRIBUTES - 513)) | (1L << (XMLCAST - 513)) | (1L << (XMLCOLATTVAL - 513)) | (1L << (XMLELEMENT - 513)) | (1L << (XMLEXISTS - 513)) | (1L << (XMLFOREST - 513)) | (1L << (XMLNAMESPACES - 513)) | (1L << (XMLPARSE - 513)) | (1L << (XMLPI - 513)) | (1L << (XMLQUERY - 513)) | (1L << (XMLROOT - 513)) | (1L << (XMLSERIALIZE - 513)) | (1L << (XMLTABLE - 513)) | (1L << (XML - 513)) | (1L << (YEAR - 513)) | (1L << (YES - 513)) | (1L << (YMINTERVAL_UNCONSTRAINED - 513)) | (1L << (ZONE - 513)) | (1L << (PREDICTION - 513)) | (1L << (PREDICTION_BOUNDS - 513)) | (1L << (PREDICTION_COST - 513)) | (1L << (PREDICTION_DETAILS - 513)) | (1L << (PREDICTION_PROBABILITY - 513)) | (1L << (PREDICTION_SET - 513)) | (1L << (CUME_DIST - 513)) | (1L << (DENSE_RANK - 513)) | (1L << (LISTAGG - 513)) | (1L << (PERCENT_RANK - 513)) | (1L << (PERCENTILE_CONT - 513)) | (1L << (PERCENTILE_DISC - 513)) | (1L << (RANK - 513)))) != 0) || ((((_la - 577)) & ~0x3f) == 0 && ((1L << (_la - 577)) & ((1L << (AVG - 577)) | (1L << (CORR - 577)) | (1L << (COVAR_ - 577)) | (1L << (DECODE - 577)) | (1L << (LAG - 577)) | (1L << (LEAD - 577)) | (1L << (MAX - 577)) | (1L << (MEDIAN - 577)) | (1L << (MIN - 577)) | (1L << (NTILE - 577)) | (1L << (NVL - 577)) | (1L << (RATIO_TO_REPORT - 577)) | (1L << (REGR_ - 577)) | (1L << (ROUND - 577)) | (1L << (ROW_NUMBER - 577)) | (1L << (SUBSTR - 577)) | (1L << (TO_CHAR - 577)) | (1L << (TRIM - 577)) | (1L << (SUM - 577)) | (1L << (STDDEV - 577)) | (1L << (VAR_ - 577)) | (1L << (VARIANCE - 577)) | (1L << (LEAST - 577)) | (1L << (GREATEST - 577)) | (1L << (TO_DATE - 577)) | (1L << (DELIMITED_ID - 577)) | (1L << (ASTERISK - 577)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
					{
					{
					setState(1889);
					declare_spec();
					}
					}
					setState(1894);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1895);
				body();
				setState(1896);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Modifier_clauseContext extends ParserRuleContext {
		public TerminalNode INSTANTIABLE() { return getToken(OracleSQLStatementParser.INSTANTIABLE, 0); }
		public TerminalNode FINAL() { return getToken(OracleSQLStatementParser.FINAL, 0); }
		public TerminalNode OVERRIDING() { return getToken(OracleSQLStatementParser.OVERRIDING, 0); }
		public TerminalNode NOT() { return getToken(OracleSQLStatementParser.NOT, 0); }
		public Modifier_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_modifier_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterModifier_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitModifier_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitModifier_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Modifier_clauseContext modifier_clause() throws RecognitionException {
		Modifier_clauseContext _localctx = new Modifier_clauseContext(_ctx, getState());
		enterRule(_localctx, 136, RULE_modifier_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1901);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(1900);
				match(NOT);
				}
			}

			setState(1903);
			_la = _input.LA(1);
			if ( !(_la==FINAL || _la==INSTANTIABLE || _la==OVERRIDING) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Object_member_specContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Sqlj_object_type_attrContext sqlj_object_type_attr() {
			return getRuleContext(Sqlj_object_type_attrContext.class,0);
		}
		public Element_specContext element_spec() {
			return getRuleContext(Element_specContext.class,0);
		}
		public Object_member_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_object_member_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterObject_member_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitObject_member_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitObject_member_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Object_member_specContext object_member_spec() throws RecognitionException {
		Object_member_specContext _localctx = new Object_member_specContext(_ctx, getState());
		enterRule(_localctx, 138, RULE_object_member_spec);
		int _la;
		try {
			setState(1911);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,160,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1905);
				identifier();
				setState(1906);
				type_spec();
				setState(1908);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EXTERNAL) {
					{
					setState(1907);
					sqlj_object_type_attr();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1910);
				element_spec();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sqlj_object_type_attrContext extends ParserRuleContext {
		public TerminalNode EXTERNAL() { return getToken(OracleSQLStatementParser.EXTERNAL, 0); }
		public TerminalNode NAME() { return getToken(OracleSQLStatementParser.NAME, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Sqlj_object_type_attrContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sqlj_object_type_attr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterSqlj_object_type_attr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitSqlj_object_type_attr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitSqlj_object_type_attr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sqlj_object_type_attrContext sqlj_object_type_attr() throws RecognitionException {
		Sqlj_object_type_attrContext _localctx = new Sqlj_object_type_attrContext(_ctx, getState());
		enterRule(_localctx, 140, RULE_sqlj_object_type_attr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1913);
			match(EXTERNAL);
			setState(1914);
			match(NAME);
			setState(1915);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Element_specContext extends ParserRuleContext {
		public Modifier_clauseContext modifier_clause() {
			return getRuleContext(Modifier_clauseContext.class,0);
		}
		public List<Element_spec_optionsContext> element_spec_options() {
			return getRuleContexts(Element_spec_optionsContext.class);
		}
		public Element_spec_optionsContext element_spec_options(int i) {
			return getRuleContext(Element_spec_optionsContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(OracleSQLStatementParser.COMMA, 0); }
		public Pragma_clauseContext pragma_clause() {
			return getRuleContext(Pragma_clauseContext.class,0);
		}
		public Element_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_element_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterElement_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitElement_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitElement_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Element_specContext element_spec() throws RecognitionException {
		Element_specContext _localctx = new Element_specContext(_ctx, getState());
		enterRule(_localctx, 142, RULE_element_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1918);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,161,_ctx) ) {
			case 1:
				{
				setState(1917);
				modifier_clause();
				}
				break;
			}
			setState(1921); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1920);
				element_spec_options();
				}
				}
				setState(1923); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==CONSTRUCTOR || _la==FINAL || _la==INSTANTIABLE || _la==MAP || _la==MEMBER || _la==ORDER || _la==STATIC );
			setState(1927);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,163,_ctx) ) {
			case 1:
				{
				setState(1925);
				match(COMMA);
				setState(1926);
				pragma_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Element_spec_optionsContext extends ParserRuleContext {
		public Subprogram_specContext subprogram_spec() {
			return getRuleContext(Subprogram_specContext.class,0);
		}
		public Constructor_specContext constructor_spec() {
			return getRuleContext(Constructor_specContext.class,0);
		}
		public Map_order_function_specContext map_order_function_spec() {
			return getRuleContext(Map_order_function_specContext.class,0);
		}
		public Element_spec_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_element_spec_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterElement_spec_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitElement_spec_options(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitElement_spec_options(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Element_spec_optionsContext element_spec_options() throws RecognitionException {
		Element_spec_optionsContext _localctx = new Element_spec_optionsContext(_ctx, getState());
		enterRule(_localctx, 144, RULE_element_spec_options);
		try {
			setState(1932);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MEMBER:
			case STATIC:
				enterOuterAlt(_localctx, 1);
				{
				setState(1929);
				subprogram_spec();
				}
				break;
			case CONSTRUCTOR:
			case FINAL:
			case INSTANTIABLE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1930);
				constructor_spec();
				}
				break;
			case MAP:
			case ORDER:
				enterOuterAlt(_localctx, 3);
				{
				setState(1931);
				map_order_function_spec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Subprogram_specContext extends ParserRuleContext {
		public TerminalNode MEMBER() { return getToken(OracleSQLStatementParser.MEMBER, 0); }
		public TerminalNode STATIC() { return getToken(OracleSQLStatementParser.STATIC, 0); }
		public Type_procedure_specContext type_procedure_spec() {
			return getRuleContext(Type_procedure_specContext.class,0);
		}
		public Type_function_specContext type_function_spec() {
			return getRuleContext(Type_function_specContext.class,0);
		}
		public Subprogram_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subprogram_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterSubprogram_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitSubprogram_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitSubprogram_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Subprogram_specContext subprogram_spec() throws RecognitionException {
		Subprogram_specContext _localctx = new Subprogram_specContext(_ctx, getState());
		enterRule(_localctx, 146, RULE_subprogram_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1934);
			_la = _input.LA(1);
			if ( !(_la==MEMBER || _la==STATIC) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1937);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PROCEDURE:
				{
				setState(1935);
				type_procedure_spec();
				}
				break;
			case FUNCTION:
				{
				setState(1936);
				type_function_spec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_procedure_specContext extends ParserRuleContext {
		public TerminalNode PROCEDURE() { return getToken(OracleSQLStatementParser.PROCEDURE, 0); }
		public Procedure_nameContext procedure_name() {
			return getRuleContext(Procedure_nameContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(OracleSQLStatementParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(OracleSQLStatementParser.RIGHT_PAREN, 0); }
		public TerminalNode SELF() { return getToken(OracleSQLStatementParser.SELF, 0); }
		public TerminalNode IN() { return getToken(OracleSQLStatementParser.IN, 0); }
		public TerminalNode OUT() { return getToken(OracleSQLStatementParser.OUT, 0); }
		public TerminalNode NOCOPY() { return getToken(OracleSQLStatementParser.NOCOPY, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public List<ParameterContext> parameter() {
			return getRuleContexts(ParameterContext.class);
		}
		public ParameterContext parameter(int i) {
			return getRuleContext(ParameterContext.class,i);
		}
		public Call_specContext call_spec() {
			return getRuleContext(Call_specContext.class,0);
		}
		public TerminalNode IS() { return getToken(OracleSQLStatementParser.IS, 0); }
		public TerminalNode AS() { return getToken(OracleSQLStatementParser.AS, 0); }
		public List<TerminalNode> COMMA() { return getTokens(OracleSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(OracleSQLStatementParser.COMMA, i);
		}
		public Type_procedure_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_procedure_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterType_procedure_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitType_procedure_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitType_procedure_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Type_procedure_specContext type_procedure_spec() throws RecognitionException {
		Type_procedure_specContext _localctx = new Type_procedure_specContext(_ctx, getState());
		enterRule(_localctx, 148, RULE_type_procedure_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1939);
			match(PROCEDURE);
			setState(1940);
			procedure_name();
			setState(1941);
			match(LEFT_PAREN);
			setState(1950);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,167,_ctx) ) {
			case 1:
				{
				setState(1942);
				match(SELF);
				setState(1943);
				match(IN);
				setState(1944);
				match(OUT);
				setState(1945);
				match(NOCOPY);
				setState(1946);
				type_spec();
				setState(1948);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(1947);
					match(COMMA);
					}
				}

				}
				break;
			}
			setState(1960);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABS) | (1L << ACOS) | (1L << ADD) | (1L << ADD_MONTHS) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASCII) | (1L << ASCIISTR) | (1L << ASIN) | (1L << ASSOCIATE) | (1L << ATAN2) | (1L << ATAN) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BFILENAME) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BIN_TO_NUM) | (1L << BITAND) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CARDINALITY) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CEIL) | (1L << CHARACTER) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARTOROWID) | (1L << CHR) | (1L << C_LETTER))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOSE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONCAT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COS - 64)) | (1L << (COSH - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_DATE - 64)) | (1L << (CURRENT_TIMESTAMP - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (DIMENSION - 128)) | (1L << (DISABLE - 128)) | (1L << (DISASSOCIATE - 128)) | (1L << (DOCUMENT - 128)) | (1L << (DOUBLE - 128)) | (1L << (DSINTERVAL_UNCONSTRAINED - 128)) | (1L << (DUMP - 128)) | (1L << (EACH - 128)) | (1L << (ELEMENT - 128)) | (1L << (EMPTY_BLOB - 128)) | (1L << (EMPTY_CLOB - 128)) | (1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERR - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXP - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FLOOR - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FROM_TZ - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUP_ID - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HEXTORAW - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (IGNORE - 193)) | (1L << (IMMEDIATE - 193)) | (1L << (INCLUDE - 193)) | (1L << (INCLUDING - 193)) | (1L << (INCREMENT - 193)) | (1L << (INDENT - 193)) | (1L << (INDEXED - 193)) | (1L << (INDICATOR - 193)) | (1L << (INDICES - 193)) | (1L << (INFINITE - 193)) | (1L << (INITCAP - 193)) | (1L << (INLINE - 193)) | (1L << (INNER - 193)) | (1L << (INOUT - 193)) | (1L << (INSTANTIABLE - 193)) | (1L << (INSTEAD - 193)) | (1L << (INSTR2 - 193)) | (1L << (INSTR4 - 193)) | (1L << (INSTRB - 193)) | (1L << (INSTRC - 193)) | (1L << (INSTR - 193)) | (1L << (INTERFACE - 193)) | (1L << (INTEGER - 193)) | (1L << (INTERVAL - 193)) | (1L << (INT - 193)) | (1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (KEY - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST_DAY - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LENGTH2 - 193)) | (1L << (LENGTH4 - 193)) | (1L << (LENGTHB - 193)) | (1L << (LENGTHC - 193)) | (1L << (LENGTH - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LN - 193)) | (1L << (LNNVL - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCALTIMESTAMP - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (LOGON - 257)) | (1L << (LONG - 257)) | (1L << (LOOP - 257)) | (1L << (LOWER - 257)) | (1L << (LPAD - 257)) | (1L << (LTRIM - 257)) | (1L << (MAIN - 257)) | (1L << (MAP - 257)) | (1L << (MATCHED - 257)) | (1L << (MAXVALUE - 257)) | (1L << (MEASURES - 257)) | (1L << (MEMBER - 257)) | (1L << (MERGE - 257)) | (1L << (MINUTE - 257)) | (1L << (MINVALUE - 257)) | (1L << (MLSLABEL - 257)) | (1L << (MODEL - 257)) | (1L << (MODIFY - 257)) | (1L << (MOD - 257)) | (1L << (MONTH - 257)) | (1L << (MONTHS_BETWEEN - 257)) | (1L << (MULTISET - 257)) | (1L << (NAME - 257)) | (1L << (NAN - 257)) | (1L << (NANVL - 257)) | (1L << (NATURAL - 257)) | (1L << (NATURALN - 257)) | (1L << (NAV - 257)) | (1L << (NCHAR_CS - 257)) | (1L << (NCHAR - 257)) | (1L << (NCHR - 257)) | (1L << (NCLOB - 257)) | (1L << (NESTED - 257)) | (1L << (NEW - 257)) | (1L << (NEW_TIME - 257)) | (1L << (NEXT_DAY - 257)) | (1L << (NOAUDIT - 257)) | (1L << (NOCOPY - 257)) | (1L << (NOCYCLE - 257)) | (1L << (NOENTITYESCAPING - 257)) | (1L << (NONE - 257)) | (1L << (NO - 257)) | (1L << (NOSCHEMACHECK - 257)) | (1L << (NULLIF - 257)) | (1L << (NULLS - 257)) | (1L << (NUMBER - 257)) | (1L << (NUMERIC - 257)) | (1L << (NUMTODSINTERVAL - 257)) | (1L << (NUMTOYMINTERVAL - 257)) | (1L << (NVARCHAR2 - 257)) | (1L << (NVL2 - 257)) | (1L << (OBJECT - 257)) | (1L << (OFF - 257)))) != 0) || ((((_la - 321)) & ~0x3f) == 0 && ((1L << (_la - 321)) & ((1L << (OID - 321)) | (1L << (OLD - 321)) | (1L << (ONLY - 321)) | (1L << (OPAQUE - 321)) | (1L << (OPEN - 321)) | (1L << (ORADATA - 321)) | (1L << (ORDINALITY - 321)) | (1L << (OSERROR - 321)) | (1L << (OUTER - 321)) | (1L << (OUT - 321)) | (1L << (OVER - 321)) | (1L << (OVERRIDING - 321)) | (1L << (PACKAGE - 321)) | (1L << (PARALLEL_ENABLE - 321)) | (1L << (PARAMETERS - 321)) | (1L << (PARENT - 321)) | (1L << (PARTITION - 321)) | (1L << (PASSING - 321)) | (1L << (PATH - 321)) | (1L << (PIPELINED - 321)) | (1L << (PLAN - 321)) | (1L << (PLS_INTEGER - 321)) | (1L << (POSITIVEN - 321)) | (1L << (POSITIVE - 321)) | (1L << (POWER - 321)) | (1L << (PRAGMA - 321)) | (1L << (PRECEDING - 321)) | (1L << (PRECISION - 321)) | (1L << (PRESENT - 321)) | (1L << (PRIOR - 321)) | (1L << (PROCEDURE - 321)) | (1L << (RAISE - 321)) | (1L << (RANGE - 321)) | (1L << (RAW - 321)) | (1L << (RAWTOHEX - 321)) | (1L << (READ - 321)) | (1L << (REAL - 321)) | (1L << (RECORD - 321)) | (1L << (REFERENCE - 321)) | (1L << (REFERENCING - 321)) | (1L << (REF - 321)) | (1L << (REGEXP_COUNT - 321)) | (1L << (REGEXP_INSTR - 321)) | (1L << (REGEXP_REPLACE - 321)) | (1L << (REGEXP_SUBSTR - 321)) | (1L << (REJECT - 321)) | (1L << (RELIES_ON - 321)) | (1L << (REMAINDER - 321)))) != 0) || ((((_la - 385)) & ~0x3f) == 0 && ((1L << (_la - 385)) & ((1L << (RENAME - 385)) | (1L << (REPLACE - 385)) | (1L << (RESPECT - 385)) | (1L << (RESTRICT_REFERENCES - 385)) | (1L << (RESULT_CACHE - 385)) | (1L << (RESULT - 385)) | (1L << (RETURNING - 385)) | (1L << (RETURN - 385)) | (1L << (REUSE - 385)) | (1L << (REVERSE - 385)) | (1L << (RIGHT - 385)) | (1L << (ROLLBACK - 385)) | (1L << (ROLLUP - 385)) | (1L << (ROWID - 385)) | (1L << (ROWNUM - 385)) | (1L << (ROW - 385)) | (1L << (ROWS - 385)) | (1L << (RPAD - 385)) | (1L << (RTRIM - 385)) | (1L << (RULES - 385)) | (1L << (SAMPLE - 385)) | (1L << (SAVEPOINT - 385)) | (1L << (SAVE - 385)) | (1L << (SCHEMACHECK - 385)) | (1L << (SCHEMA - 385)) | (1L << (SCN - 385)) | (1L << (SECOND - 385)) | (1L << (SEED - 385)) | (1L << (SEGMENT - 385)) | (1L << (SELF - 385)) | (1L << (SEQUENTIAL - 385)) | (1L << (SERIALIZABLE - 385)) | (1L << (SERIALLY_REUSABLE - 385)) | (1L << (SERVERERROR - 385)) | (1L << (SESSIONTIMEZONE - 385)) | (1L << (SET - 385)) | (1L << (SETS - 385)) | (1L << (SETTINGS - 385)) | (1L << (SHOW - 385)) | (1L << (SHUTDOWN - 385)) | (1L << (SIBLINGS - 385)) | (1L << (SIGN - 385)) | (1L << (SIGNTYPE - 385)) | (1L << (SIMPLE_INTEGER - 385)) | (1L << (SINGLE - 385)) | (1L << (SINH - 385)) | (1L << (SIN - 385)) | (1L << (SKIP_ - 385)) | (1L << (SMALLINT - 385)) | (1L << (SNAPSHOT - 385)) | (1L << (SOME - 385)) | (1L << (SOUNDEX - 385)) | (1L << (SPECIFICATION - 385)) | (1L << (SQLDATA - 385)) | (1L << (SQLERROR - 385)) | (1L << (SQRT - 385)) | (1L << (STANDALONE - 385)))) != 0) || ((((_la - 449)) & ~0x3f) == 0 && ((1L << (_la - 449)) & ((1L << (STARTUP - 449)) | (1L << (STATEMENT_ID - 449)) | (1L << (STATEMENT - 449)) | (1L << (STATIC - 449)) | (1L << (STATISTICS - 449)) | (1L << (STRING - 449)) | (1L << (SUBMULTISET - 449)) | (1L << (SUBPARTITION - 449)) | (1L << (SUBSTITUTABLE - 449)) | (1L << (SUBTYPE - 449)) | (1L << (SUCCESS - 449)) | (1L << (SUSPEND - 449)) | (1L << (SYS_CONTEXT - 449)) | (1L << (SYSDATE - 449)) | (1L << (SYSTIMESTAMP - 449)) | (1L << (TANH - 449)) | (1L << (TAN - 449)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 449)) | (1L << (TIMESTAMP - 449)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 449)) | (1L << (TIMESTAMP_UNCONSTRAINED - 449)) | (1L << (TIME - 449)) | (1L << (TIMEZONE_ABBR - 449)) | (1L << (TIMEZONE_HOUR - 449)) | (1L << (TIMEZONE_MINUTE - 449)) | (1L << (TIMEZONE_REGION - 449)) | (1L << (TO_CLOB - 449)) | (1L << (TO_DSINTERVAL - 449)) | (1L << (TO_LOB - 449)) | (1L << (TO_MULTI_BYTE - 449)) | (1L << (TO_NCLOB - 449)) | (1L << (TO_NUMBER - 449)) | (1L << (TO_SINGLE_BYTE - 449)) | (1L << (TO_TIMESTAMP - 449)) | (1L << (TO_TIMESTAMP_TZ - 449)) | (1L << (TO_YMINTERVAL - 449)) | (1L << (TRAILING - 449)) | (1L << (TRANSACTION - 449)) | (1L << (TRANSLATE - 449)) | (1L << (TREAT - 449)) | (1L << (TRIGGER - 449)) | (1L << (TRUNCATE - 449)) | (1L << (TRUNC - 449)) | (1L << (TYPE - 449)) | (1L << (TZ_OFFSET - 449)) | (1L << (UID - 449)) | (1L << (UNBOUNDED - 449)) | (1L << (UNDER - 449)) | (1L << (UNLIMITED - 449)) | (1L << (UNTIL - 449)) | (1L << (UPDATED - 449)))) != 0) || ((((_la - 513)) & ~0x3f) == 0 && ((1L << (_la - 513)) & ((1L << (UPPER - 513)) | (1L << (UPSERT - 513)) | (1L << (UROWID - 513)) | (1L << (USERENV - 513)) | (1L << (USER - 513)) | (1L << (USE - 513)) | (1L << (VALIDATE - 513)) | (1L << (VALUE - 513)) | (1L << (VARCHAR2 - 513)) | (1L << (VARCHAR - 513)) | (1L << (VARIABLE - 513)) | (1L << (VARRAY - 513)) | (1L << (VARYING - 513)) | (1L << (VERSIONS - 513)) | (1L << (VERSION - 513)) | (1L << (VSIZE - 513)) | (1L << (WAIT - 513)) | (1L << (WARNING - 513)) | (1L << (WELLFORMED - 513)) | (1L << (WHENEVER - 513)) | (1L << (WHILE - 513)) | (1L << (WITHIN - 513)) | (1L << (WORK - 513)) | (1L << (WRITE - 513)) | (1L << (XMLAGG - 513)) | (1L << (XMLATTRIBUTES - 513)) | (1L << (XMLCAST - 513)) | (1L << (XMLCOLATTVAL - 513)) | (1L << (XMLELEMENT - 513)) | (1L << (XMLEXISTS - 513)) | (1L << (XMLFOREST - 513)) | (1L << (XMLNAMESPACES - 513)) | (1L << (XMLPARSE - 513)) | (1L << (XMLPI - 513)) | (1L << (XMLQUERY - 513)) | (1L << (XMLROOT - 513)) | (1L << (XMLSERIALIZE - 513)) | (1L << (XMLTABLE - 513)) | (1L << (XML - 513)) | (1L << (YEAR - 513)) | (1L << (YES - 513)) | (1L << (YMINTERVAL_UNCONSTRAINED - 513)) | (1L << (ZONE - 513)) | (1L << (PREDICTION - 513)) | (1L << (PREDICTION_BOUNDS - 513)) | (1L << (PREDICTION_COST - 513)) | (1L << (PREDICTION_DETAILS - 513)) | (1L << (PREDICTION_PROBABILITY - 513)) | (1L << (PREDICTION_SET - 513)) | (1L << (CUME_DIST - 513)) | (1L << (DENSE_RANK - 513)) | (1L << (LISTAGG - 513)) | (1L << (PERCENT_RANK - 513)) | (1L << (PERCENTILE_CONT - 513)) | (1L << (PERCENTILE_DISC - 513)) | (1L << (RANK - 513)))) != 0) || ((((_la - 577)) & ~0x3f) == 0 && ((1L << (_la - 577)) & ((1L << (AVG - 577)) | (1L << (CORR - 577)) | (1L << (COVAR_ - 577)) | (1L << (DECODE - 577)) | (1L << (LAG - 577)) | (1L << (LEAD - 577)) | (1L << (MAX - 577)) | (1L << (MEDIAN - 577)) | (1L << (MIN - 577)) | (1L << (NTILE - 577)) | (1L << (NVL - 577)) | (1L << (RATIO_TO_REPORT - 577)) | (1L << (REGR_ - 577)) | (1L << (ROUND - 577)) | (1L << (ROW_NUMBER - 577)) | (1L << (SUBSTR - 577)) | (1L << (TO_CHAR - 577)) | (1L << (TRIM - 577)) | (1L << (SUM - 577)) | (1L << (STDDEV - 577)) | (1L << (VAR_ - 577)) | (1L << (VARIANCE - 577)) | (1L << (LEAST - 577)) | (1L << (GREATEST - 577)) | (1L << (TO_DATE - 577)) | (1L << (DELIMITED_ID - 577)) | (1L << (ASTERISK - 577)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
				{
				setState(1952);
				parameter();
				setState(1957);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1953);
					match(COMMA);
					setState(1954);
					parameter();
					}
					}
					setState(1959);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(1962);
			match(RIGHT_PAREN);
			setState(1965);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS || _la==IS) {
				{
				setState(1963);
				_la = _input.LA(1);
				if ( !(_la==AS || _la==IS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1964);
				call_spec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Return_type_specContext extends ParserRuleContext {
		public DatatypeContext datatype() {
			return getRuleContext(DatatypeContext.class,0);
		}
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		public TerminalNode REF() { return getToken(OracleSQLStatementParser.REF, 0); }
		public TerminalNode PERCENT_ROWTYPE() { return getToken(OracleSQLStatementParser.PERCENT_ROWTYPE, 0); }
		public TerminalNode PERCENT_TYPE() { return getToken(OracleSQLStatementParser.PERCENT_TYPE, 0); }
		public Return_type_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_return_type_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterReturn_type_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitReturn_type_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitReturn_type_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Return_type_specContext return_type_spec() throws RecognitionException {
		Return_type_specContext _localctx = new Return_type_specContext(_ctx, getState());
		enterRule(_localctx, 150, RULE_return_type_spec);
		int _la;
		try {
			setState(1975);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,173,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1967);
				datatype();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1969);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,171,_ctx) ) {
				case 1:
					{
					setState(1968);
					match(REF);
					}
					break;
				}
				setState(1971);
				type_name();
				setState(1973);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PERCENT_ROWTYPE || _la==PERCENT_TYPE) {
					{
					setState(1972);
					_la = _input.LA(1);
					if ( !(_la==PERCENT_ROWTYPE || _la==PERCENT_TYPE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_function_specContext extends ParserRuleContext {
		public TerminalNode FUNCTION() { return getToken(OracleSQLStatementParser.FUNCTION, 0); }
		public Function_nameContext function_name() {
			return getRuleContext(Function_nameContext.class,0);
		}
		public TerminalNode RETURN() { return getToken(OracleSQLStatementParser.RETURN, 0); }
		public Return_type_specContext return_type_spec() {
			return getRuleContext(Return_type_specContext.class,0);
		}
		public List<TerminalNode> SELF() { return getTokens(OracleSQLStatementParser.SELF); }
		public TerminalNode SELF(int i) {
			return getToken(OracleSQLStatementParser.SELF, i);
		}
		public List<TerminalNode> AS() { return getTokens(OracleSQLStatementParser.AS); }
		public TerminalNode AS(int i) {
			return getToken(OracleSQLStatementParser.AS, i);
		}
		public TerminalNode RESULT() { return getToken(OracleSQLStatementParser.RESULT, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(OracleSQLStatementParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(OracleSQLStatementParser.RIGHT_PAREN, 0); }
		public List<Parallel_enable_clauseContext> parallel_enable_clause() {
			return getRuleContexts(Parallel_enable_clauseContext.class);
		}
		public Parallel_enable_clauseContext parallel_enable_clause(int i) {
			return getRuleContext(Parallel_enable_clauseContext.class,i);
		}
		public List<TerminalNode> DETERMINISTIC() { return getTokens(OracleSQLStatementParser.DETERMINISTIC); }
		public TerminalNode DETERMINISTIC(int i) {
			return getToken(OracleSQLStatementParser.DETERMINISTIC, i);
		}
		public Call_specContext call_spec() {
			return getRuleContext(Call_specContext.class,0);
		}
		public TerminalNode EXTERNAL() { return getToken(OracleSQLStatementParser.EXTERNAL, 0); }
		public TerminalNode NAME() { return getToken(OracleSQLStatementParser.NAME, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode IS() { return getToken(OracleSQLStatementParser.IS, 0); }
		public TerminalNode IN() { return getToken(OracleSQLStatementParser.IN, 0); }
		public TerminalNode OUT() { return getToken(OracleSQLStatementParser.OUT, 0); }
		public TerminalNode NOCOPY() { return getToken(OracleSQLStatementParser.NOCOPY, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public List<ParameterContext> parameter() {
			return getRuleContexts(ParameterContext.class);
		}
		public ParameterContext parameter(int i) {
			return getRuleContext(ParameterContext.class,i);
		}
		public TerminalNode VARIABLE() { return getToken(OracleSQLStatementParser.VARIABLE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(OracleSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(OracleSQLStatementParser.COMMA, i);
		}
		public Type_function_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_function_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterType_function_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitType_function_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitType_function_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Type_function_specContext type_function_spec() throws RecognitionException {
		Type_function_specContext _localctx = new Type_function_specContext(_ctx, getState());
		enterRule(_localctx, 152, RULE_type_function_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1977);
			match(FUNCTION);
			setState(1978);
			function_name();
			setState(2001);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(1979);
				match(LEFT_PAREN);
				setState(1988);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,175,_ctx) ) {
				case 1:
					{
					setState(1980);
					match(SELF);
					setState(1981);
					match(IN);
					setState(1982);
					match(OUT);
					setState(1983);
					match(NOCOPY);
					setState(1984);
					type_spec();
					setState(1986);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(1985);
						match(COMMA);
						}
					}

					}
					break;
				}
				setState(1998);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABS) | (1L << ACOS) | (1L << ADD) | (1L << ADD_MONTHS) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASCII) | (1L << ASCIISTR) | (1L << ASIN) | (1L << ASSOCIATE) | (1L << ATAN2) | (1L << ATAN) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BFILENAME) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BIN_TO_NUM) | (1L << BITAND) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CARDINALITY) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CEIL) | (1L << CHARACTER) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARTOROWID) | (1L << CHR) | (1L << C_LETTER))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOSE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONCAT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COS - 64)) | (1L << (COSH - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_DATE - 64)) | (1L << (CURRENT_TIMESTAMP - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (DIMENSION - 128)) | (1L << (DISABLE - 128)) | (1L << (DISASSOCIATE - 128)) | (1L << (DOCUMENT - 128)) | (1L << (DOUBLE - 128)) | (1L << (DSINTERVAL_UNCONSTRAINED - 128)) | (1L << (DUMP - 128)) | (1L << (EACH - 128)) | (1L << (ELEMENT - 128)) | (1L << (EMPTY_BLOB - 128)) | (1L << (EMPTY_CLOB - 128)) | (1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERR - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXP - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FLOOR - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FROM_TZ - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUP_ID - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HEXTORAW - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (IGNORE - 193)) | (1L << (IMMEDIATE - 193)) | (1L << (INCLUDE - 193)) | (1L << (INCLUDING - 193)) | (1L << (INCREMENT - 193)) | (1L << (INDENT - 193)) | (1L << (INDEXED - 193)) | (1L << (INDICATOR - 193)) | (1L << (INDICES - 193)) | (1L << (INFINITE - 193)) | (1L << (INITCAP - 193)) | (1L << (INLINE - 193)) | (1L << (INNER - 193)) | (1L << (INOUT - 193)) | (1L << (INSTANTIABLE - 193)) | (1L << (INSTEAD - 193)) | (1L << (INSTR2 - 193)) | (1L << (INSTR4 - 193)) | (1L << (INSTRB - 193)) | (1L << (INSTRC - 193)) | (1L << (INSTR - 193)) | (1L << (INTERFACE - 193)) | (1L << (INTEGER - 193)) | (1L << (INTERVAL - 193)) | (1L << (INT - 193)) | (1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (KEY - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST_DAY - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LENGTH2 - 193)) | (1L << (LENGTH4 - 193)) | (1L << (LENGTHB - 193)) | (1L << (LENGTHC - 193)) | (1L << (LENGTH - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LN - 193)) | (1L << (LNNVL - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCALTIMESTAMP - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (LOGON - 257)) | (1L << (LONG - 257)) | (1L << (LOOP - 257)) | (1L << (LOWER - 257)) | (1L << (LPAD - 257)) | (1L << (LTRIM - 257)) | (1L << (MAIN - 257)) | (1L << (MAP - 257)) | (1L << (MATCHED - 257)) | (1L << (MAXVALUE - 257)) | (1L << (MEASURES - 257)) | (1L << (MEMBER - 257)) | (1L << (MERGE - 257)) | (1L << (MINUTE - 257)) | (1L << (MINVALUE - 257)) | (1L << (MLSLABEL - 257)) | (1L << (MODEL - 257)) | (1L << (MODIFY - 257)) | (1L << (MOD - 257)) | (1L << (MONTH - 257)) | (1L << (MONTHS_BETWEEN - 257)) | (1L << (MULTISET - 257)) | (1L << (NAME - 257)) | (1L << (NAN - 257)) | (1L << (NANVL - 257)) | (1L << (NATURAL - 257)) | (1L << (NATURALN - 257)) | (1L << (NAV - 257)) | (1L << (NCHAR_CS - 257)) | (1L << (NCHAR - 257)) | (1L << (NCHR - 257)) | (1L << (NCLOB - 257)) | (1L << (NESTED - 257)) | (1L << (NEW - 257)) | (1L << (NEW_TIME - 257)) | (1L << (NEXT_DAY - 257)) | (1L << (NOAUDIT - 257)) | (1L << (NOCOPY - 257)) | (1L << (NOCYCLE - 257)) | (1L << (NOENTITYESCAPING - 257)) | (1L << (NONE - 257)) | (1L << (NO - 257)) | (1L << (NOSCHEMACHECK - 257)) | (1L << (NULLIF - 257)) | (1L << (NULLS - 257)) | (1L << (NUMBER - 257)) | (1L << (NUMERIC - 257)) | (1L << (NUMTODSINTERVAL - 257)) | (1L << (NUMTOYMINTERVAL - 257)) | (1L << (NVARCHAR2 - 257)) | (1L << (NVL2 - 257)) | (1L << (OBJECT - 257)) | (1L << (OFF - 257)))) != 0) || ((((_la - 321)) & ~0x3f) == 0 && ((1L << (_la - 321)) & ((1L << (OID - 321)) | (1L << (OLD - 321)) | (1L << (ONLY - 321)) | (1L << (OPAQUE - 321)) | (1L << (OPEN - 321)) | (1L << (ORADATA - 321)) | (1L << (ORDINALITY - 321)) | (1L << (OSERROR - 321)) | (1L << (OUTER - 321)) | (1L << (OUT - 321)) | (1L << (OVER - 321)) | (1L << (OVERRIDING - 321)) | (1L << (PACKAGE - 321)) | (1L << (PARALLEL_ENABLE - 321)) | (1L << (PARAMETERS - 321)) | (1L << (PARENT - 321)) | (1L << (PARTITION - 321)) | (1L << (PASSING - 321)) | (1L << (PATH - 321)) | (1L << (PIPELINED - 321)) | (1L << (PLAN - 321)) | (1L << (PLS_INTEGER - 321)) | (1L << (POSITIVEN - 321)) | (1L << (POSITIVE - 321)) | (1L << (POWER - 321)) | (1L << (PRAGMA - 321)) | (1L << (PRECEDING - 321)) | (1L << (PRECISION - 321)) | (1L << (PRESENT - 321)) | (1L << (PRIOR - 321)) | (1L << (PROCEDURE - 321)) | (1L << (RAISE - 321)) | (1L << (RANGE - 321)) | (1L << (RAW - 321)) | (1L << (RAWTOHEX - 321)) | (1L << (READ - 321)) | (1L << (REAL - 321)) | (1L << (RECORD - 321)) | (1L << (REFERENCE - 321)) | (1L << (REFERENCING - 321)) | (1L << (REF - 321)) | (1L << (REGEXP_COUNT - 321)) | (1L << (REGEXP_INSTR - 321)) | (1L << (REGEXP_REPLACE - 321)) | (1L << (REGEXP_SUBSTR - 321)) | (1L << (REJECT - 321)) | (1L << (RELIES_ON - 321)) | (1L << (REMAINDER - 321)))) != 0) || ((((_la - 385)) & ~0x3f) == 0 && ((1L << (_la - 385)) & ((1L << (RENAME - 385)) | (1L << (REPLACE - 385)) | (1L << (RESPECT - 385)) | (1L << (RESTRICT_REFERENCES - 385)) | (1L << (RESULT_CACHE - 385)) | (1L << (RESULT - 385)) | (1L << (RETURNING - 385)) | (1L << (RETURN - 385)) | (1L << (REUSE - 385)) | (1L << (REVERSE - 385)) | (1L << (RIGHT - 385)) | (1L << (ROLLBACK - 385)) | (1L << (ROLLUP - 385)) | (1L << (ROWID - 385)) | (1L << (ROWNUM - 385)) | (1L << (ROW - 385)) | (1L << (ROWS - 385)) | (1L << (RPAD - 385)) | (1L << (RTRIM - 385)) | (1L << (RULES - 385)) | (1L << (SAMPLE - 385)) | (1L << (SAVEPOINT - 385)) | (1L << (SAVE - 385)) | (1L << (SCHEMACHECK - 385)) | (1L << (SCHEMA - 385)) | (1L << (SCN - 385)) | (1L << (SECOND - 385)) | (1L << (SEED - 385)) | (1L << (SEGMENT - 385)) | (1L << (SELF - 385)) | (1L << (SEQUENTIAL - 385)) | (1L << (SERIALIZABLE - 385)) | (1L << (SERIALLY_REUSABLE - 385)) | (1L << (SERVERERROR - 385)) | (1L << (SESSIONTIMEZONE - 385)) | (1L << (SET - 385)) | (1L << (SETS - 385)) | (1L << (SETTINGS - 385)) | (1L << (SHOW - 385)) | (1L << (SHUTDOWN - 385)) | (1L << (SIBLINGS - 385)) | (1L << (SIGN - 385)) | (1L << (SIGNTYPE - 385)) | (1L << (SIMPLE_INTEGER - 385)) | (1L << (SINGLE - 385)) | (1L << (SINH - 385)) | (1L << (SIN - 385)) | (1L << (SKIP_ - 385)) | (1L << (SMALLINT - 385)) | (1L << (SNAPSHOT - 385)) | (1L << (SOME - 385)) | (1L << (SOUNDEX - 385)) | (1L << (SPECIFICATION - 385)) | (1L << (SQLDATA - 385)) | (1L << (SQLERROR - 385)) | (1L << (SQRT - 385)) | (1L << (STANDALONE - 385)))) != 0) || ((((_la - 449)) & ~0x3f) == 0 && ((1L << (_la - 449)) & ((1L << (STARTUP - 449)) | (1L << (STATEMENT_ID - 449)) | (1L << (STATEMENT - 449)) | (1L << (STATIC - 449)) | (1L << (STATISTICS - 449)) | (1L << (STRING - 449)) | (1L << (SUBMULTISET - 449)) | (1L << (SUBPARTITION - 449)) | (1L << (SUBSTITUTABLE - 449)) | (1L << (SUBTYPE - 449)) | (1L << (SUCCESS - 449)) | (1L << (SUSPEND - 449)) | (1L << (SYS_CONTEXT - 449)) | (1L << (SYSDATE - 449)) | (1L << (SYSTIMESTAMP - 449)) | (1L << (TANH - 449)) | (1L << (TAN - 449)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 449)) | (1L << (TIMESTAMP - 449)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 449)) | (1L << (TIMESTAMP_UNCONSTRAINED - 449)) | (1L << (TIME - 449)) | (1L << (TIMEZONE_ABBR - 449)) | (1L << (TIMEZONE_HOUR - 449)) | (1L << (TIMEZONE_MINUTE - 449)) | (1L << (TIMEZONE_REGION - 449)) | (1L << (TO_CLOB - 449)) | (1L << (TO_DSINTERVAL - 449)) | (1L << (TO_LOB - 449)) | (1L << (TO_MULTI_BYTE - 449)) | (1L << (TO_NCLOB - 449)) | (1L << (TO_NUMBER - 449)) | (1L << (TO_SINGLE_BYTE - 449)) | (1L << (TO_TIMESTAMP - 449)) | (1L << (TO_TIMESTAMP_TZ - 449)) | (1L << (TO_YMINTERVAL - 449)) | (1L << (TRAILING - 449)) | (1L << (TRANSACTION - 449)) | (1L << (TRANSLATE - 449)) | (1L << (TREAT - 449)) | (1L << (TRIGGER - 449)) | (1L << (TRUNCATE - 449)) | (1L << (TRUNC - 449)) | (1L << (TYPE - 449)) | (1L << (TZ_OFFSET - 449)) | (1L << (UID - 449)) | (1L << (UNBOUNDED - 449)) | (1L << (UNDER - 449)) | (1L << (UNLIMITED - 449)) | (1L << (UNTIL - 449)) | (1L << (UPDATED - 449)))) != 0) || ((((_la - 513)) & ~0x3f) == 0 && ((1L << (_la - 513)) & ((1L << (UPPER - 513)) | (1L << (UPSERT - 513)) | (1L << (UROWID - 513)) | (1L << (USERENV - 513)) | (1L << (USER - 513)) | (1L << (USE - 513)) | (1L << (VALIDATE - 513)) | (1L << (VALUE - 513)) | (1L << (VARCHAR2 - 513)) | (1L << (VARCHAR - 513)) | (1L << (VARIABLE - 513)) | (1L << (VARRAY - 513)) | (1L << (VARYING - 513)) | (1L << (VERSIONS - 513)) | (1L << (VERSION - 513)) | (1L << (VSIZE - 513)) | (1L << (WAIT - 513)) | (1L << (WARNING - 513)) | (1L << (WELLFORMED - 513)) | (1L << (WHENEVER - 513)) | (1L << (WHILE - 513)) | (1L << (WITHIN - 513)) | (1L << (WORK - 513)) | (1L << (WRITE - 513)) | (1L << (XMLAGG - 513)) | (1L << (XMLATTRIBUTES - 513)) | (1L << (XMLCAST - 513)) | (1L << (XMLCOLATTVAL - 513)) | (1L << (XMLELEMENT - 513)) | (1L << (XMLEXISTS - 513)) | (1L << (XMLFOREST - 513)) | (1L << (XMLNAMESPACES - 513)) | (1L << (XMLPARSE - 513)) | (1L << (XMLPI - 513)) | (1L << (XMLQUERY - 513)) | (1L << (XMLROOT - 513)) | (1L << (XMLSERIALIZE - 513)) | (1L << (XMLTABLE - 513)) | (1L << (XML - 513)) | (1L << (YEAR - 513)) | (1L << (YES - 513)) | (1L << (YMINTERVAL_UNCONSTRAINED - 513)) | (1L << (ZONE - 513)) | (1L << (PREDICTION - 513)) | (1L << (PREDICTION_BOUNDS - 513)) | (1L << (PREDICTION_COST - 513)) | (1L << (PREDICTION_DETAILS - 513)) | (1L << (PREDICTION_PROBABILITY - 513)) | (1L << (PREDICTION_SET - 513)) | (1L << (CUME_DIST - 513)) | (1L << (DENSE_RANK - 513)) | (1L << (LISTAGG - 513)) | (1L << (PERCENT_RANK - 513)) | (1L << (PERCENTILE_CONT - 513)) | (1L << (PERCENTILE_DISC - 513)) | (1L << (RANK - 513)))) != 0) || ((((_la - 577)) & ~0x3f) == 0 && ((1L << (_la - 577)) & ((1L << (AVG - 577)) | (1L << (CORR - 577)) | (1L << (COVAR_ - 577)) | (1L << (DECODE - 577)) | (1L << (LAG - 577)) | (1L << (LEAD - 577)) | (1L << (MAX - 577)) | (1L << (MEDIAN - 577)) | (1L << (MIN - 577)) | (1L << (NTILE - 577)) | (1L << (NVL - 577)) | (1L << (RATIO_TO_REPORT - 577)) | (1L << (REGR_ - 577)) | (1L << (ROUND - 577)) | (1L << (ROW_NUMBER - 577)) | (1L << (SUBSTR - 577)) | (1L << (TO_CHAR - 577)) | (1L << (TRIM - 577)) | (1L << (SUM - 577)) | (1L << (STDDEV - 577)) | (1L << (VAR_ - 577)) | (1L << (VARIANCE - 577)) | (1L << (LEAST - 577)) | (1L << (GREATEST - 577)) | (1L << (TO_DATE - 577)) | (1L << (DELIMITED_ID - 577)) | (1L << (ASTERISK - 577)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
					{
					setState(1990);
					parameter();
					setState(1995);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(1991);
						match(COMMA);
						setState(1992);
						parameter();
						}
						}
						setState(1997);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				setState(2000);
				match(RIGHT_PAREN);
				}
			}

			setState(2003);
			match(RETURN);
			setState(2008);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,179,_ctx) ) {
			case 1:
				{
				setState(2004);
				return_type_spec();
				}
				break;
			case 2:
				{
				setState(2005);
				match(SELF);
				setState(2006);
				match(AS);
				setState(2007);
				match(RESULT);
				}
				break;
			}
			setState(2014);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==DETERMINISTIC || _la==PARALLEL_ENABLE) {
				{
				setState(2012);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case PARALLEL_ENABLE:
					{
					setState(2010);
					parallel_enable_clause();
					}
					break;
				case DETERMINISTIC:
					{
					setState(2011);
					match(DETERMINISTIC);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(2016);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2025);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AS:
			case IS:
				{
				setState(2017);
				_la = _input.LA(1);
				if ( !(_la==AS || _la==IS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2018);
				call_spec();
				}
				break;
			case EXTERNAL:
				{
				setState(2019);
				match(EXTERNAL);
				setState(2021);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VARIABLE) {
					{
					setState(2020);
					match(VARIABLE);
					}
				}

				setState(2023);
				match(NAME);
				setState(2024);
				expression();
				}
				break;
			case CASCADE:
			case CONSTRUCTOR:
			case FINAL:
			case INSTANTIABLE:
			case INVALIDATE:
			case MAP:
			case MEMBER:
			case ORDER:
			case STATIC:
			case RIGHT_PAREN:
			case COMMA:
			case SEMI:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Constructor_specContext extends ParserRuleContext {
		public TerminalNode CONSTRUCTOR() { return getToken(OracleSQLStatementParser.CONSTRUCTOR, 0); }
		public TerminalNode FUNCTION() { return getToken(OracleSQLStatementParser.FUNCTION, 0); }
		public Constructor_nameContext constructor_name() {
			return getRuleContext(Constructor_nameContext.class,0);
		}
		public TerminalNode RETURN() { return getToken(OracleSQLStatementParser.RETURN, 0); }
		public List<TerminalNode> SELF() { return getTokens(OracleSQLStatementParser.SELF); }
		public TerminalNode SELF(int i) {
			return getToken(OracleSQLStatementParser.SELF, i);
		}
		public List<TerminalNode> AS() { return getTokens(OracleSQLStatementParser.AS); }
		public TerminalNode AS(int i) {
			return getToken(OracleSQLStatementParser.AS, i);
		}
		public TerminalNode RESULT() { return getToken(OracleSQLStatementParser.RESULT, 0); }
		public TerminalNode FINAL() { return getToken(OracleSQLStatementParser.FINAL, 0); }
		public TerminalNode INSTANTIABLE() { return getToken(OracleSQLStatementParser.INSTANTIABLE, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(OracleSQLStatementParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(OracleSQLStatementParser.RIGHT_PAREN, 0); }
		public List<Parallel_enable_clauseContext> parallel_enable_clause() {
			return getRuleContexts(Parallel_enable_clauseContext.class);
		}
		public Parallel_enable_clauseContext parallel_enable_clause(int i) {
			return getRuleContext(Parallel_enable_clauseContext.class,i);
		}
		public List<TerminalNode> DETERMINISTIC() { return getTokens(OracleSQLStatementParser.DETERMINISTIC); }
		public TerminalNode DETERMINISTIC(int i) {
			return getToken(OracleSQLStatementParser.DETERMINISTIC, i);
		}
		public Call_specContext call_spec() {
			return getRuleContext(Call_specContext.class,0);
		}
		public TerminalNode IS() { return getToken(OracleSQLStatementParser.IS, 0); }
		public TerminalNode IN() { return getToken(OracleSQLStatementParser.IN, 0); }
		public TerminalNode OUT() { return getToken(OracleSQLStatementParser.OUT, 0); }
		public TerminalNode NOCOPY() { return getToken(OracleSQLStatementParser.NOCOPY, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public List<ParameterContext> parameter() {
			return getRuleContexts(ParameterContext.class);
		}
		public ParameterContext parameter(int i) {
			return getRuleContext(ParameterContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(OracleSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(OracleSQLStatementParser.COMMA, i);
		}
		public Constructor_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constructor_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterConstructor_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitConstructor_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitConstructor_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Constructor_specContext constructor_spec() throws RecognitionException {
		Constructor_specContext _localctx = new Constructor_specContext(_ctx, getState());
		enterRule(_localctx, 154, RULE_constructor_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2028);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FINAL) {
				{
				setState(2027);
				match(FINAL);
				}
			}

			setState(2031);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INSTANTIABLE) {
				{
				setState(2030);
				match(INSTANTIABLE);
				}
			}

			setState(2033);
			match(CONSTRUCTOR);
			setState(2034);
			match(FUNCTION);
			setState(2035);
			constructor_name();
			setState(2058);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(2036);
				match(LEFT_PAREN);
				setState(2045);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,187,_ctx) ) {
				case 1:
					{
					setState(2037);
					match(SELF);
					setState(2038);
					match(IN);
					setState(2039);
					match(OUT);
					setState(2040);
					match(NOCOPY);
					setState(2041);
					type_spec();
					setState(2043);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(2042);
						match(COMMA);
						}
					}

					}
					break;
				}
				setState(2055);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABS) | (1L << ACOS) | (1L << ADD) | (1L << ADD_MONTHS) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASCII) | (1L << ASCIISTR) | (1L << ASIN) | (1L << ASSOCIATE) | (1L << ATAN2) | (1L << ATAN) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BFILENAME) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BIN_TO_NUM) | (1L << BITAND) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CARDINALITY) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CEIL) | (1L << CHARACTER) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARTOROWID) | (1L << CHR) | (1L << C_LETTER))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOSE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONCAT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COS - 64)) | (1L << (COSH - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_DATE - 64)) | (1L << (CURRENT_TIMESTAMP - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (DIMENSION - 128)) | (1L << (DISABLE - 128)) | (1L << (DISASSOCIATE - 128)) | (1L << (DOCUMENT - 128)) | (1L << (DOUBLE - 128)) | (1L << (DSINTERVAL_UNCONSTRAINED - 128)) | (1L << (DUMP - 128)) | (1L << (EACH - 128)) | (1L << (ELEMENT - 128)) | (1L << (EMPTY_BLOB - 128)) | (1L << (EMPTY_CLOB - 128)) | (1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERR - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXP - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FLOOR - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FROM_TZ - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUP_ID - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HEXTORAW - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (IGNORE - 193)) | (1L << (IMMEDIATE - 193)) | (1L << (INCLUDE - 193)) | (1L << (INCLUDING - 193)) | (1L << (INCREMENT - 193)) | (1L << (INDENT - 193)) | (1L << (INDEXED - 193)) | (1L << (INDICATOR - 193)) | (1L << (INDICES - 193)) | (1L << (INFINITE - 193)) | (1L << (INITCAP - 193)) | (1L << (INLINE - 193)) | (1L << (INNER - 193)) | (1L << (INOUT - 193)) | (1L << (INSTANTIABLE - 193)) | (1L << (INSTEAD - 193)) | (1L << (INSTR2 - 193)) | (1L << (INSTR4 - 193)) | (1L << (INSTRB - 193)) | (1L << (INSTRC - 193)) | (1L << (INSTR - 193)) | (1L << (INTERFACE - 193)) | (1L << (INTEGER - 193)) | (1L << (INTERVAL - 193)) | (1L << (INT - 193)) | (1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (KEY - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST_DAY - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LENGTH2 - 193)) | (1L << (LENGTH4 - 193)) | (1L << (LENGTHB - 193)) | (1L << (LENGTHC - 193)) | (1L << (LENGTH - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LN - 193)) | (1L << (LNNVL - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCALTIMESTAMP - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (LOGON - 257)) | (1L << (LONG - 257)) | (1L << (LOOP - 257)) | (1L << (LOWER - 257)) | (1L << (LPAD - 257)) | (1L << (LTRIM - 257)) | (1L << (MAIN - 257)) | (1L << (MAP - 257)) | (1L << (MATCHED - 257)) | (1L << (MAXVALUE - 257)) | (1L << (MEASURES - 257)) | (1L << (MEMBER - 257)) | (1L << (MERGE - 257)) | (1L << (MINUTE - 257)) | (1L << (MINVALUE - 257)) | (1L << (MLSLABEL - 257)) | (1L << (MODEL - 257)) | (1L << (MODIFY - 257)) | (1L << (MOD - 257)) | (1L << (MONTH - 257)) | (1L << (MONTHS_BETWEEN - 257)) | (1L << (MULTISET - 257)) | (1L << (NAME - 257)) | (1L << (NAN - 257)) | (1L << (NANVL - 257)) | (1L << (NATURAL - 257)) | (1L << (NATURALN - 257)) | (1L << (NAV - 257)) | (1L << (NCHAR_CS - 257)) | (1L << (NCHAR - 257)) | (1L << (NCHR - 257)) | (1L << (NCLOB - 257)) | (1L << (NESTED - 257)) | (1L << (NEW - 257)) | (1L << (NEW_TIME - 257)) | (1L << (NEXT_DAY - 257)) | (1L << (NOAUDIT - 257)) | (1L << (NOCOPY - 257)) | (1L << (NOCYCLE - 257)) | (1L << (NOENTITYESCAPING - 257)) | (1L << (NONE - 257)) | (1L << (NO - 257)) | (1L << (NOSCHEMACHECK - 257)) | (1L << (NULLIF - 257)) | (1L << (NULLS - 257)) | (1L << (NUMBER - 257)) | (1L << (NUMERIC - 257)) | (1L << (NUMTODSINTERVAL - 257)) | (1L << (NUMTOYMINTERVAL - 257)) | (1L << (NVARCHAR2 - 257)) | (1L << (NVL2 - 257)) | (1L << (OBJECT - 257)) | (1L << (OFF - 257)))) != 0) || ((((_la - 321)) & ~0x3f) == 0 && ((1L << (_la - 321)) & ((1L << (OID - 321)) | (1L << (OLD - 321)) | (1L << (ONLY - 321)) | (1L << (OPAQUE - 321)) | (1L << (OPEN - 321)) | (1L << (ORADATA - 321)) | (1L << (ORDINALITY - 321)) | (1L << (OSERROR - 321)) | (1L << (OUTER - 321)) | (1L << (OUT - 321)) | (1L << (OVER - 321)) | (1L << (OVERRIDING - 321)) | (1L << (PACKAGE - 321)) | (1L << (PARALLEL_ENABLE - 321)) | (1L << (PARAMETERS - 321)) | (1L << (PARENT - 321)) | (1L << (PARTITION - 321)) | (1L << (PASSING - 321)) | (1L << (PATH - 321)) | (1L << (PIPELINED - 321)) | (1L << (PLAN - 321)) | (1L << (PLS_INTEGER - 321)) | (1L << (POSITIVEN - 321)) | (1L << (POSITIVE - 321)) | (1L << (POWER - 321)) | (1L << (PRAGMA - 321)) | (1L << (PRECEDING - 321)) | (1L << (PRECISION - 321)) | (1L << (PRESENT - 321)) | (1L << (PRIOR - 321)) | (1L << (PROCEDURE - 321)) | (1L << (RAISE - 321)) | (1L << (RANGE - 321)) | (1L << (RAW - 321)) | (1L << (RAWTOHEX - 321)) | (1L << (READ - 321)) | (1L << (REAL - 321)) | (1L << (RECORD - 321)) | (1L << (REFERENCE - 321)) | (1L << (REFERENCING - 321)) | (1L << (REF - 321)) | (1L << (REGEXP_COUNT - 321)) | (1L << (REGEXP_INSTR - 321)) | (1L << (REGEXP_REPLACE - 321)) | (1L << (REGEXP_SUBSTR - 321)) | (1L << (REJECT - 321)) | (1L << (RELIES_ON - 321)) | (1L << (REMAINDER - 321)))) != 0) || ((((_la - 385)) & ~0x3f) == 0 && ((1L << (_la - 385)) & ((1L << (RENAME - 385)) | (1L << (REPLACE - 385)) | (1L << (RESPECT - 385)) | (1L << (RESTRICT_REFERENCES - 385)) | (1L << (RESULT_CACHE - 385)) | (1L << (RESULT - 385)) | (1L << (RETURNING - 385)) | (1L << (RETURN - 385)) | (1L << (REUSE - 385)) | (1L << (REVERSE - 385)) | (1L << (RIGHT - 385)) | (1L << (ROLLBACK - 385)) | (1L << (ROLLUP - 385)) | (1L << (ROWID - 385)) | (1L << (ROWNUM - 385)) | (1L << (ROW - 385)) | (1L << (ROWS - 385)) | (1L << (RPAD - 385)) | (1L << (RTRIM - 385)) | (1L << (RULES - 385)) | (1L << (SAMPLE - 385)) | (1L << (SAVEPOINT - 385)) | (1L << (SAVE - 385)) | (1L << (SCHEMACHECK - 385)) | (1L << (SCHEMA - 385)) | (1L << (SCN - 385)) | (1L << (SECOND - 385)) | (1L << (SEED - 385)) | (1L << (SEGMENT - 385)) | (1L << (SELF - 385)) | (1L << (SEQUENTIAL - 385)) | (1L << (SERIALIZABLE - 385)) | (1L << (SERIALLY_REUSABLE - 385)) | (1L << (SERVERERROR - 385)) | (1L << (SESSIONTIMEZONE - 385)) | (1L << (SET - 385)) | (1L << (SETS - 385)) | (1L << (SETTINGS - 385)) | (1L << (SHOW - 385)) | (1L << (SHUTDOWN - 385)) | (1L << (SIBLINGS - 385)) | (1L << (SIGN - 385)) | (1L << (SIGNTYPE - 385)) | (1L << (SIMPLE_INTEGER - 385)) | (1L << (SINGLE - 385)) | (1L << (SINH - 385)) | (1L << (SIN - 385)) | (1L << (SKIP_ - 385)) | (1L << (SMALLINT - 385)) | (1L << (SNAPSHOT - 385)) | (1L << (SOME - 385)) | (1L << (SOUNDEX - 385)) | (1L << (SPECIFICATION - 385)) | (1L << (SQLDATA - 385)) | (1L << (SQLERROR - 385)) | (1L << (SQRT - 385)) | (1L << (STANDALONE - 385)))) != 0) || ((((_la - 449)) & ~0x3f) == 0 && ((1L << (_la - 449)) & ((1L << (STARTUP - 449)) | (1L << (STATEMENT_ID - 449)) | (1L << (STATEMENT - 449)) | (1L << (STATIC - 449)) | (1L << (STATISTICS - 449)) | (1L << (STRING - 449)) | (1L << (SUBMULTISET - 449)) | (1L << (SUBPARTITION - 449)) | (1L << (SUBSTITUTABLE - 449)) | (1L << (SUBTYPE - 449)) | (1L << (SUCCESS - 449)) | (1L << (SUSPEND - 449)) | (1L << (SYS_CONTEXT - 449)) | (1L << (SYSDATE - 449)) | (1L << (SYSTIMESTAMP - 449)) | (1L << (TANH - 449)) | (1L << (TAN - 449)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 449)) | (1L << (TIMESTAMP - 449)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 449)) | (1L << (TIMESTAMP_UNCONSTRAINED - 449)) | (1L << (TIME - 449)) | (1L << (TIMEZONE_ABBR - 449)) | (1L << (TIMEZONE_HOUR - 449)) | (1L << (TIMEZONE_MINUTE - 449)) | (1L << (TIMEZONE_REGION - 449)) | (1L << (TO_CLOB - 449)) | (1L << (TO_DSINTERVAL - 449)) | (1L << (TO_LOB - 449)) | (1L << (TO_MULTI_BYTE - 449)) | (1L << (TO_NCLOB - 449)) | (1L << (TO_NUMBER - 449)) | (1L << (TO_SINGLE_BYTE - 449)) | (1L << (TO_TIMESTAMP - 449)) | (1L << (TO_TIMESTAMP_TZ - 449)) | (1L << (TO_YMINTERVAL - 449)) | (1L << (TRAILING - 449)) | (1L << (TRANSACTION - 449)) | (1L << (TRANSLATE - 449)) | (1L << (TREAT - 449)) | (1L << (TRIGGER - 449)) | (1L << (TRUNCATE - 449)) | (1L << (TRUNC - 449)) | (1L << (TYPE - 449)) | (1L << (TZ_OFFSET - 449)) | (1L << (UID - 449)) | (1L << (UNBOUNDED - 449)) | (1L << (UNDER - 449)) | (1L << (UNLIMITED - 449)) | (1L << (UNTIL - 449)) | (1L << (UPDATED - 449)))) != 0) || ((((_la - 513)) & ~0x3f) == 0 && ((1L << (_la - 513)) & ((1L << (UPPER - 513)) | (1L << (UPSERT - 513)) | (1L << (UROWID - 513)) | (1L << (USERENV - 513)) | (1L << (USER - 513)) | (1L << (USE - 513)) | (1L << (VALIDATE - 513)) | (1L << (VALUE - 513)) | (1L << (VARCHAR2 - 513)) | (1L << (VARCHAR - 513)) | (1L << (VARIABLE - 513)) | (1L << (VARRAY - 513)) | (1L << (VARYING - 513)) | (1L << (VERSIONS - 513)) | (1L << (VERSION - 513)) | (1L << (VSIZE - 513)) | (1L << (WAIT - 513)) | (1L << (WARNING - 513)) | (1L << (WELLFORMED - 513)) | (1L << (WHENEVER - 513)) | (1L << (WHILE - 513)) | (1L << (WITHIN - 513)) | (1L << (WORK - 513)) | (1L << (WRITE - 513)) | (1L << (XMLAGG - 513)) | (1L << (XMLATTRIBUTES - 513)) | (1L << (XMLCAST - 513)) | (1L << (XMLCOLATTVAL - 513)) | (1L << (XMLELEMENT - 513)) | (1L << (XMLEXISTS - 513)) | (1L << (XMLFOREST - 513)) | (1L << (XMLNAMESPACES - 513)) | (1L << (XMLPARSE - 513)) | (1L << (XMLPI - 513)) | (1L << (XMLQUERY - 513)) | (1L << (XMLROOT - 513)) | (1L << (XMLSERIALIZE - 513)) | (1L << (XMLTABLE - 513)) | (1L << (XML - 513)) | (1L << (YEAR - 513)) | (1L << (YES - 513)) | (1L << (YMINTERVAL_UNCONSTRAINED - 513)) | (1L << (ZONE - 513)) | (1L << (PREDICTION - 513)) | (1L << (PREDICTION_BOUNDS - 513)) | (1L << (PREDICTION_COST - 513)) | (1L << (PREDICTION_DETAILS - 513)) | (1L << (PREDICTION_PROBABILITY - 513)) | (1L << (PREDICTION_SET - 513)) | (1L << (CUME_DIST - 513)) | (1L << (DENSE_RANK - 513)) | (1L << (LISTAGG - 513)) | (1L << (PERCENT_RANK - 513)) | (1L << (PERCENTILE_CONT - 513)) | (1L << (PERCENTILE_DISC - 513)) | (1L << (RANK - 513)))) != 0) || ((((_la - 577)) & ~0x3f) == 0 && ((1L << (_la - 577)) & ((1L << (AVG - 577)) | (1L << (CORR - 577)) | (1L << (COVAR_ - 577)) | (1L << (DECODE - 577)) | (1L << (LAG - 577)) | (1L << (LEAD - 577)) | (1L << (MAX - 577)) | (1L << (MEDIAN - 577)) | (1L << (MIN - 577)) | (1L << (NTILE - 577)) | (1L << (NVL - 577)) | (1L << (RATIO_TO_REPORT - 577)) | (1L << (REGR_ - 577)) | (1L << (ROUND - 577)) | (1L << (ROW_NUMBER - 577)) | (1L << (SUBSTR - 577)) | (1L << (TO_CHAR - 577)) | (1L << (TRIM - 577)) | (1L << (SUM - 577)) | (1L << (STDDEV - 577)) | (1L << (VAR_ - 577)) | (1L << (VARIANCE - 577)) | (1L << (LEAST - 577)) | (1L << (GREATEST - 577)) | (1L << (TO_DATE - 577)) | (1L << (DELIMITED_ID - 577)) | (1L << (ASTERISK - 577)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
					{
					setState(2047);
					parameter();
					setState(2052);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(2048);
						match(COMMA);
						setState(2049);
						parameter();
						}
						}
						setState(2054);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				setState(2057);
				match(RIGHT_PAREN);
				}
			}

			setState(2060);
			match(RETURN);
			setState(2061);
			match(SELF);
			setState(2062);
			match(AS);
			setState(2063);
			match(RESULT);
			setState(2068);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==DETERMINISTIC || _la==PARALLEL_ENABLE) {
				{
				setState(2066);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case PARALLEL_ENABLE:
					{
					setState(2064);
					parallel_enable_clause();
					}
					break;
				case DETERMINISTIC:
					{
					setState(2065);
					match(DETERMINISTIC);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(2070);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2073);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS || _la==IS) {
				{
				setState(2071);
				_la = _input.LA(1);
				if ( !(_la==AS || _la==IS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2072);
				call_spec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Map_order_function_specContext extends ParserRuleContext {
		public TerminalNode MEMBER() { return getToken(OracleSQLStatementParser.MEMBER, 0); }
		public Type_function_specContext type_function_spec() {
			return getRuleContext(Type_function_specContext.class,0);
		}
		public TerminalNode MAP() { return getToken(OracleSQLStatementParser.MAP, 0); }
		public TerminalNode ORDER() { return getToken(OracleSQLStatementParser.ORDER, 0); }
		public Map_order_function_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_map_order_function_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterMap_order_function_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitMap_order_function_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitMap_order_function_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Map_order_function_specContext map_order_function_spec() throws RecognitionException {
		Map_order_function_specContext _localctx = new Map_order_function_specContext(_ctx, getState());
		enterRule(_localctx, 156, RULE_map_order_function_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2075);
			_la = _input.LA(1);
			if ( !(_la==MAP || _la==ORDER) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2076);
			match(MEMBER);
			setState(2077);
			type_function_spec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pragma_clauseContext extends ParserRuleContext {
		public TerminalNode PRAGMA() { return getToken(OracleSQLStatementParser.PRAGMA, 0); }
		public TerminalNode RESTRICT_REFERENCES() { return getToken(OracleSQLStatementParser.RESTRICT_REFERENCES, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(OracleSQLStatementParser.LEFT_PAREN, 0); }
		public List<Pragma_elementsContext> pragma_elements() {
			return getRuleContexts(Pragma_elementsContext.class);
		}
		public Pragma_elementsContext pragma_elements(int i) {
			return getRuleContext(Pragma_elementsContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(OracleSQLStatementParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(OracleSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(OracleSQLStatementParser.COMMA, i);
		}
		public Pragma_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pragma_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterPragma_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitPragma_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitPragma_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Pragma_clauseContext pragma_clause() throws RecognitionException {
		Pragma_clauseContext _localctx = new Pragma_clauseContext(_ctx, getState());
		enterRule(_localctx, 158, RULE_pragma_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2079);
			match(PRAGMA);
			setState(2080);
			match(RESTRICT_REFERENCES);
			setState(2081);
			match(LEFT_PAREN);
			setState(2082);
			pragma_elements();
			setState(2087);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2083);
				match(COMMA);
				setState(2084);
				pragma_elements();
				}
				}
				setState(2089);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2090);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pragma_elementsContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(OracleSQLStatementParser.DEFAULT, 0); }
		public Pragma_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pragma_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterPragma_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitPragma_elements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitPragma_elements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Pragma_elementsContext pragma_elements() throws RecognitionException {
		Pragma_elementsContext _localctx = new Pragma_elementsContext(_ctx, getState());
		enterRule(_localctx, 160, RULE_pragma_elements);
		try {
			setState(2094);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ABS:
			case ACOS:
			case ADD:
			case ADD_MONTHS:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASCII:
			case ASCIISTR:
			case ASIN:
			case ASSOCIATE:
			case ATAN2:
			case ATAN:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BFILENAME:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BIN_TO_NUM:
			case BITAND:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CARDINALITY:
			case CASCADE:
			case CASE:
			case CAST:
			case CEIL:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHARTOROWID:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOSE:
			case COMPOUND:
			case CONCAT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COS:
			case COSH:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_DATE:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case DUMP:
			case EACH:
			case ELEMENT:
			case EMPTY_BLOB:
			case EMPTY_CLOB:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXP:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FLOOR:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FROM_TZ:
			case FULL:
			case FUNCTION:
			case GROUP_ID:
			case GROUPING:
			case HASH:
			case HEXTORAW:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INITCAP:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INSTR2:
			case INSTR4:
			case INSTRB:
			case INSTRC:
			case INSTR:
			case INTERFACE:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST_DAY:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LENGTH2:
			case LENGTH4:
			case LENGTHB:
			case LENGTHC:
			case LENGTH:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LN:
			case LNNVL:
			case LOCAL:
			case LOCALTIMESTAMP:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MOD:
			case MONTH:
			case MONTHS_BETWEEN:
			case MULTISET:
			case NAME:
			case NAN:
			case NANVL:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCHR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NEW_TIME:
			case NEXT_DAY:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLIF:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NUMTODSINTERVAL:
			case NUMTOYMINTERVAL:
			case NVARCHAR2:
			case NVL2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPAQUE:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case POWER:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case PROCEDURE:
			case RAISE:
			case RANGE:
			case RAW:
			case RAWTOHEX:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_REPLACE:
			case REGEXP_SUBSTR:
			case REJECT:
			case RELIES_ON:
			case REMAINDER:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROWNUM:
			case ROW:
			case ROWS:
			case RPAD:
			case RTRIM:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGN:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SINH:
			case SIN:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SOUNDEX:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case SQRT:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYS_CONTEXT:
			case SYSDATE:
			case SYSTIMESTAMP:
			case TANH:
			case TAN:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TO_CLOB:
			case TO_DSINTERVAL:
			case TO_LOB:
			case TO_MULTI_BYTE:
			case TO_NCLOB:
			case TO_NUMBER:
			case TO_SINGLE_BYTE:
			case TO_TIMESTAMP:
			case TO_TIMESTAMP_TZ:
			case TO_YMINTERVAL:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TRUNC:
			case TYPE:
			case TZ_OFFSET:
			case UID:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPPER:
			case UPSERT:
			case UROWID:
			case USERENV:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case VSIZE:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case DECODE:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case NVL:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROUND:
			case ROW_NUMBER:
			case SUBSTR:
			case TO_CHAR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case LEAST:
			case GREATEST:
			case TO_DATE:
			case DELIMITED_ID:
			case ASTERISK:
			case INTRODUCER:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(2092);
				identifier();
				}
				break;
			case DEFAULT:
				enterOuterAlt(_localctx, 2);
				{
				setState(2093);
				match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_sequenceContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(OracleSQLStatementParser.DROP, 0); }
		public TerminalNode SEQUENCE() { return getToken(OracleSQLStatementParser.SEQUENCE, 0); }
		public Sequence_nameContext sequence_name() {
			return getRuleContext(Sequence_nameContext.class,0);
		}
		public TerminalNode SEMI() { return getToken(OracleSQLStatementParser.SEMI, 0); }
		public Drop_sequenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_sequence; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterDrop_sequence(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitDrop_sequence(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitDrop_sequence(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_sequenceContext drop_sequence() throws RecognitionException {
		Drop_sequenceContext _localctx = new Drop_sequenceContext(_ctx, getState());
		enterRule(_localctx, 162, RULE_drop_sequence);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2096);
			match(DROP);
			setState(2097);
			match(SEQUENCE);
			setState(2098);
			sequence_name();
			setState(2099);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_sequenceContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(OracleSQLStatementParser.ALTER, 0); }
		public TerminalNode SEQUENCE() { return getToken(OracleSQLStatementParser.SEQUENCE, 0); }
		public Sequence_nameContext sequence_name() {
			return getRuleContext(Sequence_nameContext.class,0);
		}
		public TerminalNode SEMI() { return getToken(OracleSQLStatementParser.SEMI, 0); }
		public List<Sequence_specContext> sequence_spec() {
			return getRuleContexts(Sequence_specContext.class);
		}
		public Sequence_specContext sequence_spec(int i) {
			return getRuleContext(Sequence_specContext.class,i);
		}
		public Alter_sequenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_sequence; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterAlter_sequence(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitAlter_sequence(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitAlter_sequence(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_sequenceContext alter_sequence() throws RecognitionException {
		Alter_sequenceContext _localctx = new Alter_sequenceContext(_ctx, getState());
		enterRule(_localctx, 164, RULE_alter_sequence);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2101);
			match(ALTER);
			setState(2102);
			match(SEQUENCE);
			setState(2103);
			sequence_name();
			setState(2105); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2104);
				sequence_spec();
				}
				}
				setState(2107); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==CYCLE || _la==INCREMENT || ((((_la - 266)) & ~0x3f) == 0 && ((1L << (_la - 266)) & ((1L << (MAXVALUE - 266)) | (1L << (MINVALUE - 266)) | (1L << (NOCACHE - 266)) | (1L << (NOCYCLE - 266)) | (1L << (NOMAXVALUE - 266)) | (1L << (NOMINVALUE - 266)) | (1L << (NOORDER - 266)) | (1L << (ORDER - 266)))) != 0) || _la==CACHE_NUMBER );
			setState(2109);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_sequenceContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(OracleSQLStatementParser.CREATE, 0); }
		public TerminalNode SEQUENCE() { return getToken(OracleSQLStatementParser.SEQUENCE, 0); }
		public Sequence_nameContext sequence_name() {
			return getRuleContext(Sequence_nameContext.class,0);
		}
		public TerminalNode SEMI() { return getToken(OracleSQLStatementParser.SEMI, 0); }
		public List<Sequence_start_clauseContext> sequence_start_clause() {
			return getRuleContexts(Sequence_start_clauseContext.class);
		}
		public Sequence_start_clauseContext sequence_start_clause(int i) {
			return getRuleContext(Sequence_start_clauseContext.class,i);
		}
		public List<Sequence_specContext> sequence_spec() {
			return getRuleContexts(Sequence_specContext.class);
		}
		public Sequence_specContext sequence_spec(int i) {
			return getRuleContext(Sequence_specContext.class,i);
		}
		public Create_sequenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_sequence; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterCreate_sequence(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitCreate_sequence(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitCreate_sequence(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_sequenceContext create_sequence() throws RecognitionException {
		Create_sequenceContext _localctx = new Create_sequenceContext(_ctx, getState());
		enterRule(_localctx, 166, RULE_create_sequence);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2111);
			match(CREATE);
			setState(2112);
			match(SEQUENCE);
			setState(2113);
			sequence_name();
			setState(2118);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==CYCLE || _la==INCREMENT || ((((_la - 266)) & ~0x3f) == 0 && ((1L << (_la - 266)) & ((1L << (MAXVALUE - 266)) | (1L << (MINVALUE - 266)) | (1L << (NOCACHE - 266)) | (1L << (NOCYCLE - 266)) | (1L << (NOMAXVALUE - 266)) | (1L << (NOMINVALUE - 266)) | (1L << (NOORDER - 266)) | (1L << (ORDER - 266)))) != 0) || _la==START || _la==CACHE_NUMBER) {
				{
				setState(2116);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case START:
					{
					setState(2114);
					sequence_start_clause();
					}
					break;
				case CYCLE:
				case INCREMENT:
				case MAXVALUE:
				case MINVALUE:
				case NOCACHE:
				case NOCYCLE:
				case NOMAXVALUE:
				case NOMINVALUE:
				case NOORDER:
				case ORDER:
				case CACHE_NUMBER:
					{
					setState(2115);
					sequence_spec();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(2120);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2121);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sequence_specContext extends ParserRuleContext {
		public TerminalNode INCREMENT() { return getToken(OracleSQLStatementParser.INCREMENT, 0); }
		public TerminalNode BY() { return getToken(OracleSQLStatementParser.BY, 0); }
		public TerminalNode UNSIGNED_INTEGER() { return getToken(OracleSQLStatementParser.UNSIGNED_INTEGER, 0); }
		public TerminalNode MAXVALUE() { return getToken(OracleSQLStatementParser.MAXVALUE, 0); }
		public TerminalNode NOMAXVALUE() { return getToken(OracleSQLStatementParser.NOMAXVALUE, 0); }
		public TerminalNode MINVALUE() { return getToken(OracleSQLStatementParser.MINVALUE, 0); }
		public TerminalNode NOMINVALUE() { return getToken(OracleSQLStatementParser.NOMINVALUE, 0); }
		public TerminalNode CYCLE() { return getToken(OracleSQLStatementParser.CYCLE, 0); }
		public TerminalNode NOCYCLE() { return getToken(OracleSQLStatementParser.NOCYCLE, 0); }
		public TerminalNode CACHE_NUMBER() { return getToken(OracleSQLStatementParser.CACHE_NUMBER, 0); }
		public TerminalNode NOCACHE() { return getToken(OracleSQLStatementParser.NOCACHE, 0); }
		public TerminalNode ORDER() { return getToken(OracleSQLStatementParser.ORDER, 0); }
		public TerminalNode NOORDER() { return getToken(OracleSQLStatementParser.NOORDER, 0); }
		public Sequence_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sequence_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterSequence_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitSequence_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitSequence_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sequence_specContext sequence_spec() throws RecognitionException {
		Sequence_specContext _localctx = new Sequence_specContext(_ctx, getState());
		enterRule(_localctx, 168, RULE_sequence_spec);
		try {
			setState(2138);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INCREMENT:
				enterOuterAlt(_localctx, 1);
				{
				setState(2123);
				match(INCREMENT);
				setState(2124);
				match(BY);
				setState(2125);
				match(UNSIGNED_INTEGER);
				}
				break;
			case MAXVALUE:
				enterOuterAlt(_localctx, 2);
				{
				setState(2126);
				match(MAXVALUE);
				setState(2127);
				match(UNSIGNED_INTEGER);
				}
				break;
			case NOMAXVALUE:
				enterOuterAlt(_localctx, 3);
				{
				setState(2128);
				match(NOMAXVALUE);
				}
				break;
			case MINVALUE:
				enterOuterAlt(_localctx, 4);
				{
				setState(2129);
				match(MINVALUE);
				setState(2130);
				match(UNSIGNED_INTEGER);
				}
				break;
			case NOMINVALUE:
				enterOuterAlt(_localctx, 5);
				{
				setState(2131);
				match(NOMINVALUE);
				}
				break;
			case CYCLE:
				enterOuterAlt(_localctx, 6);
				{
				setState(2132);
				match(CYCLE);
				}
				break;
			case NOCYCLE:
				enterOuterAlt(_localctx, 7);
				{
				setState(2133);
				match(NOCYCLE);
				}
				break;
			case CACHE_NUMBER:
				enterOuterAlt(_localctx, 8);
				{
				setState(2134);
				match(CACHE_NUMBER);
				}
				break;
			case NOCACHE:
				enterOuterAlt(_localctx, 9);
				{
				setState(2135);
				match(NOCACHE);
				}
				break;
			case ORDER:
				enterOuterAlt(_localctx, 10);
				{
				setState(2136);
				match(ORDER);
				}
				break;
			case NOORDER:
				enterOuterAlt(_localctx, 11);
				{
				setState(2137);
				match(NOORDER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sequence_start_clauseContext extends ParserRuleContext {
		public TerminalNode START() { return getToken(OracleSQLStatementParser.START, 0); }
		public TerminalNode WITH() { return getToken(OracleSQLStatementParser.WITH, 0); }
		public TerminalNode UNSIGNED_INTEGER() { return getToken(OracleSQLStatementParser.UNSIGNED_INTEGER, 0); }
		public Sequence_start_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sequence_start_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterSequence_start_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitSequence_start_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitSequence_start_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sequence_start_clauseContext sequence_start_clause() throws RecognitionException {
		Sequence_start_clauseContext _localctx = new Sequence_start_clauseContext(_ctx, getState());
		enterRule(_localctx, 170, RULE_sequence_start_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2140);
			match(START);
			setState(2141);
			match(WITH);
			setState(2142);
			match(UNSIGNED_INTEGER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_tableContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(OracleSQLStatementParser.CREATE, 0); }
		public TerminalNode TABLE() { return getToken(OracleSQLStatementParser.TABLE, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(OracleSQLStatementParser.LEFT_PAREN, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public List<DatatypeContext> datatype() {
			return getRuleContexts(DatatypeContext.class);
		}
		public DatatypeContext datatype(int i) {
			return getRuleContext(DatatypeContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(OracleSQLStatementParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(OracleSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(OracleSQLStatementParser.COMMA, i);
		}
		public Create_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterCreate_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitCreate_table(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitCreate_table(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_tableContext create_table() throws RecognitionException {
		Create_tableContext _localctx = new Create_tableContext(_ctx, getState());
		enterRule(_localctx, 172, RULE_create_table);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2144);
			match(CREATE);
			setState(2145);
			match(TABLE);
			setState(2146);
			tableview_name();
			setState(2147);
			match(LEFT_PAREN);
			setState(2148);
			column_name();
			setState(2149);
			datatype();
			setState(2156);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2150);
				match(COMMA);
				setState(2151);
				column_name();
				setState(2152);
				datatype();
				}
				}
				setState(2158);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2159);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_viewContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(OracleSQLStatementParser.CREATE, 0); }
		public TerminalNode VIEW() { return getToken(OracleSQLStatementParser.VIEW, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public Create_viewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_view; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterCreate_view(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitCreate_view(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitCreate_view(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_viewContext create_view() throws RecognitionException {
		Create_viewContext _localctx = new Create_viewContext(_ctx, getState());
		enterRule(_localctx, 174, RULE_create_view);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2161);
			match(CREATE);
			setState(2162);
			match(VIEW);
			setState(2163);
			tableview_name();
			setState(2164);
			select_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_tableContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(OracleSQLStatementParser.DROP, 0); }
		public TerminalNode TABLE() { return getToken(OracleSQLStatementParser.TABLE, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public Drop_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterDrop_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitDrop_table(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitDrop_table(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_tableContext drop_table() throws RecognitionException {
		Drop_tableContext _localctx = new Drop_tableContext(_ctx, getState());
		enterRule(_localctx, 176, RULE_drop_table);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2166);
			match(DROP);
			setState(2167);
			match(TABLE);
			setState(2168);
			tableview_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Comment_on_columnContext extends ParserRuleContext {
		public TerminalNode COMMENT_ON_COLUMN() { return getToken(OracleSQLStatementParser.COMMENT_ON_COLUMN, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public TerminalNode PERIOD() { return getToken(OracleSQLStatementParser.PERIOD, 0); }
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public TerminalNode IS() { return getToken(OracleSQLStatementParser.IS, 0); }
		public Quoted_stringContext quoted_string() {
			return getRuleContext(Quoted_stringContext.class,0);
		}
		public Comment_on_columnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comment_on_column; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterComment_on_column(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitComment_on_column(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitComment_on_column(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Comment_on_columnContext comment_on_column() throws RecognitionException {
		Comment_on_columnContext _localctx = new Comment_on_columnContext(_ctx, getState());
		enterRule(_localctx, 178, RULE_comment_on_column);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2170);
			match(COMMENT_ON_COLUMN);
			setState(2171);
			tableview_name();
			setState(2172);
			match(PERIOD);
			setState(2173);
			column_name();
			setState(2174);
			match(IS);
			setState(2175);
			quoted_string();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_synonymContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(OracleSQLStatementParser.CREATE, 0); }
		public TerminalNode PUBLIC() { return getToken(OracleSQLStatementParser.PUBLIC, 0); }
		public TerminalNode SYNONYM() { return getToken(OracleSQLStatementParser.SYNONYM, 0); }
		public Synonym_nameContext synonym_name() {
			return getRuleContext(Synonym_nameContext.class,0);
		}
		public TerminalNode FOR() { return getToken(OracleSQLStatementParser.FOR, 0); }
		public Schema_object_nameContext schema_object_name() {
			return getRuleContext(Schema_object_nameContext.class,0);
		}
		public TerminalNode OR() { return getToken(OracleSQLStatementParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(OracleSQLStatementParser.REPLACE, 0); }
		public List<Schema_nameContext> schema_name() {
			return getRuleContexts(Schema_nameContext.class);
		}
		public Schema_nameContext schema_name(int i) {
			return getRuleContext(Schema_nameContext.class,i);
		}
		public List<TerminalNode> PERIOD() { return getTokens(OracleSQLStatementParser.PERIOD); }
		public TerminalNode PERIOD(int i) {
			return getToken(OracleSQLStatementParser.PERIOD, i);
		}
		public TerminalNode AT_SIGN() { return getToken(OracleSQLStatementParser.AT_SIGN, 0); }
		public Link_nameContext link_name() {
			return getRuleContext(Link_nameContext.class,0);
		}
		public Create_synonymContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_synonym; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterCreate_synonym(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitCreate_synonym(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitCreate_synonym(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_synonymContext create_synonym() throws RecognitionException {
		Create_synonymContext _localctx = new Create_synonymContext(_ctx, getState());
		enterRule(_localctx, 180, RULE_create_synonym);
		int _la;
		try {
			setState(2219);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,208,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2177);
				match(CREATE);
				setState(2180);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OR) {
					{
					setState(2178);
					match(OR);
					setState(2179);
					match(REPLACE);
					}
				}

				setState(2182);
				match(PUBLIC);
				setState(2183);
				match(SYNONYM);
				setState(2184);
				synonym_name();
				setState(2185);
				match(FOR);
				setState(2189);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,202,_ctx) ) {
				case 1:
					{
					setState(2186);
					schema_name();
					setState(2187);
					match(PERIOD);
					}
					break;
				}
				setState(2191);
				schema_object_name();
				setState(2194);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AT_SIGN) {
					{
					setState(2192);
					match(AT_SIGN);
					setState(2193);
					link_name();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2196);
				match(CREATE);
				setState(2199);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OR) {
					{
					setState(2197);
					match(OR);
					setState(2198);
					match(REPLACE);
					}
				}

				setState(2201);
				match(SYNONYM);
				setState(2205);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,205,_ctx) ) {
				case 1:
					{
					setState(2202);
					schema_name();
					setState(2203);
					match(PERIOD);
					}
					break;
				}
				setState(2207);
				synonym_name();
				setState(2208);
				match(FOR);
				setState(2212);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,206,_ctx) ) {
				case 1:
					{
					setState(2209);
					schema_name();
					setState(2210);
					match(PERIOD);
					}
					break;
				}
				setState(2214);
				schema_object_name();
				setState(2217);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AT_SIGN) {
					{
					setState(2215);
					match(AT_SIGN);
					setState(2216);
					link_name();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Comment_on_tableContext extends ParserRuleContext {
		public TerminalNode COMMENT() { return getToken(OracleSQLStatementParser.COMMENT, 0); }
		public TerminalNode ON() { return getToken(OracleSQLStatementParser.ON, 0); }
		public TerminalNode TABLE() { return getToken(OracleSQLStatementParser.TABLE, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public TerminalNode IS() { return getToken(OracleSQLStatementParser.IS, 0); }
		public Quoted_stringContext quoted_string() {
			return getRuleContext(Quoted_stringContext.class,0);
		}
		public Comment_on_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comment_on_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterComment_on_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitComment_on_table(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitComment_on_table(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Comment_on_tableContext comment_on_table() throws RecognitionException {
		Comment_on_tableContext _localctx = new Comment_on_tableContext(_ctx, getState());
		enterRule(_localctx, 182, RULE_comment_on_table);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2221);
			match(COMMENT);
			setState(2222);
			match(ON);
			setState(2223);
			match(TABLE);
			setState(2224);
			tableview_name();
			setState(2225);
			match(IS);
			setState(2226);
			quoted_string();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_tableContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(OracleSQLStatementParser.ALTER, 0); }
		public TerminalNode TABLE() { return getToken(OracleSQLStatementParser.TABLE, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public Add_constraintContext add_constraint() {
			return getRuleContext(Add_constraintContext.class,0);
		}
		public Alter_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterAlter_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitAlter_table(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitAlter_table(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_tableContext alter_table() throws RecognitionException {
		Alter_tableContext _localctx = new Alter_tableContext(_ctx, getState());
		enterRule(_localctx, 184, RULE_alter_table);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2228);
			match(ALTER);
			setState(2229);
			match(TABLE);
			setState(2230);
			tableview_name();
			setState(2231);
			add_constraint();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Add_constraintContext extends ParserRuleContext {
		public TerminalNode ADD() { return getToken(OracleSQLStatementParser.ADD, 0); }
		public Primary_key_clauseContext primary_key_clause() {
			return getRuleContext(Primary_key_clauseContext.class,0);
		}
		public Foreign_key_clauseContext foreign_key_clause() {
			return getRuleContext(Foreign_key_clauseContext.class,0);
		}
		public Unique_key_clauseContext unique_key_clause() {
			return getRuleContext(Unique_key_clauseContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(OracleSQLStatementParser.CONSTRAINT, 0); }
		public Constraint_nameContext constraint_name() {
			return getRuleContext(Constraint_nameContext.class,0);
		}
		public Add_constraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_add_constraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterAdd_constraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitAdd_constraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitAdd_constraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Add_constraintContext add_constraint() throws RecognitionException {
		Add_constraintContext _localctx = new Add_constraintContext(_ctx, getState());
		enterRule(_localctx, 186, RULE_add_constraint);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2233);
			match(ADD);
			setState(2236);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONSTRAINT) {
				{
				setState(2234);
				match(CONSTRAINT);
				setState(2235);
				constraint_name();
				}
			}

			setState(2241);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PRIMARY:
				{
				setState(2238);
				primary_key_clause();
				}
				break;
			case FOREIGN:
				{
				setState(2239);
				foreign_key_clause();
				}
				break;
			case UNIQUE:
				{
				setState(2240);
				unique_key_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Foreign_key_clauseContext extends ParserRuleContext {
		public TerminalNode FOREIGN() { return getToken(OracleSQLStatementParser.FOREIGN, 0); }
		public TerminalNode KEY() { return getToken(OracleSQLStatementParser.KEY, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(OracleSQLStatementParser.LEFT_PAREN, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(OracleSQLStatementParser.RIGHT_PAREN, 0); }
		public References_clauseContext references_clause() {
			return getRuleContext(References_clauseContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(OracleSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(OracleSQLStatementParser.COMMA, i);
		}
		public On_delete_clauseContext on_delete_clause() {
			return getRuleContext(On_delete_clauseContext.class,0);
		}
		public Foreign_key_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_foreign_key_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterForeign_key_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitForeign_key_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitForeign_key_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Foreign_key_clauseContext foreign_key_clause() throws RecognitionException {
		Foreign_key_clauseContext _localctx = new Foreign_key_clauseContext(_ctx, getState());
		enterRule(_localctx, 188, RULE_foreign_key_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2243);
			match(FOREIGN);
			setState(2244);
			match(KEY);
			setState(2245);
			match(LEFT_PAREN);
			setState(2246);
			column_name();
			setState(2251);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2247);
				match(COMMA);
				setState(2248);
				column_name();
				}
				}
				setState(2253);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2254);
			match(RIGHT_PAREN);
			setState(2255);
			references_clause();
			setState(2257);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(2256);
				on_delete_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class References_clauseContext extends ParserRuleContext {
		public TerminalNode REFERENCES() { return getToken(OracleSQLStatementParser.REFERENCES, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(OracleSQLStatementParser.LEFT_PAREN, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(OracleSQLStatementParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(OracleSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(OracleSQLStatementParser.COMMA, i);
		}
		public References_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_references_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterReferences_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitReferences_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitReferences_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final References_clauseContext references_clause() throws RecognitionException {
		References_clauseContext _localctx = new References_clauseContext(_ctx, getState());
		enterRule(_localctx, 190, RULE_references_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2259);
			match(REFERENCES);
			setState(2260);
			tableview_name();
			setState(2261);
			match(LEFT_PAREN);
			setState(2262);
			column_name();
			setState(2267);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2263);
				match(COMMA);
				setState(2264);
				column_name();
				}
				}
				setState(2269);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2270);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class On_delete_clauseContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(OracleSQLStatementParser.ON, 0); }
		public TerminalNode DELETE() { return getToken(OracleSQLStatementParser.DELETE, 0); }
		public TerminalNode CASCADE() { return getToken(OracleSQLStatementParser.CASCADE, 0); }
		public TerminalNode SET() { return getToken(OracleSQLStatementParser.SET, 0); }
		public TerminalNode NULL() { return getToken(OracleSQLStatementParser.NULL, 0); }
		public On_delete_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_on_delete_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterOn_delete_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitOn_delete_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitOn_delete_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final On_delete_clauseContext on_delete_clause() throws RecognitionException {
		On_delete_clauseContext _localctx = new On_delete_clauseContext(_ctx, getState());
		enterRule(_localctx, 192, RULE_on_delete_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2272);
			match(ON);
			setState(2273);
			match(DELETE);
			setState(2277);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CASCADE:
				{
				setState(2274);
				match(CASCADE);
				}
				break;
			case SET:
				{
				setState(2275);
				match(SET);
				setState(2276);
				match(NULL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unique_key_clauseContext extends ParserRuleContext {
		public TerminalNode UNIQUE() { return getToken(OracleSQLStatementParser.UNIQUE, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(OracleSQLStatementParser.LEFT_PAREN, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(OracleSQLStatementParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(OracleSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(OracleSQLStatementParser.COMMA, i);
		}
		public Unique_key_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unique_key_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterUnique_key_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitUnique_key_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitUnique_key_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Unique_key_clauseContext unique_key_clause() throws RecognitionException {
		Unique_key_clauseContext _localctx = new Unique_key_clauseContext(_ctx, getState());
		enterRule(_localctx, 194, RULE_unique_key_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2279);
			match(UNIQUE);
			setState(2280);
			match(LEFT_PAREN);
			setState(2281);
			column_name();
			setState(2286);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2282);
				match(COMMA);
				setState(2283);
				column_name();
				}
				}
				setState(2288);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2289);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Primary_key_clauseContext extends ParserRuleContext {
		public TerminalNode PRIMARY() { return getToken(OracleSQLStatementParser.PRIMARY, 0); }
		public TerminalNode KEY() { return getToken(OracleSQLStatementParser.KEY, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(OracleSQLStatementParser.LEFT_PAREN, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(OracleSQLStatementParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(OracleSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(OracleSQLStatementParser.COMMA, i);
		}
		public Primary_key_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_primary_key_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterPrimary_key_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitPrimary_key_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitPrimary_key_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Primary_key_clauseContext primary_key_clause() throws RecognitionException {
		Primary_key_clauseContext _localctx = new Primary_key_clauseContext(_ctx, getState());
		enterRule(_localctx, 196, RULE_primary_key_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2291);
			match(PRIMARY);
			setState(2292);
			match(KEY);
			setState(2293);
			match(LEFT_PAREN);
			setState(2294);
			column_name();
			setState(2299);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2295);
				match(COMMA);
				setState(2296);
				column_name();
				}
				}
				setState(2301);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2302);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Anonymous_blockContext extends ParserRuleContext {
		public TerminalNode BEGIN() { return getToken(OracleSQLStatementParser.BEGIN, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public TerminalNode END() { return getToken(OracleSQLStatementParser.END, 0); }
		public TerminalNode SEMI() { return getToken(OracleSQLStatementParser.SEMI, 0); }
		public Anonymous_blockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_anonymous_block; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterAnonymous_block(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitAnonymous_block(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitAnonymous_block(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Anonymous_blockContext anonymous_block() throws RecognitionException {
		Anonymous_blockContext _localctx = new Anonymous_blockContext(_ctx, getState());
		enterRule(_localctx, 198, RULE_anonymous_block);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2304);
			match(BEGIN);
			setState(2305);
			seq_of_statements();
			setState(2306);
			match(END);
			setState(2307);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Invoker_rights_clauseContext extends ParserRuleContext {
		public TerminalNode AUTHID() { return getToken(OracleSQLStatementParser.AUTHID, 0); }
		public TerminalNode CURRENT_USER() { return getToken(OracleSQLStatementParser.CURRENT_USER, 0); }
		public TerminalNode DEFINER() { return getToken(OracleSQLStatementParser.DEFINER, 0); }
		public Invoker_rights_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_invoker_rights_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterInvoker_rights_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitInvoker_rights_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitInvoker_rights_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Invoker_rights_clauseContext invoker_rights_clause() throws RecognitionException {
		Invoker_rights_clauseContext _localctx = new Invoker_rights_clauseContext(_ctx, getState());
		enterRule(_localctx, 200, RULE_invoker_rights_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2309);
			match(AUTHID);
			setState(2310);
			_la = _input.LA(1);
			if ( !(_la==CURRENT_USER || _la==DEFINER) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Compiler_parameters_clauseContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Compiler_parameters_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compiler_parameters_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterCompiler_parameters_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitCompiler_parameters_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitCompiler_parameters_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Compiler_parameters_clauseContext compiler_parameters_clause() throws RecognitionException {
		Compiler_parameters_clauseContext _localctx = new Compiler_parameters_clauseContext(_ctx, getState());
		enterRule(_localctx, 202, RULE_compiler_parameters_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2312);
			identifier();
			setState(2313);
			match(EQUALS_OP);
			setState(2314);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Call_specContext extends ParserRuleContext {
		public TerminalNode LANGUAGE() { return getToken(OracleSQLStatementParser.LANGUAGE, 0); }
		public Java_specContext java_spec() {
			return getRuleContext(Java_specContext.class,0);
		}
		public C_specContext c_spec() {
			return getRuleContext(C_specContext.class,0);
		}
		public Call_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_call_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterCall_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitCall_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitCall_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Call_specContext call_spec() throws RecognitionException {
		Call_specContext _localctx = new Call_specContext(_ctx, getState());
		enterRule(_localctx, 204, RULE_call_spec);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2316);
			match(LANGUAGE);
			setState(2319);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case JAVA:
				{
				setState(2317);
				java_spec();
				}
				break;
			case C_LETTER:
				{
				setState(2318);
				c_spec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Java_specContext extends ParserRuleContext {
		public TerminalNode JAVA() { return getToken(OracleSQLStatementParser.JAVA, 0); }
		public TerminalNode NAME() { return getToken(OracleSQLStatementParser.NAME, 0); }
		public TerminalNode CHAR_STRING() { return getToken(OracleSQLStatementParser.CHAR_STRING, 0); }
		public Java_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_java_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterJava_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitJava_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitJava_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Java_specContext java_spec() throws RecognitionException {
		Java_specContext _localctx = new Java_specContext(_ctx, getState());
		enterRule(_localctx, 206, RULE_java_spec);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2321);
			match(JAVA);
			setState(2322);
			match(NAME);
			setState(2323);
			match(CHAR_STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class C_specContext extends ParserRuleContext {
		public TerminalNode C_LETTER() { return getToken(OracleSQLStatementParser.C_LETTER, 0); }
		public TerminalNode LIBRARY() { return getToken(OracleSQLStatementParser.LIBRARY, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode NAME() { return getToken(OracleSQLStatementParser.NAME, 0); }
		public TerminalNode CHAR_STRING() { return getToken(OracleSQLStatementParser.CHAR_STRING, 0); }
		public C_agent_in_clauseContext c_agent_in_clause() {
			return getRuleContext(C_agent_in_clauseContext.class,0);
		}
		public TerminalNode WITH() { return getToken(OracleSQLStatementParser.WITH, 0); }
		public TerminalNode CONTEXT() { return getToken(OracleSQLStatementParser.CONTEXT, 0); }
		public C_parameters_clauseContext c_parameters_clause() {
			return getRuleContext(C_parameters_clauseContext.class,0);
		}
		public C_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_c_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterC_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitC_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitC_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final C_specContext c_spec() throws RecognitionException {
		C_specContext _localctx = new C_specContext(_ctx, getState());
		enterRule(_localctx, 208, RULE_c_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2325);
			match(C_LETTER);
			setState(2328);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NAME) {
				{
				setState(2326);
				match(NAME);
				setState(2327);
				match(CHAR_STRING);
				}
			}

			setState(2330);
			match(LIBRARY);
			setState(2331);
			identifier();
			setState(2333);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AGENT) {
				{
				setState(2332);
				c_agent_in_clause();
				}
			}

			setState(2337);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(2335);
				match(WITH);
				setState(2336);
				match(CONTEXT);
				}
			}

			setState(2340);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARAMETERS) {
				{
				setState(2339);
				c_parameters_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class C_agent_in_clauseContext extends ParserRuleContext {
		public TerminalNode AGENT() { return getToken(OracleSQLStatementParser.AGENT, 0); }
		public TerminalNode IN() { return getToken(OracleSQLStatementParser.IN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(OracleSQLStatementParser.LEFT_PAREN, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(OracleSQLStatementParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(OracleSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(OracleSQLStatementParser.COMMA, i);
		}
		public C_agent_in_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_c_agent_in_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterC_agent_in_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitC_agent_in_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitC_agent_in_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final C_agent_in_clauseContext c_agent_in_clause() throws RecognitionException {
		C_agent_in_clauseContext _localctx = new C_agent_in_clauseContext(_ctx, getState());
		enterRule(_localctx, 210, RULE_c_agent_in_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2342);
			match(AGENT);
			setState(2343);
			match(IN);
			setState(2344);
			match(LEFT_PAREN);
			setState(2345);
			expression();
			setState(2350);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2346);
				match(COMMA);
				setState(2347);
				expression();
				}
				}
				setState(2352);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2353);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class C_parameters_clauseContext extends ParserRuleContext {
		public TerminalNode PARAMETERS() { return getToken(OracleSQLStatementParser.PARAMETERS, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(OracleSQLStatementParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(OracleSQLStatementParser.RIGHT_PAREN, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(OracleSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(OracleSQLStatementParser.COMMA, i);
		}
		public C_parameters_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_c_parameters_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterC_parameters_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitC_parameters_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitC_parameters_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final C_parameters_clauseContext c_parameters_clause() throws RecognitionException {
		C_parameters_clauseContext _localctx = new C_parameters_clauseContext(_ctx, getState());
		enterRule(_localctx, 212, RULE_c_parameters_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2355);
			match(PARAMETERS);
			setState(2356);
			match(LEFT_PAREN);
			setState(2368);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ABS:
			case ACOS:
			case ADD:
			case ADD_MONTHS:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ALL:
			case ANALYZE:
			case ANY:
			case ARRAY:
			case ASCII:
			case ASCIISTR:
			case ASIN:
			case ASSOCIATE:
			case ATAN2:
			case ATAN:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BFILENAME:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BIN_TO_NUM:
			case BITAND:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CARDINALITY:
			case CASCADE:
			case CASE:
			case CAST:
			case CEIL:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHARTOROWID:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOSE:
			case COMPOUND:
			case CONCAT:
			case CONNECT_BY_ROOT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COS:
			case COSH:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_DATE:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DISTINCT:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case DUMP:
			case EACH:
			case ELEMENT:
			case EMPTY_BLOB:
			case EMPTY_CLOB:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXP:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FALSE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FLOOR:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FROM_TZ:
			case FULL:
			case FUNCTION:
			case GROUP_ID:
			case GROUPING:
			case HASH:
			case HEXTORAW:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INITCAP:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INSTR2:
			case INSTR4:
			case INSTRB:
			case INSTRC:
			case INSTR:
			case INTERFACE:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST_DAY:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LENGTH2:
			case LENGTH4:
			case LENGTHB:
			case LENGTHC:
			case LENGTH:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LN:
			case LNNVL:
			case LOCAL:
			case LOCALTIMESTAMP:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MOD:
			case MONTH:
			case MONTHS_BETWEEN:
			case MULTISET:
			case NAME:
			case NAN:
			case NANVL:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCHR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NEW_TIME:
			case NEXT_DAY:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NOT:
			case NULLIF:
			case NULL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NUMTODSINTERVAL:
			case NUMTOYMINTERVAL:
			case NVARCHAR2:
			case NVL2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPAQUE:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case POWER:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case PROCEDURE:
			case RAISE:
			case RANGE:
			case RAW:
			case RAWTOHEX:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_REPLACE:
			case REGEXP_SUBSTR:
			case REJECT:
			case RELIES_ON:
			case REMAINDER:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROWNUM:
			case ROW:
			case ROWS:
			case RPAD:
			case RTRIM:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGN:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SINH:
			case SIN:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SOUNDEX:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case SQRT:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYS_CONTEXT:
			case SYSDATE:
			case SYSTIMESTAMP:
			case TANH:
			case TAN:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TO_CLOB:
			case TO_DSINTERVAL:
			case TO_LOB:
			case TO_MULTI_BYTE:
			case TO_NCLOB:
			case TO_NUMBER:
			case TO_SINGLE_BYTE:
			case TO_TIMESTAMP:
			case TO_TIMESTAMP_TZ:
			case TO_YMINTERVAL:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUE:
			case TRUNCATE:
			case TRUNC:
			case TYPE:
			case TZ_OFFSET:
			case UID:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPPER:
			case UPSERT:
			case UROWID:
			case USERENV:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case VSIZE:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case DECODE:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case NVL:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROUND:
			case ROW_NUMBER:
			case SUBSTR:
			case TO_CHAR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case LEAST:
			case GREATEST:
			case TO_DATE:
			case NATIONAL_CHAR_STRING_LIT:
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
			case CHAR_STRING:
			case DELIMITED_ID:
			case LEFT_PAREN:
			case ASTERISK:
			case PLUS_SIGN:
			case MINUS_SIGN:
			case BINDVAR:
			case COLON:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(2357);
				expression();
				setState(2362);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2358);
					match(COMMA);
					setState(2359);
					expression();
					}
					}
					setState(2364);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case PERIOD:
				{
				setState(2365);
				match(PERIOD);
				setState(2366);
				match(PERIOD);
				setState(2367);
				match(PERIOD);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2370);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ParameterContext extends ParserRuleContext {
		public Parameter_nameContext parameter_name() {
			return getRuleContext(Parameter_nameContext.class,0);
		}
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Default_value_partContext default_value_part() {
			return getRuleContext(Default_value_partContext.class,0);
		}
		public List<TerminalNode> IN() { return getTokens(OracleSQLStatementParser.IN); }
		public TerminalNode IN(int i) {
			return getToken(OracleSQLStatementParser.IN, i);
		}
		public List<TerminalNode> OUT() { return getTokens(OracleSQLStatementParser.OUT); }
		public TerminalNode OUT(int i) {
			return getToken(OracleSQLStatementParser.OUT, i);
		}
		public List<TerminalNode> INOUT() { return getTokens(OracleSQLStatementParser.INOUT); }
		public TerminalNode INOUT(int i) {
			return getToken(OracleSQLStatementParser.INOUT, i);
		}
		public List<TerminalNode> NOCOPY() { return getTokens(OracleSQLStatementParser.NOCOPY); }
		public TerminalNode NOCOPY(int i) {
			return getToken(OracleSQLStatementParser.NOCOPY, i);
		}
		public ParameterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parameter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterParameter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitParameter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitParameter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ParameterContext parameter() throws RecognitionException {
		ParameterContext _localctx = new ParameterContext(_ctx, getState());
		enterRule(_localctx, 214, RULE_parameter);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2372);
			parameter_name();
			setState(2376);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,225,_ctx);
			while ( _alt!=2 && _alt!= ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2373);
					_la = _input.LA(1);
					if ( !(_la==IN || _la==INOUT || _la==NOCOPY || _la==OUT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					} 
				}
				setState(2378);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,225,_ctx);
			}
			setState(2380);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABS) | (1L << ACOS) | (1L << ADD) | (1L << ADD_MONTHS) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASCII) | (1L << ASCIISTR) | (1L << ASIN) | (1L << ASSOCIATE) | (1L << ATAN2) | (1L << ATAN) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BFILENAME) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BIN_TO_NUM) | (1L << BITAND) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CARDINALITY) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CEIL) | (1L << CHARACTER) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARTOROWID) | (1L << CHR) | (1L << C_LETTER))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOSE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONCAT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COS - 64)) | (1L << (COSH - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_DATE - 64)) | (1L << (CURRENT_TIMESTAMP - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (DIMENSION - 128)) | (1L << (DISABLE - 128)) | (1L << (DISASSOCIATE - 128)) | (1L << (DOCUMENT - 128)) | (1L << (DOUBLE - 128)) | (1L << (DSINTERVAL_UNCONSTRAINED - 128)) | (1L << (DUMP - 128)) | (1L << (EACH - 128)) | (1L << (ELEMENT - 128)) | (1L << (EMPTY_BLOB - 128)) | (1L << (EMPTY_CLOB - 128)) | (1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERR - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXP - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FLOOR - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FROM_TZ - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUP_ID - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HEXTORAW - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (IGNORE - 193)) | (1L << (IMMEDIATE - 193)) | (1L << (INCLUDE - 193)) | (1L << (INCLUDING - 193)) | (1L << (INCREMENT - 193)) | (1L << (INDENT - 193)) | (1L << (INDEXED - 193)) | (1L << (INDICATOR - 193)) | (1L << (INDICES - 193)) | (1L << (INFINITE - 193)) | (1L << (INITCAP - 193)) | (1L << (INLINE - 193)) | (1L << (INNER - 193)) | (1L << (INOUT - 193)) | (1L << (INSTANTIABLE - 193)) | (1L << (INSTEAD - 193)) | (1L << (INSTR2 - 193)) | (1L << (INSTR4 - 193)) | (1L << (INSTRB - 193)) | (1L << (INSTRC - 193)) | (1L << (INSTR - 193)) | (1L << (INTERFACE - 193)) | (1L << (INTEGER - 193)) | (1L << (INTERVAL - 193)) | (1L << (INT - 193)) | (1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (KEY - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST_DAY - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LENGTH2 - 193)) | (1L << (LENGTH4 - 193)) | (1L << (LENGTHB - 193)) | (1L << (LENGTHC - 193)) | (1L << (LENGTH - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LN - 193)) | (1L << (LNNVL - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCALTIMESTAMP - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (LOGON - 257)) | (1L << (LONG - 257)) | (1L << (LOOP - 257)) | (1L << (LOWER - 257)) | (1L << (LPAD - 257)) | (1L << (LTRIM - 257)) | (1L << (MAIN - 257)) | (1L << (MAP - 257)) | (1L << (MATCHED - 257)) | (1L << (MAXVALUE - 257)) | (1L << (MEASURES - 257)) | (1L << (MEMBER - 257)) | (1L << (MERGE - 257)) | (1L << (MINUTE - 257)) | (1L << (MINVALUE - 257)) | (1L << (MLSLABEL - 257)) | (1L << (MODEL - 257)) | (1L << (MODIFY - 257)) | (1L << (MOD - 257)) | (1L << (MONTH - 257)) | (1L << (MONTHS_BETWEEN - 257)) | (1L << (MULTISET - 257)) | (1L << (NAME - 257)) | (1L << (NAN - 257)) | (1L << (NANVL - 257)) | (1L << (NATURAL - 257)) | (1L << (NATURALN - 257)) | (1L << (NAV - 257)) | (1L << (NCHAR_CS - 257)) | (1L << (NCHAR - 257)) | (1L << (NCHR - 257)) | (1L << (NCLOB - 257)) | (1L << (NESTED - 257)) | (1L << (NEW - 257)) | (1L << (NEW_TIME - 257)) | (1L << (NEXT_DAY - 257)) | (1L << (NOAUDIT - 257)) | (1L << (NOCOPY - 257)) | (1L << (NOCYCLE - 257)) | (1L << (NOENTITYESCAPING - 257)) | (1L << (NONE - 257)) | (1L << (NO - 257)) | (1L << (NOSCHEMACHECK - 257)) | (1L << (NULLIF - 257)) | (1L << (NULLS - 257)) | (1L << (NUMBER - 257)) | (1L << (NUMERIC - 257)) | (1L << (NUMTODSINTERVAL - 257)) | (1L << (NUMTOYMINTERVAL - 257)) | (1L << (NVARCHAR2 - 257)) | (1L << (NVL2 - 257)) | (1L << (OBJECT - 257)) | (1L << (OFF - 257)))) != 0) || ((((_la - 321)) & ~0x3f) == 0 && ((1L << (_la - 321)) & ((1L << (OID - 321)) | (1L << (OLD - 321)) | (1L << (ONLY - 321)) | (1L << (OPAQUE - 321)) | (1L << (OPEN - 321)) | (1L << (ORADATA - 321)) | (1L << (ORDINALITY - 321)) | (1L << (OSERROR - 321)) | (1L << (OUTER - 321)) | (1L << (OUT - 321)) | (1L << (OVER - 321)) | (1L << (OVERRIDING - 321)) | (1L << (PACKAGE - 321)) | (1L << (PARALLEL_ENABLE - 321)) | (1L << (PARAMETERS - 321)) | (1L << (PARENT - 321)) | (1L << (PARTITION - 321)) | (1L << (PASSING - 321)) | (1L << (PATH - 321)) | (1L << (PIPELINED - 321)) | (1L << (PLAN - 321)) | (1L << (PLS_INTEGER - 321)) | (1L << (POSITIVEN - 321)) | (1L << (POSITIVE - 321)) | (1L << (POWER - 321)) | (1L << (PRAGMA - 321)) | (1L << (PRECEDING - 321)) | (1L << (PRECISION - 321)) | (1L << (PRESENT - 321)) | (1L << (PRIOR - 321)) | (1L << (PROCEDURE - 321)) | (1L << (RAISE - 321)) | (1L << (RANGE - 321)) | (1L << (RAW - 321)) | (1L << (RAWTOHEX - 321)) | (1L << (READ - 321)) | (1L << (REAL - 321)) | (1L << (RECORD - 321)) | (1L << (REFERENCE - 321)) | (1L << (REFERENCING - 321)) | (1L << (REF - 321)) | (1L << (REGEXP_COUNT - 321)) | (1L << (REGEXP_INSTR - 321)) | (1L << (REGEXP_REPLACE - 321)) | (1L << (REGEXP_SUBSTR - 321)) | (1L << (REJECT - 321)) | (1L << (RELIES_ON - 321)) | (1L << (REMAINDER - 321)))) != 0) || ((((_la - 385)) & ~0x3f) == 0 && ((1L << (_la - 385)) & ((1L << (RENAME - 385)) | (1L << (REPLACE - 385)) | (1L << (RESPECT - 385)) | (1L << (RESTRICT_REFERENCES - 385)) | (1L << (RESULT_CACHE - 385)) | (1L << (RESULT - 385)) | (1L << (RETURNING - 385)) | (1L << (RETURN - 385)) | (1L << (REUSE - 385)) | (1L << (REVERSE - 385)) | (1L << (RIGHT - 385)) | (1L << (ROLLBACK - 385)) | (1L << (ROLLUP - 385)) | (1L << (ROWID - 385)) | (1L << (ROWNUM - 385)) | (1L << (ROW - 385)) | (1L << (ROWS - 385)) | (1L << (RPAD - 385)) | (1L << (RTRIM - 385)) | (1L << (RULES - 385)) | (1L << (SAMPLE - 385)) | (1L << (SAVEPOINT - 385)) | (1L << (SAVE - 385)) | (1L << (SCHEMACHECK - 385)) | (1L << (SCHEMA - 385)) | (1L << (SCN - 385)) | (1L << (SECOND - 385)) | (1L << (SEED - 385)) | (1L << (SEGMENT - 385)) | (1L << (SELF - 385)) | (1L << (SEQUENTIAL - 385)) | (1L << (SERIALIZABLE - 385)) | (1L << (SERIALLY_REUSABLE - 385)) | (1L << (SERVERERROR - 385)) | (1L << (SESSIONTIMEZONE - 385)) | (1L << (SET - 385)) | (1L << (SETS - 385)) | (1L << (SETTINGS - 385)) | (1L << (SHOW - 385)) | (1L << (SHUTDOWN - 385)) | (1L << (SIBLINGS - 385)) | (1L << (SIGN - 385)) | (1L << (SIGNTYPE - 385)) | (1L << (SIMPLE_INTEGER - 385)) | (1L << (SINGLE - 385)) | (1L << (SINH - 385)) | (1L << (SIN - 385)) | (1L << (SKIP_ - 385)) | (1L << (SMALLINT - 385)) | (1L << (SNAPSHOT - 385)) | (1L << (SOME - 385)) | (1L << (SOUNDEX - 385)) | (1L << (SPECIFICATION - 385)) | (1L << (SQLDATA - 385)) | (1L << (SQLERROR - 385)) | (1L << (SQRT - 385)) | (1L << (STANDALONE - 385)))) != 0) || ((((_la - 449)) & ~0x3f) == 0 && ((1L << (_la - 449)) & ((1L << (STARTUP - 449)) | (1L << (STATEMENT_ID - 449)) | (1L << (STATEMENT - 449)) | (1L << (STATIC - 449)) | (1L << (STATISTICS - 449)) | (1L << (STRING - 449)) | (1L << (SUBMULTISET - 449)) | (1L << (SUBPARTITION - 449)) | (1L << (SUBSTITUTABLE - 449)) | (1L << (SUBTYPE - 449)) | (1L << (SUCCESS - 449)) | (1L << (SUSPEND - 449)) | (1L << (SYS_CONTEXT - 449)) | (1L << (SYSDATE - 449)) | (1L << (SYSTIMESTAMP - 449)) | (1L << (TANH - 449)) | (1L << (TAN - 449)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 449)) | (1L << (TIMESTAMP - 449)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 449)) | (1L << (TIMESTAMP_UNCONSTRAINED - 449)) | (1L << (TIME - 449)) | (1L << (TIME_TZ_UNCONSTRAINED - 449)) | (1L << (TIME_UNCONSTRAINED - 449)) | (1L << (TIMEZONE_ABBR - 449)) | (1L << (TIMEZONE_HOUR - 449)) | (1L << (TIMEZONE_MINUTE - 449)) | (1L << (TIMEZONE_REGION - 449)) | (1L << (TO_CLOB - 449)) | (1L << (TO_DSINTERVAL - 449)) | (1L << (TO_LOB - 449)) | (1L << (TO_MULTI_BYTE - 449)) | (1L << (TO_NCLOB - 449)) | (1L << (TO_NUMBER - 449)) | (1L << (TO_SINGLE_BYTE - 449)) | (1L << (TO_TIMESTAMP - 449)) | (1L << (TO_TIMESTAMP_TZ - 449)) | (1L << (TO_YMINTERVAL - 449)) | (1L << (TRAILING - 449)) | (1L << (TRANSACTION - 449)) | (1L << (TRANSLATE - 449)) | (1L << (TREAT - 449)) | (1L << (TRIGGER - 449)) | (1L << (TRUNCATE - 449)) | (1L << (TRUNC - 449)) | (1L << (TYPE - 449)) | (1L << (TZ_OFFSET - 449)) | (1L << (UID - 449)) | (1L << (UNBOUNDED - 449)) | (1L << (UNDER - 449)) | (1L << (UNLIMITED - 449)) | (1L << (UNTIL - 449)) | (1L << (UPDATED - 449)))) != 0) || ((((_la - 513)) & ~0x3f) == 0 && ((1L << (_la - 513)) & ((1L << (UPPER - 513)) | (1L << (UPSERT - 513)) | (1L << (UROWID - 513)) | (1L << (USERENV - 513)) | (1L << (USER - 513)) | (1L << (USE - 513)) | (1L << (VALIDATE - 513)) | (1L << (VALUE - 513)) | (1L << (VARCHAR2 - 513)) | (1L << (VARCHAR - 513)) | (1L << (VARIABLE - 513)) | (1L << (VARRAY - 513)) | (1L << (VARYING - 513)) | (1L << (VERSIONS - 513)) | (1L << (VERSION - 513)) | (1L << (VSIZE - 513)) | (1L << (WAIT - 513)) | (1L << (WARNING - 513)) | (1L << (WELLFORMED - 513)) | (1L << (WHENEVER - 513)) | (1L << (WHILE - 513)) | (1L << (WITHIN - 513)) | (1L << (WORK - 513)) | (1L << (WRITE - 513)) | (1L << (XMLAGG - 513)) | (1L << (XMLATTRIBUTES - 513)) | (1L << (XMLCAST - 513)) | (1L << (XMLCOLATTVAL - 513)) | (1L << (XMLELEMENT - 513)) | (1L << (XMLEXISTS - 513)) | (1L << (XMLFOREST - 513)) | (1L << (XMLNAMESPACES - 513)) | (1L << (XMLPARSE - 513)) | (1L << (XMLPI - 513)) | (1L << (XMLQUERY - 513)) | (1L << (XMLROOT - 513)) | (1L << (XMLSERIALIZE - 513)) | (1L << (XMLTABLE - 513)) | (1L << (XML - 513)) | (1L << (YEAR - 513)) | (1L << (YES - 513)) | (1L << (YMINTERVAL_UNCONSTRAINED - 513)) | (1L << (ZONE - 513)) | (1L << (PREDICTION - 513)) | (1L << (PREDICTION_BOUNDS - 513)) | (1L << (PREDICTION_COST - 513)) | (1L << (PREDICTION_DETAILS - 513)) | (1L << (PREDICTION_PROBABILITY - 513)) | (1L << (PREDICTION_SET - 513)) | (1L << (CUME_DIST - 513)) | (1L << (DENSE_RANK - 513)) | (1L << (LISTAGG - 513)) | (1L << (PERCENT_RANK - 513)) | (1L << (PERCENTILE_CONT - 513)) | (1L << (PERCENTILE_DISC - 513)) | (1L << (RANK - 513)))) != 0) || ((((_la - 577)) & ~0x3f) == 0 && ((1L << (_la - 577)) & ((1L << (AVG - 577)) | (1L << (CORR - 577)) | (1L << (COVAR_ - 577)) | (1L << (DECODE - 577)) | (1L << (LAG - 577)) | (1L << (LEAD - 577)) | (1L << (MAX - 577)) | (1L << (MEDIAN - 577)) | (1L << (MIN - 577)) | (1L << (NTILE - 577)) | (1L << (NVL - 577)) | (1L << (RATIO_TO_REPORT - 577)) | (1L << (REGR_ - 577)) | (1L << (ROUND - 577)) | (1L << (ROW_NUMBER - 577)) | (1L << (SUBSTR - 577)) | (1L << (TO_CHAR - 577)) | (1L << (TRIM - 577)) | (1L << (SUM - 577)) | (1L << (STDDEV - 577)) | (1L << (VAR_ - 577)) | (1L << (VARIANCE - 577)) | (1L << (LEAST - 577)) | (1L << (GREATEST - 577)) | (1L << (TO_DATE - 577)) | (1L << (DELIMITED_ID - 577)) | (1L << (ASTERISK - 577)))) != 0) || _la==REGULAR_ID) {
				{
				setState(2379);
				type_spec();
				}
			}

			setState(2383);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT || _la==ASSIGN_OP) {
				{
				setState(2382);
				default_value_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Default_value_partContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode ASSIGN_OP() { return getToken(OracleSQLStatementParser.ASSIGN_OP, 0); }
		public TerminalNode DEFAULT() { return getToken(OracleSQLStatementParser.DEFAULT, 0); }
		public Default_value_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_default_value_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterDefault_value_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitDefault_value_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitDefault_value_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Default_value_partContext default_value_part() throws RecognitionException {
		Default_value_partContext _localctx = new Default_value_partContext(_ctx, getState());
		enterRule(_localctx, 216, RULE_default_value_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2385);
			_la = _input.LA(1);
			if ( !(_la==DEFAULT || _la==ASSIGN_OP) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2386);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Declare_specContext extends ParserRuleContext {
		public Exception_declarationContext exception_declaration() {
			return getRuleContext(Exception_declarationContext.class,0);
		}
		public Pragma_declarationContext pragma_declaration() {
			return getRuleContext(Pragma_declarationContext.class,0);
		}
		public Procedure_specContext procedure_spec() {
			return getRuleContext(Procedure_specContext.class,0);
		}
		public Function_specContext function_spec() {
			return getRuleContext(Function_specContext.class,0);
		}
		public Variable_declarationContext variable_declaration() {
			return getRuleContext(Variable_declarationContext.class,0);
		}
		public Subtype_declarationContext subtype_declaration() {
			return getRuleContext(Subtype_declarationContext.class,0);
		}
		public Cursor_declarationContext cursor_declaration() {
			return getRuleContext(Cursor_declarationContext.class,0);
		}
		public Type_declarationContext type_declaration() {
			return getRuleContext(Type_declarationContext.class,0);
		}
		public Procedure_bodyContext procedure_body() {
			return getRuleContext(Procedure_bodyContext.class,0);
		}
		public Function_bodyContext function_body() {
			return getRuleContext(Function_bodyContext.class,0);
		}
		public Declare_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declare_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterDeclare_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitDeclare_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitDeclare_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Declare_specContext declare_spec() throws RecognitionException {
		Declare_specContext _localctx = new Declare_specContext(_ctx, getState());
		enterRule(_localctx, 218, RULE_declare_spec);
		try {
			setState(2398);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,228,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2388);
				exception_declaration();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2389);
				pragma_declaration();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2390);
				procedure_spec();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2391);
				function_spec();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2392);
				variable_declaration();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2393);
				subtype_declaration();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2394);
				cursor_declaration();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(2395);
				type_declaration();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(2396);
				procedure_body();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(2397);
				function_body();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Variable_declarationContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode SEMI() { return getToken(OracleSQLStatementParser.SEMI, 0); }
		public TerminalNode CONSTANT() { return getToken(OracleSQLStatementParser.CONSTANT, 0); }
		public TerminalNode NOT() { return getToken(OracleSQLStatementParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(OracleSQLStatementParser.NULL, 0); }
		public Default_value_partContext default_value_part() {
			return getRuleContext(Default_value_partContext.class,0);
		}
		public Variable_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_variable_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterVariable_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitVariable_declaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitVariable_declaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Variable_declarationContext variable_declaration() throws RecognitionException {
		Variable_declarationContext _localctx = new Variable_declarationContext(_ctx, getState());
		enterRule(_localctx, 220, RULE_variable_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2400);
			identifier();
			setState(2402);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,229,_ctx) ) {
			case 1:
				{
				setState(2401);
				match(CONSTANT);
				}
				break;
			}
			setState(2404);
			type_spec();
			setState(2407);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(2405);
				match(NOT);
				setState(2406);
				match(NULL);
				}
			}

			setState(2410);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT || _la==ASSIGN_OP) {
				{
				setState(2409);
				default_value_part();
				}
			}

			setState(2412);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Subtype_declarationContext extends ParserRuleContext {
		public TerminalNode SUBTYPE() { return getToken(OracleSQLStatementParser.SUBTYPE, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode IS() { return getToken(OracleSQLStatementParser.IS, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode SEMI() { return getToken(OracleSQLStatementParser.SEMI, 0); }
		public TerminalNode RANGE() { return getToken(OracleSQLStatementParser.RANGE, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode NOT() { return getToken(OracleSQLStatementParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(OracleSQLStatementParser.NULL, 0); }
		public Subtype_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subtype_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterSubtype_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitSubtype_declaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitSubtype_declaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Subtype_declarationContext subtype_declaration() throws RecognitionException {
		Subtype_declarationContext _localctx = new Subtype_declarationContext(_ctx, getState());
		enterRule(_localctx, 222, RULE_subtype_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2414);
			match(SUBTYPE);
			setState(2415);
			identifier();
			setState(2416);
			match(IS);
			setState(2417);
			type_spec();
			setState(2423);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RANGE) {
				{
				setState(2418);
				match(RANGE);
				setState(2419);
				expression();
				setState(2420);
				match(DOUBLE_PERIOD);
				setState(2421);
				expression();
				}
			}

			setState(2427);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(2425);
				match(NOT);
				setState(2426);
				match(NULL);
				}
			}

			setState(2429);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cursor_declarationContext extends ParserRuleContext {
		public TerminalNode CURSOR() { return getToken(OracleSQLStatementParser.CURSOR, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Parameter_specsContext parameter_specs() {
			return getRuleContext(Parameter_specsContext.class,0);
		}
		public TerminalNode SEMI() { return getToken(OracleSQLStatementParser.SEMI, 0); }
		public TerminalNode RETURN() { return getToken(OracleSQLStatementParser.RETURN, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode IS() { return getToken(OracleSQLStatementParser.IS, 0); }
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public Cursor_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterCursor_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitCursor_declaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitCursor_declaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cursor_declarationContext cursor_declaration() throws RecognitionException {
		Cursor_declarationContext _localctx = new Cursor_declarationContext(_ctx, getState());
		enterRule(_localctx, 224, RULE_cursor_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2431);
			match(CURSOR);
			setState(2432);
			identifier();
			setState(2433);
			parameter_specs();
			setState(2436);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RETURN) {
				{
				setState(2434);
				match(RETURN);
				setState(2435);
				type_spec();
				}
			}

			setState(2440);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IS) {
				{
				setState(2438);
				match(IS);
				setState(2439);
				select_statement();
				}
			}

			setState(2442);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Parameter_specsContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(OracleSQLStatementParser.LEFT_PAREN, 0); }
		public List<Parameter_specContext> parameter_spec() {
			return getRuleContexts(Parameter_specContext.class);
		}
		public Parameter_specContext parameter_spec(int i) {
			return getRuleContext(Parameter_specContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(OracleSQLStatementParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(OracleSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(OracleSQLStatementParser.COMMA, i);
		}
		public Parameter_specsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parameter_specs; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterParameter_specs(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitParameter_specs(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitParameter_specs(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Parameter_specsContext parameter_specs() throws RecognitionException {
		Parameter_specsContext _localctx = new Parameter_specsContext(_ctx, getState());
		enterRule(_localctx, 226, RULE_parameter_specs);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2455);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(2444);
				match(LEFT_PAREN);
				setState(2445);
				parameter_spec();
				setState(2450);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2446);
					match(COMMA);
					setState(2447);
					parameter_spec();
					}
					}
					setState(2452);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2453);
				match(RIGHT_PAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Parameter_specContext extends ParserRuleContext {
		public Parameter_nameContext parameter_name() {
			return getRuleContext(Parameter_nameContext.class,0);
		}
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Default_value_partContext default_value_part() {
			return getRuleContext(Default_value_partContext.class,0);
		}
		public TerminalNode IN() { return getToken(OracleSQLStatementParser.IN, 0); }
		public Parameter_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parameter_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterParameter_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitParameter_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitParameter_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Parameter_specContext parameter_spec() throws RecognitionException {
		Parameter_specContext _localctx = new Parameter_specContext(_ctx, getState());
		enterRule(_localctx, 228, RULE_parameter_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2457);
			parameter_name();
			setState(2462);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABS) | (1L << ACOS) | (1L << ADD) | (1L << ADD_MONTHS) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASCII) | (1L << ASCIISTR) | (1L << ASIN) | (1L << ASSOCIATE) | (1L << ATAN2) | (1L << ATAN) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BFILENAME) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BIN_TO_NUM) | (1L << BITAND) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CARDINALITY) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CEIL) | (1L << CHARACTER) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARTOROWID) | (1L << CHR) | (1L << C_LETTER))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOSE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONCAT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COS - 64)) | (1L << (COSH - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_DATE - 64)) | (1L << (CURRENT_TIMESTAMP - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (DIMENSION - 128)) | (1L << (DISABLE - 128)) | (1L << (DISASSOCIATE - 128)) | (1L << (DOCUMENT - 128)) | (1L << (DOUBLE - 128)) | (1L << (DSINTERVAL_UNCONSTRAINED - 128)) | (1L << (DUMP - 128)) | (1L << (EACH - 128)) | (1L << (ELEMENT - 128)) | (1L << (EMPTY_BLOB - 128)) | (1L << (EMPTY_CLOB - 128)) | (1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERR - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXP - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FLOOR - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FROM_TZ - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUP_ID - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HEXTORAW - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (IGNORE - 193)) | (1L << (IMMEDIATE - 193)) | (1L << (INCLUDE - 193)) | (1L << (INCLUDING - 193)) | (1L << (INCREMENT - 193)) | (1L << (INDENT - 193)) | (1L << (INDEXED - 193)) | (1L << (INDICATOR - 193)) | (1L << (INDICES - 193)) | (1L << (INFINITE - 193)) | (1L << (IN - 193)) | (1L << (INITCAP - 193)) | (1L << (INLINE - 193)) | (1L << (INNER - 193)) | (1L << (INOUT - 193)) | (1L << (INSTANTIABLE - 193)) | (1L << (INSTEAD - 193)) | (1L << (INSTR2 - 193)) | (1L << (INSTR4 - 193)) | (1L << (INSTRB - 193)) | (1L << (INSTRC - 193)) | (1L << (INSTR - 193)) | (1L << (INTERFACE - 193)) | (1L << (INTEGER - 193)) | (1L << (INTERVAL - 193)) | (1L << (INT - 193)) | (1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (KEY - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST_DAY - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LENGTH2 - 193)) | (1L << (LENGTH4 - 193)) | (1L << (LENGTHB - 193)) | (1L << (LENGTHC - 193)) | (1L << (LENGTH - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LN - 193)) | (1L << (LNNVL - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCALTIMESTAMP - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (LOGON - 257)) | (1L << (LONG - 257)) | (1L << (LOOP - 257)) | (1L << (LOWER - 257)) | (1L << (LPAD - 257)) | (1L << (LTRIM - 257)) | (1L << (MAIN - 257)) | (1L << (MAP - 257)) | (1L << (MATCHED - 257)) | (1L << (MAXVALUE - 257)) | (1L << (MEASURES - 257)) | (1L << (MEMBER - 257)) | (1L << (MERGE - 257)) | (1L << (MINUTE - 257)) | (1L << (MINVALUE - 257)) | (1L << (MLSLABEL - 257)) | (1L << (MODEL - 257)) | (1L << (MODIFY - 257)) | (1L << (MOD - 257)) | (1L << (MONTH - 257)) | (1L << (MONTHS_BETWEEN - 257)) | (1L << (MULTISET - 257)) | (1L << (NAME - 257)) | (1L << (NAN - 257)) | (1L << (NANVL - 257)) | (1L << (NATURAL - 257)) | (1L << (NATURALN - 257)) | (1L << (NAV - 257)) | (1L << (NCHAR_CS - 257)) | (1L << (NCHAR - 257)) | (1L << (NCHR - 257)) | (1L << (NCLOB - 257)) | (1L << (NESTED - 257)) | (1L << (NEW - 257)) | (1L << (NEW_TIME - 257)) | (1L << (NEXT_DAY - 257)) | (1L << (NOAUDIT - 257)) | (1L << (NOCOPY - 257)) | (1L << (NOCYCLE - 257)) | (1L << (NOENTITYESCAPING - 257)) | (1L << (NONE - 257)) | (1L << (NO - 257)) | (1L << (NOSCHEMACHECK - 257)) | (1L << (NULLIF - 257)) | (1L << (NULLS - 257)) | (1L << (NUMBER - 257)) | (1L << (NUMERIC - 257)) | (1L << (NUMTODSINTERVAL - 257)) | (1L << (NUMTOYMINTERVAL - 257)) | (1L << (NVARCHAR2 - 257)) | (1L << (NVL2 - 257)) | (1L << (OBJECT - 257)) | (1L << (OFF - 257)))) != 0) || ((((_la - 321)) & ~0x3f) == 0 && ((1L << (_la - 321)) & ((1L << (OID - 321)) | (1L << (OLD - 321)) | (1L << (ONLY - 321)) | (1L << (OPAQUE - 321)) | (1L << (OPEN - 321)) | (1L << (ORADATA - 321)) | (1L << (ORDINALITY - 321)) | (1L << (OSERROR - 321)) | (1L << (OUTER - 321)) | (1L << (OUT - 321)) | (1L << (OVER - 321)) | (1L << (OVERRIDING - 321)) | (1L << (PACKAGE - 321)) | (1L << (PARALLEL_ENABLE - 321)) | (1L << (PARAMETERS - 321)) | (1L << (PARENT - 321)) | (1L << (PARTITION - 321)) | (1L << (PASSING - 321)) | (1L << (PATH - 321)) | (1L << (PIPELINED - 321)) | (1L << (PLAN - 321)) | (1L << (PLS_INTEGER - 321)) | (1L << (POSITIVEN - 321)) | (1L << (POSITIVE - 321)) | (1L << (POWER - 321)) | (1L << (PRAGMA - 321)) | (1L << (PRECEDING - 321)) | (1L << (PRECISION - 321)) | (1L << (PRESENT - 321)) | (1L << (PRIOR - 321)) | (1L << (PROCEDURE - 321)) | (1L << (RAISE - 321)) | (1L << (RANGE - 321)) | (1L << (RAW - 321)) | (1L << (RAWTOHEX - 321)) | (1L << (READ - 321)) | (1L << (REAL - 321)) | (1L << (RECORD - 321)) | (1L << (REFERENCE - 321)) | (1L << (REFERENCING - 321)) | (1L << (REF - 321)) | (1L << (REGEXP_COUNT - 321)) | (1L << (REGEXP_INSTR - 321)) | (1L << (REGEXP_REPLACE - 321)) | (1L << (REGEXP_SUBSTR - 321)) | (1L << (REJECT - 321)) | (1L << (RELIES_ON - 321)) | (1L << (REMAINDER - 321)))) != 0) || ((((_la - 385)) & ~0x3f) == 0 && ((1L << (_la - 385)) & ((1L << (RENAME - 385)) | (1L << (REPLACE - 385)) | (1L << (RESPECT - 385)) | (1L << (RESTRICT_REFERENCES - 385)) | (1L << (RESULT_CACHE - 385)) | (1L << (RESULT - 385)) | (1L << (RETURNING - 385)) | (1L << (RETURN - 385)) | (1L << (REUSE - 385)) | (1L << (REVERSE - 385)) | (1L << (RIGHT - 385)) | (1L << (ROLLBACK - 385)) | (1L << (ROLLUP - 385)) | (1L << (ROWID - 385)) | (1L << (ROWNUM - 385)) | (1L << (ROW - 385)) | (1L << (ROWS - 385)) | (1L << (RPAD - 385)) | (1L << (RTRIM - 385)) | (1L << (RULES - 385)) | (1L << (SAMPLE - 385)) | (1L << (SAVEPOINT - 385)) | (1L << (SAVE - 385)) | (1L << (SCHEMACHECK - 385)) | (1L << (SCHEMA - 385)) | (1L << (SCN - 385)) | (1L << (SECOND - 385)) | (1L << (SEED - 385)) | (1L << (SEGMENT - 385)) | (1L << (SELF - 385)) | (1L << (SEQUENTIAL - 385)) | (1L << (SERIALIZABLE - 385)) | (1L << (SERIALLY_REUSABLE - 385)) | (1L << (SERVERERROR - 385)) | (1L << (SESSIONTIMEZONE - 385)) | (1L << (SET - 385)) | (1L << (SETS - 385)) | (1L << (SETTINGS - 385)) | (1L << (SHOW - 385)) | (1L << (SHUTDOWN - 385)) | (1L << (SIBLINGS - 385)) | (1L << (SIGN - 385)) | (1L << (SIGNTYPE - 385)) | (1L << (SIMPLE_INTEGER - 385)) | (1L << (SINGLE - 385)) | (1L << (SINH - 385)) | (1L << (SIN - 385)) | (1L << (SKIP_ - 385)) | (1L << (SMALLINT - 385)) | (1L << (SNAPSHOT - 385)) | (1L << (SOME - 385)) | (1L << (SOUNDEX - 385)) | (1L << (SPECIFICATION - 385)) | (1L << (SQLDATA - 385)) | (1L << (SQLERROR - 385)) | (1L << (SQRT - 385)) | (1L << (STANDALONE - 385)))) != 0) || ((((_la - 449)) & ~0x3f) == 0 && ((1L << (_la - 449)) & ((1L << (STARTUP - 449)) | (1L << (STATEMENT_ID - 449)) | (1L << (STATEMENT - 449)) | (1L << (STATIC - 449)) | (1L << (STATISTICS - 449)) | (1L << (STRING - 449)) | (1L << (SUBMULTISET - 449)) | (1L << (SUBPARTITION - 449)) | (1L << (SUBSTITUTABLE - 449)) | (1L << (SUBTYPE - 449)) | (1L << (SUCCESS - 449)) | (1L << (SUSPEND - 449)) | (1L << (SYS_CONTEXT - 449)) | (1L << (SYSDATE - 449)) | (1L << (SYSTIMESTAMP - 449)) | (1L << (TANH - 449)) | (1L << (TAN - 449)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 449)) | (1L << (TIMESTAMP - 449)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 449)) | (1L << (TIMESTAMP_UNCONSTRAINED - 449)) | (1L << (TIME - 449)) | (1L << (TIME_TZ_UNCONSTRAINED - 449)) | (1L << (TIME_UNCONSTRAINED - 449)) | (1L << (TIMEZONE_ABBR - 449)) | (1L << (TIMEZONE_HOUR - 449)) | (1L << (TIMEZONE_MINUTE - 449)) | (1L << (TIMEZONE_REGION - 449)) | (1L << (TO_CLOB - 449)) | (1L << (TO_DSINTERVAL - 449)) | (1L << (TO_LOB - 449)) | (1L << (TO_MULTI_BYTE - 449)) | (1L << (TO_NCLOB - 449)) | (1L << (TO_NUMBER - 449)) | (1L << (TO_SINGLE_BYTE - 449)) | (1L << (TO_TIMESTAMP - 449)) | (1L << (TO_TIMESTAMP_TZ - 449)) | (1L << (TO_YMINTERVAL - 449)) | (1L << (TRAILING - 449)) | (1L << (TRANSACTION - 449)) | (1L << (TRANSLATE - 449)) | (1L << (TREAT - 449)) | (1L << (TRIGGER - 449)) | (1L << (TRUNCATE - 449)) | (1L << (TRUNC - 449)) | (1L << (TYPE - 449)) | (1L << (TZ_OFFSET - 449)) | (1L << (UID - 449)) | (1L << (UNBOUNDED - 449)) | (1L << (UNDER - 449)) | (1L << (UNLIMITED - 449)) | (1L << (UNTIL - 449)) | (1L << (UPDATED - 449)))) != 0) || ((((_la - 513)) & ~0x3f) == 0 && ((1L << (_la - 513)) & ((1L << (UPPER - 513)) | (1L << (UPSERT - 513)) | (1L << (UROWID - 513)) | (1L << (USERENV - 513)) | (1L << (USER - 513)) | (1L << (USE - 513)) | (1L << (VALIDATE - 513)) | (1L << (VALUE - 513)) | (1L << (VARCHAR2 - 513)) | (1L << (VARCHAR - 513)) | (1L << (VARIABLE - 513)) | (1L << (VARRAY - 513)) | (1L << (VARYING - 513)) | (1L << (VERSIONS - 513)) | (1L << (VERSION - 513)) | (1L << (VSIZE - 513)) | (1L << (WAIT - 513)) | (1L << (WARNING - 513)) | (1L << (WELLFORMED - 513)) | (1L << (WHENEVER - 513)) | (1L << (WHILE - 513)) | (1L << (WITHIN - 513)) | (1L << (WORK - 513)) | (1L << (WRITE - 513)) | (1L << (XMLAGG - 513)) | (1L << (XMLATTRIBUTES - 513)) | (1L << (XMLCAST - 513)) | (1L << (XMLCOLATTVAL - 513)) | (1L << (XMLELEMENT - 513)) | (1L << (XMLEXISTS - 513)) | (1L << (XMLFOREST - 513)) | (1L << (XMLNAMESPACES - 513)) | (1L << (XMLPARSE - 513)) | (1L << (XMLPI - 513)) | (1L << (XMLQUERY - 513)) | (1L << (XMLROOT - 513)) | (1L << (XMLSERIALIZE - 513)) | (1L << (XMLTABLE - 513)) | (1L << (XML - 513)) | (1L << (YEAR - 513)) | (1L << (YES - 513)) | (1L << (YMINTERVAL_UNCONSTRAINED - 513)) | (1L << (ZONE - 513)) | (1L << (PREDICTION - 513)) | (1L << (PREDICTION_BOUNDS - 513)) | (1L << (PREDICTION_COST - 513)) | (1L << (PREDICTION_DETAILS - 513)) | (1L << (PREDICTION_PROBABILITY - 513)) | (1L << (PREDICTION_SET - 513)) | (1L << (CUME_DIST - 513)) | (1L << (DENSE_RANK - 513)) | (1L << (LISTAGG - 513)) | (1L << (PERCENT_RANK - 513)) | (1L << (PERCENTILE_CONT - 513)) | (1L << (PERCENTILE_DISC - 513)) | (1L << (RANK - 513)))) != 0) || ((((_la - 577)) & ~0x3f) == 0 && ((1L << (_la - 577)) & ((1L << (AVG - 577)) | (1L << (CORR - 577)) | (1L << (COVAR_ - 577)) | (1L << (DECODE - 577)) | (1L << (LAG - 577)) | (1L << (LEAD - 577)) | (1L << (MAX - 577)) | (1L << (MEDIAN - 577)) | (1L << (MIN - 577)) | (1L << (NTILE - 577)) | (1L << (NVL - 577)) | (1L << (RATIO_TO_REPORT - 577)) | (1L << (REGR_ - 577)) | (1L << (ROUND - 577)) | (1L << (ROW_NUMBER - 577)) | (1L << (SUBSTR - 577)) | (1L << (TO_CHAR - 577)) | (1L << (TRIM - 577)) | (1L << (SUM - 577)) | (1L << (STDDEV - 577)) | (1L << (VAR_ - 577)) | (1L << (VARIANCE - 577)) | (1L << (LEAST - 577)) | (1L << (GREATEST - 577)) | (1L << (TO_DATE - 577)) | (1L << (DELIMITED_ID - 577)) | (1L << (ASTERISK - 577)))) != 0) || _la==REGULAR_ID) {
				{
				setState(2459);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IN) {
					{
					setState(2458);
					match(IN);
					}
				}

				setState(2461);
				type_spec();
				}
			}

			setState(2465);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT || _la==ASSIGN_OP) {
				{
				setState(2464);
				default_value_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Exception_declarationContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode EXCEPTION() { return getToken(OracleSQLStatementParser.EXCEPTION, 0); }
		public TerminalNode SEMI() { return getToken(OracleSQLStatementParser.SEMI, 0); }
		public Exception_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exception_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterException_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitException_declaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitException_declaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Exception_declarationContext exception_declaration() throws RecognitionException {
		Exception_declarationContext _localctx = new Exception_declarationContext(_ctx, getState());
		enterRule(_localctx, 230, RULE_exception_declaration);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2467);
			identifier();
			setState(2468);
			match(EXCEPTION);
			setState(2469);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pragma_declarationContext extends ParserRuleContext {
		public IdentifierContext id1;
		public IdentifierContext id2;
		public TerminalNode PRAGMA() { return getToken(OracleSQLStatementParser.PRAGMA, 0); }
		public TerminalNode SEMI() { return getToken(OracleSQLStatementParser.SEMI, 0); }
		public TerminalNode SERIALLY_REUSABLE() { return getToken(OracleSQLStatementParser.SERIALLY_REUSABLE, 0); }
		public TerminalNode AUTONOMOUS_TRANSACTION() { return getToken(OracleSQLStatementParser.AUTONOMOUS_TRANSACTION, 0); }
		public TerminalNode EXCEPTION_INIT() { return getToken(OracleSQLStatementParser.EXCEPTION_INIT, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(OracleSQLStatementParser.LEFT_PAREN, 0); }
		public Exception_nameContext exception_name() {
			return getRuleContext(Exception_nameContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(OracleSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(OracleSQLStatementParser.COMMA, i);
		}
		public Numeric_negativeContext numeric_negative() {
			return getRuleContext(Numeric_negativeContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(OracleSQLStatementParser.RIGHT_PAREN, 0); }
		public TerminalNode INLINE() { return getToken(OracleSQLStatementParser.INLINE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RESTRICT_REFERENCES() { return getToken(OracleSQLStatementParser.RESTRICT_REFERENCES, 0); }
		public TerminalNode TIMESTAMP() { return getToken(OracleSQLStatementParser.TIMESTAMP, 0); }
		public TerminalNode INTERFACE() { return getToken(OracleSQLStatementParser.INTERFACE, 0); }
		public TerminalNode SUPPLEMENTAL_LOG_DATA() { return getToken(OracleSQLStatementParser.SUPPLEMENTAL_LOG_DATA, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode DEFAULT() { return getToken(OracleSQLStatementParser.DEFAULT, 0); }
		public Pragma_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pragma_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterPragma_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitPragma_declaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitPragma_declaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Pragma_declarationContext pragma_declaration() throws RecognitionException {
		Pragma_declarationContext _localctx = new Pragma_declarationContext(_ctx, getState());
		enterRule(_localctx, 232, RULE_pragma_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2471);
			match(PRAGMA);
			setState(2528);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SERIALLY_REUSABLE:
				{
				setState(2472);
				match(SERIALLY_REUSABLE);
				}
				break;
			case AUTONOMOUS_TRANSACTION:
				{
				setState(2473);
				match(AUTONOMOUS_TRANSACTION);
				}
				break;
			case EXCEPTION_INIT:
				{
				setState(2474);
				match(EXCEPTION_INIT);
				setState(2475);
				match(LEFT_PAREN);
				setState(2476);
				exception_name();
				setState(2477);
				match(COMMA);
				setState(2478);
				numeric_negative();
				setState(2479);
				match(RIGHT_PAREN);
				}
				break;
			case INLINE:
				{
				setState(2481);
				match(INLINE);
				setState(2482);
				match(LEFT_PAREN);
				setState(2483);
				((Pragma_declarationContext)_localctx).id1 = identifier();
				setState(2484);
				match(COMMA);
				setState(2485);
				expression();
				setState(2486);
				match(RIGHT_PAREN);
				}
				break;
			case RESTRICT_REFERENCES:
				{
				setState(2488);
				match(RESTRICT_REFERENCES);
				setState(2489);
				match(LEFT_PAREN);
				setState(2492);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ABS:
				case ACOS:
				case ADD:
				case ADD_MONTHS:
				case AFTER:
				case AGENT:
				case AGGREGATE:
				case A_LETTER:
				case ANALYZE:
				case ARRAY:
				case ASCII:
				case ASCIISTR:
				case ASIN:
				case ASSOCIATE:
				case ATAN2:
				case ATAN:
				case AT:
				case ATTRIBUTE:
				case AUDIT:
				case AUTHID:
				case AUTO:
				case AUTOMATIC:
				case AUTONOMOUS_TRANSACTION:
				case BATCH:
				case BEFORE:
				case BFILE:
				case BFILENAME:
				case BINARY_DOUBLE:
				case BINARY_FLOAT:
				case BINARY_INTEGER:
				case BIN_TO_NUM:
				case BITAND:
				case BLOB:
				case BLOCK:
				case BODY:
				case BOOLEAN:
				case BOTH:
				case BULK:
				case BYTE:
				case CALL:
				case CANONICAL:
				case CARDINALITY:
				case CASCADE:
				case CASE:
				case CAST:
				case CEIL:
				case CHARACTER:
				case CHAR:
				case CHAR_CS:
				case CHARTOROWID:
				case CHR:
				case C_LETTER:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COALESCE:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPATIBILITY:
				case COMPILE:
				case COMPOSE:
				case COMPOUND:
				case CONCAT:
				case CONSTANT:
				case CONSTRAINT:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTENT:
				case CONTEXT:
				case CONTINUE:
				case CONVERT:
				case CORRUPT_XID_ALL:
				case CORRUPT_XID:
				case COS:
				case COSH:
				case COST:
				case COUNT:
				case CROSS:
				case CUBE:
				case CURRENT_DATE:
				case CURRENT_TIMESTAMP:
				case CURRENT_USER:
				case CURSOR:
				case CUSTOMDATUM:
				case CYCLE:
				case DATABASE:
				case DATA:
				case DAY:
				case DB_ROLE_CHANGE:
				case DBTIMEZONE:
				case DDL:
				case DEBUG:
				case DEC:
				case DECIMAL:
				case DECOMPOSE:
				case DECREMENT:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE:
				case DETERMINISTIC:
				case DIMENSION:
				case DISABLE:
				case DISASSOCIATE:
				case DOCUMENT:
				case DOUBLE:
				case DSINTERVAL_UNCONSTRAINED:
				case DUMP:
				case EACH:
				case ELEMENT:
				case EMPTY_BLOB:
				case EMPTY_CLOB:
				case EMPTY:
				case ENABLE:
				case ENCODING:
				case ENTITYESCAPING:
				case ERR:
				case ERRORS:
				case ESCAPE:
				case EVALNAME:
				case EXCEPTION:
				case EXCEPTION_INIT:
				case EXCEPTIONS:
				case EXCLUDE:
				case EXECUTE:
				case EXIT:
				case EXP:
				case EXPLAIN:
				case EXTERNAL:
				case EXTRACT:
				case FAILURE:
				case FINAL:
				case FIRST:
				case FIRST_VALUE:
				case FLOAT:
				case FLOOR:
				case FOLLOWING:
				case FOLLOWS:
				case FORALL:
				case FORCE:
				case FROM_TZ:
				case FULL:
				case FUNCTION:
				case GROUP_ID:
				case GROUPING:
				case HASH:
				case HEXTORAW:
				case HIDE:
				case HOUR:
				case IGNORE:
				case IMMEDIATE:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDENT:
				case INDEXED:
				case INDICATOR:
				case INDICES:
				case INFINITE:
				case INITCAP:
				case INLINE:
				case INNER:
				case INOUT:
				case INSTANTIABLE:
				case INSTEAD:
				case INSTR2:
				case INSTR4:
				case INSTRB:
				case INSTRC:
				case INSTR:
				case INTERFACE:
				case INTEGER:
				case INTERVAL:
				case INT:
				case INVALIDATE:
				case ISOLATION:
				case ITERATE:
				case JAVA:
				case JOIN:
				case KEEP:
				case KEY:
				case LANGUAGE:
				case LAST_DAY:
				case LAST:
				case LAST_VALUE:
				case LEADING:
				case LEFT:
				case LENGTH2:
				case LENGTH4:
				case LENGTHB:
				case LENGTHC:
				case LENGTH:
				case LEVEL:
				case LIBRARY:
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIMIT:
				case LN:
				case LNNVL:
				case LOCAL:
				case LOCALTIMESTAMP:
				case LOCKED:
				case LOG:
				case LOGOFF:
				case LOGON:
				case LONG:
				case LOOP:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAIN:
				case MAP:
				case MATCHED:
				case MAXVALUE:
				case MEASURES:
				case MEMBER:
				case MERGE:
				case MINUTE:
				case MINVALUE:
				case MLSLABEL:
				case MODEL:
				case MODIFY:
				case MOD:
				case MONTH:
				case MONTHS_BETWEEN:
				case MULTISET:
				case NAME:
				case NAN:
				case NANVL:
				case NATURAL:
				case NATURALN:
				case NAV:
				case NCHAR_CS:
				case NCHAR:
				case NCHR:
				case NCLOB:
				case NESTED:
				case NEW:
				case NEW_TIME:
				case NEXT_DAY:
				case NOAUDIT:
				case NOCOPY:
				case NOCYCLE:
				case NOENTITYESCAPING:
				case NONE:
				case NO:
				case NOSCHEMACHECK:
				case NULLIF:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case NUMTODSINTERVAL:
				case NUMTOYMINTERVAL:
				case NVARCHAR2:
				case NVL2:
				case OBJECT:
				case OFF:
				case OID:
				case OLD:
				case ONLY:
				case OPAQUE:
				case OPEN:
				case ORADATA:
				case ORDINALITY:
				case OSERROR:
				case OUTER:
				case OUT:
				case OVER:
				case OVERRIDING:
				case PACKAGE:
				case PARALLEL_ENABLE:
				case PARAMETERS:
				case PARENT:
				case PARTITION:
				case PASSING:
				case PATH:
				case PIPELINED:
				case PLAN:
				case PLS_INTEGER:
				case POSITIVEN:
				case POSITIVE:
				case POWER:
				case PRAGMA:
				case PRECEDING:
				case PRECISION:
				case PRESENT:
				case PRIOR:
				case PROCEDURE:
				case RAISE:
				case RANGE:
				case RAW:
				case RAWTOHEX:
				case READ:
				case REAL:
				case RECORD:
				case REFERENCE:
				case REFERENCING:
				case REF:
				case REGEXP_COUNT:
				case REGEXP_INSTR:
				case REGEXP_REPLACE:
				case REGEXP_SUBSTR:
				case REJECT:
				case RELIES_ON:
				case REMAINDER:
				case RENAME:
				case REPLACE:
				case RESPECT:
				case RESTRICT_REFERENCES:
				case RESULT_CACHE:
				case RESULT:
				case RETURNING:
				case RETURN:
				case REUSE:
				case REVERSE:
				case RIGHT:
				case ROLLBACK:
				case ROLLUP:
				case ROWID:
				case ROWNUM:
				case ROW:
				case ROWS:
				case RPAD:
				case RTRIM:
				case RULES:
				case SAMPLE:
				case SAVEPOINT:
				case SAVE:
				case SCHEMACHECK:
				case SCHEMA:
				case SCN:
				case SECOND:
				case SEED:
				case SEGMENT:
				case SELF:
				case SEQUENTIAL:
				case SERIALIZABLE:
				case SERIALLY_REUSABLE:
				case SERVERERROR:
				case SESSIONTIMEZONE:
				case SET:
				case SETS:
				case SETTINGS:
				case SHOW:
				case SHUTDOWN:
				case SIBLINGS:
				case SIGN:
				case SIGNTYPE:
				case SIMPLE_INTEGER:
				case SINGLE:
				case SINH:
				case SIN:
				case SKIP_:
				case SMALLINT:
				case SNAPSHOT:
				case SOME:
				case SOUNDEX:
				case SPECIFICATION:
				case SQLDATA:
				case SQLERROR:
				case SQRT:
				case STANDALONE:
				case STARTUP:
				case STATEMENT_ID:
				case STATEMENT:
				case STATIC:
				case STATISTICS:
				case STRING:
				case SUBMULTISET:
				case SUBPARTITION:
				case SUBSTITUTABLE:
				case SUBTYPE:
				case SUCCESS:
				case SUSPEND:
				case SYS_CONTEXT:
				case SYSDATE:
				case SYSTIMESTAMP:
				case TANH:
				case TAN:
				case TIMESTAMP_LTZ_UNCONSTRAINED:
				case TIMESTAMP:
				case TIMESTAMP_TZ_UNCONSTRAINED:
				case TIMESTAMP_UNCONSTRAINED:
				case TIME:
				case TIMEZONE_ABBR:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TIMEZONE_REGION:
				case TO_CLOB:
				case TO_DSINTERVAL:
				case TO_LOB:
				case TO_MULTI_BYTE:
				case TO_NCLOB:
				case TO_NUMBER:
				case TO_SINGLE_BYTE:
				case TO_TIMESTAMP:
				case TO_TIMESTAMP_TZ:
				case TO_YMINTERVAL:
				case TRAILING:
				case TRANSACTION:
				case TRANSLATE:
				case TREAT:
				case TRIGGER:
				case TRUNCATE:
				case TRUNC:
				case TYPE:
				case TZ_OFFSET:
				case UID:
				case UNBOUNDED:
				case UNDER:
				case UNLIMITED:
				case UNTIL:
				case UPDATED:
				case UPPER:
				case UPSERT:
				case UROWID:
				case USERENV:
				case USER:
				case USE:
				case VALIDATE:
				case VALUE:
				case VARCHAR2:
				case VARCHAR:
				case VARIABLE:
				case VARRAY:
				case VARYING:
				case VERSIONS:
				case VERSION:
				case VSIZE:
				case WAIT:
				case WARNING:
				case WELLFORMED:
				case WHENEVER:
				case WHILE:
				case WITHIN:
				case WORK:
				case WRITE:
				case XMLAGG:
				case XMLATTRIBUTES:
				case XMLCAST:
				case XMLCOLATTVAL:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case XML:
				case YEAR:
				case YES:
				case YMINTERVAL_UNCONSTRAINED:
				case ZONE:
				case PREDICTION:
				case PREDICTION_BOUNDS:
				case PREDICTION_COST:
				case PREDICTION_DETAILS:
				case PREDICTION_PROBABILITY:
				case PREDICTION_SET:
				case CUME_DIST:
				case DENSE_RANK:
				case LISTAGG:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case RANK:
				case AVG:
				case CORR:
				case COVAR_:
				case DECODE:
				case LAG:
				case LEAD:
				case MAX:
				case MEDIAN:
				case MIN:
				case NTILE:
				case NVL:
				case RATIO_TO_REPORT:
				case REGR_:
				case ROUND:
				case ROW_NUMBER:
				case SUBSTR:
				case TO_CHAR:
				case TRIM:
				case SUM:
				case STDDEV:
				case VAR_:
				case VARIANCE:
				case LEAST:
				case GREATEST:
				case TO_DATE:
				case DELIMITED_ID:
				case ASTERISK:
				case INTRODUCER:
				case REGULAR_ID:
					{
					setState(2490);
					identifier();
					}
					break;
				case DEFAULT:
					{
					setState(2491);
					match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2496); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2494);
					match(COMMA);
					setState(2495);
					identifier();
					}
					}
					setState(2498); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==COMMA );
				setState(2500);
				match(RIGHT_PAREN);
				}
				break;
			case TIMESTAMP:
				{
				setState(2502);
				match(TIMESTAMP);
				setState(2503);
				match(LEFT_PAREN);
				setState(2504);
				expression();
				setState(2505);
				match(RIGHT_PAREN);
				}
				break;
			case INTERFACE:
				{
				setState(2507);
				match(INTERFACE);
				setState(2508);
				match(LEFT_PAREN);
				setState(2511);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ABS:
				case ACOS:
				case ADD:
				case ADD_MONTHS:
				case AFTER:
				case AGENT:
				case AGGREGATE:
				case A_LETTER:
				case ANALYZE:
				case ARRAY:
				case ASCII:
				case ASCIISTR:
				case ASIN:
				case ASSOCIATE:
				case ATAN2:
				case ATAN:
				case AT:
				case ATTRIBUTE:
				case AUDIT:
				case AUTHID:
				case AUTO:
				case AUTOMATIC:
				case AUTONOMOUS_TRANSACTION:
				case BATCH:
				case BEFORE:
				case BFILE:
				case BFILENAME:
				case BINARY_DOUBLE:
				case BINARY_FLOAT:
				case BINARY_INTEGER:
				case BIN_TO_NUM:
				case BITAND:
				case BLOB:
				case BLOCK:
				case BODY:
				case BOOLEAN:
				case BOTH:
				case BULK:
				case BYTE:
				case CALL:
				case CANONICAL:
				case CARDINALITY:
				case CASCADE:
				case CASE:
				case CAST:
				case CEIL:
				case CHARACTER:
				case CHAR:
				case CHAR_CS:
				case CHARTOROWID:
				case CHR:
				case C_LETTER:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COALESCE:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPATIBILITY:
				case COMPILE:
				case COMPOSE:
				case COMPOUND:
				case CONCAT:
				case CONSTANT:
				case CONSTRAINT:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTENT:
				case CONTEXT:
				case CONTINUE:
				case CONVERT:
				case CORRUPT_XID_ALL:
				case CORRUPT_XID:
				case COS:
				case COSH:
				case COST:
				case COUNT:
				case CROSS:
				case CUBE:
				case CURRENT_DATE:
				case CURRENT_TIMESTAMP:
				case CURRENT_USER:
				case CURSOR:
				case CUSTOMDATUM:
				case CYCLE:
				case DATABASE:
				case DATA:
				case DAY:
				case DB_ROLE_CHANGE:
				case DBTIMEZONE:
				case DDL:
				case DEBUG:
				case DEC:
				case DECIMAL:
				case DECOMPOSE:
				case DECREMENT:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE:
				case DETERMINISTIC:
				case DIMENSION:
				case DISABLE:
				case DISASSOCIATE:
				case DOCUMENT:
				case DOUBLE:
				case DSINTERVAL_UNCONSTRAINED:
				case DUMP:
				case EACH:
				case ELEMENT:
				case EMPTY_BLOB:
				case EMPTY_CLOB:
				case EMPTY:
				case ENABLE:
				case ENCODING:
				case ENTITYESCAPING:
				case ERR:
				case ERRORS:
				case ESCAPE:
				case EVALNAME:
				case EXCEPTION:
				case EXCEPTION_INIT:
				case EXCEPTIONS:
				case EXCLUDE:
				case EXECUTE:
				case EXIT:
				case EXP:
				case EXPLAIN:
				case EXTERNAL:
				case EXTRACT:
				case FAILURE:
				case FINAL:
				case FIRST:
				case FIRST_VALUE:
				case FLOAT:
				case FLOOR:
				case FOLLOWING:
				case FOLLOWS:
				case FORALL:
				case FORCE:
				case FROM_TZ:
				case FULL:
				case FUNCTION:
				case GROUP_ID:
				case GROUPING:
				case HASH:
				case HEXTORAW:
				case HIDE:
				case HOUR:
				case IGNORE:
				case IMMEDIATE:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDENT:
				case INDEXED:
				case INDICATOR:
				case INDICES:
				case INFINITE:
				case INITCAP:
				case INLINE:
				case INNER:
				case INOUT:
				case INSTANTIABLE:
				case INSTEAD:
				case INSTR2:
				case INSTR4:
				case INSTRB:
				case INSTRC:
				case INSTR:
				case INTERFACE:
				case INTEGER:
				case INTERVAL:
				case INT:
				case INVALIDATE:
				case ISOLATION:
				case ITERATE:
				case JAVA:
				case JOIN:
				case KEEP:
				case KEY:
				case LANGUAGE:
				case LAST_DAY:
				case LAST:
				case LAST_VALUE:
				case LEADING:
				case LEFT:
				case LENGTH2:
				case LENGTH4:
				case LENGTHB:
				case LENGTHC:
				case LENGTH:
				case LEVEL:
				case LIBRARY:
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIMIT:
				case LN:
				case LNNVL:
				case LOCAL:
				case LOCALTIMESTAMP:
				case LOCKED:
				case LOG:
				case LOGOFF:
				case LOGON:
				case LONG:
				case LOOP:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAIN:
				case MAP:
				case MATCHED:
				case MAXVALUE:
				case MEASURES:
				case MEMBER:
				case MERGE:
				case MINUTE:
				case MINVALUE:
				case MLSLABEL:
				case MODEL:
				case MODIFY:
				case MOD:
				case MONTH:
				case MONTHS_BETWEEN:
				case MULTISET:
				case NAME:
				case NAN:
				case NANVL:
				case NATURAL:
				case NATURALN:
				case NAV:
				case NCHAR_CS:
				case NCHAR:
				case NCHR:
				case NCLOB:
				case NESTED:
				case NEW:
				case NEW_TIME:
				case NEXT_DAY:
				case NOAUDIT:
				case NOCOPY:
				case NOCYCLE:
				case NOENTITYESCAPING:
				case NONE:
				case NO:
				case NOSCHEMACHECK:
				case NULLIF:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case NUMTODSINTERVAL:
				case NUMTOYMINTERVAL:
				case NVARCHAR2:
				case NVL2:
				case OBJECT:
				case OFF:
				case OID:
				case OLD:
				case ONLY:
				case OPAQUE:
				case OPEN:
				case ORADATA:
				case ORDINALITY:
				case OSERROR:
				case OUTER:
				case OUT:
				case OVER:
				case OVERRIDING:
				case PACKAGE:
				case PARALLEL_ENABLE:
				case PARAMETERS:
				case PARENT:
				case PARTITION:
				case PASSING:
				case PATH:
				case PIPELINED:
				case PLAN:
				case PLS_INTEGER:
				case POSITIVEN:
				case POSITIVE:
				case POWER:
				case PRAGMA:
				case PRECEDING:
				case PRECISION:
				case PRESENT:
				case PRIOR:
				case PROCEDURE:
				case RAISE:
				case RANGE:
				case RAW:
				case RAWTOHEX:
				case READ:
				case REAL:
				case RECORD:
				case REFERENCE:
				case REFERENCING:
				case REF:
				case REGEXP_COUNT:
				case REGEXP_INSTR:
				case REGEXP_REPLACE:
				case REGEXP_SUBSTR:
				case REJECT:
				case RELIES_ON:
				case REMAINDER:
				case RENAME:
				case REPLACE:
				case RESPECT:
				case RESTRICT_REFERENCES:
				case RESULT_CACHE:
				case RESULT:
				case RETURNING:
				case RETURN:
				case REUSE:
				case REVERSE:
				case RIGHT:
				case ROLLBACK:
				case ROLLUP:
				case ROWID:
				case ROWNUM:
				case ROW:
				case ROWS:
				case RPAD:
				case RTRIM:
				case RULES:
				case SAMPLE:
				case SAVEPOINT:
				case SAVE:
				case SCHEMACHECK:
				case SCHEMA:
				case SCN:
				case SECOND:
				case SEED:
				case SEGMENT:
				case SELF:
				case SEQUENTIAL:
				case SERIALIZABLE:
				case SERIALLY_REUSABLE:
				case SERVERERROR:
				case SESSIONTIMEZONE:
				case SET:
				case SETS:
				case SETTINGS:
				case SHOW:
				case SHUTDOWN:
				case SIBLINGS:
				case SIGN:
				case SIGNTYPE:
				case SIMPLE_INTEGER:
				case SINGLE:
				case SINH:
				case SIN:
				case SKIP_:
				case SMALLINT:
				case SNAPSHOT:
				case SOME:
				case SOUNDEX:
				case SPECIFICATION:
				case SQLDATA:
				case SQLERROR:
				case SQRT:
				case STANDALONE:
				case STARTUP:
				case STATEMENT_ID:
				case STATEMENT:
				case STATIC:
				case STATISTICS:
				case STRING:
				case SUBMULTISET:
				case SUBPARTITION:
				case SUBSTITUTABLE:
				case SUBTYPE:
				case SUCCESS:
				case SUSPEND:
				case SYS_CONTEXT:
				case SYSDATE:
				case SYSTIMESTAMP:
				case TANH:
				case TAN:
				case TIMESTAMP_LTZ_UNCONSTRAINED:
				case TIMESTAMP:
				case TIMESTAMP_TZ_UNCONSTRAINED:
				case TIMESTAMP_UNCONSTRAINED:
				case TIME:
				case TIMEZONE_ABBR:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TIMEZONE_REGION:
				case TO_CLOB:
				case TO_DSINTERVAL:
				case TO_LOB:
				case TO_MULTI_BYTE:
				case TO_NCLOB:
				case TO_NUMBER:
				case TO_SINGLE_BYTE:
				case TO_TIMESTAMP:
				case TO_TIMESTAMP_TZ:
				case TO_YMINTERVAL:
				case TRAILING:
				case TRANSACTION:
				case TRANSLATE:
				case TREAT:
				case TRIGGER:
				case TRUNCATE:
				case TRUNC:
				case TYPE:
				case TZ_OFFSET:
				case UID:
				case UNBOUNDED:
				case UNDER:
				case UNLIMITED:
				case UNTIL:
				case UPDATED:
				case UPPER:
				case UPSERT:
				case UROWID:
				case USERENV:
				case USER:
				case USE:
				case VALIDATE:
				case VALUE:
				case VARCHAR2:
				case VARCHAR:
				case VARIABLE:
				case VARRAY:
				case VARYING:
				case VERSIONS:
				case VERSION:
				case VSIZE:
				case WAIT:
				case WARNING:
				case WELLFORMED:
				case WHENEVER:
				case WHILE:
				case WITHIN:
				case WORK:
				case WRITE:
				case XMLAGG:
				case XMLATTRIBUTES:
				case XMLCAST:
				case XMLCOLATTVAL:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case XML:
				case YEAR:
				case YES:
				case YMINTERVAL_UNCONSTRAINED:
				case ZONE:
				case PREDICTION:
				case PREDICTION_BOUNDS:
				case PREDICTION_COST:
				case PREDICTION_DETAILS:
				case PREDICTION_PROBABILITY:
				case PREDICTION_SET:
				case CUME_DIST:
				case DENSE_RANK:
				case LISTAGG:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case RANK:
				case AVG:
				case CORR:
				case COVAR_:
				case DECODE:
				case LAG:
				case LEAD:
				case MAX:
				case MEDIAN:
				case MIN:
				case NTILE:
				case NVL:
				case RATIO_TO_REPORT:
				case REGR_:
				case ROUND:
				case ROW_NUMBER:
				case SUBSTR:
				case TO_CHAR:
				case TRIM:
				case SUM:
				case STDDEV:
				case VAR_:
				case VARIANCE:
				case LEAST:
				case GREATEST:
				case TO_DATE:
				case DELIMITED_ID:
				case ASTERISK:
				case INTRODUCER:
				case REGULAR_ID:
					{
					setState(2509);
					identifier();
					}
					break;
				case DEFAULT:
					{
					setState(2510);
					match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2515); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2513);
					match(COMMA);
					setState(2514);
					identifier();
					}
					}
					setState(2517); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==COMMA );
				setState(2519);
				match(RIGHT_PAREN);
				}
				break;
			case SUPPLEMENTAL_LOG_DATA:
				{
				setState(2521);
				match(SUPPLEMENTAL_LOG_DATA);
				setState(2522);
				match(LEFT_PAREN);
				setState(2523);
				((Pragma_declarationContext)_localctx).id2 = identifier();
				setState(2524);
				match(COMMA);
				setState(2525);
				expression();
				setState(2526);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2530);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Record_type_defContext extends ParserRuleContext {
		public TerminalNode RECORD() { return getToken(OracleSQLStatementParser.RECORD, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(OracleSQLStatementParser.LEFT_PAREN, 0); }
		public List<Field_specContext> field_spec() {
			return getRuleContexts(Field_specContext.class);
		}
		public Field_specContext field_spec(int i) {
			return getRuleContext(Field_specContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(OracleSQLStatementParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(OracleSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(OracleSQLStatementParser.COMMA, i);
		}
		public Record_type_defContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_record_type_def; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterRecord_type_def(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitRecord_type_def(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitRecord_type_def(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Record_type_defContext record_type_def() throws RecognitionException {
		Record_type_defContext _localctx = new Record_type_defContext(_ctx, getState());
		enterRule(_localctx, 234, RULE_record_type_def);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2532);
			match(RECORD);
			setState(2533);
			match(LEFT_PAREN);
			setState(2534);
			field_spec();
			setState(2539);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2535);
				match(COMMA);
				setState(2536);
				field_spec();
				}
				}
				setState(2541);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2542);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Field_specContext extends ParserRuleContext {
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode NOT() { return getToken(OracleSQLStatementParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(OracleSQLStatementParser.NULL, 0); }
		public Default_value_partContext default_value_part() {
			return getRuleContext(Default_value_partContext.class,0);
		}
		public Field_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_field_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterField_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitField_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitField_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Field_specContext field_spec() throws RecognitionException {
		Field_specContext _localctx = new Field_specContext(_ctx, getState());
		enterRule(_localctx, 236, RULE_field_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2544);
			column_name();
			setState(2546);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABS) | (1L << ACOS) | (1L << ADD) | (1L << ADD_MONTHS) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASCII) | (1L << ASCIISTR) | (1L << ASIN) | (1L << ASSOCIATE) | (1L << ATAN2) | (1L << ATAN) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BFILENAME) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BIN_TO_NUM) | (1L << BITAND) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CARDINALITY) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CEIL) | (1L << CHARACTER) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARTOROWID) | (1L << CHR) | (1L << C_LETTER))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOSE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONCAT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COS - 64)) | (1L << (COSH - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_DATE - 64)) | (1L << (CURRENT_TIMESTAMP - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (DIMENSION - 128)) | (1L << (DISABLE - 128)) | (1L << (DISASSOCIATE - 128)) | (1L << (DOCUMENT - 128)) | (1L << (DOUBLE - 128)) | (1L << (DSINTERVAL_UNCONSTRAINED - 128)) | (1L << (DUMP - 128)) | (1L << (EACH - 128)) | (1L << (ELEMENT - 128)) | (1L << (EMPTY_BLOB - 128)) | (1L << (EMPTY_CLOB - 128)) | (1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERR - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXP - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FLOOR - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FROM_TZ - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUP_ID - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HEXTORAW - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (IGNORE - 193)) | (1L << (IMMEDIATE - 193)) | (1L << (INCLUDE - 193)) | (1L << (INCLUDING - 193)) | (1L << (INCREMENT - 193)) | (1L << (INDENT - 193)) | (1L << (INDEXED - 193)) | (1L << (INDICATOR - 193)) | (1L << (INDICES - 193)) | (1L << (INFINITE - 193)) | (1L << (INITCAP - 193)) | (1L << (INLINE - 193)) | (1L << (INNER - 193)) | (1L << (INOUT - 193)) | (1L << (INSTANTIABLE - 193)) | (1L << (INSTEAD - 193)) | (1L << (INSTR2 - 193)) | (1L << (INSTR4 - 193)) | (1L << (INSTRB - 193)) | (1L << (INSTRC - 193)) | (1L << (INSTR - 193)) | (1L << (INTERFACE - 193)) | (1L << (INTEGER - 193)) | (1L << (INTERVAL - 193)) | (1L << (INT - 193)) | (1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (KEY - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST_DAY - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LENGTH2 - 193)) | (1L << (LENGTH4 - 193)) | (1L << (LENGTHB - 193)) | (1L << (LENGTHC - 193)) | (1L << (LENGTH - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LN - 193)) | (1L << (LNNVL - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCALTIMESTAMP - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (LOGON - 257)) | (1L << (LONG - 257)) | (1L << (LOOP - 257)) | (1L << (LOWER - 257)) | (1L << (LPAD - 257)) | (1L << (LTRIM - 257)) | (1L << (MAIN - 257)) | (1L << (MAP - 257)) | (1L << (MATCHED - 257)) | (1L << (MAXVALUE - 257)) | (1L << (MEASURES - 257)) | (1L << (MEMBER - 257)) | (1L << (MERGE - 257)) | (1L << (MINUTE - 257)) | (1L << (MINVALUE - 257)) | (1L << (MLSLABEL - 257)) | (1L << (MODEL - 257)) | (1L << (MODIFY - 257)) | (1L << (MOD - 257)) | (1L << (MONTH - 257)) | (1L << (MONTHS_BETWEEN - 257)) | (1L << (MULTISET - 257)) | (1L << (NAME - 257)) | (1L << (NAN - 257)) | (1L << (NANVL - 257)) | (1L << (NATURAL - 257)) | (1L << (NATURALN - 257)) | (1L << (NAV - 257)) | (1L << (NCHAR_CS - 257)) | (1L << (NCHAR - 257)) | (1L << (NCHR - 257)) | (1L << (NCLOB - 257)) | (1L << (NESTED - 257)) | (1L << (NEW - 257)) | (1L << (NEW_TIME - 257)) | (1L << (NEXT_DAY - 257)) | (1L << (NOAUDIT - 257)) | (1L << (NOCOPY - 257)) | (1L << (NOCYCLE - 257)) | (1L << (NOENTITYESCAPING - 257)) | (1L << (NONE - 257)) | (1L << (NO - 257)) | (1L << (NOSCHEMACHECK - 257)) | (1L << (NULLIF - 257)) | (1L << (NULLS - 257)) | (1L << (NUMBER - 257)) | (1L << (NUMERIC - 257)) | (1L << (NUMTODSINTERVAL - 257)) | (1L << (NUMTOYMINTERVAL - 257)) | (1L << (NVARCHAR2 - 257)) | (1L << (NVL2 - 257)) | (1L << (OBJECT - 257)) | (1L << (OFF - 257)))) != 0) || ((((_la - 321)) & ~0x3f) == 0 && ((1L << (_la - 321)) & ((1L << (OID - 321)) | (1L << (OLD - 321)) | (1L << (ONLY - 321)) | (1L << (OPAQUE - 321)) | (1L << (OPEN - 321)) | (1L << (ORADATA - 321)) | (1L << (ORDINALITY - 321)) | (1L << (OSERROR - 321)) | (1L << (OUTER - 321)) | (1L << (OUT - 321)) | (1L << (OVER - 321)) | (1L << (OVERRIDING - 321)) | (1L << (PACKAGE - 321)) | (1L << (PARALLEL_ENABLE - 321)) | (1L << (PARAMETERS - 321)) | (1L << (PARENT - 321)) | (1L << (PARTITION - 321)) | (1L << (PASSING - 321)) | (1L << (PATH - 321)) | (1L << (PIPELINED - 321)) | (1L << (PLAN - 321)) | (1L << (PLS_INTEGER - 321)) | (1L << (POSITIVEN - 321)) | (1L << (POSITIVE - 321)) | (1L << (POWER - 321)) | (1L << (PRAGMA - 321)) | (1L << (PRECEDING - 321)) | (1L << (PRECISION - 321)) | (1L << (PRESENT - 321)) | (1L << (PRIOR - 321)) | (1L << (PROCEDURE - 321)) | (1L << (RAISE - 321)) | (1L << (RANGE - 321)) | (1L << (RAW - 321)) | (1L << (RAWTOHEX - 321)) | (1L << (READ - 321)) | (1L << (REAL - 321)) | (1L << (RECORD - 321)) | (1L << (REFERENCE - 321)) | (1L << (REFERENCING - 321)) | (1L << (REF - 321)) | (1L << (REGEXP_COUNT - 321)) | (1L << (REGEXP_INSTR - 321)) | (1L << (REGEXP_REPLACE - 321)) | (1L << (REGEXP_SUBSTR - 321)) | (1L << (REJECT - 321)) | (1L << (RELIES_ON - 321)) | (1L << (REMAINDER - 321)))) != 0) || ((((_la - 385)) & ~0x3f) == 0 && ((1L << (_la - 385)) & ((1L << (RENAME - 385)) | (1L << (REPLACE - 385)) | (1L << (RESPECT - 385)) | (1L << (RESTRICT_REFERENCES - 385)) | (1L << (RESULT_CACHE - 385)) | (1L << (RESULT - 385)) | (1L << (RETURNING - 385)) | (1L << (RETURN - 385)) | (1L << (REUSE - 385)) | (1L << (REVERSE - 385)) | (1L << (RIGHT - 385)) | (1L << (ROLLBACK - 385)) | (1L << (ROLLUP - 385)) | (1L << (ROWID - 385)) | (1L << (ROWNUM - 385)) | (1L << (ROW - 385)) | (1L << (ROWS - 385)) | (1L << (RPAD - 385)) | (1L << (RTRIM - 385)) | (1L << (RULES - 385)) | (1L << (SAMPLE - 385)) | (1L << (SAVEPOINT - 385)) | (1L << (SAVE - 385)) | (1L << (SCHEMACHECK - 385)) | (1L << (SCHEMA - 385)) | (1L << (SCN - 385)) | (1L << (SECOND - 385)) | (1L << (SEED - 385)) | (1L << (SEGMENT - 385)) | (1L << (SELF - 385)) | (1L << (SEQUENTIAL - 385)) | (1L << (SERIALIZABLE - 385)) | (1L << (SERIALLY_REUSABLE - 385)) | (1L << (SERVERERROR - 385)) | (1L << (SESSIONTIMEZONE - 385)) | (1L << (SET - 385)) | (1L << (SETS - 385)) | (1L << (SETTINGS - 385)) | (1L << (SHOW - 385)) | (1L << (SHUTDOWN - 385)) | (1L << (SIBLINGS - 385)) | (1L << (SIGN - 385)) | (1L << (SIGNTYPE - 385)) | (1L << (SIMPLE_INTEGER - 385)) | (1L << (SINGLE - 385)) | (1L << (SINH - 385)) | (1L << (SIN - 385)) | (1L << (SKIP_ - 385)) | (1L << (SMALLINT - 385)) | (1L << (SNAPSHOT - 385)) | (1L << (SOME - 385)) | (1L << (SOUNDEX - 385)) | (1L << (SPECIFICATION - 385)) | (1L << (SQLDATA - 385)) | (1L << (SQLERROR - 385)) | (1L << (SQRT - 385)) | (1L << (STANDALONE - 385)))) != 0) || ((((_la - 449)) & ~0x3f) == 0 && ((1L << (_la - 449)) & ((1L << (STARTUP - 449)) | (1L << (STATEMENT_ID - 449)) | (1L << (STATEMENT - 449)) | (1L << (STATIC - 449)) | (1L << (STATISTICS - 449)) | (1L << (STRING - 449)) | (1L << (SUBMULTISET - 449)) | (1L << (SUBPARTITION - 449)) | (1L << (SUBSTITUTABLE - 449)) | (1L << (SUBTYPE - 449)) | (1L << (SUCCESS - 449)) | (1L << (SUSPEND - 449)) | (1L << (SYS_CONTEXT - 449)) | (1L << (SYSDATE - 449)) | (1L << (SYSTIMESTAMP - 449)) | (1L << (TANH - 449)) | (1L << (TAN - 449)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 449)) | (1L << (TIMESTAMP - 449)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 449)) | (1L << (TIMESTAMP_UNCONSTRAINED - 449)) | (1L << (TIME - 449)) | (1L << (TIME_TZ_UNCONSTRAINED - 449)) | (1L << (TIME_UNCONSTRAINED - 449)) | (1L << (TIMEZONE_ABBR - 449)) | (1L << (TIMEZONE_HOUR - 449)) | (1L << (TIMEZONE_MINUTE - 449)) | (1L << (TIMEZONE_REGION - 449)) | (1L << (TO_CLOB - 449)) | (1L << (TO_DSINTERVAL - 449)) | (1L << (TO_LOB - 449)) | (1L << (TO_MULTI_BYTE - 449)) | (1L << (TO_NCLOB - 449)) | (1L << (TO_NUMBER - 449)) | (1L << (TO_SINGLE_BYTE - 449)) | (1L << (TO_TIMESTAMP - 449)) | (1L << (TO_TIMESTAMP_TZ - 449)) | (1L << (TO_YMINTERVAL - 449)) | (1L << (TRAILING - 449)) | (1L << (TRANSACTION - 449)) | (1L << (TRANSLATE - 449)) | (1L << (TREAT - 449)) | (1L << (TRIGGER - 449)) | (1L << (TRUNCATE - 449)) | (1L << (TRUNC - 449)) | (1L << (TYPE - 449)) | (1L << (TZ_OFFSET - 449)) | (1L << (UID - 449)) | (1L << (UNBOUNDED - 449)) | (1L << (UNDER - 449)) | (1L << (UNLIMITED - 449)) | (1L << (UNTIL - 449)) | (1L << (UPDATED - 449)))) != 0) || ((((_la - 513)) & ~0x3f) == 0 && ((1L << (_la - 513)) & ((1L << (UPPER - 513)) | (1L << (UPSERT - 513)) | (1L << (UROWID - 513)) | (1L << (USERENV - 513)) | (1L << (USER - 513)) | (1L << (USE - 513)) | (1L << (VALIDATE - 513)) | (1L << (VALUE - 513)) | (1L << (VARCHAR2 - 513)) | (1L << (VARCHAR - 513)) | (1L << (VARIABLE - 513)) | (1L << (VARRAY - 513)) | (1L << (VARYING - 513)) | (1L << (VERSIONS - 513)) | (1L << (VERSION - 513)) | (1L << (VSIZE - 513)) | (1L << (WAIT - 513)) | (1L << (WARNING - 513)) | (1L << (WELLFORMED - 513)) | (1L << (WHENEVER - 513)) | (1L << (WHILE - 513)) | (1L << (WITHIN - 513)) | (1L << (WORK - 513)) | (1L << (WRITE - 513)) | (1L << (XMLAGG - 513)) | (1L << (XMLATTRIBUTES - 513)) | (1L << (XMLCAST - 513)) | (1L << (XMLCOLATTVAL - 513)) | (1L << (XMLELEMENT - 513)) | (1L << (XMLEXISTS - 513)) | (1L << (XMLFOREST - 513)) | (1L << (XMLNAMESPACES - 513)) | (1L << (XMLPARSE - 513)) | (1L << (XMLPI - 513)) | (1L << (XMLQUERY - 513)) | (1L << (XMLROOT - 513)) | (1L << (XMLSERIALIZE - 513)) | (1L << (XMLTABLE - 513)) | (1L << (XML - 513)) | (1L << (YEAR - 513)) | (1L << (YES - 513)) | (1L << (YMINTERVAL_UNCONSTRAINED - 513)) | (1L << (ZONE - 513)) | (1L << (PREDICTION - 513)) | (1L << (PREDICTION_BOUNDS - 513)) | (1L << (PREDICTION_COST - 513)) | (1L << (PREDICTION_DETAILS - 513)) | (1L << (PREDICTION_PROBABILITY - 513)) | (1L << (PREDICTION_SET - 513)) | (1L << (CUME_DIST - 513)) | (1L << (DENSE_RANK - 513)) | (1L << (LISTAGG - 513)) | (1L << (PERCENT_RANK - 513)) | (1L << (PERCENTILE_CONT - 513)) | (1L << (PERCENTILE_DISC - 513)) | (1L << (RANK - 513)))) != 0) || ((((_la - 577)) & ~0x3f) == 0 && ((1L << (_la - 577)) & ((1L << (AVG - 577)) | (1L << (CORR - 577)) | (1L << (COVAR_ - 577)) | (1L << (DECODE - 577)) | (1L << (LAG - 577)) | (1L << (LEAD - 577)) | (1L << (MAX - 577)) | (1L << (MEDIAN - 577)) | (1L << (MIN - 577)) | (1L << (NTILE - 577)) | (1L << (NVL - 577)) | (1L << (RATIO_TO_REPORT - 577)) | (1L << (REGR_ - 577)) | (1L << (ROUND - 577)) | (1L << (ROW_NUMBER - 577)) | (1L << (SUBSTR - 577)) | (1L << (TO_CHAR - 577)) | (1L << (TRIM - 577)) | (1L << (SUM - 577)) | (1L << (STDDEV - 577)) | (1L << (VAR_ - 577)) | (1L << (VARIANCE - 577)) | (1L << (LEAST - 577)) | (1L << (GREATEST - 577)) | (1L << (TO_DATE - 577)) | (1L << (DELIMITED_ID - 577)) | (1L << (ASTERISK - 577)))) != 0) || _la==REGULAR_ID) {
				{
				setState(2545);
				type_spec();
				}
			}

			setState(2550);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(2548);
				match(NOT);
				setState(2549);
				match(NULL);
				}
			}

			setState(2553);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT || _la==ASSIGN_OP) {
				{
				setState(2552);
				default_value_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ref_cursor_type_defContext extends ParserRuleContext {
		public TerminalNode REF() { return getToken(OracleSQLStatementParser.REF, 0); }
		public TerminalNode CURSOR() { return getToken(OracleSQLStatementParser.CURSOR, 0); }
		public TerminalNode RETURN() { return getToken(OracleSQLStatementParser.RETURN, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Ref_cursor_type_defContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ref_cursor_type_def; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterRef_cursor_type_def(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitRef_cursor_type_def(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitRef_cursor_type_def(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Ref_cursor_type_defContext ref_cursor_type_def() throws RecognitionException {
		Ref_cursor_type_defContext _localctx = new Ref_cursor_type_defContext(_ctx, getState());
		enterRule(_localctx, 238, RULE_ref_cursor_type_def);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2555);
			match(REF);
			setState(2556);
			match(CURSOR);
			setState(2559);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RETURN) {
				{
				setState(2557);
				match(RETURN);
				setState(2558);
				type_spec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_declarationContext extends ParserRuleContext {
		public TerminalNode TYPE() { return getToken(OracleSQLStatementParser.TYPE, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode IS() { return getToken(OracleSQLStatementParser.IS, 0); }
		public TerminalNode SEMI() { return getToken(OracleSQLStatementParser.SEMI, 0); }
		public Table_type_defContext table_type_def() {
			return getRuleContext(Table_type_defContext.class,0);
		}
		public Varray_type_defContext varray_type_def() {
			return getRuleContext(Varray_type_defContext.class,0);
		}
		public Record_type_defContext record_type_def() {
			return getRuleContext(Record_type_defContext.class,0);
		}
		public Ref_cursor_type_defContext ref_cursor_type_def() {
			return getRuleContext(Ref_cursor_type_defContext.class,0);
		}
		public Type_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterType_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitType_declaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitType_declaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Type_declarationContext type_declaration() throws RecognitionException {
		Type_declarationContext _localctx = new Type_declarationContext(_ctx, getState());
		enterRule(_localctx, 240, RULE_type_declaration);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2561);
			match(TYPE);
			setState(2562);
			identifier();
			setState(2563);
			match(IS);
			setState(2568);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TABLE:
				{
				setState(2564);
				table_type_def();
				}
				break;
			case VARRAY:
			case VARYING:
				{
				setState(2565);
				varray_type_def();
				}
				break;
			case RECORD:
				{
				setState(2566);
				record_type_def();
				}
				break;
			case REF:
				{
				setState(2567);
				ref_cursor_type_def();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2570);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_type_defContext extends ParserRuleContext {
		public TerminalNode TABLE() { return getToken(OracleSQLStatementParser.TABLE, 0); }
		public TerminalNode OF() { return getToken(OracleSQLStatementParser.OF, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Table_indexed_by_partContext table_indexed_by_part() {
			return getRuleContext(Table_indexed_by_partContext.class,0);
		}
		public TerminalNode NOT() { return getToken(OracleSQLStatementParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(OracleSQLStatementParser.NULL, 0); }
		public Table_type_defContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_type_def; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterTable_type_def(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitTable_type_def(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitTable_type_def(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_type_defContext table_type_def() throws RecognitionException {
		Table_type_defContext _localctx = new Table_type_defContext(_ctx, getState());
		enterRule(_localctx, 242, RULE_table_type_def);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2572);
			match(TABLE);
			setState(2573);
			match(OF);
			setState(2574);
			type_spec();
			setState(2576);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INDEXED || _la==INDEX) {
				{
				setState(2575);
				table_indexed_by_part();
				}
			}

			setState(2580);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(2578);
				match(NOT);
				setState(2579);
				match(NULL);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_indexed_by_partContext extends ParserRuleContext {
		public Token idx1;
		public Token idx2;
		public TerminalNode BY() { return getToken(OracleSQLStatementParser.BY, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode INDEXED() { return getToken(OracleSQLStatementParser.INDEXED, 0); }
		public TerminalNode INDEX() { return getToken(OracleSQLStatementParser.INDEX, 0); }
		public Table_indexed_by_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_indexed_by_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterTable_indexed_by_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitTable_indexed_by_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitTable_indexed_by_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_indexed_by_partContext table_indexed_by_part() throws RecognitionException {
		Table_indexed_by_partContext _localctx = new Table_indexed_by_partContext(_ctx, getState());
		enterRule(_localctx, 244, RULE_table_indexed_by_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2584);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INDEXED:
				{
				setState(2582);
				((Table_indexed_by_partContext)_localctx).idx1 = match(INDEXED);
				}
				break;
			case INDEX:
				{
				setState(2583);
				((Table_indexed_by_partContext)_localctx).idx2 = match(INDEX);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2586);
			match(BY);
			setState(2587);
			type_spec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Varray_type_defContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(OracleSQLStatementParser.LEFT_PAREN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(OracleSQLStatementParser.RIGHT_PAREN, 0); }
		public TerminalNode OF() { return getToken(OracleSQLStatementParser.OF, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode VARRAY() { return getToken(OracleSQLStatementParser.VARRAY, 0); }
		public TerminalNode VARYING() { return getToken(OracleSQLStatementParser.VARYING, 0); }
		public TerminalNode ARRAY() { return getToken(OracleSQLStatementParser.ARRAY, 0); }
		public TerminalNode NOT() { return getToken(OracleSQLStatementParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(OracleSQLStatementParser.NULL, 0); }
		public Varray_type_defContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_varray_type_def; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterVarray_type_def(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitVarray_type_def(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitVarray_type_def(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Varray_type_defContext varray_type_def() throws RecognitionException {
		Varray_type_defContext _localctx = new Varray_type_defContext(_ctx, getState());
		enterRule(_localctx, 246, RULE_varray_type_def);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2592);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case VARRAY:
				{
				setState(2589);
				match(VARRAY);
				}
				break;
			case VARYING:
				{
				setState(2590);
				match(VARYING);
				setState(2591);
				match(ARRAY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2594);
			match(LEFT_PAREN);
			setState(2595);
			expression();
			setState(2596);
			match(RIGHT_PAREN);
			setState(2597);
			match(OF);
			setState(2598);
			type_spec();
			setState(2601);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,256,_ctx) ) {
			case 1:
				{
				setState(2599);
				match(NOT);
				setState(2600);
				match(NULL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Seq_of_statementsContext extends ParserRuleContext {
		public List<StatementContext> statement() {
			return getRuleContexts(StatementContext.class);
		}
		public StatementContext statement(int i) {
			return getRuleContext(StatementContext.class,i);
		}
		public List<Label_declarationContext> label_declaration() {
			return getRuleContexts(Label_declarationContext.class);
		}
		public Label_declarationContext label_declaration(int i) {
			return getRuleContext(Label_declarationContext.class,i);
		}
		public List<TerminalNode> SEMI() { return getTokens(OracleSQLStatementParser.SEMI); }
		public TerminalNode SEMI(int i) {
			return getToken(OracleSQLStatementParser.SEMI, i);
		}
		public List<TerminalNode> EOF() { return getTokens(OracleSQLStatementParser.EOF); }
		public TerminalNode EOF(int i) {
			return getToken(OracleSQLStatementParser.EOF, i);
		}
		public Seq_of_statementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_seq_of_statements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterSeq_of_statements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitSeq_of_statements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitSeq_of_statements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Seq_of_statementsContext seq_of_statements() throws RecognitionException {
		Seq_of_statementsContext _localctx = new Seq_of_statementsContext(_ctx, getState());
		enterRule(_localctx, 248, RULE_seq_of_statements);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2607); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					setState(2607);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case ABS:
					case ACOS:
					case ADD:
					case ADD_MONTHS:
					case AFTER:
					case AGENT:
					case AGGREGATE:
					case A_LETTER:
					case ALTER:
					case ANALYZE:
					case ARRAY:
					case ASCII:
					case ASCIISTR:
					case ASIN:
					case ASSOCIATE:
					case ATAN2:
					case ATAN:
					case AT:
					case ATTRIBUTE:
					case AUDIT:
					case AUTHID:
					case AUTO:
					case AUTOMATIC:
					case AUTONOMOUS_TRANSACTION:
					case BATCH:
					case BEFORE:
					case BEGIN:
					case BFILE:
					case BFILENAME:
					case BINARY_DOUBLE:
					case BINARY_FLOAT:
					case BINARY_INTEGER:
					case BIN_TO_NUM:
					case BITAND:
					case BLOB:
					case BLOCK:
					case BODY:
					case BOOLEAN:
					case BOTH:
					case BULK:
					case BYTE:
					case CALL:
					case CANONICAL:
					case CARDINALITY:
					case CASCADE:
					case CASE:
					case CAST:
					case CEIL:
					case CHARACTER:
					case CHAR:
					case CHAR_CS:
					case CHARTOROWID:
					case CHR:
					case C_LETTER:
					case CLOB:
					case CLOSE:
					case CLUSTER:
					case COALESCE:
					case COLLECT:
					case COLUMNS:
					case COMMENT:
					case COMMIT:
					case COMMITTED:
					case COMPATIBILITY:
					case COMPILE:
					case COMPOSE:
					case COMPOUND:
					case CONCAT:
					case CONSTANT:
					case CONSTRAINT:
					case CONSTRAINTS:
					case CONSTRUCTOR:
					case CONTENT:
					case CONTEXT:
					case CONTINUE:
					case CONVERT:
					case CORRUPT_XID_ALL:
					case CORRUPT_XID:
					case COS:
					case COSH:
					case COST:
					case COUNT:
					case CREATE:
					case CROSS:
					case CUBE:
					case CURRENT_DATE:
					case CURRENT_TIMESTAMP:
					case CURRENT_USER:
					case CURSOR:
					case CUSTOMDATUM:
					case CYCLE:
					case DATABASE:
					case DATA:
					case DAY:
					case DB_ROLE_CHANGE:
					case DBTIMEZONE:
					case DDL:
					case DEBUG:
					case DEC:
					case DECIMAL:
					case DECLARE:
					case DECOMPOSE:
					case DECREMENT:
					case DEFAULTS:
					case DEFERRED:
					case DEFINER:
					case DELETE:
					case DETERMINISTIC:
					case DIMENSION:
					case DISABLE:
					case DISASSOCIATE:
					case DOCUMENT:
					case DOUBLE:
					case DSINTERVAL_UNCONSTRAINED:
					case DUMP:
					case EACH:
					case ELEMENT:
					case EMPTY_BLOB:
					case EMPTY_CLOB:
					case EMPTY:
					case ENABLE:
					case ENCODING:
					case ENTITYESCAPING:
					case ERR:
					case ERRORS:
					case ESCAPE:
					case EVALNAME:
					case EXCEPTION:
					case EXCEPTION_INIT:
					case EXCEPTIONS:
					case EXCLUDE:
					case EXECUTE:
					case EXIT:
					case EXP:
					case EXPLAIN:
					case EXTERNAL:
					case EXTRACT:
					case FAILURE:
					case FETCH:
					case FINAL:
					case FIRST:
					case FIRST_VALUE:
					case FLOAT:
					case FLOOR:
					case FOLLOWING:
					case FOLLOWS:
					case FORALL:
					case FORCE:
					case FOR:
					case FROM_TZ:
					case FULL:
					case FUNCTION:
					case GOTO:
					case GRANT:
					case GROUP_ID:
					case GROUPING:
					case HASH:
					case HEXTORAW:
					case HIDE:
					case HOUR:
					case IF:
					case IGNORE:
					case IMMEDIATE:
					case INCLUDE:
					case INCLUDING:
					case INCREMENT:
					case INDENT:
					case INDEXED:
					case INDICATOR:
					case INDICES:
					case INFINITE:
					case INITCAP:
					case INLINE:
					case INNER:
					case INOUT:
					case INSERT:
					case INSTANTIABLE:
					case INSTEAD:
					case INSTR2:
					case INSTR4:
					case INSTRB:
					case INSTRC:
					case INSTR:
					case INTERFACE:
					case INTEGER:
					case INTERVAL:
					case INT:
					case INVALIDATE:
					case ISOLATION:
					case ITERATE:
					case JAVA:
					case JOIN:
					case KEEP:
					case KEY:
					case LANGUAGE:
					case LAST_DAY:
					case LAST:
					case LAST_VALUE:
					case LEADING:
					case LEFT:
					case LENGTH2:
					case LENGTH4:
					case LENGTHB:
					case LENGTHC:
					case LENGTH:
					case LEVEL:
					case LIBRARY:
					case LIKE2:
					case LIKE4:
					case LIKEC:
					case LIMIT:
					case LN:
					case LNNVL:
					case LOCAL:
					case LOCALTIMESTAMP:
					case LOCKED:
					case LOCK:
					case LOG:
					case LOGOFF:
					case LOGON:
					case LONG:
					case LOOP:
					case LOWER:
					case LPAD:
					case LTRIM:
					case MAIN:
					case MAP:
					case MATCHED:
					case MAXVALUE:
					case MEASURES:
					case MEMBER:
					case MERGE:
					case MINUTE:
					case MINVALUE:
					case MLSLABEL:
					case MODEL:
					case MODIFY:
					case MOD:
					case MONTH:
					case MONTHS_BETWEEN:
					case MULTISET:
					case NAME:
					case NAN:
					case NANVL:
					case NATURAL:
					case NATURALN:
					case NAV:
					case NCHAR_CS:
					case NCHAR:
					case NCHR:
					case NCLOB:
					case NESTED:
					case NEW:
					case NEW_TIME:
					case NEXT_DAY:
					case NOAUDIT:
					case NOCOPY:
					case NOCYCLE:
					case NOENTITYESCAPING:
					case NONE:
					case NO:
					case NOSCHEMACHECK:
					case NULLIF:
					case NULL:
					case NULLS:
					case NUMBER:
					case NUMERIC:
					case NUMTODSINTERVAL:
					case NUMTOYMINTERVAL:
					case NVARCHAR2:
					case NVL2:
					case OBJECT:
					case OFF:
					case OID:
					case OLD:
					case ONLY:
					case OPAQUE:
					case OPEN:
					case ORADATA:
					case ORDINALITY:
					case OSERROR:
					case OUTER:
					case OUT:
					case OVER:
					case OVERRIDING:
					case PACKAGE:
					case PARALLEL_ENABLE:
					case PARAMETERS:
					case PARENT:
					case PARTITION:
					case PASSING:
					case PATH:
					case PIPELINED:
					case PIPE:
					case PLAN:
					case PLS_INTEGER:
					case POSITIVEN:
					case POSITIVE:
					case POWER:
					case PRAGMA:
					case PRECEDING:
					case PRECISION:
					case PRESENT:
					case PRIOR:
					case PROCEDURE:
					case RAISE:
					case RANGE:
					case RAW:
					case RAWTOHEX:
					case READ:
					case REAL:
					case RECORD:
					case REFERENCE:
					case REFERENCING:
					case REF:
					case REGEXP_COUNT:
					case REGEXP_INSTR:
					case REGEXP_REPLACE:
					case REGEXP_SUBSTR:
					case REJECT:
					case RELIES_ON:
					case REMAINDER:
					case RENAME:
					case REPLACE:
					case RESPECT:
					case RESTRICT_REFERENCES:
					case RESULT_CACHE:
					case RESULT:
					case RETURNING:
					case RETURN:
					case REUSE:
					case REVERSE:
					case RIGHT:
					case ROLLBACK:
					case ROLLUP:
					case ROWID:
					case ROWNUM:
					case ROW:
					case ROWS:
					case RPAD:
					case RTRIM:
					case RULES:
					case SAMPLE:
					case SAVEPOINT:
					case SAVE:
					case SCHEMACHECK:
					case SCHEMA:
					case SCN:
					case SECOND:
					case SEED:
					case SEGMENT:
					case SELECT:
					case SELF:
					case SEQUENTIAL:
					case SERIALIZABLE:
					case SERIALLY_REUSABLE:
					case SERVERERROR:
					case SESSIONTIMEZONE:
					case SET:
					case SETS:
					case SETTINGS:
					case SHOW:
					case SHUTDOWN:
					case SIBLINGS:
					case SIGN:
					case SIGNTYPE:
					case SIMPLE_INTEGER:
					case SINGLE:
					case SINH:
					case SIN:
					case SKIP_:
					case SMALLINT:
					case SNAPSHOT:
					case SOME:
					case SOUNDEX:
					case SPECIFICATION:
					case SQLDATA:
					case SQLERROR:
					case SQRT:
					case STANDALONE:
					case STARTUP:
					case STATEMENT_ID:
					case STATEMENT:
					case STATIC:
					case STATISTICS:
					case STRING:
					case SUBMULTISET:
					case SUBPARTITION:
					case SUBSTITUTABLE:
					case SUBTYPE:
					case SUCCESS:
					case SUSPEND:
					case SYS_CONTEXT:
					case SYSDATE:
					case SYSTIMESTAMP:
					case TANH:
					case TAN:
					case TIMESTAMP_LTZ_UNCONSTRAINED:
					case TIMESTAMP:
					case TIMESTAMP_TZ_UNCONSTRAINED:
					case TIMESTAMP_UNCONSTRAINED:
					case TIME:
					case TIMEZONE_ABBR:
					case TIMEZONE_HOUR:
					case TIMEZONE_MINUTE:
					case TIMEZONE_REGION:
					case TO_CLOB:
					case TO_DSINTERVAL:
					case TO_LOB:
					case TO_MULTI_BYTE:
					case TO_NCLOB:
					case TO_NUMBER:
					case TO_SINGLE_BYTE:
					case TO_TIMESTAMP:
					case TO_TIMESTAMP_TZ:
					case TO_YMINTERVAL:
					case TRAILING:
					case TRANSACTION:
					case TRANSLATE:
					case TREAT:
					case TRIGGER:
					case TRUNCATE:
					case TRUNC:
					case TYPE:
					case TZ_OFFSET:
					case UID:
					case UNBOUNDED:
					case UNDER:
					case UNLIMITED:
					case UNTIL:
					case UPDATED:
					case UPDATE:
					case UPPER:
					case UPSERT:
					case UROWID:
					case USERENV:
					case USER:
					case USE:
					case VALIDATE:
					case VALUE:
					case VARCHAR2:
					case VARCHAR:
					case VARIABLE:
					case VARRAY:
					case VARYING:
					case VERSIONS:
					case VERSION:
					case VSIZE:
					case WAIT:
					case WARNING:
					case WELLFORMED:
					case WHENEVER:
					case WHILE:
					case WITHIN:
					case WITH:
					case WORK:
					case WRITE:
					case XMLAGG:
					case XMLATTRIBUTES:
					case XMLCAST:
					case XMLCOLATTVAL:
					case XMLELEMENT:
					case XMLEXISTS:
					case XMLFOREST:
					case XMLNAMESPACES:
					case XMLPARSE:
					case XMLPI:
					case XMLQUERY:
					case XMLROOT:
					case XMLSERIALIZE:
					case XMLTABLE:
					case XML:
					case YEAR:
					case YES:
					case YMINTERVAL_UNCONSTRAINED:
					case ZONE:
					case PREDICTION:
					case PREDICTION_BOUNDS:
					case PREDICTION_COST:
					case PREDICTION_DETAILS:
					case PREDICTION_PROBABILITY:
					case PREDICTION_SET:
					case CUME_DIST:
					case DENSE_RANK:
					case LISTAGG:
					case PERCENT_RANK:
					case PERCENTILE_CONT:
					case PERCENTILE_DISC:
					case RANK:
					case AVG:
					case CORR:
					case COVAR_:
					case DECODE:
					case LAG:
					case LEAD:
					case MAX:
					case MEDIAN:
					case MIN:
					case NTILE:
					case NVL:
					case RATIO_TO_REPORT:
					case REGR_:
					case ROUND:
					case ROW_NUMBER:
					case SUBSTR:
					case TO_CHAR:
					case TRIM:
					case SUM:
					case STDDEV:
					case VAR_:
					case VARIANCE:
					case LEAST:
					case GREATEST:
					case TO_DATE:
					case DELIMITED_ID:
					case LEFT_PAREN:
					case ASTERISK:
					case BINDVAR:
					case COLON:
					case INTRODUCER:
					case REGULAR_ID:
						{
						setState(2603);
						statement();
						setState(2604);
						_la = _input.LA(1);
						if ( !(_la==EOF || _la==SEMI) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case LESS_THAN_OP:
						{
						setState(2606);
						label_declaration();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2609); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,258,_ctx);
			} while ( _alt!=2 && _alt!= ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Label_declarationContext extends ParserRuleContext {
		public Token ltp1;
		public Label_nameContext label_name() {
			return getRuleContext(Label_nameContext.class,0);
		}
		public Label_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_label_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterLabel_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitLabel_declaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitLabel_declaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Label_declarationContext label_declaration() throws RecognitionException {
		Label_declarationContext _localctx = new Label_declarationContext(_ctx, getState());
		enterRule(_localctx, 250, RULE_label_declaration);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2611);
			((Label_declarationContext)_localctx).ltp1 = match(LESS_THAN_OP);
			setState(2612);
			match(LESS_THAN_OP);
			setState(2613);
			label_name();
			setState(2614);
			match(GREATER_THAN_OP);
			setState(2615);
			match(GREATER_THAN_OP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StatementContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(OracleSQLStatementParser.CREATE, 0); }
		public Swallow_to_semiContext swallow_to_semi() {
			return getRuleContext(Swallow_to_semiContext.class,0);
		}
		public TerminalNode ALTER() { return getToken(OracleSQLStatementParser.ALTER, 0); }
		public TerminalNode GRANT() { return getToken(OracleSQLStatementParser.GRANT, 0); }
		public TerminalNode ALL() { return getToken(OracleSQLStatementParser.ALL, 0); }
		public TerminalNode TRUNCATE() { return getToken(OracleSQLStatementParser.TRUNCATE, 0); }
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		public BlockContext block() {
			return getRuleContext(BlockContext.class,0);
		}
		public Assignment_statementContext assignment_statement() {
			return getRuleContext(Assignment_statementContext.class,0);
		}
		public Continue_statementContext continue_statement() {
			return getRuleContext(Continue_statementContext.class,0);
		}
		public Exit_statementContext exit_statement() {
			return getRuleContext(Exit_statementContext.class,0);
		}
		public Goto_statementContext goto_statement() {
			return getRuleContext(Goto_statementContext.class,0);
		}
		public If_statementContext if_statement() {
			return getRuleContext(If_statementContext.class,0);
		}
		public Loop_statementContext loop_statement() {
			return getRuleContext(Loop_statementContext.class,0);
		}
		public Forall_statementContext forall_statement() {
			return getRuleContext(Forall_statementContext.class,0);
		}
		public Null_statementContext null_statement() {
			return getRuleContext(Null_statementContext.class,0);
		}
		public Raise_statementContext raise_statement() {
			return getRuleContext(Raise_statementContext.class,0);
		}
		public Return_statementContext return_statement() {
			return getRuleContext(Return_statementContext.class,0);
		}
		public Case_statementContext case_statement() {
			return getRuleContext(Case_statementContext.class,0);
		}
		public Sql_statementContext sql_statement() {
			return getRuleContext(Sql_statementContext.class,0);
		}
		public Function_callContext function_call() {
			return getRuleContext(Function_callContext.class,0);
		}
		public Pipe_row_statementContext pipe_row_statement() {
			return getRuleContext(Pipe_row_statementContext.class,0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StatementContext statement() throws RecognitionException {
		StatementContext _localctx = new StatementContext(_ctx, getState());
		enterRule(_localctx, 252, RULE_statement);
		try {
			setState(2644);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,260,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2617);
				match(CREATE);
				setState(2618);
				swallow_to_semi();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2619);
				match(ALTER);
				setState(2620);
				swallow_to_semi();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2621);
				match(GRANT);
				setState(2623);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,259,_ctx) ) {
				case 1:
					{
					setState(2622);
					match(ALL);
					}
					break;
				}
				setState(2625);
				swallow_to_semi();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2626);
				match(TRUNCATE);
				setState(2627);
				swallow_to_semi();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2628);
				body();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2629);
				block();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2630);
				assignment_statement();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(2631);
				continue_statement();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(2632);
				exit_statement();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(2633);
				goto_statement();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(2634);
				if_statement();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(2635);
				loop_statement();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(2636);
				forall_statement();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(2637);
				null_statement();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(2638);
				raise_statement();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(2639);
				return_statement();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(2640);
				case_statement();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(2641);
				sql_statement();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(2642);
				function_call();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(2643);
				pipe_row_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Assignment_statementContext extends ParserRuleContext {
		public TerminalNode ASSIGN_OP() { return getToken(OracleSQLStatementParser.ASSIGN_OP, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public General_elementContext general_element() {
			return getRuleContext(General_elementContext.class,0);
		}
		public Bind_variableContext bind_variable() {
			return getRuleContext(Bind_variableContext.class,0);
		}
		public Assignment_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_assignment_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterAssignment_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitAssignment_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitAssignment_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Assignment_statementContext assignment_statement() throws RecognitionException {
		Assignment_statementContext _localctx = new Assignment_statementContext(_ctx, getState());
		enterRule(_localctx, 254, RULE_assignment_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2648);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ABS:
			case ACOS:
			case ADD:
			case ADD_MONTHS:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASCII:
			case ASCIISTR:
			case ASIN:
			case ASSOCIATE:
			case ATAN2:
			case ATAN:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BFILENAME:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BIN_TO_NUM:
			case BITAND:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CARDINALITY:
			case CASCADE:
			case CASE:
			case CAST:
			case CEIL:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHARTOROWID:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOSE:
			case COMPOUND:
			case CONCAT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COS:
			case COSH:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_DATE:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case DUMP:
			case EACH:
			case ELEMENT:
			case EMPTY_BLOB:
			case EMPTY_CLOB:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXP:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FLOOR:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FROM_TZ:
			case FULL:
			case FUNCTION:
			case GROUP_ID:
			case GROUPING:
			case HASH:
			case HEXTORAW:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INITCAP:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INSTR2:
			case INSTR4:
			case INSTRB:
			case INSTRC:
			case INSTR:
			case INTERFACE:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST_DAY:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LENGTH2:
			case LENGTH4:
			case LENGTHB:
			case LENGTHC:
			case LENGTH:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LN:
			case LNNVL:
			case LOCAL:
			case LOCALTIMESTAMP:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MOD:
			case MONTH:
			case MONTHS_BETWEEN:
			case MULTISET:
			case NAME:
			case NAN:
			case NANVL:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCHR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NEW_TIME:
			case NEXT_DAY:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLIF:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NUMTODSINTERVAL:
			case NUMTOYMINTERVAL:
			case NVARCHAR2:
			case NVL2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPAQUE:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case POWER:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case PROCEDURE:
			case RAISE:
			case RANGE:
			case RAW:
			case RAWTOHEX:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_REPLACE:
			case REGEXP_SUBSTR:
			case REJECT:
			case RELIES_ON:
			case REMAINDER:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROWNUM:
			case ROW:
			case ROWS:
			case RPAD:
			case RTRIM:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGN:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SINH:
			case SIN:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SOUNDEX:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case SQRT:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYS_CONTEXT:
			case SYSDATE:
			case SYSTIMESTAMP:
			case TANH:
			case TAN:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TO_CLOB:
			case TO_DSINTERVAL:
			case TO_LOB:
			case TO_MULTI_BYTE:
			case TO_NCLOB:
			case TO_NUMBER:
			case TO_SINGLE_BYTE:
			case TO_TIMESTAMP:
			case TO_TIMESTAMP_TZ:
			case TO_YMINTERVAL:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TRUNC:
			case TYPE:
			case TZ_OFFSET:
			case UID:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPPER:
			case UPSERT:
			case UROWID:
			case USERENV:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case VSIZE:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case DECODE:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case NVL:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROUND:
			case ROW_NUMBER:
			case SUBSTR:
			case TO_CHAR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case LEAST:
			case GREATEST:
			case TO_DATE:
			case DELIMITED_ID:
			case ASTERISK:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(2646);
				general_element();
				}
				break;
			case BINDVAR:
			case COLON:
				{
				setState(2647);
				bind_variable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2650);
			match(ASSIGN_OP);
			setState(2651);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Continue_statementContext extends ParserRuleContext {
		public TerminalNode CONTINUE() { return getToken(OracleSQLStatementParser.CONTINUE, 0); }
		public Label_nameContext label_name() {
			return getRuleContext(Label_nameContext.class,0);
		}
		public TerminalNode WHEN() { return getToken(OracleSQLStatementParser.WHEN, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public Continue_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_continue_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterContinue_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitContinue_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitContinue_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Continue_statementContext continue_statement() throws RecognitionException {
		Continue_statementContext _localctx = new Continue_statementContext(_ctx, getState());
		enterRule(_localctx, 256, RULE_continue_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2653);
			match(CONTINUE);
			setState(2655);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABS) | (1L << ACOS) | (1L << ADD) | (1L << ADD_MONTHS) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASCII) | (1L << ASCIISTR) | (1L << ASIN) | (1L << ASSOCIATE) | (1L << ATAN2) | (1L << ATAN) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BFILENAME) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BIN_TO_NUM) | (1L << BITAND) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CARDINALITY) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CEIL) | (1L << CHARACTER) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARTOROWID) | (1L << CHR) | (1L << C_LETTER))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOSE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONCAT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COS - 64)) | (1L << (COSH - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_DATE - 64)) | (1L << (CURRENT_TIMESTAMP - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (DIMENSION - 128)) | (1L << (DISABLE - 128)) | (1L << (DISASSOCIATE - 128)) | (1L << (DOCUMENT - 128)) | (1L << (DOUBLE - 128)) | (1L << (DSINTERVAL_UNCONSTRAINED - 128)) | (1L << (DUMP - 128)) | (1L << (EACH - 128)) | (1L << (ELEMENT - 128)) | (1L << (EMPTY_BLOB - 128)) | (1L << (EMPTY_CLOB - 128)) | (1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERR - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXP - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FLOOR - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FROM_TZ - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUP_ID - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HEXTORAW - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (IGNORE - 193)) | (1L << (IMMEDIATE - 193)) | (1L << (INCLUDE - 193)) | (1L << (INCLUDING - 193)) | (1L << (INCREMENT - 193)) | (1L << (INDENT - 193)) | (1L << (INDEXED - 193)) | (1L << (INDICATOR - 193)) | (1L << (INDICES - 193)) | (1L << (INFINITE - 193)) | (1L << (INITCAP - 193)) | (1L << (INLINE - 193)) | (1L << (INNER - 193)) | (1L << (INOUT - 193)) | (1L << (INSTANTIABLE - 193)) | (1L << (INSTEAD - 193)) | (1L << (INSTR2 - 193)) | (1L << (INSTR4 - 193)) | (1L << (INSTRB - 193)) | (1L << (INSTRC - 193)) | (1L << (INSTR - 193)) | (1L << (INTERFACE - 193)) | (1L << (INTEGER - 193)) | (1L << (INTERVAL - 193)) | (1L << (INT - 193)) | (1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (KEY - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST_DAY - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LENGTH2 - 193)) | (1L << (LENGTH4 - 193)) | (1L << (LENGTHB - 193)) | (1L << (LENGTHC - 193)) | (1L << (LENGTH - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LN - 193)) | (1L << (LNNVL - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCALTIMESTAMP - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (LOGON - 257)) | (1L << (LONG - 257)) | (1L << (LOOP - 257)) | (1L << (LOWER - 257)) | (1L << (LPAD - 257)) | (1L << (LTRIM - 257)) | (1L << (MAIN - 257)) | (1L << (MAP - 257)) | (1L << (MATCHED - 257)) | (1L << (MAXVALUE - 257)) | (1L << (MEASURES - 257)) | (1L << (MEMBER - 257)) | (1L << (MERGE - 257)) | (1L << (MINUTE - 257)) | (1L << (MINVALUE - 257)) | (1L << (MLSLABEL - 257)) | (1L << (MODEL - 257)) | (1L << (MODIFY - 257)) | (1L << (MOD - 257)) | (1L << (MONTH - 257)) | (1L << (MONTHS_BETWEEN - 257)) | (1L << (MULTISET - 257)) | (1L << (NAME - 257)) | (1L << (NAN - 257)) | (1L << (NANVL - 257)) | (1L << (NATURAL - 257)) | (1L << (NATURALN - 257)) | (1L << (NAV - 257)) | (1L << (NCHAR_CS - 257)) | (1L << (NCHAR - 257)) | (1L << (NCHR - 257)) | (1L << (NCLOB - 257)) | (1L << (NESTED - 257)) | (1L << (NEW - 257)) | (1L << (NEW_TIME - 257)) | (1L << (NEXT_DAY - 257)) | (1L << (NOAUDIT - 257)) | (1L << (NOCOPY - 257)) | (1L << (NOCYCLE - 257)) | (1L << (NOENTITYESCAPING - 257)) | (1L << (NONE - 257)) | (1L << (NO - 257)) | (1L << (NOSCHEMACHECK - 257)) | (1L << (NULLIF - 257)) | (1L << (NULLS - 257)) | (1L << (NUMBER - 257)) | (1L << (NUMERIC - 257)) | (1L << (NUMTODSINTERVAL - 257)) | (1L << (NUMTOYMINTERVAL - 257)) | (1L << (NVARCHAR2 - 257)) | (1L << (NVL2 - 257)) | (1L << (OBJECT - 257)) | (1L << (OFF - 257)))) != 0) || ((((_la - 321)) & ~0x3f) == 0 && ((1L << (_la - 321)) & ((1L << (OID - 321)) | (1L << (OLD - 321)) | (1L << (ONLY - 321)) | (1L << (OPAQUE - 321)) | (1L << (OPEN - 321)) | (1L << (ORADATA - 321)) | (1L << (ORDINALITY - 321)) | (1L << (OSERROR - 321)) | (1L << (OUTER - 321)) | (1L << (OUT - 321)) | (1L << (OVER - 321)) | (1L << (OVERRIDING - 321)) | (1L << (PACKAGE - 321)) | (1L << (PARALLEL_ENABLE - 321)) | (1L << (PARAMETERS - 321)) | (1L << (PARENT - 321)) | (1L << (PARTITION - 321)) | (1L << (PASSING - 321)) | (1L << (PATH - 321)) | (1L << (PIPELINED - 321)) | (1L << (PLAN - 321)) | (1L << (PLS_INTEGER - 321)) | (1L << (POSITIVEN - 321)) | (1L << (POSITIVE - 321)) | (1L << (POWER - 321)) | (1L << (PRAGMA - 321)) | (1L << (PRECEDING - 321)) | (1L << (PRECISION - 321)) | (1L << (PRESENT - 321)) | (1L << (PRIOR - 321)) | (1L << (PROCEDURE - 321)) | (1L << (RAISE - 321)) | (1L << (RANGE - 321)) | (1L << (RAW - 321)) | (1L << (RAWTOHEX - 321)) | (1L << (READ - 321)) | (1L << (REAL - 321)) | (1L << (RECORD - 321)) | (1L << (REFERENCE - 321)) | (1L << (REFERENCING - 321)) | (1L << (REF - 321)) | (1L << (REGEXP_COUNT - 321)) | (1L << (REGEXP_INSTR - 321)) | (1L << (REGEXP_REPLACE - 321)) | (1L << (REGEXP_SUBSTR - 321)) | (1L << (REJECT - 321)) | (1L << (RELIES_ON - 321)) | (1L << (REMAINDER - 321)))) != 0) || ((((_la - 385)) & ~0x3f) == 0 && ((1L << (_la - 385)) & ((1L << (RENAME - 385)) | (1L << (REPLACE - 385)) | (1L << (RESPECT - 385)) | (1L << (RESTRICT_REFERENCES - 385)) | (1L << (RESULT_CACHE - 385)) | (1L << (RESULT - 385)) | (1L << (RETURNING - 385)) | (1L << (RETURN - 385)) | (1L << (REUSE - 385)) | (1L << (REVERSE - 385)) | (1L << (RIGHT - 385)) | (1L << (ROLLBACK - 385)) | (1L << (ROLLUP - 385)) | (1L << (ROWID - 385)) | (1L << (ROWNUM - 385)) | (1L << (ROW - 385)) | (1L << (ROWS - 385)) | (1L << (RPAD - 385)) | (1L << (RTRIM - 385)) | (1L << (RULES - 385)) | (1L << (SAMPLE - 385)) | (1L << (SAVEPOINT - 385)) | (1L << (SAVE - 385)) | (1L << (SCHEMACHECK - 385)) | (1L << (SCHEMA - 385)) | (1L << (SCN - 385)) | (1L << (SECOND - 385)) | (1L << (SEED - 385)) | (1L << (SEGMENT - 385)) | (1L << (SELF - 385)) | (1L << (SEQUENTIAL - 385)) | (1L << (SERIALIZABLE - 385)) | (1L << (SERIALLY_REUSABLE - 385)) | (1L << (SERVERERROR - 385)) | (1L << (SESSIONTIMEZONE - 385)) | (1L << (SET - 385)) | (1L << (SETS - 385)) | (1L << (SETTINGS - 385)) | (1L << (SHOW - 385)) | (1L << (SHUTDOWN - 385)) | (1L << (SIBLINGS - 385)) | (1L << (SIGN - 385)) | (1L << (SIGNTYPE - 385)) | (1L << (SIMPLE_INTEGER - 385)) | (1L << (SINGLE - 385)) | (1L << (SINH - 385)) | (1L << (SIN - 385)) | (1L << (SKIP_ - 385)) | (1L << (SMALLINT - 385)) | (1L << (SNAPSHOT - 385)) | (1L << (SOME - 385)) | (1L << (SOUNDEX - 385)) | (1L << (SPECIFICATION - 385)) | (1L << (SQLDATA - 385)) | (1L << (SQLERROR - 385)) | (1L << (SQRT - 385)) | (1L << (STANDALONE - 385)))) != 0) || ((((_la - 449)) & ~0x3f) == 0 && ((1L << (_la - 449)) & ((1L << (STARTUP - 449)) | (1L << (STATEMENT_ID - 449)) | (1L << (STATEMENT - 449)) | (1L << (STATIC - 449)) | (1L << (STATISTICS - 449)) | (1L << (STRING - 449)) | (1L << (SUBMULTISET - 449)) | (1L << (SUBPARTITION - 449)) | (1L << (SUBSTITUTABLE - 449)) | (1L << (SUBTYPE - 449)) | (1L << (SUCCESS - 449)) | (1L << (SUSPEND - 449)) | (1L << (SYS_CONTEXT - 449)) | (1L << (SYSDATE - 449)) | (1L << (SYSTIMESTAMP - 449)) | (1L << (TANH - 449)) | (1L << (TAN - 449)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 449)) | (1L << (TIMESTAMP - 449)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 449)) | (1L << (TIMESTAMP_UNCONSTRAINED - 449)) | (1L << (TIME - 449)) | (1L << (TIMEZONE_ABBR - 449)) | (1L << (TIMEZONE_HOUR - 449)) | (1L << (TIMEZONE_MINUTE - 449)) | (1L << (TIMEZONE_REGION - 449)) | (1L << (TO_CLOB - 449)) | (1L << (TO_DSINTERVAL - 449)) | (1L << (TO_LOB - 449)) | (1L << (TO_MULTI_BYTE - 449)) | (1L << (TO_NCLOB - 449)) | (1L << (TO_NUMBER - 449)) | (1L << (TO_SINGLE_BYTE - 449)) | (1L << (TO_TIMESTAMP - 449)) | (1L << (TO_TIMESTAMP_TZ - 449)) | (1L << (TO_YMINTERVAL - 449)) | (1L << (TRAILING - 449)) | (1L << (TRANSACTION - 449)) | (1L << (TRANSLATE - 449)) | (1L << (TREAT - 449)) | (1L << (TRIGGER - 449)) | (1L << (TRUNCATE - 449)) | (1L << (TRUNC - 449)) | (1L << (TYPE - 449)) | (1L << (TZ_OFFSET - 449)) | (1L << (UID - 449)) | (1L << (UNBOUNDED - 449)) | (1L << (UNDER - 449)) | (1L << (UNLIMITED - 449)) | (1L << (UNTIL - 449)) | (1L << (UPDATED - 449)))) != 0) || ((((_la - 513)) & ~0x3f) == 0 && ((1L << (_la - 513)) & ((1L << (UPPER - 513)) | (1L << (UPSERT - 513)) | (1L << (UROWID - 513)) | (1L << (USERENV - 513)) | (1L << (USER - 513)) | (1L << (USE - 513)) | (1L << (VALIDATE - 513)) | (1L << (VALUE - 513)) | (1L << (VARCHAR2 - 513)) | (1L << (VARCHAR - 513)) | (1L << (VARIABLE - 513)) | (1L << (VARRAY - 513)) | (1L << (VARYING - 513)) | (1L << (VERSIONS - 513)) | (1L << (VERSION - 513)) | (1L << (VSIZE - 513)) | (1L << (WAIT - 513)) | (1L << (WARNING - 513)) | (1L << (WELLFORMED - 513)) | (1L << (WHENEVER - 513)) | (1L << (WHILE - 513)) | (1L << (WITHIN - 513)) | (1L << (WORK - 513)) | (1L << (WRITE - 513)) | (1L << (XMLAGG - 513)) | (1L << (XMLATTRIBUTES - 513)) | (1L << (XMLCAST - 513)) | (1L << (XMLCOLATTVAL - 513)) | (1L << (XMLELEMENT - 513)) | (1L << (XMLEXISTS - 513)) | (1L << (XMLFOREST - 513)) | (1L << (XMLNAMESPACES - 513)) | (1L << (XMLPARSE - 513)) | (1L << (XMLPI - 513)) | (1L << (XMLQUERY - 513)) | (1L << (XMLROOT - 513)) | (1L << (XMLSERIALIZE - 513)) | (1L << (XMLTABLE - 513)) | (1L << (XML - 513)) | (1L << (YEAR - 513)) | (1L << (YES - 513)) | (1L << (YMINTERVAL_UNCONSTRAINED - 513)) | (1L << (ZONE - 513)) | (1L << (PREDICTION - 513)) | (1L << (PREDICTION_BOUNDS - 513)) | (1L << (PREDICTION_COST - 513)) | (1L << (PREDICTION_DETAILS - 513)) | (1L << (PREDICTION_PROBABILITY - 513)) | (1L << (PREDICTION_SET - 513)) | (1L << (CUME_DIST - 513)) | (1L << (DENSE_RANK - 513)) | (1L << (LISTAGG - 513)) | (1L << (PERCENT_RANK - 513)) | (1L << (PERCENTILE_CONT - 513)) | (1L << (PERCENTILE_DISC - 513)) | (1L << (RANK - 513)))) != 0) || ((((_la - 577)) & ~0x3f) == 0 && ((1L << (_la - 577)) & ((1L << (AVG - 577)) | (1L << (CORR - 577)) | (1L << (COVAR_ - 577)) | (1L << (DECODE - 577)) | (1L << (LAG - 577)) | (1L << (LEAD - 577)) | (1L << (MAX - 577)) | (1L << (MEDIAN - 577)) | (1L << (MIN - 577)) | (1L << (NTILE - 577)) | (1L << (NVL - 577)) | (1L << (RATIO_TO_REPORT - 577)) | (1L << (REGR_ - 577)) | (1L << (ROUND - 577)) | (1L << (ROW_NUMBER - 577)) | (1L << (SUBSTR - 577)) | (1L << (TO_CHAR - 577)) | (1L << (TRIM - 577)) | (1L << (SUM - 577)) | (1L << (STDDEV - 577)) | (1L << (VAR_ - 577)) | (1L << (VARIANCE - 577)) | (1L << (LEAST - 577)) | (1L << (GREATEST - 577)) | (1L << (TO_DATE - 577)) | (1L << (DELIMITED_ID - 577)) | (1L << (ASTERISK - 577)))) != 0) || _la==REGULAR_ID) {
				{
				setState(2654);
				label_name();
				}
			}

			setState(2659);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHEN) {
				{
				setState(2657);
				match(WHEN);
				setState(2658);
				condition();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Exit_statementContext extends ParserRuleContext {
		public TerminalNode EXIT() { return getToken(OracleSQLStatementParser.EXIT, 0); }
		public Label_nameContext label_name() {
			return getRuleContext(Label_nameContext.class,0);
		}
		public TerminalNode WHEN() { return getToken(OracleSQLStatementParser.WHEN, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public Exit_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exit_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterExit_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitExit_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitExit_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Exit_statementContext exit_statement() throws RecognitionException {
		Exit_statementContext _localctx = new Exit_statementContext(_ctx, getState());
		enterRule(_localctx, 258, RULE_exit_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2661);
			match(EXIT);
			setState(2663);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABS) | (1L << ACOS) | (1L << ADD) | (1L << ADD_MONTHS) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASCII) | (1L << ASCIISTR) | (1L << ASIN) | (1L << ASSOCIATE) | (1L << ATAN2) | (1L << ATAN) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BFILENAME) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BIN_TO_NUM) | (1L << BITAND) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CARDINALITY) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CEIL) | (1L << CHARACTER) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARTOROWID) | (1L << CHR) | (1L << C_LETTER))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOSE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONCAT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COS - 64)) | (1L << (COSH - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_DATE - 64)) | (1L << (CURRENT_TIMESTAMP - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (DIMENSION - 128)) | (1L << (DISABLE - 128)) | (1L << (DISASSOCIATE - 128)) | (1L << (DOCUMENT - 128)) | (1L << (DOUBLE - 128)) | (1L << (DSINTERVAL_UNCONSTRAINED - 128)) | (1L << (DUMP - 128)) | (1L << (EACH - 128)) | (1L << (ELEMENT - 128)) | (1L << (EMPTY_BLOB - 128)) | (1L << (EMPTY_CLOB - 128)) | (1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERR - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXP - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FLOOR - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FROM_TZ - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUP_ID - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HEXTORAW - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (IGNORE - 193)) | (1L << (IMMEDIATE - 193)) | (1L << (INCLUDE - 193)) | (1L << (INCLUDING - 193)) | (1L << (INCREMENT - 193)) | (1L << (INDENT - 193)) | (1L << (INDEXED - 193)) | (1L << (INDICATOR - 193)) | (1L << (INDICES - 193)) | (1L << (INFINITE - 193)) | (1L << (INITCAP - 193)) | (1L << (INLINE - 193)) | (1L << (INNER - 193)) | (1L << (INOUT - 193)) | (1L << (INSTANTIABLE - 193)) | (1L << (INSTEAD - 193)) | (1L << (INSTR2 - 193)) | (1L << (INSTR4 - 193)) | (1L << (INSTRB - 193)) | (1L << (INSTRC - 193)) | (1L << (INSTR - 193)) | (1L << (INTERFACE - 193)) | (1L << (INTEGER - 193)) | (1L << (INTERVAL - 193)) | (1L << (INT - 193)) | (1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (KEY - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST_DAY - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LENGTH2 - 193)) | (1L << (LENGTH4 - 193)) | (1L << (LENGTHB - 193)) | (1L << (LENGTHC - 193)) | (1L << (LENGTH - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LN - 193)) | (1L << (LNNVL - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCALTIMESTAMP - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (LOGON - 257)) | (1L << (LONG - 257)) | (1L << (LOOP - 257)) | (1L << (LOWER - 257)) | (1L << (LPAD - 257)) | (1L << (LTRIM - 257)) | (1L << (MAIN - 257)) | (1L << (MAP - 257)) | (1L << (MATCHED - 257)) | (1L << (MAXVALUE - 257)) | (1L << (MEASURES - 257)) | (1L << (MEMBER - 257)) | (1L << (MERGE - 257)) | (1L << (MINUTE - 257)) | (1L << (MINVALUE - 257)) | (1L << (MLSLABEL - 257)) | (1L << (MODEL - 257)) | (1L << (MODIFY - 257)) | (1L << (MOD - 257)) | (1L << (MONTH - 257)) | (1L << (MONTHS_BETWEEN - 257)) | (1L << (MULTISET - 257)) | (1L << (NAME - 257)) | (1L << (NAN - 257)) | (1L << (NANVL - 257)) | (1L << (NATURAL - 257)) | (1L << (NATURALN - 257)) | (1L << (NAV - 257)) | (1L << (NCHAR_CS - 257)) | (1L << (NCHAR - 257)) | (1L << (NCHR - 257)) | (1L << (NCLOB - 257)) | (1L << (NESTED - 257)) | (1L << (NEW - 257)) | (1L << (NEW_TIME - 257)) | (1L << (NEXT_DAY - 257)) | (1L << (NOAUDIT - 257)) | (1L << (NOCOPY - 257)) | (1L << (NOCYCLE - 257)) | (1L << (NOENTITYESCAPING - 257)) | (1L << (NONE - 257)) | (1L << (NO - 257)) | (1L << (NOSCHEMACHECK - 257)) | (1L << (NULLIF - 257)) | (1L << (NULLS - 257)) | (1L << (NUMBER - 257)) | (1L << (NUMERIC - 257)) | (1L << (NUMTODSINTERVAL - 257)) | (1L << (NUMTOYMINTERVAL - 257)) | (1L << (NVARCHAR2 - 257)) | (1L << (NVL2 - 257)) | (1L << (OBJECT - 257)) | (1L << (OFF - 257)))) != 0) || ((((_la - 321)) & ~0x3f) == 0 && ((1L << (_la - 321)) & ((1L << (OID - 321)) | (1L << (OLD - 321)) | (1L << (ONLY - 321)) | (1L << (OPAQUE - 321)) | (1L << (OPEN - 321)) | (1L << (ORADATA - 321)) | (1L << (ORDINALITY - 321)) | (1L << (OSERROR - 321)) | (1L << (OUTER - 321)) | (1L << (OUT - 321)) | (1L << (OVER - 321)) | (1L << (OVERRIDING - 321)) | (1L << (PACKAGE - 321)) | (1L << (PARALLEL_ENABLE - 321)) | (1L << (PARAMETERS - 321)) | (1L << (PARENT - 321)) | (1L << (PARTITION - 321)) | (1L << (PASSING - 321)) | (1L << (PATH - 321)) | (1L << (PIPELINED - 321)) | (1L << (PLAN - 321)) | (1L << (PLS_INTEGER - 321)) | (1L << (POSITIVEN - 321)) | (1L << (POSITIVE - 321)) | (1L << (POWER - 321)) | (1L << (PRAGMA - 321)) | (1L << (PRECEDING - 321)) | (1L << (PRECISION - 321)) | (1L << (PRESENT - 321)) | (1L << (PRIOR - 321)) | (1L << (PROCEDURE - 321)) | (1L << (RAISE - 321)) | (1L << (RANGE - 321)) | (1L << (RAW - 321)) | (1L << (RAWTOHEX - 321)) | (1L << (READ - 321)) | (1L << (REAL - 321)) | (1L << (RECORD - 321)) | (1L << (REFERENCE - 321)) | (1L << (REFERENCING - 321)) | (1L << (REF - 321)) | (1L << (REGEXP_COUNT - 321)) | (1L << (REGEXP_INSTR - 321)) | (1L << (REGEXP_REPLACE - 321)) | (1L << (REGEXP_SUBSTR - 321)) | (1L << (REJECT - 321)) | (1L << (RELIES_ON - 321)) | (1L << (REMAINDER - 321)))) != 0) || ((((_la - 385)) & ~0x3f) == 0 && ((1L << (_la - 385)) & ((1L << (RENAME - 385)) | (1L << (REPLACE - 385)) | (1L << (RESPECT - 385)) | (1L << (RESTRICT_REFERENCES - 385)) | (1L << (RESULT_CACHE - 385)) | (1L << (RESULT - 385)) | (1L << (RETURNING - 385)) | (1L << (RETURN - 385)) | (1L << (REUSE - 385)) | (1L << (REVERSE - 385)) | (1L << (RIGHT - 385)) | (1L << (ROLLBACK - 385)) | (1L << (ROLLUP - 385)) | (1L << (ROWID - 385)) | (1L << (ROWNUM - 385)) | (1L << (ROW - 385)) | (1L << (ROWS - 385)) | (1L << (RPAD - 385)) | (1L << (RTRIM - 385)) | (1L << (RULES - 385)) | (1L << (SAMPLE - 385)) | (1L << (SAVEPOINT - 385)) | (1L << (SAVE - 385)) | (1L << (SCHEMACHECK - 385)) | (1L << (SCHEMA - 385)) | (1L << (SCN - 385)) | (1L << (SECOND - 385)) | (1L << (SEED - 385)) | (1L << (SEGMENT - 385)) | (1L << (SELF - 385)) | (1L << (SEQUENTIAL - 385)) | (1L << (SERIALIZABLE - 385)) | (1L << (SERIALLY_REUSABLE - 385)) | (1L << (SERVERERROR - 385)) | (1L << (SESSIONTIMEZONE - 385)) | (1L << (SET - 385)) | (1L << (SETS - 385)) | (1L << (SETTINGS - 385)) | (1L << (SHOW - 385)) | (1L << (SHUTDOWN - 385)) | (1L << (SIBLINGS - 385)) | (1L << (SIGN - 385)) | (1L << (SIGNTYPE - 385)) | (1L << (SIMPLE_INTEGER - 385)) | (1L << (SINGLE - 385)) | (1L << (SINH - 385)) | (1L << (SIN - 385)) | (1L << (SKIP_ - 385)) | (1L << (SMALLINT - 385)) | (1L << (SNAPSHOT - 385)) | (1L << (SOME - 385)) | (1L << (SOUNDEX - 385)) | (1L << (SPECIFICATION - 385)) | (1L << (SQLDATA - 385)) | (1L << (SQLERROR - 385)) | (1L << (SQRT - 385)) | (1L << (STANDALONE - 385)))) != 0) || ((((_la - 449)) & ~0x3f) == 0 && ((1L << (_la - 449)) & ((1L << (STARTUP - 449)) | (1L << (STATEMENT_ID - 449)) | (1L << (STATEMENT - 449)) | (1L << (STATIC - 449)) | (1L << (STATISTICS - 449)) | (1L << (STRING - 449)) | (1L << (SUBMULTISET - 449)) | (1L << (SUBPARTITION - 449)) | (1L << (SUBSTITUTABLE - 449)) | (1L << (SUBTYPE - 449)) | (1L << (SUCCESS - 449)) | (1L << (SUSPEND - 449)) | (1L << (SYS_CONTEXT - 449)) | (1L << (SYSDATE - 449)) | (1L << (SYSTIMESTAMP - 449)) | (1L << (TANH - 449)) | (1L << (TAN - 449)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 449)) | (1L << (TIMESTAMP - 449)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 449)) | (1L << (TIMESTAMP_UNCONSTRAINED - 449)) | (1L << (TIME - 449)) | (1L << (TIMEZONE_ABBR - 449)) | (1L << (TIMEZONE_HOUR - 449)) | (1L << (TIMEZONE_MINUTE - 449)) | (1L << (TIMEZONE_REGION - 449)) | (1L << (TO_CLOB - 449)) | (1L << (TO_DSINTERVAL - 449)) | (1L << (TO_LOB - 449)) | (1L << (TO_MULTI_BYTE - 449)) | (1L << (TO_NCLOB - 449)) | (1L << (TO_NUMBER - 449)) | (1L << (TO_SINGLE_BYTE - 449)) | (1L << (TO_TIMESTAMP - 449)) | (1L << (TO_TIMESTAMP_TZ - 449)) | (1L << (TO_YMINTERVAL - 449)) | (1L << (TRAILING - 449)) | (1L << (TRANSACTION - 449)) | (1L << (TRANSLATE - 449)) | (1L << (TREAT - 449)) | (1L << (TRIGGER - 449)) | (1L << (TRUNCATE - 449)) | (1L << (TRUNC - 449)) | (1L << (TYPE - 449)) | (1L << (TZ_OFFSET - 449)) | (1L << (UID - 449)) | (1L << (UNBOUNDED - 449)) | (1L << (UNDER - 449)) | (1L << (UNLIMITED - 449)) | (1L << (UNTIL - 449)) | (1L << (UPDATED - 449)))) != 0) || ((((_la - 513)) & ~0x3f) == 0 && ((1L << (_la - 513)) & ((1L << (UPPER - 513)) | (1L << (UPSERT - 513)) | (1L << (UROWID - 513)) | (1L << (USERENV - 513)) | (1L << (USER - 513)) | (1L << (USE - 513)) | (1L << (VALIDATE - 513)) | (1L << (VALUE - 513)) | (1L << (VARCHAR2 - 513)) | (1L << (VARCHAR - 513)) | (1L << (VARIABLE - 513)) | (1L << (VARRAY - 513)) | (1L << (VARYING - 513)) | (1L << (VERSIONS - 513)) | (1L << (VERSION - 513)) | (1L << (VSIZE - 513)) | (1L << (WAIT - 513)) | (1L << (WARNING - 513)) | (1L << (WELLFORMED - 513)) | (1L << (WHENEVER - 513)) | (1L << (WHILE - 513)) | (1L << (WITHIN - 513)) | (1L << (WORK - 513)) | (1L << (WRITE - 513)) | (1L << (XMLAGG - 513)) | (1L << (XMLATTRIBUTES - 513)) | (1L << (XMLCAST - 513)) | (1L << (XMLCOLATTVAL - 513)) | (1L << (XMLELEMENT - 513)) | (1L << (XMLEXISTS - 513)) | (1L << (XMLFOREST - 513)) | (1L << (XMLNAMESPACES - 513)) | (1L << (XMLPARSE - 513)) | (1L << (XMLPI - 513)) | (1L << (XMLQUERY - 513)) | (1L << (XMLROOT - 513)) | (1L << (XMLSERIALIZE - 513)) | (1L << (XMLTABLE - 513)) | (1L << (XML - 513)) | (1L << (YEAR - 513)) | (1L << (YES - 513)) | (1L << (YMINTERVAL_UNCONSTRAINED - 513)) | (1L << (ZONE - 513)) | (1L << (PREDICTION - 513)) | (1L << (PREDICTION_BOUNDS - 513)) | (1L << (PREDICTION_COST - 513)) | (1L << (PREDICTION_DETAILS - 513)) | (1L << (PREDICTION_PROBABILITY - 513)) | (1L << (PREDICTION_SET - 513)) | (1L << (CUME_DIST - 513)) | (1L << (DENSE_RANK - 513)) | (1L << (LISTAGG - 513)) | (1L << (PERCENT_RANK - 513)) | (1L << (PERCENTILE_CONT - 513)) | (1L << (PERCENTILE_DISC - 513)) | (1L << (RANK - 513)))) != 0) || ((((_la - 577)) & ~0x3f) == 0 && ((1L << (_la - 577)) & ((1L << (AVG - 577)) | (1L << (CORR - 577)) | (1L << (COVAR_ - 577)) | (1L << (DECODE - 577)) | (1L << (LAG - 577)) | (1L << (LEAD - 577)) | (1L << (MAX - 577)) | (1L << (MEDIAN - 577)) | (1L << (MIN - 577)) | (1L << (NTILE - 577)) | (1L << (NVL - 577)) | (1L << (RATIO_TO_REPORT - 577)) | (1L << (REGR_ - 577)) | (1L << (ROUND - 577)) | (1L << (ROW_NUMBER - 577)) | (1L << (SUBSTR - 577)) | (1L << (TO_CHAR - 577)) | (1L << (TRIM - 577)) | (1L << (SUM - 577)) | (1L << (STDDEV - 577)) | (1L << (VAR_ - 577)) | (1L << (VARIANCE - 577)) | (1L << (LEAST - 577)) | (1L << (GREATEST - 577)) | (1L << (TO_DATE - 577)) | (1L << (DELIMITED_ID - 577)) | (1L << (ASTERISK - 577)))) != 0) || _la==REGULAR_ID) {
				{
				setState(2662);
				label_name();
				}
			}

			setState(2667);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHEN) {
				{
				setState(2665);
				match(WHEN);
				setState(2666);
				condition();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Goto_statementContext extends ParserRuleContext {
		public TerminalNode GOTO() { return getToken(OracleSQLStatementParser.GOTO, 0); }
		public Label_nameContext label_name() {
			return getRuleContext(Label_nameContext.class,0);
		}
		public Goto_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_goto_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterGoto_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitGoto_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitGoto_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Goto_statementContext goto_statement() throws RecognitionException {
		Goto_statementContext _localctx = new Goto_statementContext(_ctx, getState());
		enterRule(_localctx, 260, RULE_goto_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2669);
			match(GOTO);
			setState(2670);
			label_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class If_statementContext extends ParserRuleContext {
		public List<TerminalNode> IF() { return getTokens(OracleSQLStatementParser.IF); }
		public TerminalNode IF(int i) {
			return getToken(OracleSQLStatementParser.IF, i);
		}
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public TerminalNode THEN() { return getToken(OracleSQLStatementParser.THEN, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public TerminalNode END() { return getToken(OracleSQLStatementParser.END, 0); }
		public List<Elsif_partContext> elsif_part() {
			return getRuleContexts(Elsif_partContext.class);
		}
		public Elsif_partContext elsif_part(int i) {
			return getRuleContext(Elsif_partContext.class,i);
		}
		public Else_partContext else_part() {
			return getRuleContext(Else_partContext.class,0);
		}
		public If_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_if_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterIf_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitIf_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitIf_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final If_statementContext if_statement() throws RecognitionException {
		If_statementContext _localctx = new If_statementContext(_ctx, getState());
		enterRule(_localctx, 262, RULE_if_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2672);
			match(IF);
			setState(2673);
			condition();
			setState(2674);
			match(THEN);
			setState(2675);
			seq_of_statements();
			setState(2679);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==ELSIF) {
				{
				{
				setState(2676);
				elsif_part();
				}
				}
				setState(2681);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2683);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(2682);
				else_part();
				}
			}

			setState(2685);
			match(END);
			setState(2686);
			match(IF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Elsif_partContext extends ParserRuleContext {
		public TerminalNode ELSIF() { return getToken(OracleSQLStatementParser.ELSIF, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public TerminalNode THEN() { return getToken(OracleSQLStatementParser.THEN, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public Elsif_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_elsif_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterElsif_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitElsif_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitElsif_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Elsif_partContext elsif_part() throws RecognitionException {
		Elsif_partContext _localctx = new Elsif_partContext(_ctx, getState());
		enterRule(_localctx, 264, RULE_elsif_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2688);
			match(ELSIF);
			setState(2689);
			condition();
			setState(2690);
			match(THEN);
			setState(2691);
			seq_of_statements();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Else_partContext extends ParserRuleContext {
		public TerminalNode ELSE() { return getToken(OracleSQLStatementParser.ELSE, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public Else_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_else_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterElse_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitElse_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitElse_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Else_partContext else_part() throws RecognitionException {
		Else_partContext _localctx = new Else_partContext(_ctx, getState());
		enterRule(_localctx, 266, RULE_else_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2693);
			match(ELSE);
			setState(2694);
			seq_of_statements();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Loop_statementContext extends ParserRuleContext {
		public List<TerminalNode> LOOP() { return getTokens(OracleSQLStatementParser.LOOP); }
		public TerminalNode LOOP(int i) {
			return getToken(OracleSQLStatementParser.LOOP, i);
		}
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public TerminalNode END() { return getToken(OracleSQLStatementParser.END, 0); }
		public List<Label_nameContext> label_name() {
			return getRuleContexts(Label_nameContext.class);
		}
		public Label_nameContext label_name(int i) {
			return getRuleContext(Label_nameContext.class,i);
		}
		public TerminalNode WHILE() { return getToken(OracleSQLStatementParser.WHILE, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public TerminalNode FOR() { return getToken(OracleSQLStatementParser.FOR, 0); }
		public Cursor_loop_paramContext cursor_loop_param() {
			return getRuleContext(Cursor_loop_paramContext.class,0);
		}
		public Loop_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loop_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterLoop_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitLoop_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitLoop_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Loop_statementContext loop_statement() throws RecognitionException {
		Loop_statementContext _localctx = new Loop_statementContext(_ctx, getState());
		enterRule(_localctx, 268, RULE_loop_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2697);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,268,_ctx) ) {
			case 1:
				{
				setState(2696);
				label_name();
				}
				break;
			}
			setState(2703);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WHILE:
				{
				setState(2699);
				match(WHILE);
				setState(2700);
				condition();
				}
				break;
			case FOR:
				{
				setState(2701);
				match(FOR);
				setState(2702);
				cursor_loop_param();
				}
				break;
			case LOOP:
				break;
			default:
				break;
			}
			setState(2705);
			match(LOOP);
			setState(2706);
			seq_of_statements();
			setState(2707);
			match(END);
			setState(2708);
			match(LOOP);
			setState(2710);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABS) | (1L << ACOS) | (1L << ADD) | (1L << ADD_MONTHS) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASCII) | (1L << ASCIISTR) | (1L << ASIN) | (1L << ASSOCIATE) | (1L << ATAN2) | (1L << ATAN) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BFILENAME) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BIN_TO_NUM) | (1L << BITAND) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CARDINALITY) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CEIL) | (1L << CHARACTER) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARTOROWID) | (1L << CHR) | (1L << C_LETTER))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOSE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONCAT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COS - 64)) | (1L << (COSH - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_DATE - 64)) | (1L << (CURRENT_TIMESTAMP - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (DIMENSION - 128)) | (1L << (DISABLE - 128)) | (1L << (DISASSOCIATE - 128)) | (1L << (DOCUMENT - 128)) | (1L << (DOUBLE - 128)) | (1L << (DSINTERVAL_UNCONSTRAINED - 128)) | (1L << (DUMP - 128)) | (1L << (EACH - 128)) | (1L << (ELEMENT - 128)) | (1L << (EMPTY_BLOB - 128)) | (1L << (EMPTY_CLOB - 128)) | (1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERR - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXP - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FLOOR - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FROM_TZ - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUP_ID - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HEXTORAW - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (IGNORE - 193)) | (1L << (IMMEDIATE - 193)) | (1L << (INCLUDE - 193)) | (1L << (INCLUDING - 193)) | (1L << (INCREMENT - 193)) | (1L << (INDENT - 193)) | (1L << (INDEXED - 193)) | (1L << (INDICATOR - 193)) | (1L << (INDICES - 193)) | (1L << (INFINITE - 193)) | (1L << (INITCAP - 193)) | (1L << (INLINE - 193)) | (1L << (INNER - 193)) | (1L << (INOUT - 193)) | (1L << (INSTANTIABLE - 193)) | (1L << (INSTEAD - 193)) | (1L << (INSTR2 - 193)) | (1L << (INSTR4 - 193)) | (1L << (INSTRB - 193)) | (1L << (INSTRC - 193)) | (1L << (INSTR - 193)) | (1L << (INTERFACE - 193)) | (1L << (INTEGER - 193)) | (1L << (INTERVAL - 193)) | (1L << (INT - 193)) | (1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (KEY - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST_DAY - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LENGTH2 - 193)) | (1L << (LENGTH4 - 193)) | (1L << (LENGTHB - 193)) | (1L << (LENGTHC - 193)) | (1L << (LENGTH - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LN - 193)) | (1L << (LNNVL - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCALTIMESTAMP - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (LOGON - 257)) | (1L << (LONG - 257)) | (1L << (LOOP - 257)) | (1L << (LOWER - 257)) | (1L << (LPAD - 257)) | (1L << (LTRIM - 257)) | (1L << (MAIN - 257)) | (1L << (MAP - 257)) | (1L << (MATCHED - 257)) | (1L << (MAXVALUE - 257)) | (1L << (MEASURES - 257)) | (1L << (MEMBER - 257)) | (1L << (MERGE - 257)) | (1L << (MINUTE - 257)) | (1L << (MINVALUE - 257)) | (1L << (MLSLABEL - 257)) | (1L << (MODEL - 257)) | (1L << (MODIFY - 257)) | (1L << (MOD - 257)) | (1L << (MONTH - 257)) | (1L << (MONTHS_BETWEEN - 257)) | (1L << (MULTISET - 257)) | (1L << (NAME - 257)) | (1L << (NAN - 257)) | (1L << (NANVL - 257)) | (1L << (NATURAL - 257)) | (1L << (NATURALN - 257)) | (1L << (NAV - 257)) | (1L << (NCHAR_CS - 257)) | (1L << (NCHAR - 257)) | (1L << (NCHR - 257)) | (1L << (NCLOB - 257)) | (1L << (NESTED - 257)) | (1L << (NEW - 257)) | (1L << (NEW_TIME - 257)) | (1L << (NEXT_DAY - 257)) | (1L << (NOAUDIT - 257)) | (1L << (NOCOPY - 257)) | (1L << (NOCYCLE - 257)) | (1L << (NOENTITYESCAPING - 257)) | (1L << (NONE - 257)) | (1L << (NO - 257)) | (1L << (NOSCHEMACHECK - 257)) | (1L << (NULLIF - 257)) | (1L << (NULLS - 257)) | (1L << (NUMBER - 257)) | (1L << (NUMERIC - 257)) | (1L << (NUMTODSINTERVAL - 257)) | (1L << (NUMTOYMINTERVAL - 257)) | (1L << (NVARCHAR2 - 257)) | (1L << (NVL2 - 257)) | (1L << (OBJECT - 257)) | (1L << (OFF - 257)))) != 0) || ((((_la - 321)) & ~0x3f) == 0 && ((1L << (_la - 321)) & ((1L << (OID - 321)) | (1L << (OLD - 321)) | (1L << (ONLY - 321)) | (1L << (OPAQUE - 321)) | (1L << (OPEN - 321)) | (1L << (ORADATA - 321)) | (1L << (ORDINALITY - 321)) | (1L << (OSERROR - 321)) | (1L << (OUTER - 321)) | (1L << (OUT - 321)) | (1L << (OVER - 321)) | (1L << (OVERRIDING - 321)) | (1L << (PACKAGE - 321)) | (1L << (PARALLEL_ENABLE - 321)) | (1L << (PARAMETERS - 321)) | (1L << (PARENT - 321)) | (1L << (PARTITION - 321)) | (1L << (PASSING - 321)) | (1L << (PATH - 321)) | (1L << (PIPELINED - 321)) | (1L << (PLAN - 321)) | (1L << (PLS_INTEGER - 321)) | (1L << (POSITIVEN - 321)) | (1L << (POSITIVE - 321)) | (1L << (POWER - 321)) | (1L << (PRAGMA - 321)) | (1L << (PRECEDING - 321)) | (1L << (PRECISION - 321)) | (1L << (PRESENT - 321)) | (1L << (PRIOR - 321)) | (1L << (PROCEDURE - 321)) | (1L << (RAISE - 321)) | (1L << (RANGE - 321)) | (1L << (RAW - 321)) | (1L << (RAWTOHEX - 321)) | (1L << (READ - 321)) | (1L << (REAL - 321)) | (1L << (RECORD - 321)) | (1L << (REFERENCE - 321)) | (1L << (REFERENCING - 321)) | (1L << (REF - 321)) | (1L << (REGEXP_COUNT - 321)) | (1L << (REGEXP_INSTR - 321)) | (1L << (REGEXP_REPLACE - 321)) | (1L << (REGEXP_SUBSTR - 321)) | (1L << (REJECT - 321)) | (1L << (RELIES_ON - 321)) | (1L << (REMAINDER - 321)))) != 0) || ((((_la - 385)) & ~0x3f) == 0 && ((1L << (_la - 385)) & ((1L << (RENAME - 385)) | (1L << (REPLACE - 385)) | (1L << (RESPECT - 385)) | (1L << (RESTRICT_REFERENCES - 385)) | (1L << (RESULT_CACHE - 385)) | (1L << (RESULT - 385)) | (1L << (RETURNING - 385)) | (1L << (RETURN - 385)) | (1L << (REUSE - 385)) | (1L << (REVERSE - 385)) | (1L << (RIGHT - 385)) | (1L << (ROLLBACK - 385)) | (1L << (ROLLUP - 385)) | (1L << (ROWID - 385)) | (1L << (ROWNUM - 385)) | (1L << (ROW - 385)) | (1L << (ROWS - 385)) | (1L << (RPAD - 385)) | (1L << (RTRIM - 385)) | (1L << (RULES - 385)) | (1L << (SAMPLE - 385)) | (1L << (SAVEPOINT - 385)) | (1L << (SAVE - 385)) | (1L << (SCHEMACHECK - 385)) | (1L << (SCHEMA - 385)) | (1L << (SCN - 385)) | (1L << (SECOND - 385)) | (1L << (SEED - 385)) | (1L << (SEGMENT - 385)) | (1L << (SELF - 385)) | (1L << (SEQUENTIAL - 385)) | (1L << (SERIALIZABLE - 385)) | (1L << (SERIALLY_REUSABLE - 385)) | (1L << (SERVERERROR - 385)) | (1L << (SESSIONTIMEZONE - 385)) | (1L << (SET - 385)) | (1L << (SETS - 385)) | (1L << (SETTINGS - 385)) | (1L << (SHOW - 385)) | (1L << (SHUTDOWN - 385)) | (1L << (SIBLINGS - 385)) | (1L << (SIGN - 385)) | (1L << (SIGNTYPE - 385)) | (1L << (SIMPLE_INTEGER - 385)) | (1L << (SINGLE - 385)) | (1L << (SINH - 385)) | (1L << (SIN - 385)) | (1L << (SKIP_ - 385)) | (1L << (SMALLINT - 385)) | (1L << (SNAPSHOT - 385)) | (1L << (SOME - 385)) | (1L << (SOUNDEX - 385)) | (1L << (SPECIFICATION - 385)) | (1L << (SQLDATA - 385)) | (1L << (SQLERROR - 385)) | (1L << (SQRT - 385)) | (1L << (STANDALONE - 385)))) != 0) || ((((_la - 449)) & ~0x3f) == 0 && ((1L << (_la - 449)) & ((1L << (STARTUP - 449)) | (1L << (STATEMENT_ID - 449)) | (1L << (STATEMENT - 449)) | (1L << (STATIC - 449)) | (1L << (STATISTICS - 449)) | (1L << (STRING - 449)) | (1L << (SUBMULTISET - 449)) | (1L << (SUBPARTITION - 449)) | (1L << (SUBSTITUTABLE - 449)) | (1L << (SUBTYPE - 449)) | (1L << (SUCCESS - 449)) | (1L << (SUSPEND - 449)) | (1L << (SYS_CONTEXT - 449)) | (1L << (SYSDATE - 449)) | (1L << (SYSTIMESTAMP - 449)) | (1L << (TANH - 449)) | (1L << (TAN - 449)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 449)) | (1L << (TIMESTAMP - 449)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 449)) | (1L << (TIMESTAMP_UNCONSTRAINED - 449)) | (1L << (TIME - 449)) | (1L << (TIMEZONE_ABBR - 449)) | (1L << (TIMEZONE_HOUR - 449)) | (1L << (TIMEZONE_MINUTE - 449)) | (1L << (TIMEZONE_REGION - 449)) | (1L << (TO_CLOB - 449)) | (1L << (TO_DSINTERVAL - 449)) | (1L << (TO_LOB - 449)) | (1L << (TO_MULTI_BYTE - 449)) | (1L << (TO_NCLOB - 449)) | (1L << (TO_NUMBER - 449)) | (1L << (TO_SINGLE_BYTE - 449)) | (1L << (TO_TIMESTAMP - 449)) | (1L << (TO_TIMESTAMP_TZ - 449)) | (1L << (TO_YMINTERVAL - 449)) | (1L << (TRAILING - 449)) | (1L << (TRANSACTION - 449)) | (1L << (TRANSLATE - 449)) | (1L << (TREAT - 449)) | (1L << (TRIGGER - 449)) | (1L << (TRUNCATE - 449)) | (1L << (TRUNC - 449)) | (1L << (TYPE - 449)) | (1L << (TZ_OFFSET - 449)) | (1L << (UID - 449)) | (1L << (UNBOUNDED - 449)) | (1L << (UNDER - 449)) | (1L << (UNLIMITED - 449)) | (1L << (UNTIL - 449)) | (1L << (UPDATED - 449)))) != 0) || ((((_la - 513)) & ~0x3f) == 0 && ((1L << (_la - 513)) & ((1L << (UPPER - 513)) | (1L << (UPSERT - 513)) | (1L << (UROWID - 513)) | (1L << (USERENV - 513)) | (1L << (USER - 513)) | (1L << (USE - 513)) | (1L << (VALIDATE - 513)) | (1L << (VALUE - 513)) | (1L << (VARCHAR2 - 513)) | (1L << (VARCHAR - 513)) | (1L << (VARIABLE - 513)) | (1L << (VARRAY - 513)) | (1L << (VARYING - 513)) | (1L << (VERSIONS - 513)) | (1L << (VERSION - 513)) | (1L << (VSIZE - 513)) | (1L << (WAIT - 513)) | (1L << (WARNING - 513)) | (1L << (WELLFORMED - 513)) | (1L << (WHENEVER - 513)) | (1L << (WHILE - 513)) | (1L << (WITHIN - 513)) | (1L << (WORK - 513)) | (1L << (WRITE - 513)) | (1L << (XMLAGG - 513)) | (1L << (XMLATTRIBUTES - 513)) | (1L << (XMLCAST - 513)) | (1L << (XMLCOLATTVAL - 513)) | (1L << (XMLELEMENT - 513)) | (1L << (XMLEXISTS - 513)) | (1L << (XMLFOREST - 513)) | (1L << (XMLNAMESPACES - 513)) | (1L << (XMLPARSE - 513)) | (1L << (XMLPI - 513)) | (1L << (XMLQUERY - 513)) | (1L << (XMLROOT - 513)) | (1L << (XMLSERIALIZE - 513)) | (1L << (XMLTABLE - 513)) | (1L << (XML - 513)) | (1L << (YEAR - 513)) | (1L << (YES - 513)) | (1L << (YMINTERVAL_UNCONSTRAINED - 513)) | (1L << (ZONE - 513)) | (1L << (PREDICTION - 513)) | (1L << (PREDICTION_BOUNDS - 513)) | (1L << (PREDICTION_COST - 513)) | (1L << (PREDICTION_DETAILS - 513)) | (1L << (PREDICTION_PROBABILITY - 513)) | (1L << (PREDICTION_SET - 513)) | (1L << (CUME_DIST - 513)) | (1L << (DENSE_RANK - 513)) | (1L << (LISTAGG - 513)) | (1L << (PERCENT_RANK - 513)) | (1L << (PERCENTILE_CONT - 513)) | (1L << (PERCENTILE_DISC - 513)) | (1L << (RANK - 513)))) != 0) || ((((_la - 577)) & ~0x3f) == 0 && ((1L << (_la - 577)) & ((1L << (AVG - 577)) | (1L << (CORR - 577)) | (1L << (COVAR_ - 577)) | (1L << (DECODE - 577)) | (1L << (LAG - 577)) | (1L << (LEAD - 577)) | (1L << (MAX - 577)) | (1L << (MEDIAN - 577)) | (1L << (MIN - 577)) | (1L << (NTILE - 577)) | (1L << (NVL - 577)) | (1L << (RATIO_TO_REPORT - 577)) | (1L << (REGR_ - 577)) | (1L << (ROUND - 577)) | (1L << (ROW_NUMBER - 577)) | (1L << (SUBSTR - 577)) | (1L << (TO_CHAR - 577)) | (1L << (TRIM - 577)) | (1L << (SUM - 577)) | (1L << (STDDEV - 577)) | (1L << (VAR_ - 577)) | (1L << (VARIANCE - 577)) | (1L << (LEAST - 577)) | (1L << (GREATEST - 577)) | (1L << (TO_DATE - 577)) | (1L << (DELIMITED_ID - 577)) | (1L << (ASTERISK - 577)))) != 0) || _la==REGULAR_ID) {
				{
				setState(2709);
				label_name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cursor_loop_paramContext extends ParserRuleContext {
		public Token range;
		public Index_nameContext index_name() {
			return getRuleContext(Index_nameContext.class,0);
		}
		public TerminalNode IN() { return getToken(OracleSQLStatementParser.IN, 0); }
		public Lower_boundContext lower_bound() {
			return getRuleContext(Lower_boundContext.class,0);
		}
		public Upper_boundContext upper_bound() {
			return getRuleContext(Upper_boundContext.class,0);
		}
		public TerminalNode REVERSE() { return getToken(OracleSQLStatementParser.REVERSE, 0); }
		public Record_nameContext record_name() {
			return getRuleContext(Record_nameContext.class,0);
		}
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(OracleSQLStatementParser.LEFT_PAREN, 0); }
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(OracleSQLStatementParser.RIGHT_PAREN, 0); }
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public Cursor_loop_paramContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_loop_param; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterCursor_loop_param(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitCursor_loop_param(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitCursor_loop_param(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cursor_loop_paramContext cursor_loop_param() throws RecognitionException {
		Cursor_loop_paramContext _localctx = new Cursor_loop_paramContext(_ctx, getState());
		enterRule(_localctx, 270, RULE_cursor_loop_param);
		int _la;
		try {
			setState(2733);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,274,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2712);
				index_name();
				setState(2713);
				match(IN);
				setState(2715);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,271,_ctx) ) {
				case 1:
					{
					setState(2714);
					match(REVERSE);
					}
					break;
				}
				setState(2717);
				lower_bound();
				setState(2718);
				((Cursor_loop_paramContext)_localctx).range = match(DOUBLE_PERIOD);
				setState(2719);
				upper_bound();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2721);
				record_name();
				setState(2722);
				match(IN);
				setState(2731);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ABS:
				case ACOS:
				case ADD:
				case ADD_MONTHS:
				case AFTER:
				case AGENT:
				case AGGREGATE:
				case A_LETTER:
				case ANALYZE:
				case ARRAY:
				case ASCII:
				case ASCIISTR:
				case ASIN:
				case ASSOCIATE:
				case ATAN2:
				case ATAN:
				case AT:
				case ATTRIBUTE:
				case AUDIT:
				case AUTHID:
				case AUTO:
				case AUTOMATIC:
				case AUTONOMOUS_TRANSACTION:
				case BATCH:
				case BEFORE:
				case BFILE:
				case BFILENAME:
				case BINARY_DOUBLE:
				case BINARY_FLOAT:
				case BINARY_INTEGER:
				case BIN_TO_NUM:
				case BITAND:
				case BLOB:
				case BLOCK:
				case BODY:
				case BOOLEAN:
				case BOTH:
				case BULK:
				case BYTE:
				case CALL:
				case CANONICAL:
				case CARDINALITY:
				case CASCADE:
				case CASE:
				case CAST:
				case CEIL:
				case CHARACTER:
				case CHAR:
				case CHAR_CS:
				case CHARTOROWID:
				case CHR:
				case C_LETTER:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COALESCE:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPATIBILITY:
				case COMPILE:
				case COMPOSE:
				case COMPOUND:
				case CONCAT:
				case CONSTANT:
				case CONSTRAINT:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTENT:
				case CONTEXT:
				case CONTINUE:
				case CONVERT:
				case CORRUPT_XID_ALL:
				case CORRUPT_XID:
				case COS:
				case COSH:
				case COST:
				case COUNT:
				case CROSS:
				case CUBE:
				case CURRENT_DATE:
				case CURRENT_TIMESTAMP:
				case CURRENT_USER:
				case CURSOR:
				case CUSTOMDATUM:
				case CYCLE:
				case DATABASE:
				case DATA:
				case DAY:
				case DB_ROLE_CHANGE:
				case DBTIMEZONE:
				case DDL:
				case DEBUG:
				case DEC:
				case DECIMAL:
				case DECOMPOSE:
				case DECREMENT:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE:
				case DETERMINISTIC:
				case DIMENSION:
				case DISABLE:
				case DISASSOCIATE:
				case DOCUMENT:
				case DOUBLE:
				case DSINTERVAL_UNCONSTRAINED:
				case DUMP:
				case EACH:
				case ELEMENT:
				case EMPTY_BLOB:
				case EMPTY_CLOB:
				case EMPTY:
				case ENABLE:
				case ENCODING:
				case ENTITYESCAPING:
				case ERR:
				case ERRORS:
				case ESCAPE:
				case EVALNAME:
				case EXCEPTION:
				case EXCEPTION_INIT:
				case EXCEPTIONS:
				case EXCLUDE:
				case EXECUTE:
				case EXIT:
				case EXP:
				case EXPLAIN:
				case EXTERNAL:
				case EXTRACT:
				case FAILURE:
				case FINAL:
				case FIRST:
				case FIRST_VALUE:
				case FLOAT:
				case FLOOR:
				case FOLLOWING:
				case FOLLOWS:
				case FORALL:
				case FORCE:
				case FROM_TZ:
				case FULL:
				case FUNCTION:
				case GROUP_ID:
				case GROUPING:
				case HASH:
				case HEXTORAW:
				case HIDE:
				case HOUR:
				case IGNORE:
				case IMMEDIATE:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDENT:
				case INDEXED:
				case INDICATOR:
				case INDICES:
				case INFINITE:
				case INITCAP:
				case INLINE:
				case INNER:
				case INOUT:
				case INSTANTIABLE:
				case INSTEAD:
				case INSTR2:
				case INSTR4:
				case INSTRB:
				case INSTRC:
				case INSTR:
				case INTERFACE:
				case INTEGER:
				case INTERVAL:
				case INT:
				case INVALIDATE:
				case ISOLATION:
				case ITERATE:
				case JAVA:
				case JOIN:
				case KEEP:
				case KEY:
				case LANGUAGE:
				case LAST_DAY:
				case LAST:
				case LAST_VALUE:
				case LEADING:
				case LEFT:
				case LENGTH2:
				case LENGTH4:
				case LENGTHB:
				case LENGTHC:
				case LENGTH:
				case LEVEL:
				case LIBRARY:
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIMIT:
				case LN:
				case LNNVL:
				case LOCAL:
				case LOCALTIMESTAMP:
				case LOCKED:
				case LOG:
				case LOGOFF:
				case LOGON:
				case LONG:
				case LOOP:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAIN:
				case MAP:
				case MATCHED:
				case MAXVALUE:
				case MEASURES:
				case MEMBER:
				case MERGE:
				case MINUTE:
				case MINVALUE:
				case MLSLABEL:
				case MODEL:
				case MODIFY:
				case MOD:
				case MONTH:
				case MONTHS_BETWEEN:
				case MULTISET:
				case NAME:
				case NAN:
				case NANVL:
				case NATURAL:
				case NATURALN:
				case NAV:
				case NCHAR_CS:
				case NCHAR:
				case NCHR:
				case NCLOB:
				case NESTED:
				case NEW:
				case NEW_TIME:
				case NEXT_DAY:
				case NOAUDIT:
				case NOCOPY:
				case NOCYCLE:
				case NOENTITYESCAPING:
				case NONE:
				case NO:
				case NOSCHEMACHECK:
				case NULLIF:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case NUMTODSINTERVAL:
				case NUMTOYMINTERVAL:
				case NVARCHAR2:
				case NVL2:
				case OBJECT:
				case OFF:
				case OID:
				case OLD:
				case ONLY:
				case OPAQUE:
				case OPEN:
				case ORADATA:
				case ORDINALITY:
				case OSERROR:
				case OUTER:
				case OUT:
				case OVER:
				case OVERRIDING:
				case PACKAGE:
				case PARALLEL_ENABLE:
				case PARAMETERS:
				case PARENT:
				case PARTITION:
				case PASSING:
				case PATH:
				case PIPELINED:
				case PLAN:
				case PLS_INTEGER:
				case POSITIVEN:
				case POSITIVE:
				case POWER:
				case PRAGMA:
				case PRECEDING:
				case PRECISION:
				case PRESENT:
				case PRIOR:
				case PROCEDURE:
				case RAISE:
				case RANGE:
				case RAW:
				case RAWTOHEX:
				case READ:
				case REAL:
				case RECORD:
				case REFERENCE:
				case REFERENCING:
				case REF:
				case REGEXP_COUNT:
				case REGEXP_INSTR:
				case REGEXP_REPLACE:
				case REGEXP_SUBSTR:
				case REJECT:
				case RELIES_ON:
				case REMAINDER:
				case RENAME:
				case REPLACE:
				case RESPECT:
				case RESTRICT_REFERENCES:
				case RESULT_CACHE:
				case RESULT:
				case RETURNING:
				case RETURN:
				case REUSE:
				case REVERSE:
				case RIGHT:
				case ROLLBACK:
				case ROLLUP:
				case ROWID:
				case ROWNUM:
				case ROW:
				case ROWS:
				case RPAD:
				case RTRIM:
				case RULES:
				case SAMPLE:
				case SAVEPOINT:
				case SAVE:
				case SCHEMACHECK:
				case SCHEMA:
				case SCN:
				case SECOND:
				case SEED:
				case SEGMENT:
				case SELF:
				case SEQUENTIAL:
				case SERIALIZABLE:
				case SERIALLY_REUSABLE:
				case SERVERERROR:
				case SESSIONTIMEZONE:
				case SET:
				case SETS:
				case SETTINGS:
				case SHOW:
				case SHUTDOWN:
				case SIBLINGS:
				case SIGN:
				case SIGNTYPE:
				case SIMPLE_INTEGER:
				case SINGLE:
				case SINH:
				case SIN:
				case SKIP_:
				case SMALLINT:
				case SNAPSHOT:
				case SOME:
				case SOUNDEX:
				case SPECIFICATION:
				case SQLDATA:
				case SQLERROR:
				case SQRT:
				case STANDALONE:
				case STARTUP:
				case STATEMENT_ID:
				case STATEMENT:
				case STATIC:
				case STATISTICS:
				case STRING:
				case SUBMULTISET:
				case SUBPARTITION:
				case SUBSTITUTABLE:
				case SUBTYPE:
				case SUCCESS:
				case SUSPEND:
				case SYS_CONTEXT:
				case SYSDATE:
				case SYSTIMESTAMP:
				case TANH:
				case TAN:
				case TIMESTAMP_LTZ_UNCONSTRAINED:
				case TIMESTAMP:
				case TIMESTAMP_TZ_UNCONSTRAINED:
				case TIMESTAMP_UNCONSTRAINED:
				case TIME:
				case TIMEZONE_ABBR:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TIMEZONE_REGION:
				case TO_CLOB:
				case TO_DSINTERVAL:
				case TO_LOB:
				case TO_MULTI_BYTE:
				case TO_NCLOB:
				case TO_NUMBER:
				case TO_SINGLE_BYTE:
				case TO_TIMESTAMP:
				case TO_TIMESTAMP_TZ:
				case TO_YMINTERVAL:
				case TRAILING:
				case TRANSACTION:
				case TRANSLATE:
				case TREAT:
				case TRIGGER:
				case TRUNCATE:
				case TRUNC:
				case TYPE:
				case TZ_OFFSET:
				case UID:
				case UNBOUNDED:
				case UNDER:
				case UNLIMITED:
				case UNTIL:
				case UPDATED:
				case UPPER:
				case UPSERT:
				case UROWID:
				case USERENV:
				case USER:
				case USE:
				case VALIDATE:
				case VALUE:
				case VARCHAR2:
				case VARCHAR:
				case VARIABLE:
				case VARRAY:
				case VARYING:
				case VERSIONS:
				case VERSION:
				case VSIZE:
				case WAIT:
				case WARNING:
				case WELLFORMED:
				case WHENEVER:
				case WHILE:
				case WITHIN:
				case WORK:
				case WRITE:
				case XMLAGG:
				case XMLATTRIBUTES:
				case XMLCAST:
				case XMLCOLATTVAL:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case XML:
				case YEAR:
				case YES:
				case YMINTERVAL_UNCONSTRAINED:
				case ZONE:
				case PREDICTION:
				case PREDICTION_BOUNDS:
				case PREDICTION_COST:
				case PREDICTION_DETAILS:
				case PREDICTION_PROBABILITY:
				case PREDICTION_SET:
				case CUME_DIST:
				case DENSE_RANK:
				case LISTAGG:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case RANK:
				case AVG:
				case CORR:
				case COVAR_:
				case DECODE:
				case LAG:
				case LEAD:
				case MAX:
				case MEDIAN:
				case MIN:
				case NTILE:
				case NVL:
				case RATIO_TO_REPORT:
				case REGR_:
				case ROUND:
				case ROW_NUMBER:
				case SUBSTR:
				case TO_CHAR:
				case TRIM:
				case SUM:
				case STDDEV:
				case VAR_:
				case VARIANCE:
				case LEAST:
				case GREATEST:
				case TO_DATE:
				case DELIMITED_ID:
				case ASTERISK:
				case BINDVAR:
				case COLON:
				case INTRODUCER:
				case REGULAR_ID:
					{
					setState(2723);
					cursor_name();
					setState(2725);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==LEFT_PAREN) {
						{
						setState(2724);
						expression_list();
						}
					}

					}
					break;
				case LEFT_PAREN:
					{
					setState(2727);
					match(LEFT_PAREN);
					setState(2728);
					select_statement();
					setState(2729);
					match(RIGHT_PAREN);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Forall_statementContext extends ParserRuleContext {
		public TerminalNode FORALL() { return getToken(OracleSQLStatementParser.FORALL, 0); }
		public Index_nameContext index_name() {
			return getRuleContext(Index_nameContext.class,0);
		}
		public TerminalNode IN() { return getToken(OracleSQLStatementParser.IN, 0); }
		public Bounds_clauseContext bounds_clause() {
			return getRuleContext(Bounds_clauseContext.class,0);
		}
		public Sql_statementContext sql_statement() {
			return getRuleContext(Sql_statementContext.class,0);
		}
		public TerminalNode SAVE() { return getToken(OracleSQLStatementParser.SAVE, 0); }
		public TerminalNode EXCEPTIONS() { return getToken(OracleSQLStatementParser.EXCEPTIONS, 0); }
		public Forall_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_forall_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterForall_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitForall_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitForall_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Forall_statementContext forall_statement() throws RecognitionException {
		Forall_statementContext _localctx = new Forall_statementContext(_ctx, getState());
		enterRule(_localctx, 272, RULE_forall_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2735);
			match(FORALL);
			setState(2736);
			index_name();
			setState(2737);
			match(IN);
			setState(2738);
			bounds_clause();
			setState(2739);
			sql_statement();
			setState(2742);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SAVE) {
				{
				setState(2740);
				match(SAVE);
				setState(2741);
				match(EXCEPTIONS);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Bounds_clauseContext extends ParserRuleContext {
		public Lower_boundContext lower_bound() {
			return getRuleContext(Lower_boundContext.class,0);
		}
		public Upper_boundContext upper_bound() {
			return getRuleContext(Upper_boundContext.class,0);
		}
		public TerminalNode INDICES() { return getToken(OracleSQLStatementParser.INDICES, 0); }
		public TerminalNode OF() { return getToken(OracleSQLStatementParser.OF, 0); }
		public Collection_nameContext collection_name() {
			return getRuleContext(Collection_nameContext.class,0);
		}
		public Between_boundContext between_bound() {
			return getRuleContext(Between_boundContext.class,0);
		}
		public TerminalNode VALUES() { return getToken(OracleSQLStatementParser.VALUES, 0); }
		public Index_nameContext index_name() {
			return getRuleContext(Index_nameContext.class,0);
		}
		public Bounds_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bounds_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterBounds_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitBounds_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitBounds_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Bounds_clauseContext bounds_clause() throws RecognitionException {
		Bounds_clauseContext _localctx = new Bounds_clauseContext(_ctx, getState());
		enterRule(_localctx, 274, RULE_bounds_clause);
		int _la;
		try {
			setState(2757);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,277,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2744);
				lower_bound();
				setState(2745);
				match(DOUBLE_PERIOD);
				setState(2746);
				upper_bound();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2748);
				match(INDICES);
				setState(2749);
				match(OF);
				setState(2750);
				collection_name();
				setState(2752);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BETWEEN) {
					{
					setState(2751);
					between_bound();
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2754);
				match(VALUES);
				setState(2755);
				match(OF);
				setState(2756);
				index_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Between_boundContext extends ParserRuleContext {
		public TerminalNode BETWEEN() { return getToken(OracleSQLStatementParser.BETWEEN, 0); }
		public Lower_boundContext lower_bound() {
			return getRuleContext(Lower_boundContext.class,0);
		}
		public TerminalNode AND() { return getToken(OracleSQLStatementParser.AND, 0); }
		public Upper_boundContext upper_bound() {
			return getRuleContext(Upper_boundContext.class,0);
		}
		public Between_boundContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_between_bound; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterBetween_bound(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitBetween_bound(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitBetween_bound(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Between_boundContext between_bound() throws RecognitionException {
		Between_boundContext _localctx = new Between_boundContext(_ctx, getState());
		enterRule(_localctx, 276, RULE_between_bound);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2759);
			match(BETWEEN);
			setState(2760);
			lower_bound();
			setState(2761);
			match(AND);
			setState(2762);
			upper_bound();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Lower_boundContext extends ParserRuleContext {
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public Lower_boundContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lower_bound; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterLower_bound(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitLower_bound(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitLower_bound(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Lower_boundContext lower_bound() throws RecognitionException {
		Lower_boundContext _localctx = new Lower_boundContext(_ctx, getState());
		enterRule(_localctx, 278, RULE_lower_bound);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2764);
			concatenation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Upper_boundContext extends ParserRuleContext {
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public Upper_boundContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_upper_bound; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterUpper_bound(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitUpper_bound(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitUpper_bound(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Upper_boundContext upper_bound() throws RecognitionException {
		Upper_boundContext _localctx = new Upper_boundContext(_ctx, getState());
		enterRule(_localctx, 280, RULE_upper_bound);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2766);
			concatenation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Null_statementContext extends ParserRuleContext {
		public TerminalNode NULL() { return getToken(OracleSQLStatementParser.NULL, 0); }
		public Null_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_null_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterNull_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitNull_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitNull_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Null_statementContext null_statement() throws RecognitionException {
		Null_statementContext _localctx = new Null_statementContext(_ctx, getState());
		enterRule(_localctx, 282, RULE_null_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2768);
			match(NULL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Raise_statementContext extends ParserRuleContext {
		public TerminalNode RAISE() { return getToken(OracleSQLStatementParser.RAISE, 0); }
		public Exception_nameContext exception_name() {
			return getRuleContext(Exception_nameContext.class,0);
		}
		public Raise_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_raise_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterRaise_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitRaise_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitRaise_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Raise_statementContext raise_statement() throws RecognitionException {
		Raise_statementContext _localctx = new Raise_statementContext(_ctx, getState());
		enterRule(_localctx, 284, RULE_raise_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2770);
			match(RAISE);
			setState(2772);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABS) | (1L << ACOS) | (1L << ADD) | (1L << ADD_MONTHS) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASCII) | (1L << ASCIISTR) | (1L << ASIN) | (1L << ASSOCIATE) | (1L << ATAN2) | (1L << ATAN) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BFILENAME) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BIN_TO_NUM) | (1L << BITAND) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CARDINALITY) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CEIL) | (1L << CHARACTER) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARTOROWID) | (1L << CHR) | (1L << C_LETTER))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOSE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONCAT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COS - 64)) | (1L << (COSH - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_DATE - 64)) | (1L << (CURRENT_TIMESTAMP - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (DIMENSION - 128)) | (1L << (DISABLE - 128)) | (1L << (DISASSOCIATE - 128)) | (1L << (DOCUMENT - 128)) | (1L << (DOUBLE - 128)) | (1L << (DSINTERVAL_UNCONSTRAINED - 128)) | (1L << (DUMP - 128)) | (1L << (EACH - 128)) | (1L << (ELEMENT - 128)) | (1L << (EMPTY_BLOB - 128)) | (1L << (EMPTY_CLOB - 128)) | (1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERR - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXP - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FLOOR - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FROM_TZ - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUP_ID - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HEXTORAW - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (IGNORE - 193)) | (1L << (IMMEDIATE - 193)) | (1L << (INCLUDE - 193)) | (1L << (INCLUDING - 193)) | (1L << (INCREMENT - 193)) | (1L << (INDENT - 193)) | (1L << (INDEXED - 193)) | (1L << (INDICATOR - 193)) | (1L << (INDICES - 193)) | (1L << (INFINITE - 193)) | (1L << (INITCAP - 193)) | (1L << (INLINE - 193)) | (1L << (INNER - 193)) | (1L << (INOUT - 193)) | (1L << (INSTANTIABLE - 193)) | (1L << (INSTEAD - 193)) | (1L << (INSTR2 - 193)) | (1L << (INSTR4 - 193)) | (1L << (INSTRB - 193)) | (1L << (INSTRC - 193)) | (1L << (INSTR - 193)) | (1L << (INTERFACE - 193)) | (1L << (INTEGER - 193)) | (1L << (INTERVAL - 193)) | (1L << (INT - 193)) | (1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (KEY - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST_DAY - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LENGTH2 - 193)) | (1L << (LENGTH4 - 193)) | (1L << (LENGTHB - 193)) | (1L << (LENGTHC - 193)) | (1L << (LENGTH - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LN - 193)) | (1L << (LNNVL - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCALTIMESTAMP - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (LOGON - 257)) | (1L << (LONG - 257)) | (1L << (LOOP - 257)) | (1L << (LOWER - 257)) | (1L << (LPAD - 257)) | (1L << (LTRIM - 257)) | (1L << (MAIN - 257)) | (1L << (MAP - 257)) | (1L << (MATCHED - 257)) | (1L << (MAXVALUE - 257)) | (1L << (MEASURES - 257)) | (1L << (MEMBER - 257)) | (1L << (MERGE - 257)) | (1L << (MINUTE - 257)) | (1L << (MINVALUE - 257)) | (1L << (MLSLABEL - 257)) | (1L << (MODEL - 257)) | (1L << (MODIFY - 257)) | (1L << (MOD - 257)) | (1L << (MONTH - 257)) | (1L << (MONTHS_BETWEEN - 257)) | (1L << (MULTISET - 257)) | (1L << (NAME - 257)) | (1L << (NAN - 257)) | (1L << (NANVL - 257)) | (1L << (NATURAL - 257)) | (1L << (NATURALN - 257)) | (1L << (NAV - 257)) | (1L << (NCHAR_CS - 257)) | (1L << (NCHAR - 257)) | (1L << (NCHR - 257)) | (1L << (NCLOB - 257)) | (1L << (NESTED - 257)) | (1L << (NEW - 257)) | (1L << (NEW_TIME - 257)) | (1L << (NEXT_DAY - 257)) | (1L << (NOAUDIT - 257)) | (1L << (NOCOPY - 257)) | (1L << (NOCYCLE - 257)) | (1L << (NOENTITYESCAPING - 257)) | (1L << (NONE - 257)) | (1L << (NO - 257)) | (1L << (NOSCHEMACHECK - 257)) | (1L << (NULLIF - 257)) | (1L << (NULLS - 257)) | (1L << (NUMBER - 257)) | (1L << (NUMERIC - 257)) | (1L << (NUMTODSINTERVAL - 257)) | (1L << (NUMTOYMINTERVAL - 257)) | (1L << (NVARCHAR2 - 257)) | (1L << (NVL2 - 257)) | (1L << (OBJECT - 257)) | (1L << (OFF - 257)))) != 0) || ((((_la - 321)) & ~0x3f) == 0 && ((1L << (_la - 321)) & ((1L << (OID - 321)) | (1L << (OLD - 321)) | (1L << (ONLY - 321)) | (1L << (OPAQUE - 321)) | (1L << (OPEN - 321)) | (1L << (ORADATA - 321)) | (1L << (ORDINALITY - 321)) | (1L << (OSERROR - 321)) | (1L << (OUTER - 321)) | (1L << (OUT - 321)) | (1L << (OVER - 321)) | (1L << (OVERRIDING - 321)) | (1L << (PACKAGE - 321)) | (1L << (PARALLEL_ENABLE - 321)) | (1L << (PARAMETERS - 321)) | (1L << (PARENT - 321)) | (1L << (PARTITION - 321)) | (1L << (PASSING - 321)) | (1L << (PATH - 321)) | (1L << (PIPELINED - 321)) | (1L << (PLAN - 321)) | (1L << (PLS_INTEGER - 321)) | (1L << (POSITIVEN - 321)) | (1L << (POSITIVE - 321)) | (1L << (POWER - 321)) | (1L << (PRAGMA - 321)) | (1L << (PRECEDING - 321)) | (1L << (PRECISION - 321)) | (1L << (PRESENT - 321)) | (1L << (PRIOR - 321)) | (1L << (PROCEDURE - 321)) | (1L << (RAISE - 321)) | (1L << (RANGE - 321)) | (1L << (RAW - 321)) | (1L << (RAWTOHEX - 321)) | (1L << (READ - 321)) | (1L << (REAL - 321)) | (1L << (RECORD - 321)) | (1L << (REFERENCE - 321)) | (1L << (REFERENCING - 321)) | (1L << (REF - 321)) | (1L << (REGEXP_COUNT - 321)) | (1L << (REGEXP_INSTR - 321)) | (1L << (REGEXP_REPLACE - 321)) | (1L << (REGEXP_SUBSTR - 321)) | (1L << (REJECT - 321)) | (1L << (RELIES_ON - 321)) | (1L << (REMAINDER - 321)))) != 0) || ((((_la - 385)) & ~0x3f) == 0 && ((1L << (_la - 385)) & ((1L << (RENAME - 385)) | (1L << (REPLACE - 385)) | (1L << (RESPECT - 385)) | (1L << (RESTRICT_REFERENCES - 385)) | (1L << (RESULT_CACHE - 385)) | (1L << (RESULT - 385)) | (1L << (RETURNING - 385)) | (1L << (RETURN - 385)) | (1L << (REUSE - 385)) | (1L << (REVERSE - 385)) | (1L << (RIGHT - 385)) | (1L << (ROLLBACK - 385)) | (1L << (ROLLUP - 385)) | (1L << (ROWID - 385)) | (1L << (ROWNUM - 385)) | (1L << (ROW - 385)) | (1L << (ROWS - 385)) | (1L << (RPAD - 385)) | (1L << (RTRIM - 385)) | (1L << (RULES - 385)) | (1L << (SAMPLE - 385)) | (1L << (SAVEPOINT - 385)) | (1L << (SAVE - 385)) | (1L << (SCHEMACHECK - 385)) | (1L << (SCHEMA - 385)) | (1L << (SCN - 385)) | (1L << (SECOND - 385)) | (1L << (SEED - 385)) | (1L << (SEGMENT - 385)) | (1L << (SELF - 385)) | (1L << (SEQUENTIAL - 385)) | (1L << (SERIALIZABLE - 385)) | (1L << (SERIALLY_REUSABLE - 385)) | (1L << (SERVERERROR - 385)) | (1L << (SESSIONTIMEZONE - 385)) | (1L << (SET - 385)) | (1L << (SETS - 385)) | (1L << (SETTINGS - 385)) | (1L << (SHOW - 385)) | (1L << (SHUTDOWN - 385)) | (1L << (SIBLINGS - 385)) | (1L << (SIGN - 385)) | (1L << (SIGNTYPE - 385)) | (1L << (SIMPLE_INTEGER - 385)) | (1L << (SINGLE - 385)) | (1L << (SINH - 385)) | (1L << (SIN - 385)) | (1L << (SKIP_ - 385)) | (1L << (SMALLINT - 385)) | (1L << (SNAPSHOT - 385)) | (1L << (SOME - 385)) | (1L << (SOUNDEX - 385)) | (1L << (SPECIFICATION - 385)) | (1L << (SQLDATA - 385)) | (1L << (SQLERROR - 385)) | (1L << (SQRT - 385)) | (1L << (STANDALONE - 385)))) != 0) || ((((_la - 449)) & ~0x3f) == 0 && ((1L << (_la - 449)) & ((1L << (STARTUP - 449)) | (1L << (STATEMENT_ID - 449)) | (1L << (STATEMENT - 449)) | (1L << (STATIC - 449)) | (1L << (STATISTICS - 449)) | (1L << (STRING - 449)) | (1L << (SUBMULTISET - 449)) | (1L << (SUBPARTITION - 449)) | (1L << (SUBSTITUTABLE - 449)) | (1L << (SUBTYPE - 449)) | (1L << (SUCCESS - 449)) | (1L << (SUSPEND - 449)) | (1L << (SYS_CONTEXT - 449)) | (1L << (SYSDATE - 449)) | (1L << (SYSTIMESTAMP - 449)) | (1L << (TANH - 449)) | (1L << (TAN - 449)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 449)) | (1L << (TIMESTAMP - 449)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 449)) | (1L << (TIMESTAMP_UNCONSTRAINED - 449)) | (1L << (TIME - 449)) | (1L << (TIMEZONE_ABBR - 449)) | (1L << (TIMEZONE_HOUR - 449)) | (1L << (TIMEZONE_MINUTE - 449)) | (1L << (TIMEZONE_REGION - 449)) | (1L << (TO_CLOB - 449)) | (1L << (TO_DSINTERVAL - 449)) | (1L << (TO_LOB - 449)) | (1L << (TO_MULTI_BYTE - 449)) | (1L << (TO_NCLOB - 449)) | (1L << (TO_NUMBER - 449)) | (1L << (TO_SINGLE_BYTE - 449)) | (1L << (TO_TIMESTAMP - 449)) | (1L << (TO_TIMESTAMP_TZ - 449)) | (1L << (TO_YMINTERVAL - 449)) | (1L << (TRAILING - 449)) | (1L << (TRANSACTION - 449)) | (1L << (TRANSLATE - 449)) | (1L << (TREAT - 449)) | (1L << (TRIGGER - 449)) | (1L << (TRUNCATE - 449)) | (1L << (TRUNC - 449)) | (1L << (TYPE - 449)) | (1L << (TZ_OFFSET - 449)) | (1L << (UID - 449)) | (1L << (UNBOUNDED - 449)) | (1L << (UNDER - 449)) | (1L << (UNLIMITED - 449)) | (1L << (UNTIL - 449)) | (1L << (UPDATED - 449)))) != 0) || ((((_la - 513)) & ~0x3f) == 0 && ((1L << (_la - 513)) & ((1L << (UPPER - 513)) | (1L << (UPSERT - 513)) | (1L << (UROWID - 513)) | (1L << (USERENV - 513)) | (1L << (USER - 513)) | (1L << (USE - 513)) | (1L << (VALIDATE - 513)) | (1L << (VALUE - 513)) | (1L << (VARCHAR2 - 513)) | (1L << (VARCHAR - 513)) | (1L << (VARIABLE - 513)) | (1L << (VARRAY - 513)) | (1L << (VARYING - 513)) | (1L << (VERSIONS - 513)) | (1L << (VERSION - 513)) | (1L << (VSIZE - 513)) | (1L << (WAIT - 513)) | (1L << (WARNING - 513)) | (1L << (WELLFORMED - 513)) | (1L << (WHENEVER - 513)) | (1L << (WHILE - 513)) | (1L << (WITHIN - 513)) | (1L << (WORK - 513)) | (1L << (WRITE - 513)) | (1L << (XMLAGG - 513)) | (1L << (XMLATTRIBUTES - 513)) | (1L << (XMLCAST - 513)) | (1L << (XMLCOLATTVAL - 513)) | (1L << (XMLELEMENT - 513)) | (1L << (XMLEXISTS - 513)) | (1L << (XMLFOREST - 513)) | (1L << (XMLNAMESPACES - 513)) | (1L << (XMLPARSE - 513)) | (1L << (XMLPI - 513)) | (1L << (XMLQUERY - 513)) | (1L << (XMLROOT - 513)) | (1L << (XMLSERIALIZE - 513)) | (1L << (XMLTABLE - 513)) | (1L << (XML - 513)) | (1L << (YEAR - 513)) | (1L << (YES - 513)) | (1L << (YMINTERVAL_UNCONSTRAINED - 513)) | (1L << (ZONE - 513)) | (1L << (PREDICTION - 513)) | (1L << (PREDICTION_BOUNDS - 513)) | (1L << (PREDICTION_COST - 513)) | (1L << (PREDICTION_DETAILS - 513)) | (1L << (PREDICTION_PROBABILITY - 513)) | (1L << (PREDICTION_SET - 513)) | (1L << (CUME_DIST - 513)) | (1L << (DENSE_RANK - 513)) | (1L << (LISTAGG - 513)) | (1L << (PERCENT_RANK - 513)) | (1L << (PERCENTILE_CONT - 513)) | (1L << (PERCENTILE_DISC - 513)) | (1L << (RANK - 513)))) != 0) || ((((_la - 577)) & ~0x3f) == 0 && ((1L << (_la - 577)) & ((1L << (AVG - 577)) | (1L << (CORR - 577)) | (1L << (COVAR_ - 577)) | (1L << (DECODE - 577)) | (1L << (LAG - 577)) | (1L << (LEAD - 577)) | (1L << (MAX - 577)) | (1L << (MEDIAN - 577)) | (1L << (MIN - 577)) | (1L << (NTILE - 577)) | (1L << (NVL - 577)) | (1L << (RATIO_TO_REPORT - 577)) | (1L << (REGR_ - 577)) | (1L << (ROUND - 577)) | (1L << (ROW_NUMBER - 577)) | (1L << (SUBSTR - 577)) | (1L << (TO_CHAR - 577)) | (1L << (TRIM - 577)) | (1L << (SUM - 577)) | (1L << (STDDEV - 577)) | (1L << (VAR_ - 577)) | (1L << (VARIANCE - 577)) | (1L << (LEAST - 577)) | (1L << (GREATEST - 577)) | (1L << (TO_DATE - 577)) | (1L << (DELIMITED_ID - 577)) | (1L << (ASTERISK - 577)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
				{
				setState(2771);
				exception_name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Return_statementContext extends ParserRuleContext {
		public TerminalNode RETURN() { return getToken(OracleSQLStatementParser.RETURN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Return_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_return_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterReturn_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitReturn_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitReturn_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Return_statementContext return_statement() throws RecognitionException {
		Return_statementContext _localctx = new Return_statementContext(_ctx, getState());
		enterRule(_localctx, 286, RULE_return_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2774);
			match(RETURN);
			setState(2776);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABS) | (1L << ACOS) | (1L << ADD) | (1L << ADD_MONTHS) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASCII) | (1L << ASCIISTR) | (1L << ASIN) | (1L << ASSOCIATE) | (1L << ATAN2) | (1L << ATAN) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BFILENAME) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BIN_TO_NUM) | (1L << BITAND) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CARDINALITY) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CEIL) | (1L << CHARACTER) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARTOROWID) | (1L << CHR) | (1L << C_LETTER))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOSE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONCAT - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COS - 64)) | (1L << (COSH - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_DATE - 64)) | (1L << (CURRENT_TIMESTAMP - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (DIMENSION - 128)) | (1L << (DISABLE - 128)) | (1L << (DISASSOCIATE - 128)) | (1L << (DISTINCT - 128)) | (1L << (DOCUMENT - 128)) | (1L << (DOUBLE - 128)) | (1L << (DSINTERVAL_UNCONSTRAINED - 128)) | (1L << (DUMP - 128)) | (1L << (EACH - 128)) | (1L << (ELEMENT - 128)) | (1L << (EMPTY_BLOB - 128)) | (1L << (EMPTY_CLOB - 128)) | (1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERR - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXISTS - 128)) | (1L << (EXIT - 128)) | (1L << (EXP - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FALSE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FLOOR - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FROM_TZ - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUP_ID - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HEXTORAW - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (IGNORE - 193)) | (1L << (IMMEDIATE - 193)) | (1L << (INCLUDE - 193)) | (1L << (INCLUDING - 193)) | (1L << (INCREMENT - 193)) | (1L << (INDENT - 193)) | (1L << (INDEXED - 193)) | (1L << (INDICATOR - 193)) | (1L << (INDICES - 193)) | (1L << (INFINITE - 193)) | (1L << (INITCAP - 193)) | (1L << (INLINE - 193)) | (1L << (INNER - 193)) | (1L << (INOUT - 193)) | (1L << (INSTANTIABLE - 193)) | (1L << (INSTEAD - 193)) | (1L << (INSTR2 - 193)) | (1L << (INSTR4 - 193)) | (1L << (INSTRB - 193)) | (1L << (INSTRC - 193)) | (1L << (INSTR - 193)) | (1L << (INTERFACE - 193)) | (1L << (INTEGER - 193)) | (1L << (INTERVAL - 193)) | (1L << (INT - 193)) | (1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (KEY - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST_DAY - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LENGTH2 - 193)) | (1L << (LENGTH4 - 193)) | (1L << (LENGTHB - 193)) | (1L << (LENGTHC - 193)) | (1L << (LENGTH - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LN - 193)) | (1L << (LNNVL - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCALTIMESTAMP - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (LOGON - 257)) | (1L << (LONG - 257)) | (1L << (LOOP - 257)) | (1L << (LOWER - 257)) | (1L << (LPAD - 257)) | (1L << (LTRIM - 257)) | (1L << (MAIN - 257)) | (1L << (MAP - 257)) | (1L << (MATCHED - 257)) | (1L << (MAXVALUE - 257)) | (1L << (MEASURES - 257)) | (1L << (MEMBER - 257)) | (1L << (MERGE - 257)) | (1L << (MINUTE - 257)) | (1L << (MINVALUE - 257)) | (1L << (MLSLABEL - 257)) | (1L << (MODEL - 257)) | (1L << (MODIFY - 257)) | (1L << (MOD - 257)) | (1L << (MONTH - 257)) | (1L << (MONTHS_BETWEEN - 257)) | (1L << (MULTISET - 257)) | (1L << (NAME - 257)) | (1L << (NAN - 257)) | (1L << (NANVL - 257)) | (1L << (NATURAL - 257)) | (1L << (NATURALN - 257)) | (1L << (NAV - 257)) | (1L << (NCHAR_CS - 257)) | (1L << (NCHAR - 257)) | (1L << (NCHR - 257)) | (1L << (NCLOB - 257)) | (1L << (NESTED - 257)) | (1L << (NEW - 257)) | (1L << (NEW_TIME - 257)) | (1L << (NEXT_DAY - 257)) | (1L << (NOAUDIT - 257)) | (1L << (NOCOPY - 257)) | (1L << (NOCYCLE - 257)) | (1L << (NOENTITYESCAPING - 257)) | (1L << (NONE - 257)) | (1L << (NO - 257)) | (1L << (NOSCHEMACHECK - 257)) | (1L << (NOT - 257)) | (1L << (NULLIF - 257)) | (1L << (NULL - 257)) | (1L << (NULLS - 257)) | (1L << (NUMBER - 257)) | (1L << (NUMERIC - 257)) | (1L << (NUMTODSINTERVAL - 257)) | (1L << (NUMTOYMINTERVAL - 257)) | (1L << (NVARCHAR2 - 257)) | (1L << (NVL2 - 257)) | (1L << (OBJECT - 257)) | (1L << (OFF - 257)))) != 0) || ((((_la - 321)) & ~0x3f) == 0 && ((1L << (_la - 321)) & ((1L << (OID - 321)) | (1L << (OLD - 321)) | (1L << (ONLY - 321)) | (1L << (OPAQUE - 321)) | (1L << (OPEN - 321)) | (1L << (ORADATA - 321)) | (1L << (ORDINALITY - 321)) | (1L << (OSERROR - 321)) | (1L << (OUTER - 321)) | (1L << (OUT - 321)) | (1L << (OVER - 321)) | (1L << (OVERRIDING - 321)) | (1L << (PACKAGE - 321)) | (1L << (PARALLEL_ENABLE - 321)) | (1L << (PARAMETERS - 321)) | (1L << (PARENT - 321)) | (1L << (PARTITION - 321)) | (1L << (PASSING - 321)) | (1L << (PATH - 321)) | (1L << (PIPELINED - 321)) | (1L << (PLAN - 321)) | (1L << (PLS_INTEGER - 321)) | (1L << (POSITIVEN - 321)) | (1L << (POSITIVE - 321)) | (1L << (POWER - 321)) | (1L << (PRAGMA - 321)) | (1L << (PRECEDING - 321)) | (1L << (PRECISION - 321)) | (1L << (PRESENT - 321)) | (1L << (PRIOR - 321)) | (1L << (PROCEDURE - 321)) | (1L << (RAISE - 321)) | (1L << (RANGE - 321)) | (1L << (RAW - 321)) | (1L << (RAWTOHEX - 321)) | (1L << (READ - 321)) | (1L << (REAL - 321)) | (1L << (RECORD - 321)) | (1L << (REFERENCE - 321)) | (1L << (REFERENCING - 321)) | (1L << (REF - 321)) | (1L << (REGEXP_COUNT - 321)) | (1L << (REGEXP_INSTR - 321)) | (1L << (REGEXP_REPLACE - 321)) | (1L << (REGEXP_SUBSTR - 321)) | (1L << (REJECT - 321)) | (1L << (RELIES_ON - 321)) | (1L << (REMAINDER - 321)))) != 0) || ((((_la - 385)) & ~0x3f) == 0 && ((1L << (_la - 385)) & ((1L << (RENAME - 385)) | (1L << (REPLACE - 385)) | (1L << (RESPECT - 385)) | (1L << (RESTRICT_REFERENCES - 385)) | (1L << (RESULT_CACHE - 385)) | (1L << (RESULT - 385)) | (1L << (RETURNING - 385)) | (1L << (RETURN - 385)) | (1L << (REUSE - 385)) | (1L << (REVERSE - 385)) | (1L << (RIGHT - 385)) | (1L << (ROLLBACK - 385)) | (1L << (ROLLUP - 385)) | (1L << (ROWID - 385)) | (1L << (ROWNUM - 385)) | (1L << (ROW - 385)) | (1L << (ROWS - 385)) | (1L << (RPAD - 385)) | (1L << (RTRIM - 385)) | (1L << (RULES - 385)) | (1L << (SAMPLE - 385)) | (1L << (SAVEPOINT - 385)) | (1L << (SAVE - 385)) | (1L << (SCHEMACHECK - 385)) | (1L << (SCHEMA - 385)) | (1L << (SCN - 385)) | (1L << (SECOND - 385)) | (1L << (SEED - 385)) | (1L << (SEGMENT - 385)) | (1L << (SELF - 385)) | (1L << (SEQUENTIAL - 385)) | (1L << (SERIALIZABLE - 385)) | (1L << (SERIALLY_REUSABLE - 385)) | (1L << (SERVERERROR - 385)) | (1L << (SESSIONTIMEZONE - 385)) | (1L << (SET - 385)) | (1L << (SETS - 385)) | (1L << (SETTINGS - 385)) | (1L << (SHOW - 385)) | (1L << (SHUTDOWN - 385)) | (1L << (SIBLINGS - 385)) | (1L << (SIGN - 385)) | (1L << (SIGNTYPE - 385)) | (1L << (SIMPLE_INTEGER - 385)) | (1L << (SINGLE - 385)) | (1L << (SINH - 385)) | (1L << (SIN - 385)) | (1L << (SKIP_ - 385)) | (1L << (SMALLINT - 385)) | (1L << (SNAPSHOT - 385)) | (1L << (SOME - 385)) | (1L << (SOUNDEX - 385)) | (1L << (SPECIFICATION - 385)) | (1L << (SQLDATA - 385)) | (1L << (SQLERROR - 385)) | (1L << (SQRT - 385)) | (1L << (STANDALONE - 385)))) != 0) || ((((_la - 449)) & ~0x3f) == 0 && ((1L << (_la - 449)) & ((1L << (STARTUP - 449)) | (1L << (STATEMENT_ID - 449)) | (1L << (STATEMENT - 449)) | (1L << (STATIC - 449)) | (1L << (STATISTICS - 449)) | (1L << (STRING - 449)) | (1L << (SUBMULTISET - 449)) | (1L << (SUBPARTITION - 449)) | (1L << (SUBSTITUTABLE - 449)) | (1L << (SUBTYPE - 449)) | (1L << (SUCCESS - 449)) | (1L << (SUSPEND - 449)) | (1L << (SYS_CONTEXT - 449)) | (1L << (SYSDATE - 449)) | (1L << (SYSTIMESTAMP - 449)) | (1L << (TANH - 449)) | (1L << (TAN - 449)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 449)) | (1L << (TIMESTAMP - 449)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 449)) | (1L << (TIMESTAMP_UNCONSTRAINED - 449)) | (1L << (TIME - 449)) | (1L << (TIMEZONE_ABBR - 449)) | (1L << (TIMEZONE_HOUR - 449)) | (1L << (TIMEZONE_MINUTE - 449)) | (1L << (TIMEZONE_REGION - 449)) | (1L << (TO_CLOB - 449)) | (1L << (TO_DSINTERVAL - 449)) | (1L << (TO_LOB - 449)) | (1L << (TO_MULTI_BYTE - 449)) | (1L << (TO_NCLOB - 449)) | (1L << (TO_NUMBER - 449)) | (1L << (TO_SINGLE_BYTE - 449)) | (1L << (TO_TIMESTAMP - 449)) | (1L << (TO_TIMESTAMP_TZ - 449)) | (1L << (TO_YMINTERVAL - 449)) | (1L << (TRAILING - 449)) | (1L << (TRANSACTION - 449)) | (1L << (TRANSLATE - 449)) | (1L << (TREAT - 449)) | (1L << (TRIGGER - 449)) | (1L << (TRUE - 449)) | (1L << (TRUNCATE - 449)) | (1L << (TRUNC - 449)) | (1L << (TYPE - 449)) | (1L << (TZ_OFFSET - 449)) | (1L << (UID - 449)) | (1L << (UNBOUNDED - 449)) | (1L << (UNDER - 449)) | (1L << (UNLIMITED - 449)) | (1L << (UNTIL - 449)) | (1L << (UPDATED - 449)))) != 0) || ((((_la - 513)) & ~0x3f) == 0 && ((1L << (_la - 513)) & ((1L << (UPPER - 513)) | (1L << (UPSERT - 513)) | (1L << (UROWID - 513)) | (1L << (USERENV - 513)) | (1L << (USER - 513)) | (1L << (USE - 513)) | (1L << (VALIDATE - 513)) | (1L << (VALUE - 513)) | (1L << (VARCHAR2 - 513)) | (1L << (VARCHAR - 513)) | (1L << (VARIABLE - 513)) | (1L << (VARRAY - 513)) | (1L << (VARYING - 513)) | (1L << (VERSIONS - 513)) | (1L << (VERSION - 513)) | (1L << (VSIZE - 513)) | (1L << (WAIT - 513)) | (1L << (WARNING - 513)) | (1L << (WELLFORMED - 513)) | (1L << (WHENEVER - 513)) | (1L << (WHILE - 513)) | (1L << (WITHIN - 513)) | (1L << (WORK - 513)) | (1L << (WRITE - 513)) | (1L << (XMLAGG - 513)) | (1L << (XMLATTRIBUTES - 513)) | (1L << (XMLCAST - 513)) | (1L << (XMLCOLATTVAL - 513)) | (1L << (XMLELEMENT - 513)) | (1L << (XMLEXISTS - 513)) | (1L << (XMLFOREST - 513)) | (1L << (XMLNAMESPACES - 513)) | (1L << (XMLPARSE - 513)) | (1L << (XMLPI - 513)) | (1L << (XMLQUERY - 513)) | (1L << (XMLROOT - 513)) | (1L << (XMLSERIALIZE - 513)) | (1L << (XMLTABLE - 513)) | (1L << (XML - 513)) | (1L << (YEAR - 513)) | (1L << (YES - 513)) | (1L << (YMINTERVAL_UNCONSTRAINED - 513)) | (1L << (ZONE - 513)) | (1L << (PREDICTION - 513)) | (1L << (PREDICTION_BOUNDS - 513)) | (1L << (PREDICTION_COST - 513)) | (1L << (PREDICTION_DETAILS - 513)) | (1L << (PREDICTION_PROBABILITY - 513)) | (1L << (PREDICTION_SET - 513)) | (1L << (CUME_DIST - 513)) | (1L << (DENSE_RANK - 513)) | (1L << (LISTAGG - 513)) | (1L << (PERCENT_RANK - 513)) | (1L << (PERCENTILE_CONT - 513)) | (1L << (PERCENTILE_DISC - 513)) | (1L << (RANK - 513)))) != 0) || ((((_la - 577)) & ~0x3f) == 0 && ((1L << (_la - 577)) & ((1L << (AVG - 577)) | (1L << (CORR - 577)) | (1L << (COVAR_ - 577)) | (1L << (DECODE - 577)) | (1L << (LAG - 577)) | (1L << (LEAD - 577)) | (1L << (MAX - 577)) | (1L << (MEDIAN - 577)) | (1L << (MIN - 577)) | (1L << (NTILE - 577)) | (1L << (NVL - 577)) | (1L << (RATIO_TO_REPORT - 577)) | (1L << (REGR_ - 577)) | (1L << (ROUND - 577)) | (1L << (ROW_NUMBER - 577)) | (1L << (SUBSTR - 577)) | (1L << (TO_CHAR - 577)) | (1L << (TRIM - 577)) | (1L << (SUM - 577)) | (1L << (STDDEV - 577)) | (1L << (VAR_ - 577)) | (1L << (VARIANCE - 577)) | (1L << (LEAST - 577)) | (1L << (GREATEST - 577)) | (1L << (TO_DATE - 577)) | (1L << (NATIONAL_CHAR_STRING_LIT - 577)) | (1L << (UNSIGNED_INTEGER - 577)) | (1L << (APPROXIMATE_NUM_LIT - 577)) | (1L << (CHAR_STRING - 577)) | (1L << (DELIMITED_ID - 577)) | (1L << (LEFT_PAREN - 577)) | (1L << (ASTERISK - 577)) | (1L << (PLUS_SIGN - 577)) | (1L << (MINUS_SIGN - 577)) | (1L << (BINDVAR - 577)) | (1L << (COLON - 577)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
				{
				setState(2775);
				expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_callContext extends ParserRuleContext {
		public General_elementContext general_element() {
			return getRuleContext(General_elementContext.class,0);
		}
		public TerminalNode CALL() { return getToken(OracleSQLStatementParser.CALL, 0); }
		public Function_callContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_call; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterFunction_call(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitFunction_call(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitFunction_call(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Function_callContext function_call() throws RecognitionException {
		Function_callContext _localctx = new Function_callContext(_ctx, getState());
		enterRule(_localctx, 288, RULE_function_call);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2779);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,280,_ctx) ) {
			case 1:
				{
				setState(2778);
				match(CALL);
				}
				break;
			}
			setState(2781);
			general_element();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pipe_row_statementContext extends ParserRuleContext {
		public TerminalNode PIPE() { return getToken(OracleSQLStatementParser.PIPE, 0); }
		public TerminalNode ROW() { return getToken(OracleSQLStatementParser.ROW, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(OracleSQLStatementParser.LEFT_PAREN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(OracleSQLStatementParser.RIGHT_PAREN, 0); }
		public Pipe_row_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pipe_row_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterPipe_row_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitPipe_row_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitPipe_row_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Pipe_row_statementContext pipe_row_statement() throws RecognitionException {
		Pipe_row_statementContext _localctx = new Pipe_row_statementContext(_ctx, getState());
		enterRule(_localctx, 290, RULE_pipe_row_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2783);
			match(PIPE);
			setState(2784);
			match(ROW);
			setState(2785);
			match(LEFT_PAREN);
			setState(2786);
			expression();
			setState(2787);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BodyContext extends ParserRuleContext {
		public TerminalNode BEGIN() { return getToken(OracleSQLStatementParser.BEGIN, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public TerminalNode END() { return getToken(OracleSQLStatementParser.END, 0); }
		public TerminalNode EXCEPTION() { return getToken(OracleSQLStatementParser.EXCEPTION, 0); }
		public Label_nameContext label_name() {
			return getRuleContext(Label_nameContext.class,0);
		}
		public List<Exception_handlerContext> exception_handler() {
			return getRuleContexts(Exception_handlerContext.class);
		}
		public Exception_handlerContext exception_handler(int i) {
			return getRuleContext(Exception_handlerContext.class,i);
		}
		public BodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterBody(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitBody(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitBody(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BodyContext body() throws RecognitionException {
		BodyContext _localctx = new BodyContext(_ctx, getState());
		enterRule(_localctx, 292, RULE_body);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2789);
			match(BEGIN);
			setState(2790);
			seq_of_statements();
			setState(2797);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXCEPTION) {
				{
				setState(2791);
				match(EXCEPTION);
				setState(2793); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2792);
					exception_handler();
					}
					}
					setState(2795); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==WHEN );
				}
			}

			setState(2799);
			match(END);
			setState(2801);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,283,_ctx) ) {
			case 1:
				{
				setState(2800);
				label_name();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Exception_handlerContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(OracleSQLStatementParser.WHEN, 0); }
		public List<Exception_nameContext> exception_name() {
			return getRuleContexts(Exception_nameContext.class);
		}
		public Exception_nameContext exception_name(int i) {
			return getRuleContext(Exception_nameContext.class,i);
		}
		public TerminalNode THEN() { return getToken(OracleSQLStatementParser.THEN, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public List<TerminalNode> OR() { return getTokens(OracleSQLStatementParser.OR); }
		public TerminalNode OR(int i) {
			return getToken(OracleSQLStatementParser.OR, i);
		}
		public Exception_handlerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exception_handler; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterException_handler(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitException_handler(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitException_handler(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Exception_handlerContext exception_handler() throws RecognitionException {
		Exception_handlerContext _localctx = new Exception_handlerContext(_ctx, getState());
		enterRule(_localctx, 294, RULE_exception_handler);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2803);
			match(WHEN);
			setState(2804);
			exception_name();
			setState(2809);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==OR) {
				{
				{
				setState(2805);
				match(OR);
				setState(2806);
				exception_name();
				}
				}
				setState(2811);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2812);
			match(THEN);
			setState(2813);
			seq_of_statements();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Trigger_blockContext extends ParserRuleContext {
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		public TerminalNode DECLARE() { return getToken(OracleSQLStatementParser.DECLARE, 0); }
		public List<Declare_specContext> declare_spec() {
			return getRuleContexts(Declare_specContext.class);
		}
		public Declare_specContext declare_spec(int i) {
			return getRuleContext(Declare_specContext.class,i);
		}
		public Trigger_blockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trigger_block; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterTrigger_block(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitTrigger_block(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitTrigger_block(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Trigger_blockContext trigger_block() throws RecognitionException {
		Trigger_blockContext _localctx = new Trigger_blockContext(_ctx, getState());
		enterRule(_localctx, 296, RULE_trigger_block);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2823);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABS) | (1L << ACOS) | (1L << ADD) | (1L << ADD_MONTHS) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASCII) | (1L << ASCIISTR) | (1L << ASIN) | (1L << ASSOCIATE) | (1L << ATAN2) | (1L << ATAN) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BFILENAME) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BIN_TO_NUM) | (1L << BITAND) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CARDINALITY) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CEIL) | (1L << CHARACTER) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARTOROWID) | (1L << CHR) | (1L << C_LETTER))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOSE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONCAT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COS - 64)) | (1L << (COSH - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_DATE - 64)) | (1L << (CURRENT_TIMESTAMP - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECLARE - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (DIMENSION - 128)) | (1L << (DISABLE - 128)) | (1L << (DISASSOCIATE - 128)) | (1L << (DOCUMENT - 128)) | (1L << (DOUBLE - 128)) | (1L << (DSINTERVAL_UNCONSTRAINED - 128)) | (1L << (DUMP - 128)) | (1L << (EACH - 128)) | (1L << (ELEMENT - 128)) | (1L << (EMPTY_BLOB - 128)) | (1L << (EMPTY_CLOB - 128)) | (1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERR - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXP - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FLOOR - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FROM_TZ - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUP_ID - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HEXTORAW - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (IGNORE - 193)) | (1L << (IMMEDIATE - 193)) | (1L << (INCLUDE - 193)) | (1L << (INCLUDING - 193)) | (1L << (INCREMENT - 193)) | (1L << (INDENT - 193)) | (1L << (INDEXED - 193)) | (1L << (INDICATOR - 193)) | (1L << (INDICES - 193)) | (1L << (INFINITE - 193)) | (1L << (INITCAP - 193)) | (1L << (INLINE - 193)) | (1L << (INNER - 193)) | (1L << (INOUT - 193)) | (1L << (INSTANTIABLE - 193)) | (1L << (INSTEAD - 193)) | (1L << (INSTR2 - 193)) | (1L << (INSTR4 - 193)) | (1L << (INSTRB - 193)) | (1L << (INSTRC - 193)) | (1L << (INSTR - 193)) | (1L << (INTERFACE - 193)) | (1L << (INTEGER - 193)) | (1L << (INTERVAL - 193)) | (1L << (INT - 193)) | (1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (KEY - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST_DAY - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LENGTH2 - 193)) | (1L << (LENGTH4 - 193)) | (1L << (LENGTHB - 193)) | (1L << (LENGTHC - 193)) | (1L << (LENGTH - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LN - 193)) | (1L << (LNNVL - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCALTIMESTAMP - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (LOGON - 257)) | (1L << (LONG - 257)) | (1L << (LOOP - 257)) | (1L << (LOWER - 257)) | (1L << (LPAD - 257)) | (1L << (LTRIM - 257)) | (1L << (MAIN - 257)) | (1L << (MAP - 257)) | (1L << (MATCHED - 257)) | (1L << (MAXVALUE - 257)) | (1L << (MEASURES - 257)) | (1L << (MEMBER - 257)) | (1L << (MERGE - 257)) | (1L << (MINUTE - 257)) | (1L << (MINVALUE - 257)) | (1L << (MLSLABEL - 257)) | (1L << (MODEL - 257)) | (1L << (MODIFY - 257)) | (1L << (MOD - 257)) | (1L << (MONTH - 257)) | (1L << (MONTHS_BETWEEN - 257)) | (1L << (MULTISET - 257)) | (1L << (NAME - 257)) | (1L << (NAN - 257)) | (1L << (NANVL - 257)) | (1L << (NATURAL - 257)) | (1L << (NATURALN - 257)) | (1L << (NAV - 257)) | (1L << (NCHAR_CS - 257)) | (1L << (NCHAR - 257)) | (1L << (NCHR - 257)) | (1L << (NCLOB - 257)) | (1L << (NESTED - 257)) | (1L << (NEW - 257)) | (1L << (NEW_TIME - 257)) | (1L << (NEXT_DAY - 257)) | (1L << (NOAUDIT - 257)) | (1L << (NOCOPY - 257)) | (1L << (NOCYCLE - 257)) | (1L << (NOENTITYESCAPING - 257)) | (1L << (NONE - 257)) | (1L << (NO - 257)) | (1L << (NOSCHEMACHECK - 257)) | (1L << (NULLIF - 257)) | (1L << (NULLS - 257)) | (1L << (NUMBER - 257)) | (1L << (NUMERIC - 257)) | (1L << (NUMTODSINTERVAL - 257)) | (1L << (NUMTOYMINTERVAL - 257)) | (1L << (NVARCHAR2 - 257)) | (1L << (NVL2 - 257)) | (1L << (OBJECT - 257)) | (1L << (OFF - 257)))) != 0) || ((((_la - 321)) & ~0x3f) == 0 && ((1L << (_la - 321)) & ((1L << (OID - 321)) | (1L << (OLD - 321)) | (1L << (ONLY - 321)) | (1L << (OPAQUE - 321)) | (1L << (OPEN - 321)) | (1L << (ORADATA - 321)) | (1L << (ORDINALITY - 321)) | (1L << (OSERROR - 321)) | (1L << (OUTER - 321)) | (1L << (OUT - 321)) | (1L << (OVER - 321)) | (1L << (OVERRIDING - 321)) | (1L << (PACKAGE - 321)) | (1L << (PARALLEL_ENABLE - 321)) | (1L << (PARAMETERS - 321)) | (1L << (PARENT - 321)) | (1L << (PARTITION - 321)) | (1L << (PASSING - 321)) | (1L << (PATH - 321)) | (1L << (PIPELINED - 321)) | (1L << (PLAN - 321)) | (1L << (PLS_INTEGER - 321)) | (1L << (POSITIVEN - 321)) | (1L << (POSITIVE - 321)) | (1L << (POWER - 321)) | (1L << (PRAGMA - 321)) | (1L << (PRECEDING - 321)) | (1L << (PRECISION - 321)) | (1L << (PRESENT - 321)) | (1L << (PRIOR - 321)) | (1L << (PROCEDURE - 321)) | (1L << (RAISE - 321)) | (1L << (RANGE - 321)) | (1L << (RAW - 321)) | (1L << (RAWTOHEX - 321)) | (1L << (READ - 321)) | (1L << (REAL - 321)) | (1L << (RECORD - 321)) | (1L << (REFERENCE - 321)) | (1L << (REFERENCING - 321)) | (1L << (REF - 321)) | (1L << (REGEXP_COUNT - 321)) | (1L << (REGEXP_INSTR - 321)) | (1L << (REGEXP_REPLACE - 321)) | (1L << (REGEXP_SUBSTR - 321)) | (1L << (REJECT - 321)) | (1L << (RELIES_ON - 321)) | (1L << (REMAINDER - 321)))) != 0) || ((((_la - 385)) & ~0x3f) == 0 && ((1L << (_la - 385)) & ((1L << (RENAME - 385)) | (1L << (REPLACE - 385)) | (1L << (RESPECT - 385)) | (1L << (RESTRICT_REFERENCES - 385)) | (1L << (RESULT_CACHE - 385)) | (1L << (RESULT - 385)) | (1L << (RETURNING - 385)) | (1L << (RETURN - 385)) | (1L << (REUSE - 385)) | (1L << (REVERSE - 385)) | (1L << (RIGHT - 385)) | (1L << (ROLLBACK - 385)) | (1L << (ROLLUP - 385)) | (1L << (ROWID - 385)) | (1L << (ROWNUM - 385)) | (1L << (ROW - 385)) | (1L << (ROWS - 385)) | (1L << (RPAD - 385)) | (1L << (RTRIM - 385)) | (1L << (RULES - 385)) | (1L << (SAMPLE - 385)) | (1L << (SAVEPOINT - 385)) | (1L << (SAVE - 385)) | (1L << (SCHEMACHECK - 385)) | (1L << (SCHEMA - 385)) | (1L << (SCN - 385)) | (1L << (SECOND - 385)) | (1L << (SEED - 385)) | (1L << (SEGMENT - 385)) | (1L << (SELF - 385)) | (1L << (SEQUENTIAL - 385)) | (1L << (SERIALIZABLE - 385)) | (1L << (SERIALLY_REUSABLE - 385)) | (1L << (SERVERERROR - 385)) | (1L << (SESSIONTIMEZONE - 385)) | (1L << (SET - 385)) | (1L << (SETS - 385)) | (1L << (SETTINGS - 385)) | (1L << (SHOW - 385)) | (1L << (SHUTDOWN - 385)) | (1L << (SIBLINGS - 385)) | (1L << (SIGN - 385)) | (1L << (SIGNTYPE - 385)) | (1L << (SIMPLE_INTEGER - 385)) | (1L << (SINGLE - 385)) | (1L << (SINH - 385)) | (1L << (SIN - 385)) | (1L << (SKIP_ - 385)) | (1L << (SMALLINT - 385)) | (1L << (SNAPSHOT - 385)) | (1L << (SOME - 385)) | (1L << (SOUNDEX - 385)) | (1L << (SPECIFICATION - 385)) | (1L << (SQLDATA - 385)) | (1L << (SQLERROR - 385)) | (1L << (SQRT - 385)) | (1L << (STANDALONE - 385)))) != 0) || ((((_la - 449)) & ~0x3f) == 0 && ((1L << (_la - 449)) & ((1L << (STARTUP - 449)) | (1L << (STATEMENT_ID - 449)) | (1L << (STATEMENT - 449)) | (1L << (STATIC - 449)) | (1L << (STATISTICS - 449)) | (1L << (STRING - 449)) | (1L << (SUBMULTISET - 449)) | (1L << (SUBPARTITION - 449)) | (1L << (SUBSTITUTABLE - 449)) | (1L << (SUBTYPE - 449)) | (1L << (SUCCESS - 449)) | (1L << (SUSPEND - 449)) | (1L << (SYS_CONTEXT - 449)) | (1L << (SYSDATE - 449)) | (1L << (SYSTIMESTAMP - 449)) | (1L << (TANH - 449)) | (1L << (TAN - 449)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 449)) | (1L << (TIMESTAMP - 449)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 449)) | (1L << (TIMESTAMP_UNCONSTRAINED - 449)) | (1L << (TIME - 449)) | (1L << (TIMEZONE_ABBR - 449)) | (1L << (TIMEZONE_HOUR - 449)) | (1L << (TIMEZONE_MINUTE - 449)) | (1L << (TIMEZONE_REGION - 449)) | (1L << (TO_CLOB - 449)) | (1L << (TO_DSINTERVAL - 449)) | (1L << (TO_LOB - 449)) | (1L << (TO_MULTI_BYTE - 449)) | (1L << (TO_NCLOB - 449)) | (1L << (TO_NUMBER - 449)) | (1L << (TO_SINGLE_BYTE - 449)) | (1L << (TO_TIMESTAMP - 449)) | (1L << (TO_TIMESTAMP_TZ - 449)) | (1L << (TO_YMINTERVAL - 449)) | (1L << (TRAILING - 449)) | (1L << (TRANSACTION - 449)) | (1L << (TRANSLATE - 449)) | (1L << (TREAT - 449)) | (1L << (TRIGGER - 449)) | (1L << (TRUNCATE - 449)) | (1L << (TRUNC - 449)) | (1L << (TYPE - 449)) | (1L << (TZ_OFFSET - 449)) | (1L << (UID - 449)) | (1L << (UNBOUNDED - 449)) | (1L << (UNDER - 449)) | (1L << (UNLIMITED - 449)) | (1L << (UNTIL - 449)) | (1L << (UPDATED - 449)))) != 0) || ((((_la - 513)) & ~0x3f) == 0 && ((1L << (_la - 513)) & ((1L << (UPPER - 513)) | (1L << (UPSERT - 513)) | (1L << (UROWID - 513)) | (1L << (USERENV - 513)) | (1L << (USER - 513)) | (1L << (USE - 513)) | (1L << (VALIDATE - 513)) | (1L << (VALUE - 513)) | (1L << (VARCHAR2 - 513)) | (1L << (VARCHAR - 513)) | (1L << (VARIABLE - 513)) | (1L << (VARRAY - 513)) | (1L << (VARYING - 513)) | (1L << (VERSIONS - 513)) | (1L << (VERSION - 513)) | (1L << (VSIZE - 513)) | (1L << (WAIT - 513)) | (1L << (WARNING - 513)) | (1L << (WELLFORMED - 513)) | (1L << (WHENEVER - 513)) | (1L << (WHILE - 513)) | (1L << (WITHIN - 513)) | (1L << (WORK - 513)) | (1L << (WRITE - 513)) | (1L << (XMLAGG - 513)) | (1L << (XMLATTRIBUTES - 513)) | (1L << (XMLCAST - 513)) | (1L << (XMLCOLATTVAL - 513)) | (1L << (XMLELEMENT - 513)) | (1L << (XMLEXISTS - 513)) | (1L << (XMLFOREST - 513)) | (1L << (XMLNAMESPACES - 513)) | (1L << (XMLPARSE - 513)) | (1L << (XMLPI - 513)) | (1L << (XMLQUERY - 513)) | (1L << (XMLROOT - 513)) | (1L << (XMLSERIALIZE - 513)) | (1L << (XMLTABLE - 513)) | (1L << (XML - 513)) | (1L << (YEAR - 513)) | (1L << (YES - 513)) | (1L << (YMINTERVAL_UNCONSTRAINED - 513)) | (1L << (ZONE - 513)) | (1L << (PREDICTION - 513)) | (1L << (PREDICTION_BOUNDS - 513)) | (1L << (PREDICTION_COST - 513)) | (1L << (PREDICTION_DETAILS - 513)) | (1L << (PREDICTION_PROBABILITY - 513)) | (1L << (PREDICTION_SET - 513)) | (1L << (CUME_DIST - 513)) | (1L << (DENSE_RANK - 513)) | (1L << (LISTAGG - 513)) | (1L << (PERCENT_RANK - 513)) | (1L << (PERCENTILE_CONT - 513)) | (1L << (PERCENTILE_DISC - 513)) | (1L << (RANK - 513)))) != 0) || ((((_la - 577)) & ~0x3f) == 0 && ((1L << (_la - 577)) & ((1L << (AVG - 577)) | (1L << (CORR - 577)) | (1L << (COVAR_ - 577)) | (1L << (DECODE - 577)) | (1L << (LAG - 577)) | (1L << (LEAD - 577)) | (1L << (MAX - 577)) | (1L << (MEDIAN - 577)) | (1L << (MIN - 577)) | (1L << (NTILE - 577)) | (1L << (NVL - 577)) | (1L << (RATIO_TO_REPORT - 577)) | (1L << (REGR_ - 577)) | (1L << (ROUND - 577)) | (1L << (ROW_NUMBER - 577)) | (1L << (SUBSTR - 577)) | (1L << (TO_CHAR - 577)) | (1L << (TRIM - 577)) | (1L << (SUM - 577)) | (1L << (STDDEV - 577)) | (1L << (VAR_ - 577)) | (1L << (VARIANCE - 577)) | (1L << (LEAST - 577)) | (1L << (GREATEST - 577)) | (1L << (TO_DATE - 577)) | (1L << (DELIMITED_ID - 577)) | (1L << (ASTERISK - 577)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
				{
				setState(2816);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DECLARE) {
					{
					setState(2815);
					match(DECLARE);
					}
				}

				setState(2819); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2818);
					declare_spec();
					}
					}
					setState(2821); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABS) | (1L << ACOS) | (1L << ADD) | (1L << ADD_MONTHS) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASCII) | (1L << ASCIISTR) | (1L << ASIN) | (1L << ASSOCIATE) | (1L << ATAN2) | (1L << ATAN) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BFILENAME) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BIN_TO_NUM) | (1L << BITAND) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CARDINALITY) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CEIL) | (1L << CHARACTER) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARTOROWID) | (1L << CHR) | (1L << C_LETTER))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOSE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONCAT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COS - 64)) | (1L << (COSH - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_DATE - 64)) | (1L << (CURRENT_TIMESTAMP - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (DIMENSION - 128)) | (1L << (DISABLE - 128)) | (1L << (DISASSOCIATE - 128)) | (1L << (DOCUMENT - 128)) | (1L << (DOUBLE - 128)) | (1L << (DSINTERVAL_UNCONSTRAINED - 128)) | (1L << (DUMP - 128)) | (1L << (EACH - 128)) | (1L << (ELEMENT - 128)) | (1L << (EMPTY_BLOB - 128)) | (1L << (EMPTY_CLOB - 128)) | (1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERR - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXP - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FLOOR - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FROM_TZ - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUP_ID - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HEXTORAW - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (IGNORE - 193)) | (1L << (IMMEDIATE - 193)) | (1L << (INCLUDE - 193)) | (1L << (INCLUDING - 193)) | (1L << (INCREMENT - 193)) | (1L << (INDENT - 193)) | (1L << (INDEXED - 193)) | (1L << (INDICATOR - 193)) | (1L << (INDICES - 193)) | (1L << (INFINITE - 193)) | (1L << (INITCAP - 193)) | (1L << (INLINE - 193)) | (1L << (INNER - 193)) | (1L << (INOUT - 193)) | (1L << (INSTANTIABLE - 193)) | (1L << (INSTEAD - 193)) | (1L << (INSTR2 - 193)) | (1L << (INSTR4 - 193)) | (1L << (INSTRB - 193)) | (1L << (INSTRC - 193)) | (1L << (INSTR - 193)) | (1L << (INTERFACE - 193)) | (1L << (INTEGER - 193)) | (1L << (INTERVAL - 193)) | (1L << (INT - 193)) | (1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (KEY - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST_DAY - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LENGTH2 - 193)) | (1L << (LENGTH4 - 193)) | (1L << (LENGTHB - 193)) | (1L << (LENGTHC - 193)) | (1L << (LENGTH - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LN - 193)) | (1L << (LNNVL - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCALTIMESTAMP - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (LOGON - 257)) | (1L << (LONG - 257)) | (1L << (LOOP - 257)) | (1L << (LOWER - 257)) | (1L << (LPAD - 257)) | (1L << (LTRIM - 257)) | (1L << (MAIN - 257)) | (1L << (MAP - 257)) | (1L << (MATCHED - 257)) | (1L << (MAXVALUE - 257)) | (1L << (MEASURES - 257)) | (1L << (MEMBER - 257)) | (1L << (MERGE - 257)) | (1L << (MINUTE - 257)) | (1L << (MINVALUE - 257)) | (1L << (MLSLABEL - 257)) | (1L << (MODEL - 257)) | (1L << (MODIFY - 257)) | (1L << (MOD - 257)) | (1L << (MONTH - 257)) | (1L << (MONTHS_BETWEEN - 257)) | (1L << (MULTISET - 257)) | (1L << (NAME - 257)) | (1L << (NAN - 257)) | (1L << (NANVL - 257)) | (1L << (NATURAL - 257)) | (1L << (NATURALN - 257)) | (1L << (NAV - 257)) | (1L << (NCHAR_CS - 257)) | (1L << (NCHAR - 257)) | (1L << (NCHR - 257)) | (1L << (NCLOB - 257)) | (1L << (NESTED - 257)) | (1L << (NEW - 257)) | (1L << (NEW_TIME - 257)) | (1L << (NEXT_DAY - 257)) | (1L << (NOAUDIT - 257)) | (1L << (NOCOPY - 257)) | (1L << (NOCYCLE - 257)) | (1L << (NOENTITYESCAPING - 257)) | (1L << (NONE - 257)) | (1L << (NO - 257)) | (1L << (NOSCHEMACHECK - 257)) | (1L << (NULLIF - 257)) | (1L << (NULLS - 257)) | (1L << (NUMBER - 257)) | (1L << (NUMERIC - 257)) | (1L << (NUMTODSINTERVAL - 257)) | (1L << (NUMTOYMINTERVAL - 257)) | (1L << (NVARCHAR2 - 257)) | (1L << (NVL2 - 257)) | (1L << (OBJECT - 257)) | (1L << (OFF - 257)))) != 0) || ((((_la - 321)) & ~0x3f) == 0 && ((1L << (_la - 321)) & ((1L << (OID - 321)) | (1L << (OLD - 321)) | (1L << (ONLY - 321)) | (1L << (OPAQUE - 321)) | (1L << (OPEN - 321)) | (1L << (ORADATA - 321)) | (1L << (ORDINALITY - 321)) | (1L << (OSERROR - 321)) | (1L << (OUTER - 321)) | (1L << (OUT - 321)) | (1L << (OVER - 321)) | (1L << (OVERRIDING - 321)) | (1L << (PACKAGE - 321)) | (1L << (PARALLEL_ENABLE - 321)) | (1L << (PARAMETERS - 321)) | (1L << (PARENT - 321)) | (1L << (PARTITION - 321)) | (1L << (PASSING - 321)) | (1L << (PATH - 321)) | (1L << (PIPELINED - 321)) | (1L << (PLAN - 321)) | (1L << (PLS_INTEGER - 321)) | (1L << (POSITIVEN - 321)) | (1L << (POSITIVE - 321)) | (1L << (POWER - 321)) | (1L << (PRAGMA - 321)) | (1L << (PRECEDING - 321)) | (1L << (PRECISION - 321)) | (1L << (PRESENT - 321)) | (1L << (PRIOR - 321)) | (1L << (PROCEDURE - 321)) | (1L << (RAISE - 321)) | (1L << (RANGE - 321)) | (1L << (RAW - 321)) | (1L << (RAWTOHEX - 321)) | (1L << (READ - 321)) | (1L << (REAL - 321)) | (1L << (RECORD - 321)) | (1L << (REFERENCE - 321)) | (1L << (REFERENCING - 321)) | (1L << (REF - 321)) | (1L << (REGEXP_COUNT - 321)) | (1L << (REGEXP_INSTR - 321)) | (1L << (REGEXP_REPLACE - 321)) | (1L << (REGEXP_SUBSTR - 321)) | (1L << (REJECT - 321)) | (1L << (RELIES_ON - 321)) | (1L << (REMAINDER - 321)))) != 0) || ((((_la - 385)) & ~0x3f) == 0 && ((1L << (_la - 385)) & ((1L << (RENAME - 385)) | (1L << (REPLACE - 385)) | (1L << (RESPECT - 385)) | (1L << (RESTRICT_REFERENCES - 385)) | (1L << (RESULT_CACHE - 385)) | (1L << (RESULT - 385)) | (1L << (RETURNING - 385)) | (1L << (RETURN - 385)) | (1L << (REUSE - 385)) | (1L << (REVERSE - 385)) | (1L << (RIGHT - 385)) | (1L << (ROLLBACK - 385)) | (1L << (ROLLUP - 385)) | (1L << (ROWID - 385)) | (1L << (ROWNUM - 385)) | (1L << (ROW - 385)) | (1L << (ROWS - 385)) | (1L << (RPAD - 385)) | (1L << (RTRIM - 385)) | (1L << (RULES - 385)) | (1L << (SAMPLE - 385)) | (1L << (SAVEPOINT - 385)) | (1L << (SAVE - 385)) | (1L << (SCHEMACHECK - 385)) | (1L << (SCHEMA - 385)) | (1L << (SCN - 385)) | (1L << (SECOND - 385)) | (1L << (SEED - 385)) | (1L << (SEGMENT - 385)) | (1L << (SELF - 385)) | (1L << (SEQUENTIAL - 385)) | (1L << (SERIALIZABLE - 385)) | (1L << (SERIALLY_REUSABLE - 385)) | (1L << (SERVERERROR - 385)) | (1L << (SESSIONTIMEZONE - 385)) | (1L << (SET - 385)) | (1L << (SETS - 385)) | (1L << (SETTINGS - 385)) | (1L << (SHOW - 385)) | (1L << (SHUTDOWN - 385)) | (1L << (SIBLINGS - 385)) | (1L << (SIGN - 385)) | (1L << (SIGNTYPE - 385)) | (1L << (SIMPLE_INTEGER - 385)) | (1L << (SINGLE - 385)) | (1L << (SINH - 385)) | (1L << (SIN - 385)) | (1L << (SKIP_ - 385)) | (1L << (SMALLINT - 385)) | (1L << (SNAPSHOT - 385)) | (1L << (SOME - 385)) | (1L << (SOUNDEX - 385)) | (1L << (SPECIFICATION - 385)) | (1L << (SQLDATA - 385)) | (1L << (SQLERROR - 385)) | (1L << (SQRT - 385)) | (1L << (STANDALONE - 385)))) != 0) || ((((_la - 449)) & ~0x3f) == 0 && ((1L << (_la - 449)) & ((1L << (STARTUP - 449)) | (1L << (STATEMENT_ID - 449)) | (1L << (STATEMENT - 449)) | (1L << (STATIC - 449)) | (1L << (STATISTICS - 449)) | (1L << (STRING - 449)) | (1L << (SUBMULTISET - 449)) | (1L << (SUBPARTITION - 449)) | (1L << (SUBSTITUTABLE - 449)) | (1L << (SUBTYPE - 449)) | (1L << (SUCCESS - 449)) | (1L << (SUSPEND - 449)) | (1L << (SYS_CONTEXT - 449)) | (1L << (SYSDATE - 449)) | (1L << (SYSTIMESTAMP - 449)) | (1L << (TANH - 449)) | (1L << (TAN - 449)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 449)) | (1L << (TIMESTAMP - 449)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 449)) | (1L << (TIMESTAMP_UNCONSTRAINED - 449)) | (1L << (TIME - 449)) | (1L << (TIMEZONE_ABBR - 449)) | (1L << (TIMEZONE_HOUR - 449)) | (1L << (TIMEZONE_MINUTE - 449)) | (1L << (TIMEZONE_REGION - 449)) | (1L << (TO_CLOB - 449)) | (1L << (TO_DSINTERVAL - 449)) | (1L << (TO_LOB - 449)) | (1L << (TO_MULTI_BYTE - 449)) | (1L << (TO_NCLOB - 449)) | (1L << (TO_NUMBER - 449)) | (1L << (TO_SINGLE_BYTE - 449)) | (1L << (TO_TIMESTAMP - 449)) | (1L << (TO_TIMESTAMP_TZ - 449)) | (1L << (TO_YMINTERVAL - 449)) | (1L << (TRAILING - 449)) | (1L << (TRANSACTION - 449)) | (1L << (TRANSLATE - 449)) | (1L << (TREAT - 449)) | (1L << (TRIGGER - 449)) | (1L << (TRUNCATE - 449)) | (1L << (TRUNC - 449)) | (1L << (TYPE - 449)) | (1L << (TZ_OFFSET - 449)) | (1L << (UID - 449)) | (1L << (UNBOUNDED - 449)) | (1L << (UNDER - 449)) | (1L << (UNLIMITED - 449)) | (1L << (UNTIL - 449)) | (1L << (UPDATED - 449)))) != 0) || ((((_la - 513)) & ~0x3f) == 0 && ((1L << (_la - 513)) & ((1L << (UPPER - 513)) | (1L << (UPSERT - 513)) | (1L << (UROWID - 513)) | (1L << (USERENV - 513)) | (1L << (USER - 513)) | (1L << (USE - 513)) | (1L << (VALIDATE - 513)) | (1L << (VALUE - 513)) | (1L << (VARCHAR2 - 513)) | (1L << (VARCHAR - 513)) | (1L << (VARIABLE - 513)) | (1L << (VARRAY - 513)) | (1L << (VARYING - 513)) | (1L << (VERSIONS - 513)) | (1L << (VERSION - 513)) | (1L << (VSIZE - 513)) | (1L << (WAIT - 513)) | (1L << (WARNING - 513)) | (1L << (WELLFORMED - 513)) | (1L << (WHENEVER - 513)) | (1L << (WHILE - 513)) | (1L << (WITHIN - 513)) | (1L << (WORK - 513)) | (1L << (WRITE - 513)) | (1L << (XMLAGG - 513)) | (1L << (XMLATTRIBUTES - 513)) | (1L << (XMLCAST - 513)) | (1L << (XMLCOLATTVAL - 513)) | (1L << (XMLELEMENT - 513)) | (1L << (XMLEXISTS - 513)) | (1L << (XMLFOREST - 513)) | (1L << (XMLNAMESPACES - 513)) | (1L << (XMLPARSE - 513)) | (1L << (XMLPI - 513)) | (1L << (XMLQUERY - 513)) | (1L << (XMLROOT - 513)) | (1L << (XMLSERIALIZE - 513)) | (1L << (XMLTABLE - 513)) | (1L << (XML - 513)) | (1L << (YEAR - 513)) | (1L << (YES - 513)) | (1L << (YMINTERVAL_UNCONSTRAINED - 513)) | (1L << (ZONE - 513)) | (1L << (PREDICTION - 513)) | (1L << (PREDICTION_BOUNDS - 513)) | (1L << (PREDICTION_COST - 513)) | (1L << (PREDICTION_DETAILS - 513)) | (1L << (PREDICTION_PROBABILITY - 513)) | (1L << (PREDICTION_SET - 513)) | (1L << (CUME_DIST - 513)) | (1L << (DENSE_RANK - 513)) | (1L << (LISTAGG - 513)) | (1L << (PERCENT_RANK - 513)) | (1L << (PERCENTILE_CONT - 513)) | (1L << (PERCENTILE_DISC - 513)) | (1L << (RANK - 513)))) != 0) || ((((_la - 577)) & ~0x3f) == 0 && ((1L << (_la - 577)) & ((1L << (AVG - 577)) | (1L << (CORR - 577)) | (1L << (COVAR_ - 577)) | (1L << (DECODE - 577)) | (1L << (LAG - 577)) | (1L << (LEAD - 577)) | (1L << (MAX - 577)) | (1L << (MEDIAN - 577)) | (1L << (MIN - 577)) | (1L << (NTILE - 577)) | (1L << (NVL - 577)) | (1L << (RATIO_TO_REPORT - 577)) | (1L << (REGR_ - 577)) | (1L << (ROUND - 577)) | (1L << (ROW_NUMBER - 577)) | (1L << (SUBSTR - 577)) | (1L << (TO_CHAR - 577)) | (1L << (TRIM - 577)) | (1L << (SUM - 577)) | (1L << (STDDEV - 577)) | (1L << (VAR_ - 577)) | (1L << (VARIANCE - 577)) | (1L << (LEAST - 577)) | (1L << (GREATEST - 577)) | (1L << (TO_DATE - 577)) | (1L << (DELIMITED_ID - 577)) | (1L << (ASTERISK - 577)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID );
				}
			}

			setState(2825);
			body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BlockContext extends ParserRuleContext {
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		public TerminalNode DECLARE() { return getToken(OracleSQLStatementParser.DECLARE, 0); }
		public List<Declare_specContext> declare_spec() {
			return getRuleContexts(Declare_specContext.class);
		}
		public Declare_specContext declare_spec(int i) {
			return getRuleContext(Declare_specContext.class,i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_block; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterBlock(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitBlock(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitBlock(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BlockContext block() throws RecognitionException {
		BlockContext _localctx = new BlockContext(_ctx, getState());
		enterRule(_localctx, 298, RULE_block);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2828);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DECLARE) {
				{
				setState(2827);
				match(DECLARE);
				}
			}

			setState(2831); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2830);
				declare_spec();
				}
				}
				setState(2833); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABS) | (1L << ACOS) | (1L << ADD) | (1L << ADD_MONTHS) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASCII) | (1L << ASCIISTR) | (1L << ASIN) | (1L << ASSOCIATE) | (1L << ATAN2) | (1L << ATAN) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BFILENAME) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BIN_TO_NUM) | (1L << BITAND) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CARDINALITY) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CEIL) | (1L << CHARACTER) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARTOROWID) | (1L << CHR) | (1L << C_LETTER))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOSE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONCAT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COS - 64)) | (1L << (COSH - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_DATE - 64)) | (1L << (CURRENT_TIMESTAMP - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (DIMENSION - 128)) | (1L << (DISABLE - 128)) | (1L << (DISASSOCIATE - 128)) | (1L << (DOCUMENT - 128)) | (1L << (DOUBLE - 128)) | (1L << (DSINTERVAL_UNCONSTRAINED - 128)) | (1L << (DUMP - 128)) | (1L << (EACH - 128)) | (1L << (ELEMENT - 128)) | (1L << (EMPTY_BLOB - 128)) | (1L << (EMPTY_CLOB - 128)) | (1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERR - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXP - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FLOOR - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FROM_TZ - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUP_ID - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HEXTORAW - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (IGNORE - 193)) | (1L << (IMMEDIATE - 193)) | (1L << (INCLUDE - 193)) | (1L << (INCLUDING - 193)) | (1L << (INCREMENT - 193)) | (1L << (INDENT - 193)) | (1L << (INDEXED - 193)) | (1L << (INDICATOR - 193)) | (1L << (INDICES - 193)) | (1L << (INFINITE - 193)) | (1L << (INITCAP - 193)) | (1L << (INLINE - 193)) | (1L << (INNER - 193)) | (1L << (INOUT - 193)) | (1L << (INSTANTIABLE - 193)) | (1L << (INSTEAD - 193)) | (1L << (INSTR2 - 193)) | (1L << (INSTR4 - 193)) | (1L << (INSTRB - 193)) | (1L << (INSTRC - 193)) | (1L << (INSTR - 193)) | (1L << (INTERFACE - 193)) | (1L << (INTEGER - 193)) | (1L << (INTERVAL - 193)) | (1L << (INT - 193)) | (1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (KEY - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST_DAY - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LENGTH2 - 193)) | (1L << (LENGTH4 - 193)) | (1L << (LENGTHB - 193)) | (1L << (LENGTHC - 193)) | (1L << (LENGTH - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LN - 193)) | (1L << (LNNVL - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCALTIMESTAMP - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (LOGON - 257)) | (1L << (LONG - 257)) | (1L << (LOOP - 257)) | (1L << (LOWER - 257)) | (1L << (LPAD - 257)) | (1L << (LTRIM - 257)) | (1L << (MAIN - 257)) | (1L << (MAP - 257)) | (1L << (MATCHED - 257)) | (1L << (MAXVALUE - 257)) | (1L << (MEASURES - 257)) | (1L << (MEMBER - 257)) | (1L << (MERGE - 257)) | (1L << (MINUTE - 257)) | (1L << (MINVALUE - 257)) | (1L << (MLSLABEL - 257)) | (1L << (MODEL - 257)) | (1L << (MODIFY - 257)) | (1L << (MOD - 257)) | (1L << (MONTH - 257)) | (1L << (MONTHS_BETWEEN - 257)) | (1L << (MULTISET - 257)) | (1L << (NAME - 257)) | (1L << (NAN - 257)) | (1L << (NANVL - 257)) | (1L << (NATURAL - 257)) | (1L << (NATURALN - 257)) | (1L << (NAV - 257)) | (1L << (NCHAR_CS - 257)) | (1L << (NCHAR - 257)) | (1L << (NCHR - 257)) | (1L << (NCLOB - 257)) | (1L << (NESTED - 257)) | (1L << (NEW - 257)) | (1L << (NEW_TIME - 257)) | (1L << (NEXT_DAY - 257)) | (1L << (NOAUDIT - 257)) | (1L << (NOCOPY - 257)) | (1L << (NOCYCLE - 257)) | (1L << (NOENTITYESCAPING - 257)) | (1L << (NONE - 257)) | (1L << (NO - 257)) | (1L << (NOSCHEMACHECK - 257)) | (1L << (NULLIF - 257)) | (1L << (NULLS - 257)) | (1L << (NUMBER - 257)) | (1L << (NUMERIC - 257)) | (1L << (NUMTODSINTERVAL - 257)) | (1L << (NUMTOYMINTERVAL - 257)) | (1L << (NVARCHAR2 - 257)) | (1L << (NVL2 - 257)) | (1L << (OBJECT - 257)) | (1L << (OFF - 257)))) != 0) || ((((_la - 321)) & ~0x3f) == 0 && ((1L << (_la - 321)) & ((1L << (OID - 321)) | (1L << (OLD - 321)) | (1L << (ONLY - 321)) | (1L << (OPAQUE - 321)) | (1L << (OPEN - 321)) | (1L << (ORADATA - 321)) | (1L << (ORDINALITY - 321)) | (1L << (OSERROR - 321)) | (1L << (OUTER - 321)) | (1L << (OUT - 321)) | (1L << (OVER - 321)) | (1L << (OVERRIDING - 321)) | (1L << (PACKAGE - 321)) | (1L << (PARALLEL_ENABLE - 321)) | (1L << (PARAMETERS - 321)) | (1L << (PARENT - 321)) | (1L << (PARTITION - 321)) | (1L << (PASSING - 321)) | (1L << (PATH - 321)) | (1L << (PIPELINED - 321)) | (1L << (PLAN - 321)) | (1L << (PLS_INTEGER - 321)) | (1L << (POSITIVEN - 321)) | (1L << (POSITIVE - 321)) | (1L << (POWER - 321)) | (1L << (PRAGMA - 321)) | (1L << (PRECEDING - 321)) | (1L << (PRECISION - 321)) | (1L << (PRESENT - 321)) | (1L << (PRIOR - 321)) | (1L << (PROCEDURE - 321)) | (1L << (RAISE - 321)) | (1L << (RANGE - 321)) | (1L << (RAW - 321)) | (1L << (RAWTOHEX - 321)) | (1L << (READ - 321)) | (1L << (REAL - 321)) | (1L << (RECORD - 321)) | (1L << (REFERENCE - 321)) | (1L << (REFERENCING - 321)) | (1L << (REF - 321)) | (1L << (REGEXP_COUNT - 321)) | (1L << (REGEXP_INSTR - 321)) | (1L << (REGEXP_REPLACE - 321)) | (1L << (REGEXP_SUBSTR - 321)) | (1L << (REJECT - 321)) | (1L << (RELIES_ON - 321)) | (1L << (REMAINDER - 321)))) != 0) || ((((_la - 385)) & ~0x3f) == 0 && ((1L << (_la - 385)) & ((1L << (RENAME - 385)) | (1L << (REPLACE - 385)) | (1L << (RESPECT - 385)) | (1L << (RESTRICT_REFERENCES - 385)) | (1L << (RESULT_CACHE - 385)) | (1L << (RESULT - 385)) | (1L << (RETURNING - 385)) | (1L << (RETURN - 385)) | (1L << (REUSE - 385)) | (1L << (REVERSE - 385)) | (1L << (RIGHT - 385)) | (1L << (ROLLBACK - 385)) | (1L << (ROLLUP - 385)) | (1L << (ROWID - 385)) | (1L << (ROWNUM - 385)) | (1L << (ROW - 385)) | (1L << (ROWS - 385)) | (1L << (RPAD - 385)) | (1L << (RTRIM - 385)) | (1L << (RULES - 385)) | (1L << (SAMPLE - 385)) | (1L << (SAVEPOINT - 385)) | (1L << (SAVE - 385)) | (1L << (SCHEMACHECK - 385)) | (1L << (SCHEMA - 385)) | (1L << (SCN - 385)) | (1L << (SECOND - 385)) | (1L << (SEED - 385)) | (1L << (SEGMENT - 385)) | (1L << (SELF - 385)) | (1L << (SEQUENTIAL - 385)) | (1L << (SERIALIZABLE - 385)) | (1L << (SERIALLY_REUSABLE - 385)) | (1L << (SERVERERROR - 385)) | (1L << (SESSIONTIMEZONE - 385)) | (1L << (SET - 385)) | (1L << (SETS - 385)) | (1L << (SETTINGS - 385)) | (1L << (SHOW - 385)) | (1L << (SHUTDOWN - 385)) | (1L << (SIBLINGS - 385)) | (1L << (SIGN - 385)) | (1L << (SIGNTYPE - 385)) | (1L << (SIMPLE_INTEGER - 385)) | (1L << (SINGLE - 385)) | (1L << (SINH - 385)) | (1L << (SIN - 385)) | (1L << (SKIP_ - 385)) | (1L << (SMALLINT - 385)) | (1L << (SNAPSHOT - 385)) | (1L << (SOME - 385)) | (1L << (SOUNDEX - 385)) | (1L << (SPECIFICATION - 385)) | (1L << (SQLDATA - 385)) | (1L << (SQLERROR - 385)) | (1L << (SQRT - 385)) | (1L << (STANDALONE - 385)))) != 0) || ((((_la - 449)) & ~0x3f) == 0 && ((1L << (_la - 449)) & ((1L << (STARTUP - 449)) | (1L << (STATEMENT_ID - 449)) | (1L << (STATEMENT - 449)) | (1L << (STATIC - 449)) | (1L << (STATISTICS - 449)) | (1L << (STRING - 449)) | (1L << (SUBMULTISET - 449)) | (1L << (SUBPARTITION - 449)) | (1L << (SUBSTITUTABLE - 449)) | (1L << (SUBTYPE - 449)) | (1L << (SUCCESS - 449)) | (1L << (SUSPEND - 449)) | (1L << (SYS_CONTEXT - 449)) | (1L << (SYSDATE - 449)) | (1L << (SYSTIMESTAMP - 449)) | (1L << (TANH - 449)) | (1L << (TAN - 449)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 449)) | (1L << (TIMESTAMP - 449)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 449)) | (1L << (TIMESTAMP_UNCONSTRAINED - 449)) | (1L << (TIME - 449)) | (1L << (TIMEZONE_ABBR - 449)) | (1L << (TIMEZONE_HOUR - 449)) | (1L << (TIMEZONE_MINUTE - 449)) | (1L << (TIMEZONE_REGION - 449)) | (1L << (TO_CLOB - 449)) | (1L << (TO_DSINTERVAL - 449)) | (1L << (TO_LOB - 449)) | (1L << (TO_MULTI_BYTE - 449)) | (1L << (TO_NCLOB - 449)) | (1L << (TO_NUMBER - 449)) | (1L << (TO_SINGLE_BYTE - 449)) | (1L << (TO_TIMESTAMP - 449)) | (1L << (TO_TIMESTAMP_TZ - 449)) | (1L << (TO_YMINTERVAL - 449)) | (1L << (TRAILING - 449)) | (1L << (TRANSACTION - 449)) | (1L << (TRANSLATE - 449)) | (1L << (TREAT - 449)) | (1L << (TRIGGER - 449)) | (1L << (TRUNCATE - 449)) | (1L << (TRUNC - 449)) | (1L << (TYPE - 449)) | (1L << (TZ_OFFSET - 449)) | (1L << (UID - 449)) | (1L << (UNBOUNDED - 449)) | (1L << (UNDER - 449)) | (1L << (UNLIMITED - 449)) | (1L << (UNTIL - 449)) | (1L << (UPDATED - 449)))) != 0) || ((((_la - 513)) & ~0x3f) == 0 && ((1L << (_la - 513)) & ((1L << (UPPER - 513)) | (1L << (UPSERT - 513)) | (1L << (UROWID - 513)) | (1L << (USERENV - 513)) | (1L << (USER - 513)) | (1L << (USE - 513)) | (1L << (VALIDATE - 513)) | (1L << (VALUE - 513)) | (1L << (VARCHAR2 - 513)) | (1L << (VARCHAR - 513)) | (1L << (VARIABLE - 513)) | (1L << (VARRAY - 513)) | (1L << (VARYING - 513)) | (1L << (VERSIONS - 513)) | (1L << (VERSION - 513)) | (1L << (VSIZE - 513)) | (1L << (WAIT - 513)) | (1L << (WARNING - 513)) | (1L << (WELLFORMED - 513)) | (1L << (WHENEVER - 513)) | (1L << (WHILE - 513)) | (1L << (WITHIN - 513)) | (1L << (WORK - 513)) | (1L << (WRITE - 513)) | (1L << (XMLAGG - 513)) | (1L << (XMLATTRIBUTES - 513)) | (1L << (XMLCAST - 513)) | (1L << (XMLCOLATTVAL - 513)) | (1L << (XMLELEMENT - 513)) | (1L << (XMLEXISTS - 513)) | (1L << (XMLFOREST - 513)) | (1L << (XMLNAMESPACES - 513)) | (1L << (XMLPARSE - 513)) | (1L << (XMLPI - 513)) | (1L << (XMLQUERY - 513)) | (1L << (XMLROOT - 513)) | (1L << (XMLSERIALIZE - 513)) | (1L << (XMLTABLE - 513)) | (1L << (XML - 513)) | (1L << (YEAR - 513)) | (1L << (YES - 513)) | (1L << (YMINTERVAL_UNCONSTRAINED - 513)) | (1L << (ZONE - 513)) | (1L << (PREDICTION - 513)) | (1L << (PREDICTION_BOUNDS - 513)) | (1L << (PREDICTION_COST - 513)) | (1L << (PREDICTION_DETAILS - 513)) | (1L << (PREDICTION_PROBABILITY - 513)) | (1L << (PREDICTION_SET - 513)) | (1L << (CUME_DIST - 513)) | (1L << (DENSE_RANK - 513)) | (1L << (LISTAGG - 513)) | (1L << (PERCENT_RANK - 513)) | (1L << (PERCENTILE_CONT - 513)) | (1L << (PERCENTILE_DISC - 513)) | (1L << (RANK - 513)))) != 0) || ((((_la - 577)) & ~0x3f) == 0 && ((1L << (_la - 577)) & ((1L << (AVG - 577)) | (1L << (CORR - 577)) | (1L << (COVAR_ - 577)) | (1L << (DECODE - 577)) | (1L << (LAG - 577)) | (1L << (LEAD - 577)) | (1L << (MAX - 577)) | (1L << (MEDIAN - 577)) | (1L << (MIN - 577)) | (1L << (NTILE - 577)) | (1L << (NVL - 577)) | (1L << (RATIO_TO_REPORT - 577)) | (1L << (REGR_ - 577)) | (1L << (ROUND - 577)) | (1L << (ROW_NUMBER - 577)) | (1L << (SUBSTR - 577)) | (1L << (TO_CHAR - 577)) | (1L << (TRIM - 577)) | (1L << (SUM - 577)) | (1L << (STDDEV - 577)) | (1L << (VAR_ - 577)) | (1L << (VARIANCE - 577)) | (1L << (LEAST - 577)) | (1L << (GREATEST - 577)) | (1L << (TO_DATE - 577)) | (1L << (DELIMITED_ID - 577)) | (1L << (ASTERISK - 577)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID );
			setState(2835);
			body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sql_statementContext extends ParserRuleContext {
		public Execute_immediateContext execute_immediate() {
			return getRuleContext(Execute_immediateContext.class,0);
		}
		public Data_manipulation_language_statementsContext data_manipulation_language_statements() {
			return getRuleContext(Data_manipulation_language_statementsContext.class,0);
		}
		public Cursor_manipulation_statementsContext cursor_manipulation_statements() {
			return getRuleContext(Cursor_manipulation_statementsContext.class,0);
		}
		public Transaction_control_statementsContext transaction_control_statements() {
			return getRuleContext(Transaction_control_statementsContext.class,0);
		}
		public Sql_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterSql_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitSql_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitSql_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sql_statementContext sql_statement() throws RecognitionException {
		Sql_statementContext _localctx = new Sql_statementContext(_ctx, getState());
		enterRule(_localctx, 300, RULE_sql_statement);
		try {
			setState(2841);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EXECUTE:
				enterOuterAlt(_localctx, 1);
				{
				setState(2837);
				execute_immediate();
				}
				break;
			case DELETE:
			case EXPLAIN:
			case INSERT:
			case LOCK:
			case MERGE:
			case SELECT:
			case UPDATE:
			case WITH:
			case LEFT_PAREN:
				enterOuterAlt(_localctx, 2);
				{
				setState(2838);
				data_manipulation_language_statements();
				}
				break;
			case CLOSE:
			case FETCH:
			case OPEN:
				enterOuterAlt(_localctx, 3);
				{
				setState(2839);
				cursor_manipulation_statements();
				}
				break;
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case SET:
				enterOuterAlt(_localctx, 4);
				{
				setState(2840);
				transaction_control_statements();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Execute_immediateContext extends ParserRuleContext {
		public TerminalNode EXECUTE() { return getToken(OracleSQLStatementParser.EXECUTE, 0); }
		public TerminalNode IMMEDIATE() { return getToken(OracleSQLStatementParser.IMMEDIATE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Into_clauseContext into_clause() {
			return getRuleContext(Into_clauseContext.class,0);
		}
		public Using_clauseContext using_clause() {
			return getRuleContext(Using_clauseContext.class,0);
		}
		public Dynamic_returning_clauseContext dynamic_returning_clause() {
			return getRuleContext(Dynamic_returning_clauseContext.class,0);
		}
		public Execute_immediateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_execute_immediate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterExecute_immediate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitExecute_immediate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitExecute_immediate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Execute_immediateContext execute_immediate() throws RecognitionException {
		Execute_immediateContext _localctx = new Execute_immediateContext(_ctx, getState());
		enterRule(_localctx, 302, RULE_execute_immediate);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2843);
			match(EXECUTE);
			setState(2844);
			match(IMMEDIATE);
			setState(2845);
			expression();
			setState(2855);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BULK:
			case INTO:
				{
				setState(2846);
				into_clause();
				setState(2848);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(2847);
					using_clause();
					}
				}

				}
				break;
			case USING:
				{
				setState(2850);
				using_clause();
				setState(2852);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RETURNING || _la==RETURN) {
					{
					setState(2851);
					dynamic_returning_clause();
					}
				}

				}
				break;
			case RETURNING:
			case RETURN:
				{
				setState(2854);
				dynamic_returning_clause();
				}
				break;
			case EOF:
			case SAVE:
			case SEMI:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dynamic_returning_clauseContext extends ParserRuleContext {
		public Into_clauseContext into_clause() {
			return getRuleContext(Into_clauseContext.class,0);
		}
		public TerminalNode RETURNING() { return getToken(OracleSQLStatementParser.RETURNING, 0); }
		public TerminalNode RETURN() { return getToken(OracleSQLStatementParser.RETURN, 0); }
		public Dynamic_returning_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dynamic_returning_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterDynamic_returning_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitDynamic_returning_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitDynamic_returning_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Dynamic_returning_clauseContext dynamic_returning_clause() throws RecognitionException {
		Dynamic_returning_clauseContext _localctx = new Dynamic_returning_clauseContext(_ctx, getState());
		enterRule(_localctx, 304, RULE_dynamic_returning_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2857);
			_la = _input.LA(1);
			if ( !(_la==RETURNING || _la==RETURN) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2858);
			into_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Data_manipulation_language_statementsContext extends ParserRuleContext {
		public Merge_statementContext merge_statement() {
			return getRuleContext(Merge_statementContext.class,0);
		}
		public Lock_table_statementContext lock_table_statement() {
			return getRuleContext(Lock_table_statementContext.class,0);
		}
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public Update_statementContext update_statement() {
			return getRuleContext(Update_statementContext.class,0);
		}
		public Delete_statementContext delete_statement() {
			return getRuleContext(Delete_statementContext.class,0);
		}
		public Insert_statementContext insert_statement() {
			return getRuleContext(Insert_statementContext.class,0);
		}
		public Explain_statementContext explain_statement() {
			return getRuleContext(Explain_statementContext.class,0);
		}
		public Data_manipulation_language_statementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_data_manipulation_language_statements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterData_manipulation_language_statements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitData_manipulation_language_statements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitData_manipulation_language_statements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Data_manipulation_language_statementsContext data_manipulation_language_statements() throws RecognitionException {
		Data_manipulation_language_statementsContext _localctx = new Data_manipulation_language_statementsContext(_ctx, getState());
		enterRule(_localctx, 306, RULE_data_manipulation_language_statements);
		try {
			setState(2867);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MERGE:
				enterOuterAlt(_localctx, 1);
				{
				setState(2860);
				merge_statement();
				}
				break;
			case LOCK:
				enterOuterAlt(_localctx, 2);
				{
				setState(2861);
				lock_table_statement();
				}
				break;
			case SELECT:
			case WITH:
			case LEFT_PAREN:
				enterOuterAlt(_localctx, 3);
				{
				setState(2862);
				select_statement();
				}
				break;
			case UPDATE:
				enterOuterAlt(_localctx, 4);
				{
				setState(2863);
				update_statement();
				}
				break;
			case DELETE:
				enterOuterAlt(_localctx, 5);
				{
				setState(2864);
				delete_statement();
				}
				break;
			case INSERT:
				enterOuterAlt(_localctx, 6);
				{
				setState(2865);
				insert_statement();
				}
				break;
			case EXPLAIN:
				enterOuterAlt(_localctx, 7);
				{
				setState(2866);
				explain_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cursor_manipulation_statementsContext extends ParserRuleContext {
		public Close_statementContext close_statement() {
			return getRuleContext(Close_statementContext.class,0);
		}
		public Open_statementContext open_statement() {
			return getRuleContext(Open_statementContext.class,0);
		}
		public Fetch_statementContext fetch_statement() {
			return getRuleContext(Fetch_statementContext.class,0);
		}
		public Open_for_statementContext open_for_statement() {
			return getRuleContext(Open_for_statementContext.class,0);
		}
		public Cursor_manipulation_statementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_manipulation_statements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterCursor_manipulation_statements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitCursor_manipulation_statements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitCursor_manipulation_statements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cursor_manipulation_statementsContext cursor_manipulation_statements() throws RecognitionException {
		Cursor_manipulation_statementsContext _localctx = new Cursor_manipulation_statementsContext(_ctx, getState());
		enterRule(_localctx, 308, RULE_cursor_manipulation_statements);
		try {
			setState(2873);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,295,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2869);
				close_statement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2870);
				open_statement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2871);
				fetch_statement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2872);
				open_for_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Close_statementContext extends ParserRuleContext {
		public TerminalNode CLOSE() { return getToken(OracleSQLStatementParser.CLOSE, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public Close_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_close_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterClose_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitClose_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitClose_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Close_statementContext close_statement() throws RecognitionException {
		Close_statementContext _localctx = new Close_statementContext(_ctx, getState());
		enterRule(_localctx, 310, RULE_close_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2875);
			match(CLOSE);
			setState(2876);
			cursor_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Open_statementContext extends ParserRuleContext {
		public TerminalNode OPEN() { return getToken(OracleSQLStatementParser.OPEN, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public Open_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_open_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterOpen_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitOpen_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitOpen_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Open_statementContext open_statement() throws RecognitionException {
		Open_statementContext _localctx = new Open_statementContext(_ctx, getState());
		enterRule(_localctx, 312, RULE_open_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2878);
			match(OPEN);
			setState(2879);
			cursor_name();
			setState(2881);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(2880);
				expression_list();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Fetch_statementContext extends ParserRuleContext {
		public Token it1;
		public TerminalNode FETCH() { return getToken(OracleSQLStatementParser.FETCH, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public List<Variable_nameContext> variable_name() {
			return getRuleContexts(Variable_nameContext.class);
		}
		public Variable_nameContext variable_name(int i) {
			return getRuleContext(Variable_nameContext.class,i);
		}
		public TerminalNode BULK() { return getToken(OracleSQLStatementParser.BULK, 0); }
		public TerminalNode COLLECT() { return getToken(OracleSQLStatementParser.COLLECT, 0); }
		public TerminalNode INTO() { return getToken(OracleSQLStatementParser.INTO, 0); }
		public List<TerminalNode> COMMA() { return getTokens(OracleSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(OracleSQLStatementParser.COMMA, i);
		}
		public Fetch_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fetch_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterFetch_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitFetch_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitFetch_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Fetch_statementContext fetch_statement() throws RecognitionException {
		Fetch_statementContext _localctx = new Fetch_statementContext(_ctx, getState());
		enterRule(_localctx, 314, RULE_fetch_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2883);
			match(FETCH);
			setState(2884);
			cursor_name();
			setState(2905);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INTO:
				{
				setState(2885);
				((Fetch_statementContext)_localctx).it1 = match(INTO);
				setState(2886);
				variable_name();
				setState(2891);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2887);
					match(COMMA);
					setState(2888);
					variable_name();
					}
					}
					setState(2893);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case BULK:
				{
				setState(2894);
				match(BULK);
				setState(2895);
				match(COLLECT);
				setState(2896);
				match(INTO);
				setState(2897);
				variable_name();
				setState(2902);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2898);
					match(COMMA);
					setState(2899);
					variable_name();
					}
					}
					setState(2904);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Open_for_statementContext extends ParserRuleContext {
		public TerminalNode OPEN() { return getToken(OracleSQLStatementParser.OPEN, 0); }
		public Variable_nameContext variable_name() {
			return getRuleContext(Variable_nameContext.class,0);
		}
		public TerminalNode FOR() { return getToken(OracleSQLStatementParser.FOR, 0); }
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Using_clauseContext using_clause() {
			return getRuleContext(Using_clauseContext.class,0);
		}
		public Open_for_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_open_for_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterOpen_for_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitOpen_for_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitOpen_for_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Open_for_statementContext open_for_statement() throws RecognitionException {
		Open_for_statementContext _localctx = new Open_for_statementContext(_ctx, getState());
		enterRule(_localctx, 316, RULE_open_for_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2907);
			match(OPEN);
			setState(2908);
			variable_name();
			setState(2909);
			match(FOR);
			setState(2912);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,300,_ctx) ) {
			case 1:
				{
				setState(2910);
				select_statement();
				}
				break;
			case 2:
				{
				setState(2911);
				expression();
				}
				break;
			}
			setState(2915);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(2914);
				using_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Transaction_control_statementsContext extends ParserRuleContext {
		public Set_transaction_commandContext set_transaction_command() {
			return getRuleContext(Set_transaction_commandContext.class,0);
		}
		public Set_constraint_commandContext set_constraint_command() {
			return getRuleContext(Set_constraint_commandContext.class,0);
		}
		public Commit_statementContext commit_statement() {
			return getRuleContext(Commit_statementContext.class,0);
		}
		public Rollback_statementContext rollback_statement() {
			return getRuleContext(Rollback_statementContext.class,0);
		}
		public Savepoint_statementContext savepoint_statement() {
			return getRuleContext(Savepoint_statementContext.class,0);
		}
		public Transaction_control_statementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transaction_control_statements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterTransaction_control_statements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitTransaction_control_statements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitTransaction_control_statements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Transaction_control_statementsContext transaction_control_statements() throws RecognitionException {
		Transaction_control_statementsContext _localctx = new Transaction_control_statementsContext(_ctx, getState());
		enterRule(_localctx, 318, RULE_transaction_control_statements);
		try {
			setState(2922);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,302,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2917);
				set_transaction_command();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2918);
				set_constraint_command();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2919);
				commit_statement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2920);
				rollback_statement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2921);
				savepoint_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_transaction_commandContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(OracleSQLStatementParser.SET, 0); }
		public TerminalNode TRANSACTION() { return getToken(OracleSQLStatementParser.TRANSACTION, 0); }
		public TerminalNode READ() { return getToken(OracleSQLStatementParser.READ, 0); }
		public TerminalNode ISOLATION() { return getToken(OracleSQLStatementParser.ISOLATION, 0); }
		public TerminalNode LEVEL() { return getToken(OracleSQLStatementParser.LEVEL, 0); }
		public TerminalNode USE() { return getToken(OracleSQLStatementParser.USE, 0); }
		public TerminalNode ROLLBACK() { return getToken(OracleSQLStatementParser.ROLLBACK, 0); }
		public TerminalNode SEGMENT() { return getToken(OracleSQLStatementParser.SEGMENT, 0); }
		public Rollback_segment_nameContext rollback_segment_name() {
			return getRuleContext(Rollback_segment_nameContext.class,0);
		}
		public TerminalNode NAME() { return getToken(OracleSQLStatementParser.NAME, 0); }
		public Quoted_stringContext quoted_string() {
			return getRuleContext(Quoted_stringContext.class,0);
		}
		public TerminalNode ONLY() { return getToken(OracleSQLStatementParser.ONLY, 0); }
		public TerminalNode WRITE() { return getToken(OracleSQLStatementParser.WRITE, 0); }
		public TerminalNode SERIALIZABLE() { return getToken(OracleSQLStatementParser.SERIALIZABLE, 0); }
		public TerminalNode COMMITTED() { return getToken(OracleSQLStatementParser.COMMITTED, 0); }
		public Set_transaction_commandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_transaction_command; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterSet_transaction_command(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitSet_transaction_command(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitSet_transaction_command(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_transaction_commandContext set_transaction_command() throws RecognitionException {
		Set_transaction_commandContext _localctx = new Set_transaction_commandContext(_ctx, getState());
		enterRule(_localctx, 320, RULE_set_transaction_command);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2924);
			match(SET);
			setState(2925);
			match(TRANSACTION);
			setState(2939);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case READ:
				{
				setState(2926);
				match(READ);
				setState(2927);
				_la = _input.LA(1);
				if ( !(_la==ONLY || _la==WRITE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case ISOLATION:
				{
				setState(2928);
				match(ISOLATION);
				setState(2929);
				match(LEVEL);
				setState(2933);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case SERIALIZABLE:
					{
					setState(2930);
					match(SERIALIZABLE);
					}
					break;
				case READ:
					{
					setState(2931);
					match(READ);
					setState(2932);
					match(COMMITTED);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case USE:
				{
				setState(2935);
				match(USE);
				setState(2936);
				match(ROLLBACK);
				setState(2937);
				match(SEGMENT);
				setState(2938);
				rollback_segment_name();
				}
				break;
			case EOF:
			case NAME:
			case SAVE:
			case SEMI:
				break;
			default:
				break;
			}
			setState(2943);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NAME) {
				{
				setState(2941);
				match(NAME);
				setState(2942);
				quoted_string();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_constraint_commandContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(OracleSQLStatementParser.SET, 0); }
		public TerminalNode CONSTRAINT() { return getToken(OracleSQLStatementParser.CONSTRAINT, 0); }
		public TerminalNode CONSTRAINTS() { return getToken(OracleSQLStatementParser.CONSTRAINTS, 0); }
		public TerminalNode IMMEDIATE() { return getToken(OracleSQLStatementParser.IMMEDIATE, 0); }
		public TerminalNode DEFERRED() { return getToken(OracleSQLStatementParser.DEFERRED, 0); }
		public TerminalNode ALL() { return getToken(OracleSQLStatementParser.ALL, 0); }
		public List<Constraint_nameContext> constraint_name() {
			return getRuleContexts(Constraint_nameContext.class);
		}
		public Constraint_nameContext constraint_name(int i) {
			return getRuleContext(Constraint_nameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(OracleSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(OracleSQLStatementParser.COMMA, i);
		}
		public Set_constraint_commandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_constraint_command; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterSet_constraint_command(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitSet_constraint_command(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitSet_constraint_command(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_constraint_commandContext set_constraint_command() throws RecognitionException {
		Set_constraint_commandContext _localctx = new Set_constraint_commandContext(_ctx, getState());
		enterRule(_localctx, 322, RULE_set_constraint_command);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2945);
			match(SET);
			setState(2946);
			_la = _input.LA(1);
			if ( !(_la==CONSTRAINT || _la==CONSTRAINTS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2956);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALL:
				{
				setState(2947);
				match(ALL);
				}
				break;
			case ABS:
			case ACOS:
			case ADD:
			case ADD_MONTHS:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASCII:
			case ASCIISTR:
			case ASIN:
			case ASSOCIATE:
			case ATAN2:
			case ATAN:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BFILENAME:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BIN_TO_NUM:
			case BITAND:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CARDINALITY:
			case CASCADE:
			case CASE:
			case CAST:
			case CEIL:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHARTOROWID:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOSE:
			case COMPOUND:
			case CONCAT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COS:
			case COSH:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_DATE:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case DUMP:
			case EACH:
			case ELEMENT:
			case EMPTY_BLOB:
			case EMPTY_CLOB:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXP:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FLOOR:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FROM_TZ:
			case FULL:
			case FUNCTION:
			case GROUP_ID:
			case GROUPING:
			case HASH:
			case HEXTORAW:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INITCAP:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INSTR2:
			case INSTR4:
			case INSTRB:
			case INSTRC:
			case INSTR:
			case INTERFACE:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST_DAY:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LENGTH2:
			case LENGTH4:
			case LENGTHB:
			case LENGTHC:
			case LENGTH:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LN:
			case LNNVL:
			case LOCAL:
			case LOCALTIMESTAMP:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MOD:
			case MONTH:
			case MONTHS_BETWEEN:
			case MULTISET:
			case NAME:
			case NAN:
			case NANVL:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCHR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NEW_TIME:
			case NEXT_DAY:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLIF:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NUMTODSINTERVAL:
			case NUMTOYMINTERVAL:
			case NVARCHAR2:
			case NVL2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPAQUE:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case POWER:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case PROCEDURE:
			case RAISE:
			case RANGE:
			case RAW:
			case RAWTOHEX:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_REPLACE:
			case REGEXP_SUBSTR:
			case REJECT:
			case RELIES_ON:
			case REMAINDER:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROWNUM:
			case ROW:
			case ROWS:
			case RPAD:
			case RTRIM:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGN:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SINH:
			case SIN:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SOUNDEX:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case SQRT:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYS_CONTEXT:
			case SYSDATE:
			case SYSTIMESTAMP:
			case TANH:
			case TAN:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TO_CLOB:
			case TO_DSINTERVAL:
			case TO_LOB:
			case TO_MULTI_BYTE:
			case TO_NCLOB:
			case TO_NUMBER:
			case TO_SINGLE_BYTE:
			case TO_TIMESTAMP:
			case TO_TIMESTAMP_TZ:
			case TO_YMINTERVAL:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TRUNC:
			case TYPE:
			case TZ_OFFSET:
			case UID:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPPER:
			case UPSERT:
			case UROWID:
			case USERENV:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case VSIZE:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case DECODE:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case NVL:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROUND:
			case ROW_NUMBER:
			case SUBSTR:
			case TO_CHAR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case LEAST:
			case GREATEST:
			case TO_DATE:
			case DELIMITED_ID:
			case ASTERISK:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(2948);
				constraint_name();
				setState(2953);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2949);
					match(COMMA);
					setState(2950);
					constraint_name();
					}
					}
					setState(2955);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2958);
			_la = _input.LA(1);
			if ( !(_la==DEFERRED || _la==IMMEDIATE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Commit_statementContext extends ParserRuleContext {
		public TerminalNode COMMIT() { return getToken(OracleSQLStatementParser.COMMIT, 0); }
		public TerminalNode WORK() { return getToken(OracleSQLStatementParser.WORK, 0); }
		public TerminalNode FORCE() { return getToken(OracleSQLStatementParser.FORCE, 0); }
		public Quoted_stringContext quoted_string() {
			return getRuleContext(Quoted_stringContext.class,0);
		}
		public TerminalNode WRITE() { return getToken(OracleSQLStatementParser.WRITE, 0); }
		public TerminalNode WAIT() { return getToken(OracleSQLStatementParser.WAIT, 0); }
		public TerminalNode NOWAIT() { return getToken(OracleSQLStatementParser.NOWAIT, 0); }
		public TerminalNode IMMEDIATE() { return getToken(OracleSQLStatementParser.IMMEDIATE, 0); }
		public TerminalNode BATCH() { return getToken(OracleSQLStatementParser.BATCH, 0); }
		public Commit_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_commit_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterCommit_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitCommit_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitCommit_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Commit_statementContext commit_statement() throws RecognitionException {
		Commit_statementContext _localctx = new Commit_statementContext(_ctx, getState());
		enterRule(_localctx, 324, RULE_commit_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2960);
			match(COMMIT);
			setState(2962);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WORK) {
				{
				setState(2961);
				match(WORK);
				}
			}

			setState(2966);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FORCE) {
				{
				setState(2964);
				match(FORCE);
				setState(2965);
				quoted_string();
				}
			}

			setState(2975);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WRITE) {
				{
				setState(2968);
				match(WRITE);
				setState(2970);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOWAIT || _la==WAIT) {
					{
					setState(2969);
					_la = _input.LA(1);
					if ( !(_la==NOWAIT || _la==WAIT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(2973);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BATCH || _la==IMMEDIATE) {
					{
					setState(2972);
					_la = _input.LA(1);
					if ( !(_la==BATCH || _la==IMMEDIATE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rollback_statementContext extends ParserRuleContext {
		public TerminalNode ROLLBACK() { return getToken(OracleSQLStatementParser.ROLLBACK, 0); }
		public TerminalNode WORK() { return getToken(OracleSQLStatementParser.WORK, 0); }
		public TerminalNode TO() { return getToken(OracleSQLStatementParser.TO, 0); }
		public Savepoint_nameContext savepoint_name() {
			return getRuleContext(Savepoint_nameContext.class,0);
		}
		public TerminalNode FORCE() { return getToken(OracleSQLStatementParser.FORCE, 0); }
		public Quoted_stringContext quoted_string() {
			return getRuleContext(Quoted_stringContext.class,0);
		}
		public TerminalNode SAVEPOINT() { return getToken(OracleSQLStatementParser.SAVEPOINT, 0); }
		public Rollback_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rollback_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterRollback_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitRollback_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitRollback_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Rollback_statementContext rollback_statement() throws RecognitionException {
		Rollback_statementContext _localctx = new Rollback_statementContext(_ctx, getState());
		enterRule(_localctx, 326, RULE_rollback_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2977);
			match(ROLLBACK);
			setState(2979);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WORK) {
				{
				setState(2978);
				match(WORK);
				}
			}

			setState(2988);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TO:
				{
				setState(2981);
				match(TO);
				setState(2983);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,314,_ctx) ) {
				case 1:
					{
					setState(2982);
					match(SAVEPOINT);
					}
					break;
				}
				setState(2985);
				savepoint_name();
				}
				break;
			case FORCE:
				{
				setState(2986);
				match(FORCE);
				setState(2987);
				quoted_string();
				}
				break;
			case EOF:
			case SAVE:
			case SEMI:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Savepoint_statementContext extends ParserRuleContext {
		public TerminalNode SAVEPOINT() { return getToken(OracleSQLStatementParser.SAVEPOINT, 0); }
		public Savepoint_nameContext savepoint_name() {
			return getRuleContext(Savepoint_nameContext.class,0);
		}
		public Savepoint_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_savepoint_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterSavepoint_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitSavepoint_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitSavepoint_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Savepoint_statementContext savepoint_statement() throws RecognitionException {
		Savepoint_statementContext _localctx = new Savepoint_statementContext(_ctx, getState());
		enterRule(_localctx, 328, RULE_savepoint_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2990);
			match(SAVEPOINT);
			setState(2991);
			savepoint_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Explain_statementContext extends ParserRuleContext {
		public TerminalNode EXPLAIN() { return getToken(OracleSQLStatementParser.EXPLAIN, 0); }
		public TerminalNode PLAN() { return getToken(OracleSQLStatementParser.PLAN, 0); }
		public TerminalNode FOR() { return getToken(OracleSQLStatementParser.FOR, 0); }
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public Update_statementContext update_statement() {
			return getRuleContext(Update_statementContext.class,0);
		}
		public Delete_statementContext delete_statement() {
			return getRuleContext(Delete_statementContext.class,0);
		}
		public Insert_statementContext insert_statement() {
			return getRuleContext(Insert_statementContext.class,0);
		}
		public Merge_statementContext merge_statement() {
			return getRuleContext(Merge_statementContext.class,0);
		}
		public TerminalNode SET() { return getToken(OracleSQLStatementParser.SET, 0); }
		public TerminalNode STATEMENT_ID() { return getToken(OracleSQLStatementParser.STATEMENT_ID, 0); }
		public Quoted_stringContext quoted_string() {
			return getRuleContext(Quoted_stringContext.class,0);
		}
		public TerminalNode INTO() { return getToken(OracleSQLStatementParser.INTO, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public Explain_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explain_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterExplain_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitExplain_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitExplain_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Explain_statementContext explain_statement() throws RecognitionException {
		Explain_statementContext _localctx = new Explain_statementContext(_ctx, getState());
		enterRule(_localctx, 330, RULE_explain_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2993);
			match(EXPLAIN);
			setState(2994);
			match(PLAN);
			setState(2999);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SET) {
				{
				setState(2995);
				match(SET);
				setState(2996);
				match(STATEMENT_ID);
				setState(2997);
				match(EQUALS_OP);
				setState(2998);
				quoted_string();
				}
			}

			setState(3003);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTO) {
				{
				setState(3001);
				match(INTO);
				setState(3002);
				tableview_name();
				}
			}

			setState(3005);
			match(FOR);
			setState(3011);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SELECT:
			case WITH:
			case LEFT_PAREN:
				{
				setState(3006);
				select_statement();
				}
				break;
			case UPDATE:
				{
				setState(3007);
				update_statement();
				}
				break;
			case DELETE:
				{
				setState(3008);
				delete_statement();
				}
				break;
			case INSERT:
				{
				setState(3009);
				insert_statement();
				}
				break;
			case MERGE:
				{
				setState(3010);
				merge_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_statementContext extends ParserRuleContext {
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public Subquery_factoring_clauseContext subquery_factoring_clause() {
			return getRuleContext(Subquery_factoring_clauseContext.class,0);
		}
		public List<For_update_clauseContext> for_update_clause() {
			return getRuleContexts(For_update_clauseContext.class);
		}
		public For_update_clauseContext for_update_clause(int i) {
			return getRuleContext(For_update_clauseContext.class,i);
		}
		public List<Order_by_clauseContext> order_by_clause() {
			return getRuleContexts(Order_by_clauseContext.class);
		}
		public Order_by_clauseContext order_by_clause(int i) {
			return getRuleContext(Order_by_clauseContext.class,i);
		}
		public Select_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterSelect_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitSelect_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitSelect_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Select_statementContext select_statement() throws RecognitionException {
		Select_statementContext _localctx = new Select_statementContext(_ctx, getState());
		enterRule(_localctx, 332, RULE_select_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3014);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(3013);
				subquery_factoring_clause();
				}
			}

			setState(3016);
			subquery();
			setState(3021);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==FOR || _la==ORDER) {
				{
				setState(3019);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case FOR:
					{
					setState(3017);
					for_update_clause();
					}
					break;
				case ORDER:
					{
					setState(3018);
					order_by_clause();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(3023);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Subquery_factoring_clauseContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(OracleSQLStatementParser.WITH, 0); }
		public List<Factoring_elementContext> factoring_element() {
			return getRuleContexts(Factoring_elementContext.class);
		}
		public Factoring_elementContext factoring_element(int i) {
			return getRuleContext(Factoring_elementContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(OracleSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(OracleSQLStatementParser.COMMA, i);
		}
		public Subquery_factoring_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subquery_factoring_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterSubquery_factoring_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitSubquery_factoring_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitSubquery_factoring_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Subquery_factoring_clauseContext subquery_factoring_clause() throws RecognitionException {
		Subquery_factoring_clauseContext _localctx = new Subquery_factoring_clauseContext(_ctx, getState());
		enterRule(_localctx, 334, RULE_subquery_factoring_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3024);
			match(WITH);
			setState(3025);
			factoring_element();
			setState(3030);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3026);
				match(COMMA);
				setState(3027);
				factoring_element();
				}
				}
				setState(3032);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Factoring_elementContext extends ParserRuleContext {
		public Query_nameContext query_name() {
			return getRuleContext(Query_nameContext.class,0);
		}
		public TerminalNode AS() { return getToken(OracleSQLStatementParser.AS, 0); }
		public List<TerminalNode> LEFT_PAREN() { return getTokens(OracleSQLStatementParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(OracleSQLStatementParser.LEFT_PAREN, i);
		}
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(OracleSQLStatementParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(OracleSQLStatementParser.RIGHT_PAREN, i);
		}
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public Search_clauseContext search_clause() {
			return getRuleContext(Search_clauseContext.class,0);
		}
		public Cycle_clauseContext cycle_clause() {
			return getRuleContext(Cycle_clauseContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(OracleSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(OracleSQLStatementParser.COMMA, i);
		}
		public Factoring_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_factoring_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterFactoring_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitFactoring_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitFactoring_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Factoring_elementContext factoring_element() throws RecognitionException {
		Factoring_elementContext _localctx = new Factoring_elementContext(_ctx, getState());
		enterRule(_localctx, 336, RULE_factoring_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3033);
			query_name();
			setState(3045);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(3034);
				match(LEFT_PAREN);
				setState(3035);
				column_name();
				setState(3040);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3036);
					match(COMMA);
					setState(3037);
					column_name();
					}
					}
					setState(3042);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3043);
				match(RIGHT_PAREN);
				}
			}

			setState(3047);
			match(AS);
			setState(3048);
			match(LEFT_PAREN);
			setState(3049);
			subquery();
			setState(3051);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(3050);
				order_by_clause();
				}
			}

			setState(3053);
			match(RIGHT_PAREN);
			setState(3055);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SEARCH) {
				{
				setState(3054);
				search_clause();
				}
			}

			setState(3058);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CYCLE) {
				{
				setState(3057);
				cycle_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Search_clauseContext extends ParserRuleContext {
		public TerminalNode SEARCH() { return getToken(OracleSQLStatementParser.SEARCH, 0); }
		public List<TerminalNode> FIRST() { return getTokens(OracleSQLStatementParser.FIRST); }
		public TerminalNode FIRST(int i) {
			return getToken(OracleSQLStatementParser.FIRST, i);
		}
		public TerminalNode BY() { return getToken(OracleSQLStatementParser.BY, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public TerminalNode SET() { return getToken(OracleSQLStatementParser.SET, 0); }
		public TerminalNode DEPTH() { return getToken(OracleSQLStatementParser.DEPTH, 0); }
		public TerminalNode BREADTH() { return getToken(OracleSQLStatementParser.BREADTH, 0); }
		public List<TerminalNode> ASC() { return getTokens(OracleSQLStatementParser.ASC); }
		public TerminalNode ASC(int i) {
			return getToken(OracleSQLStatementParser.ASC, i);
		}
		public List<TerminalNode> DESC() { return getTokens(OracleSQLStatementParser.DESC); }
		public TerminalNode DESC(int i) {
			return getToken(OracleSQLStatementParser.DESC, i);
		}
		public List<TerminalNode> NULLS() { return getTokens(OracleSQLStatementParser.NULLS); }
		public TerminalNode NULLS(int i) {
			return getToken(OracleSQLStatementParser.NULLS, i);
		}
		public List<TerminalNode> LAST() { return getTokens(OracleSQLStatementParser.LAST); }
		public TerminalNode LAST(int i) {
			return getToken(OracleSQLStatementParser.LAST, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(OracleSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(OracleSQLStatementParser.COMMA, i);
		}
		public Search_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_search_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterSearch_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitSearch_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitSearch_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Search_clauseContext search_clause() throws RecognitionException {
		Search_clauseContext _localctx = new Search_clauseContext(_ctx, getState());
		enterRule(_localctx, 338, RULE_search_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3060);
			match(SEARCH);
			setState(3061);
			_la = _input.LA(1);
			if ( !(_la==BREADTH || _la==DEPTH) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3062);
			match(FIRST);
			setState(3063);
			match(BY);
			setState(3064);
			column_name();
			setState(3066);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ASC) {
				{
				setState(3065);
				match(ASC);
				}
			}

			setState(3069);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DESC) {
				{
				setState(3068);
				match(DESC);
				}
			}

			setState(3073);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,330,_ctx) ) {
			case 1:
				{
				setState(3071);
				match(NULLS);
				setState(3072);
				match(FIRST);
				}
				break;
			}
			setState(3077);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NULLS) {
				{
				setState(3075);
				match(NULLS);
				setState(3076);
				match(LAST);
				}
			}

			setState(3097);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3079);
				match(COMMA);
				setState(3080);
				column_name();
				setState(3082);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ASC) {
					{
					setState(3081);
					match(ASC);
					}
				}

				setState(3085);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DESC) {
					{
					setState(3084);
					match(DESC);
					}
				}

				setState(3089);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,334,_ctx) ) {
				case 1:
					{
					setState(3087);
					match(NULLS);
					setState(3088);
					match(FIRST);
					}
					break;
				}
				setState(3093);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NULLS) {
					{
					setState(3091);
					match(NULLS);
					setState(3092);
					match(LAST);
					}
				}

				}
				}
				setState(3099);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3100);
			match(SET);
			setState(3101);
			column_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cycle_clauseContext extends ParserRuleContext {
		public TerminalNode CYCLE() { return getToken(OracleSQLStatementParser.CYCLE, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public TerminalNode SET() { return getToken(OracleSQLStatementParser.SET, 0); }
		public TerminalNode TO() { return getToken(OracleSQLStatementParser.TO, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode DEFAULT() { return getToken(OracleSQLStatementParser.DEFAULT, 0); }
		public List<TerminalNode> COMMA() { return getTokens(OracleSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(OracleSQLStatementParser.COMMA, i);
		}
		public Cycle_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cycle_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterCycle_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitCycle_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitCycle_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cycle_clauseContext cycle_clause() throws RecognitionException {
		Cycle_clauseContext _localctx = new Cycle_clauseContext(_ctx, getState());
		enterRule(_localctx, 340, RULE_cycle_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3103);
			match(CYCLE);
			setState(3104);
			column_name();
			setState(3109);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3105);
				match(COMMA);
				setState(3106);
				column_name();
				}
				}
				setState(3111);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3112);
			match(SET);
			setState(3113);
			column_name();
			setState(3114);
			match(TO);
			setState(3115);
			expression();
			setState(3116);
			match(DEFAULT);
			setState(3117);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SubqueryContext extends ParserRuleContext {
		public Subquery_basic_elementsContext subquery_basic_elements() {
			return getRuleContext(Subquery_basic_elementsContext.class,0);
		}
		public List<Subquery_operation_partContext> subquery_operation_part() {
			return getRuleContexts(Subquery_operation_partContext.class);
		}
		public Subquery_operation_partContext subquery_operation_part(int i) {
			return getRuleContext(Subquery_operation_partContext.class,i);
		}
		public SubqueryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subquery; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterSubquery(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitSubquery(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitSubquery(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SubqueryContext subquery() throws RecognitionException {
		SubqueryContext _localctx = new SubqueryContext(_ctx, getState());
		enterRule(_localctx, 342, RULE_subquery);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3119);
			subquery_basic_elements();
			setState(3123);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==INTERSECT || _la==MINUS || _la==UNION) {
				{
				{
				setState(3120);
				subquery_operation_part();
				}
				}
				setState(3125);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Subquery_operation_partContext extends ParserRuleContext {
		public Subquery_basic_elementsContext subquery_basic_elements() {
			return getRuleContext(Subquery_basic_elementsContext.class,0);
		}
		public TerminalNode UNION() { return getToken(OracleSQLStatementParser.UNION, 0); }
		public TerminalNode INTERSECT() { return getToken(OracleSQLStatementParser.INTERSECT, 0); }
		public TerminalNode MINUS() { return getToken(OracleSQLStatementParser.MINUS, 0); }
		public TerminalNode ALL() { return getToken(OracleSQLStatementParser.ALL, 0); }
		public Subquery_operation_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subquery_operation_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterSubquery_operation_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitSubquery_operation_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitSubquery_operation_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Subquery_operation_partContext subquery_operation_part() throws RecognitionException {
		Subquery_operation_partContext _localctx = new Subquery_operation_partContext(_ctx, getState());
		enterRule(_localctx, 344, RULE_subquery_operation_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3132);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UNION:
				{
				setState(3126);
				match(UNION);
				setState(3128);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALL) {
					{
					setState(3127);
					match(ALL);
					}
				}

				}
				break;
			case INTERSECT:
				{
				setState(3130);
				match(INTERSECT);
				}
				break;
			case MINUS:
				{
				setState(3131);
				match(MINUS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3134);
			subquery_basic_elements();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Subquery_basic_elementsContext extends ParserRuleContext {
		public Query_blockContext query_block() {
			return getRuleContext(Query_blockContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(OracleSQLStatementParser.LEFT_PAREN, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(OracleSQLStatementParser.RIGHT_PAREN, 0); }
		public Subquery_basic_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subquery_basic_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterSubquery_basic_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitSubquery_basic_elements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitSubquery_basic_elements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Subquery_basic_elementsContext subquery_basic_elements() throws RecognitionException {
		Subquery_basic_elementsContext _localctx = new Subquery_basic_elementsContext(_ctx, getState());
		enterRule(_localctx, 346, RULE_subquery_basic_elements);
		try {
			setState(3141);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SELECT:
				enterOuterAlt(_localctx, 1);
				{
				setState(3136);
				query_block();
				}
				break;
			case LEFT_PAREN:
				enterOuterAlt(_localctx, 2);
				{
				setState(3137);
				match(LEFT_PAREN);
				setState(3138);
				subquery();
				setState(3139);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Query_blockContext extends ParserRuleContext {
		public TerminalNode SELECT() { return getToken(OracleSQLStatementParser.SELECT, 0); }
		public From_clauseContext from_clause() {
			return getRuleContext(From_clauseContext.class,0);
		}
		public TerminalNode ASTERISK() { return getToken(OracleSQLStatementParser.ASTERISK, 0); }
		public List<Selected_elementContext> selected_element() {
			return getRuleContexts(Selected_elementContext.class);
		}
		public Selected_elementContext selected_element(int i) {
			return getRuleContext(Selected_elementContext.class,i);
		}
		public Into_clauseContext into_clause() {
			return getRuleContext(Into_clauseContext.class,0);
		}
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public Hierarchical_query_clauseContext hierarchical_query_clause() {
			return getRuleContext(Hierarchical_query_clauseContext.class,0);
		}
		public Group_by_clauseContext group_by_clause() {
			return getRuleContext(Group_by_clauseContext.class,0);
		}
		public Model_clauseContext model_clause() {
			return getRuleContext(Model_clauseContext.class,0);
		}
		public TerminalNode DISTINCT() { return getToken(OracleSQLStatementParser.DISTINCT, 0); }
		public TerminalNode UNIQUE() { return getToken(OracleSQLStatementParser.UNIQUE, 0); }
		public TerminalNode ALL() { return getToken(OracleSQLStatementParser.ALL, 0); }
		public List<TerminalNode> COMMA() { return getTokens(OracleSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(OracleSQLStatementParser.COMMA, i);
		}
		public Query_blockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_query_block; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterQuery_block(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitQuery_block(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitQuery_block(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Query_blockContext query_block() throws RecognitionException {
		Query_blockContext _localctx = new Query_blockContext(_ctx, getState());
		enterRule(_localctx, 348, RULE_query_block);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3143);
			match(SELECT);
			setState(3145);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,342,_ctx) ) {
			case 1:
				{
				setState(3144);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==DISTINCT || _la==UNIQUE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(3156);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,344,_ctx) ) {
			case 1:
				{
				setState(3147);
				match(ASTERISK);
				}
				break;
			case 2:
				{
				setState(3148);
				selected_element();
				setState(3153);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3149);
					match(COMMA);
					setState(3150);
					selected_element();
					}
					}
					setState(3155);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			setState(3159);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==BULK || _la==INTO) {
				{
				setState(3158);
				into_clause();
				}
			}

			setState(3161);
			from_clause();
			setState(3163);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,346,_ctx) ) {
			case 1:
				{
				setState(3162);
				where_clause();
				}
				break;
			}
			setState(3166);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,347,_ctx) ) {
			case 1:
				{
				setState(3165);
				hierarchical_query_clause();
				}
				break;
			}
			setState(3169);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,348,_ctx) ) {
			case 1:
				{
				setState(3168);
				group_by_clause();
				}
				break;
			}
			setState(3172);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,349,_ctx) ) {
			case 1:
				{
				setState(3171);
				model_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Selected_elementContext extends ParserRuleContext {
		public Select_list_elementsContext select_list_elements() {
			return getRuleContext(Select_list_elementsContext.class,0);
		}
		public Column_aliasContext column_alias() {
			return getRuleContext(Column_aliasContext.class,0);
		}
		public Selected_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selected_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterSelected_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitSelected_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitSelected_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Selected_elementContext selected_element() throws RecognitionException {
		Selected_elementContext _localctx = new Selected_elementContext(_ctx, getState());
		enterRule(_localctx, 350, RULE_selected_element);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3174);
			select_list_elements();
			setState(3176);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,350,_ctx) ) {
			case 1:
				{
				setState(3175);
				column_alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class From_clauseContext extends ParserRuleContext {
		public TerminalNode FROM() { return getToken(OracleSQLStatementParser.FROM, 0); }
		public Table_ref_listContext table_ref_list() {
			return getRuleContext(Table_ref_listContext.class,0);
		}
		public From_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_from_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterFrom_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitFrom_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitFrom_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final From_clauseContext from_clause() throws RecognitionException {
		From_clauseContext _localctx = new From_clauseContext(_ctx, getState());
		enterRule(_localctx, 352, RULE_from_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3178);
			match(FROM);
			setState(3179);
			table_ref_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_list_elementsContext extends ParserRuleContext {
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Select_list_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_list_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterSelect_list_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitSelect_list_elements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitSelect_list_elements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Select_list_elementsContext select_list_elements() throws RecognitionException {
		Select_list_elementsContext _localctx = new Select_list_elementsContext(_ctx, getState());
		enterRule(_localctx, 354, RULE_select_list_elements);
		try {
			setState(3186);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,351,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3181);
				tableview_name();
				setState(3182);
				match(PERIOD);
				setState(3183);
				match(ASTERISK);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3185);
				expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_ref_listContext extends ParserRuleContext {
		public List<Table_refContext> table_ref() {
			return getRuleContexts(Table_refContext.class);
		}
		public Table_refContext table_ref(int i) {
			return getRuleContext(Table_refContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(OracleSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(OracleSQLStatementParser.COMMA, i);
		}
		public Table_ref_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_ref_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterTable_ref_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitTable_ref_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitTable_ref_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_ref_listContext table_ref_list() throws RecognitionException {
		Table_ref_listContext _localctx = new Table_ref_listContext(_ctx, getState());
		enterRule(_localctx, 356, RULE_table_ref_list);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3188);
			table_ref();
			setState(3193);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,352,_ctx);
			while ( _alt!=2 && _alt!= ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3189);
					match(COMMA);
					setState(3190);
					table_ref();
					}
					} 
				}
				setState(3195);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,352,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_refContext extends ParserRuleContext {
		public Table_ref_auxContext table_ref_aux() {
			return getRuleContext(Table_ref_auxContext.class,0);
		}
		public List<Join_clauseContext> join_clause() {
			return getRuleContexts(Join_clauseContext.class);
		}
		public Join_clauseContext join_clause(int i) {
			return getRuleContext(Join_clauseContext.class,i);
		}
		public Pivot_clauseContext pivot_clause() {
			return getRuleContext(Pivot_clauseContext.class,0);
		}
		public Unpivot_clauseContext unpivot_clause() {
			return getRuleContext(Unpivot_clauseContext.class,0);
		}
		public Table_refContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_ref; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterTable_ref(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitTable_ref(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitTable_ref(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_refContext table_ref() throws RecognitionException {
		Table_refContext _localctx = new Table_refContext(_ctx, getState());
		enterRule(_localctx, 358, RULE_table_ref);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3196);
			table_ref_aux();
			setState(3200);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,353,_ctx);
			while ( _alt!=2 && _alt!= ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3197);
					join_clause();
					}
					} 
				}
				setState(3202);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,353,_ctx);
			}
			setState(3205);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,354,_ctx) ) {
			case 1:
				{
				setState(3203);
				pivot_clause();
				}
				break;
			case 2:
				{
				setState(3204);
				unpivot_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_ref_auxContext extends ParserRuleContext {
		public Table_ref_aux_internalContext table_ref_aux_internal() {
			return getRuleContext(Table_ref_aux_internalContext.class,0);
		}
		public List<Flashback_query_clauseContext> flashback_query_clause() {
			return getRuleContexts(Flashback_query_clauseContext.class);
		}
		public Flashback_query_clauseContext flashback_query_clause(int i) {
			return getRuleContext(Flashback_query_clauseContext.class,i);
		}
		public Table_aliasContext table_alias() {
			return getRuleContext(Table_aliasContext.class,0);
		}
		public Table_ref_auxContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_ref_aux; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterTable_ref_aux(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitTable_ref_aux(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitTable_ref_aux(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_ref_auxContext table_ref_aux() throws RecognitionException {
		Table_ref_auxContext _localctx = new Table_ref_auxContext(_ctx, getState());
		enterRule(_localctx, 360, RULE_table_ref_aux);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3207);
			table_ref_aux_internal();
			setState(3211);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,355,_ctx);
			while ( _alt!=2 && _alt!= ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3208);
					flashback_query_clause();
					}
					} 
				}
				setState(3213);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,355,_ctx);
			}
			setState(3215);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,356,_ctx) ) {
			case 1:
				{
				setState(3214);
				table_alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_ref_aux_internalContext extends ParserRuleContext {
		public Table_ref_aux_internalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_ref_aux_internal; }
	 
		public Table_ref_aux_internalContext() { }
		public void copyFrom(Table_ref_aux_internalContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class Table_ref_aux_internal_threeContext extends Table_ref_aux_internalContext {
		public TerminalNode ONLY() { return getToken(OracleSQLStatementParser.ONLY, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(OracleSQLStatementParser.LEFT_PAREN, 0); }
		public Dml_table_expression_clauseContext dml_table_expression_clause() {
			return getRuleContext(Dml_table_expression_clauseContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(OracleSQLStatementParser.RIGHT_PAREN, 0); }
		public Table_ref_aux_internal_threeContext(Table_ref_aux_internalContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterTable_ref_aux_internal_three(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitTable_ref_aux_internal_three(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitTable_ref_aux_internal_three(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class Table_ref_aux_internal_oneContext extends Table_ref_aux_internalContext {
		public Dml_table_expression_clauseContext dml_table_expression_clause() {
			return getRuleContext(Dml_table_expression_clauseContext.class,0);
		}
		public Pivot_clauseContext pivot_clause() {
			return getRuleContext(Pivot_clauseContext.class,0);
		}
		public Unpivot_clauseContext unpivot_clause() {
			return getRuleContext(Unpivot_clauseContext.class,0);
		}
		public Table_ref_aux_internal_oneContext(Table_ref_aux_internalContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterTable_ref_aux_internal_one(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitTable_ref_aux_internal_one(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitTable_ref_aux_internal_one(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class Table_ref_aux_internal_twoContext extends Table_ref_aux_internalContext {
		public TerminalNode LEFT_PAREN() { return getToken(OracleSQLStatementParser.LEFT_PAREN, 0); }
		public Table_refContext table_ref() {
			return getRuleContext(Table_refContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(OracleSQLStatementParser.RIGHT_PAREN, 0); }
		public List<Subquery_operation_partContext> subquery_operation_part() {
			return getRuleContexts(Subquery_operation_partContext.class);
		}
		public Subquery_operation_partContext subquery_operation_part(int i) {
			return getRuleContext(Subquery_operation_partContext.class,i);
		}
		public Pivot_clauseContext pivot_clause() {
			return getRuleContext(Pivot_clauseContext.class,0);
		}
		public Unpivot_clauseContext unpivot_clause() {
			return getRuleContext(Unpivot_clauseContext.class,0);
		}
		public Table_ref_aux_internal_twoContext(Table_ref_aux_internalContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterTable_ref_aux_internal_two(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitTable_ref_aux_internal_two(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitTable_ref_aux_internal_two(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_ref_aux_internalContext table_ref_aux_internal() throws RecognitionException {
		Table_ref_aux_internalContext _localctx = new Table_ref_aux_internalContext(_ctx, getState());
		enterRule(_localctx, 362, RULE_table_ref_aux_internal);
		int _la;
		try {
			setState(3240);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,360,_ctx) ) {
			case 1:
				_localctx = new Table_ref_aux_internal_oneContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3217);
				dml_table_expression_clause();
				setState(3220);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,357,_ctx) ) {
				case 1:
					{
					setState(3218);
					pivot_clause();
					}
					break;
				case 2:
					{
					setState(3219);
					unpivot_clause();
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new Table_ref_aux_internal_twoContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3222);
				match(LEFT_PAREN);
				setState(3223);
				table_ref();
				setState(3227);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==INTERSECT || _la==MINUS || _la==UNION) {
					{
					{
					setState(3224);
					subquery_operation_part();
					}
					}
					setState(3229);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3230);
				match(RIGHT_PAREN);
				setState(3233);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,359,_ctx) ) {
				case 1:
					{
					setState(3231);
					pivot_clause();
					}
					break;
				case 2:
					{
					setState(3232);
					unpivot_clause();
					}
					break;
				}
				}
				break;
			case 3:
				_localctx = new Table_ref_aux_internal_threeContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(3235);
				match(ONLY);
				setState(3236);
				match(LEFT_PAREN);
				setState(3237);
				dml_table_expression_clause();
				setState(3238);
				match(RIGHT_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Join_clauseContext extends ParserRuleContext {
		public TerminalNode JOIN() { return getToken(OracleSQLStatementParser.JOIN, 0); }
		public Table_ref_auxContext table_ref_aux() {
			return getRuleContext(Table_ref_auxContext.class,0);
		}
		public List<Query_partition_clauseContext> query_partition_clause() {
			return getRuleContexts(Query_partition_clauseContext.class);
		}
		public Query_partition_clauseContext query_partition_clause(int i) {
			return getRuleContext(Query_partition_clauseContext.class,i);
		}
		public TerminalNode INNER() { return getToken(OracleSQLStatementParser.INNER, 0); }
		public Outer_join_typeContext outer_join_type() {
			return getRuleContext(Outer_join_typeContext.class,0);
		}
		public List<Join_on_partContext> join_on_part() {
			return getRuleContexts(Join_on_partContext.class);
		}
		public Join_on_partContext join_on_part(int i) {
			return getRuleContext(Join_on_partContext.class,i);
		}
		public List<Join_using_partContext> join_using_part() {
			return getRuleContexts(Join_using_partContext.class);
		}
		public Join_using_partContext join_using_part(int i) {
			return getRuleContext(Join_using_partContext.class,i);
		}
		public TerminalNode CROSS() { return getToken(OracleSQLStatementParser.CROSS, 0); }
		public TerminalNode NATURAL() { return getToken(OracleSQLStatementParser.NATURAL, 0); }
		public Join_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_join_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterJoin_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitJoin_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitJoin_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Join_clauseContext join_clause() throws RecognitionException {
		Join_clauseContext _localctx = new Join_clauseContext(_ctx, getState());
		enterRule(_localctx, 364, RULE_join_clause);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3243);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(3242);
				query_partition_clause();
				}
			}

			setState(3246);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CROSS || _la==NATURAL) {
				{
				setState(3245);
				_la = _input.LA(1);
				if ( !(_la==CROSS || _la==NATURAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3250);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INNER:
				{
				setState(3248);
				match(INNER);
				}
				break;
			case FULL:
			case LEFT:
			case RIGHT:
				{
				setState(3249);
				outer_join_type();
				}
				break;
			case JOIN:
				break;
			default:
				break;
			}
			setState(3252);
			match(JOIN);
			setState(3253);
			table_ref_aux();
			setState(3255);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,364,_ctx) ) {
			case 1:
				{
				setState(3254);
				query_partition_clause();
				}
				break;
			}
			setState(3261);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,366,_ctx);
			while ( _alt!=2 && _alt!= ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					setState(3259);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case ON:
						{
						setState(3257);
						join_on_part();
						}
						break;
					case USING:
						{
						setState(3258);
						join_using_part();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				setState(3263);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,366,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Join_on_partContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(OracleSQLStatementParser.ON, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public Join_on_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_join_on_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterJoin_on_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitJoin_on_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitJoin_on_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Join_on_partContext join_on_part() throws RecognitionException {
		Join_on_partContext _localctx = new Join_on_partContext(_ctx, getState());
		enterRule(_localctx, 366, RULE_join_on_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3264);
			match(ON);
			setState(3265);
			condition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Join_using_partContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(OracleSQLStatementParser.USING, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(OracleSQLStatementParser.LEFT_PAREN, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(OracleSQLStatementParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(OracleSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(OracleSQLStatementParser.COMMA, i);
		}
		public Join_using_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_join_using_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterJoin_using_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitJoin_using_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitJoin_using_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Join_using_partContext join_using_part() throws RecognitionException {
		Join_using_partContext _localctx = new Join_using_partContext(_ctx, getState());
		enterRule(_localctx, 368, RULE_join_using_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3267);
			match(USING);
			setState(3268);
			match(LEFT_PAREN);
			setState(3269);
			column_name();
			setState(3274);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3270);
				match(COMMA);
				setState(3271);
				column_name();
				}
				}
				setState(3276);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3277);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Outer_join_typeContext extends ParserRuleContext {
		public TerminalNode FULL() { return getToken(OracleSQLStatementParser.FULL, 0); }
		public TerminalNode LEFT() { return getToken(OracleSQLStatementParser.LEFT, 0); }
		public TerminalNode RIGHT() { return getToken(OracleSQLStatementParser.RIGHT, 0); }
		public TerminalNode OUTER() { return getToken(OracleSQLStatementParser.OUTER, 0); }
		public Outer_join_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_outer_join_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterOuter_join_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitOuter_join_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitOuter_join_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Outer_join_typeContext outer_join_type() throws RecognitionException {
		Outer_join_typeContext _localctx = new Outer_join_typeContext(_ctx, getState());
		enterRule(_localctx, 370, RULE_outer_join_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3279);
			_la = _input.LA(1);
			if ( !(_la==FULL || _la==LEFT || _la==RIGHT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3281);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OUTER) {
				{
				setState(3280);
				match(OUTER);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Query_partition_clauseContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(OracleSQLStatementParser.PARTITION, 0); }
		public TerminalNode BY() { return getToken(OracleSQLStatementParser.BY, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(OracleSQLStatementParser.LEFT_PAREN, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(OracleSQLStatementParser.RIGHT_PAREN, 0); }
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(OracleSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(OracleSQLStatementParser.COMMA, i);
		}
		public Query_partition_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_query_partition_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterQuery_partition_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitQuery_partition_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitQuery_partition_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Query_partition_clauseContext query_partition_clause() throws RecognitionException {
		Query_partition_clauseContext _localctx = new Query_partition_clauseContext(_ctx, getState());
		enterRule(_localctx, 372, RULE_query_partition_clause);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3283);
			match(PARTITION);
			setState(3284);
			match(BY);
			setState(3298);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,370,_ctx) ) {
			case 1:
				{
				setState(3285);
				match(LEFT_PAREN);
				setState(3286);
				subquery();
				setState(3287);
				match(RIGHT_PAREN);
				}
				break;
			case 2:
				{
				setState(3289);
				expression_list();
				}
				break;
			case 3:
				{
				setState(3290);
				expression();
				setState(3295);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,369,_ctx);
				while ( _alt!=2 && _alt!= ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(3291);
						match(COMMA);
						setState(3292);
						expression();
						}
						} 
					}
					setState(3297);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,369,_ctx);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Flashback_query_clauseContext extends ParserRuleContext {
		public TerminalNode VERSIONS() { return getToken(OracleSQLStatementParser.VERSIONS, 0); }
		public TerminalNode BETWEEN() { return getToken(OracleSQLStatementParser.BETWEEN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode SCN() { return getToken(OracleSQLStatementParser.SCN, 0); }
		public TerminalNode TIMESTAMP() { return getToken(OracleSQLStatementParser.TIMESTAMP, 0); }
		public TerminalNode AS() { return getToken(OracleSQLStatementParser.AS, 0); }
		public TerminalNode OF() { return getToken(OracleSQLStatementParser.OF, 0); }
		public TerminalNode SNAPSHOT() { return getToken(OracleSQLStatementParser.SNAPSHOT, 0); }
		public Flashback_query_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_flashback_query_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterFlashback_query_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitFlashback_query_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitFlashback_query_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Flashback_query_clauseContext flashback_query_clause() throws RecognitionException {
		Flashback_query_clauseContext _localctx = new Flashback_query_clauseContext(_ctx, getState());
		enterRule(_localctx, 374, RULE_flashback_query_clause);
		int _la;
		try {
			setState(3308);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case VERSIONS:
				enterOuterAlt(_localctx, 1);
				{
				setState(3300);
				match(VERSIONS);
				setState(3301);
				match(BETWEEN);
				setState(3302);
				_la = _input.LA(1);
				if ( !(_la==SCN || _la==TIMESTAMP) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3303);
				expression();
				}
				break;
			case AS:
				enterOuterAlt(_localctx, 2);
				{
				setState(3304);
				match(AS);
				setState(3305);
				match(OF);
				setState(3306);
				_la = _input.LA(1);
				if ( !(((((_la - 411)) & ~0x3f) == 0 && ((1L << (_la - 411)) & ((1L << (SCN - 411)) | (1L << (SNAPSHOT - 411)) | (1L << (TIMESTAMP - 411)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3307);
				expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pivot_clauseContext extends ParserRuleContext {
		public TerminalNode PIVOT() { return getToken(OracleSQLStatementParser.PIVOT, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(OracleSQLStatementParser.LEFT_PAREN, 0); }
		public List<Pivot_elementContext> pivot_element() {
			return getRuleContexts(Pivot_elementContext.class);
		}
		public Pivot_elementContext pivot_element(int i) {
			return getRuleContext(Pivot_elementContext.class,i);
		}
		public Pivot_for_clauseContext pivot_for_clause() {
			return getRuleContext(Pivot_for_clauseContext.class,0);
		}
		public Pivot_in_clauseContext pivot_in_clause() {
			return getRuleContext(Pivot_in_clauseContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(OracleSQLStatementParser.RIGHT_PAREN, 0); }
		public TerminalNode XML() { return getToken(OracleSQLStatementParser.XML, 0); }
		public List<TerminalNode> COMMA() { return getTokens(OracleSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(OracleSQLStatementParser.COMMA, i);
		}
		public Pivot_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pivot_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterPivot_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitPivot_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitPivot_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Pivot_clauseContext pivot_clause() throws RecognitionException {
		Pivot_clauseContext _localctx = new Pivot_clauseContext(_ctx, getState());
		enterRule(_localctx, 376, RULE_pivot_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3310);
			match(PIVOT);
			setState(3312);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==XML) {
				{
				setState(3311);
				match(XML);
				}
			}

			setState(3314);
			match(LEFT_PAREN);
			setState(3315);
			pivot_element();
			setState(3320);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3316);
				match(COMMA);
				setState(3317);
				pivot_element();
				}
				}
				setState(3322);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3323);
			pivot_for_clause();
			setState(3324);
			pivot_in_clause();
			setState(3325);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pivot_elementContext extends ParserRuleContext {
		public Aggregate_function_nameContext aggregate_function_name() {
			return getRuleContext(Aggregate_function_nameContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(OracleSQLStatementParser.LEFT_PAREN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(OracleSQLStatementParser.RIGHT_PAREN, 0); }
		public Column_aliasContext column_alias() {
			return getRuleContext(Column_aliasContext.class,0);
		}
		public Pivot_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pivot_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterPivot_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitPivot_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitPivot_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Pivot_elementContext pivot_element() throws RecognitionException {
		Pivot_elementContext _localctx = new Pivot_elementContext(_ctx, getState());
		enterRule(_localctx, 378, RULE_pivot_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3327);
			aggregate_function_name();
			setState(3328);
			match(LEFT_PAREN);
			setState(3329);
			expression();
			setState(3330);
			match(RIGHT_PAREN);
			setState(3332);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABS) | (1L << ACOS) | (1L << ADD) | (1L << ADD_MONTHS) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << AS) | (1L << ASCII) | (1L << ASCIISTR) | (1L << ASIN) | (1L << ASSOCIATE) | (1L << ATAN2) | (1L << ATAN) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BFILENAME) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BIN_TO_NUM) | (1L << BITAND) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CARDINALITY) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CEIL) | (1L << CHARACTER) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARTOROWID) | (1L << CHR) | (1L << C_LETTER))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOSE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONCAT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COS - 64)) | (1L << (COSH - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_DATE - 64)) | (1L << (CURRENT_TIMESTAMP - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (DIMENSION - 128)) | (1L << (DISABLE - 128)) | (1L << (DISASSOCIATE - 128)) | (1L << (DOCUMENT - 128)) | (1L << (DOUBLE - 128)) | (1L << (DSINTERVAL_UNCONSTRAINED - 128)) | (1L << (DUMP - 128)) | (1L << (EACH - 128)) | (1L << (ELEMENT - 128)) | (1L << (EMPTY_BLOB - 128)) | (1L << (EMPTY_CLOB - 128)) | (1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERR - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXP - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FLOOR - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FROM_TZ - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUP_ID - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HEXTORAW - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (IGNORE - 193)) | (1L << (IMMEDIATE - 193)) | (1L << (INCLUDE - 193)) | (1L << (INCLUDING - 193)) | (1L << (INCREMENT - 193)) | (1L << (INDENT - 193)) | (1L << (INDEXED - 193)) | (1L << (INDICATOR - 193)) | (1L << (INDICES - 193)) | (1L << (INFINITE - 193)) | (1L << (INITCAP - 193)) | (1L << (INLINE - 193)) | (1L << (INNER - 193)) | (1L << (INOUT - 193)) | (1L << (INSTANTIABLE - 193)) | (1L << (INSTEAD - 193)) | (1L << (INSTR2 - 193)) | (1L << (INSTR4 - 193)) | (1L << (INSTRB - 193)) | (1L << (INSTRC - 193)) | (1L << (INSTR - 193)) | (1L << (INTERFACE - 193)) | (1L << (INTEGER - 193)) | (1L << (INTERVAL - 193)) | (1L << (INT - 193)) | (1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (KEY - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST_DAY - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LENGTH2 - 193)) | (1L << (LENGTH4 - 193)) | (1L << (LENGTHB - 193)) | (1L << (LENGTHC - 193)) | (1L << (LENGTH - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LN - 193)) | (1L << (LNNVL - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCALTIMESTAMP - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (LOGON - 257)) | (1L << (LONG - 257)) | (1L << (LOOP - 257)) | (1L << (LOWER - 257)) | (1L << (LPAD - 257)) | (1L << (LTRIM - 257)) | (1L << (MAIN - 257)) | (1L << (MAP - 257)) | (1L << (MATCHED - 257)) | (1L << (MAXVALUE - 257)) | (1L << (MEASURES - 257)) | (1L << (MEMBER - 257)) | (1L << (MERGE - 257)) | (1L << (MINUTE - 257)) | (1L << (MINVALUE - 257)) | (1L << (MLSLABEL - 257)) | (1L << (MODEL - 257)) | (1L << (MODIFY - 257)) | (1L << (MOD - 257)) | (1L << (MONTH - 257)) | (1L << (MONTHS_BETWEEN - 257)) | (1L << (MULTISET - 257)) | (1L << (NAME - 257)) | (1L << (NAN - 257)) | (1L << (NANVL - 257)) | (1L << (NATURAL - 257)) | (1L << (NATURALN - 257)) | (1L << (NAV - 257)) | (1L << (NCHAR_CS - 257)) | (1L << (NCHAR - 257)) | (1L << (NCHR - 257)) | (1L << (NCLOB - 257)) | (1L << (NESTED - 257)) | (1L << (NEW - 257)) | (1L << (NEW_TIME - 257)) | (1L << (NEXT_DAY - 257)) | (1L << (NOAUDIT - 257)) | (1L << (NOCOPY - 257)) | (1L << (NOCYCLE - 257)) | (1L << (NOENTITYESCAPING - 257)) | (1L << (NONE - 257)) | (1L << (NO - 257)) | (1L << (NOSCHEMACHECK - 257)) | (1L << (NULLIF - 257)) | (1L << (NULLS - 257)) | (1L << (NUMBER - 257)) | (1L << (NUMERIC - 257)) | (1L << (NUMTODSINTERVAL - 257)) | (1L << (NUMTOYMINTERVAL - 257)) | (1L << (NVARCHAR2 - 257)) | (1L << (NVL2 - 257)) | (1L << (OBJECT - 257)) | (1L << (OFF - 257)))) != 0) || ((((_la - 321)) & ~0x3f) == 0 && ((1L << (_la - 321)) & ((1L << (OID - 321)) | (1L << (OLD - 321)) | (1L << (ONLY - 321)) | (1L << (OPAQUE - 321)) | (1L << (OPEN - 321)) | (1L << (ORADATA - 321)) | (1L << (ORDINALITY - 321)) | (1L << (OSERROR - 321)) | (1L << (OUTER - 321)) | (1L << (OUT - 321)) | (1L << (OVER - 321)) | (1L << (OVERRIDING - 321)) | (1L << (PACKAGE - 321)) | (1L << (PARALLEL_ENABLE - 321)) | (1L << (PARAMETERS - 321)) | (1L << (PARENT - 321)) | (1L << (PARTITION - 321)) | (1L << (PASSING - 321)) | (1L << (PATH - 321)) | (1L << (PIPELINED - 321)) | (1L << (PLAN - 321)) | (1L << (PLS_INTEGER - 321)) | (1L << (POSITIVEN - 321)) | (1L << (POSITIVE - 321)) | (1L << (POWER - 321)) | (1L << (PRAGMA - 321)) | (1L << (PRECEDING - 321)) | (1L << (PRECISION - 321)) | (1L << (PRESENT - 321)) | (1L << (PRIOR - 321)) | (1L << (PROCEDURE - 321)) | (1L << (RAISE - 321)) | (1L << (RANGE - 321)) | (1L << (RAW - 321)) | (1L << (RAWTOHEX - 321)) | (1L << (READ - 321)) | (1L << (REAL - 321)) | (1L << (RECORD - 321)) | (1L << (REFERENCE - 321)) | (1L << (REFERENCING - 321)) | (1L << (REF - 321)) | (1L << (REGEXP_COUNT - 321)) | (1L << (REGEXP_INSTR - 321)) | (1L << (REGEXP_REPLACE - 321)) | (1L << (REGEXP_SUBSTR - 321)) | (1L << (REJECT - 321)) | (1L << (RELIES_ON - 321)) | (1L << (REMAINDER - 321)))) != 0) || ((((_la - 385)) & ~0x3f) == 0 && ((1L << (_la - 385)) & ((1L << (RENAME - 385)) | (1L << (REPLACE - 385)) | (1L << (RESPECT - 385)) | (1L << (RESTRICT_REFERENCES - 385)) | (1L << (RESULT_CACHE - 385)) | (1L << (RESULT - 385)) | (1L << (RETURNING - 385)) | (1L << (RETURN - 385)) | (1L << (REUSE - 385)) | (1L << (REVERSE - 385)) | (1L << (RIGHT - 385)) | (1L << (ROLLBACK - 385)) | (1L << (ROLLUP - 385)) | (1L << (ROWID - 385)) | (1L << (ROWNUM - 385)) | (1L << (ROW - 385)) | (1L << (ROWS - 385)) | (1L << (RPAD - 385)) | (1L << (RTRIM - 385)) | (1L << (RULES - 385)) | (1L << (SAMPLE - 385)) | (1L << (SAVEPOINT - 385)) | (1L << (SAVE - 385)) | (1L << (SCHEMACHECK - 385)) | (1L << (SCHEMA - 385)) | (1L << (SCN - 385)) | (1L << (SECOND - 385)) | (1L << (SEED - 385)) | (1L << (SEGMENT - 385)) | (1L << (SELF - 385)) | (1L << (SEQUENTIAL - 385)) | (1L << (SERIALIZABLE - 385)) | (1L << (SERIALLY_REUSABLE - 385)) | (1L << (SERVERERROR - 385)) | (1L << (SESSIONTIMEZONE - 385)) | (1L << (SET - 385)) | (1L << (SETS - 385)) | (1L << (SETTINGS - 385)) | (1L << (SHOW - 385)) | (1L << (SHUTDOWN - 385)) | (1L << (SIBLINGS - 385)) | (1L << (SIGN - 385)) | (1L << (SIGNTYPE - 385)) | (1L << (SIMPLE_INTEGER - 385)) | (1L << (SINGLE - 385)) | (1L << (SINH - 385)) | (1L << (SIN - 385)) | (1L << (SKIP_ - 385)) | (1L << (SMALLINT - 385)) | (1L << (SNAPSHOT - 385)) | (1L << (SOME - 385)) | (1L << (SOUNDEX - 385)) | (1L << (SPECIFICATION - 385)) | (1L << (SQLDATA - 385)) | (1L << (SQLERROR - 385)) | (1L << (SQRT - 385)) | (1L << (STANDALONE - 385)))) != 0) || ((((_la - 449)) & ~0x3f) == 0 && ((1L << (_la - 449)) & ((1L << (STARTUP - 449)) | (1L << (STATEMENT_ID - 449)) | (1L << (STATEMENT - 449)) | (1L << (STATIC - 449)) | (1L << (STATISTICS - 449)) | (1L << (STRING - 449)) | (1L << (SUBMULTISET - 449)) | (1L << (SUBPARTITION - 449)) | (1L << (SUBSTITUTABLE - 449)) | (1L << (SUBTYPE - 449)) | (1L << (SUCCESS - 449)) | (1L << (SUSPEND - 449)) | (1L << (SYS_CONTEXT - 449)) | (1L << (SYSDATE - 449)) | (1L << (SYSTIMESTAMP - 449)) | (1L << (TANH - 449)) | (1L << (TAN - 449)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 449)) | (1L << (TIMESTAMP - 449)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 449)) | (1L << (TIMESTAMP_UNCONSTRAINED - 449)) | (1L << (TIME - 449)) | (1L << (TIMEZONE_ABBR - 449)) | (1L << (TIMEZONE_HOUR - 449)) | (1L << (TIMEZONE_MINUTE - 449)) | (1L << (TIMEZONE_REGION - 449)) | (1L << (TO_CLOB - 449)) | (1L << (TO_DSINTERVAL - 449)) | (1L << (TO_LOB - 449)) | (1L << (TO_MULTI_BYTE - 449)) | (1L << (TO_NCLOB - 449)) | (1L << (TO_NUMBER - 449)) | (1L << (TO_SINGLE_BYTE - 449)) | (1L << (TO_TIMESTAMP - 449)) | (1L << (TO_TIMESTAMP_TZ - 449)) | (1L << (TO_YMINTERVAL - 449)) | (1L << (TRAILING - 449)) | (1L << (TRANSACTION - 449)) | (1L << (TRANSLATE - 449)) | (1L << (TREAT - 449)) | (1L << (TRIGGER - 449)) | (1L << (TRUNCATE - 449)) | (1L << (TRUNC - 449)) | (1L << (TYPE - 449)) | (1L << (TZ_OFFSET - 449)) | (1L << (UID - 449)) | (1L << (UNBOUNDED - 449)) | (1L << (UNDER - 449)) | (1L << (UNLIMITED - 449)) | (1L << (UNTIL - 449)) | (1L << (UPDATED - 449)))) != 0) || ((((_la - 513)) & ~0x3f) == 0 && ((1L << (_la - 513)) & ((1L << (UPPER - 513)) | (1L << (UPSERT - 513)) | (1L << (UROWID - 513)) | (1L << (USERENV - 513)) | (1L << (USER - 513)) | (1L << (USE - 513)) | (1L << (VALIDATE - 513)) | (1L << (VALUE - 513)) | (1L << (VARCHAR2 - 513)) | (1L << (VARCHAR - 513)) | (1L << (VARIABLE - 513)) | (1L << (VARRAY - 513)) | (1L << (VARYING - 513)) | (1L << (VERSIONS - 513)) | (1L << (VERSION - 513)) | (1L << (VSIZE - 513)) | (1L << (WAIT - 513)) | (1L << (WARNING - 513)) | (1L << (WELLFORMED - 513)) | (1L << (WHENEVER - 513)) | (1L << (WHILE - 513)) | (1L << (WITHIN - 513)) | (1L << (WORK - 513)) | (1L << (WRITE - 513)) | (1L << (XMLAGG - 513)) | (1L << (XMLATTRIBUTES - 513)) | (1L << (XMLCAST - 513)) | (1L << (XMLCOLATTVAL - 513)) | (1L << (XMLELEMENT - 513)) | (1L << (XMLEXISTS - 513)) | (1L << (XMLFOREST - 513)) | (1L << (XMLNAMESPACES - 513)) | (1L << (XMLPARSE - 513)) | (1L << (XMLPI - 513)) | (1L << (XMLQUERY - 513)) | (1L << (XMLROOT - 513)) | (1L << (XMLSERIALIZE - 513)) | (1L << (XMLTABLE - 513)) | (1L << (XML - 513)) | (1L << (YEAR - 513)) | (1L << (YES - 513)) | (1L << (YMINTERVAL_UNCONSTRAINED - 513)) | (1L << (ZONE - 513)) | (1L << (PREDICTION - 513)) | (1L << (PREDICTION_BOUNDS - 513)) | (1L << (PREDICTION_COST - 513)) | (1L << (PREDICTION_DETAILS - 513)) | (1L << (PREDICTION_PROBABILITY - 513)) | (1L << (PREDICTION_SET - 513)) | (1L << (CUME_DIST - 513)) | (1L << (DENSE_RANK - 513)) | (1L << (LISTAGG - 513)) | (1L << (PERCENT_RANK - 513)) | (1L << (PERCENTILE_CONT - 513)) | (1L << (PERCENTILE_DISC - 513)) | (1L << (RANK - 513)))) != 0) || ((((_la - 577)) & ~0x3f) == 0 && ((1L << (_la - 577)) & ((1L << (AVG - 577)) | (1L << (CORR - 577)) | (1L << (COVAR_ - 577)) | (1L << (DECODE - 577)) | (1L << (LAG - 577)) | (1L << (LEAD - 577)) | (1L << (MAX - 577)) | (1L << (MEDIAN - 577)) | (1L << (MIN - 577)) | (1L << (NTILE - 577)) | (1L << (NVL - 577)) | (1L << (RATIO_TO_REPORT - 577)) | (1L << (REGR_ - 577)) | (1L << (ROUND - 577)) | (1L << (ROW_NUMBER - 577)) | (1L << (SUBSTR - 577)) | (1L << (TO_CHAR - 577)) | (1L << (TRIM - 577)) | (1L << (SUM - 577)) | (1L << (STDDEV - 577)) | (1L << (VAR_ - 577)) | (1L << (VARIANCE - 577)) | (1L << (LEAST - 577)) | (1L << (GREATEST - 577)) | (1L << (TO_DATE - 577)) | (1L << (NATIONAL_CHAR_STRING_LIT - 577)) | (1L << (CHAR_STRING - 577)) | (1L << (DELIMITED_ID - 577)) | (1L << (ASTERISK - 577)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
				{
				setState(3331);
				column_alias();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pivot_for_clauseContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(OracleSQLStatementParser.FOR, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public TerminalNode LEFT_PAREN() { return getToken(OracleSQLStatementParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(OracleSQLStatementParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(OracleSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(OracleSQLStatementParser.COMMA, i);
		}
		public Pivot_for_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pivot_for_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterPivot_for_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitPivot_for_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitPivot_for_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Pivot_for_clauseContext pivot_for_clause() throws RecognitionException {
		Pivot_for_clauseContext _localctx = new Pivot_for_clauseContext(_ctx, getState());
		enterRule(_localctx, 380, RULE_pivot_for_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3334);
			match(FOR);
			setState(3347);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ABS:
			case ACOS:
			case ADD:
			case ADD_MONTHS:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASCII:
			case ASCIISTR:
			case ASIN:
			case ASSOCIATE:
			case ATAN2:
			case ATAN:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BFILENAME:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BIN_TO_NUM:
			case BITAND:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CARDINALITY:
			case CASCADE:
			case CASE:
			case CAST:
			case CEIL:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHARTOROWID:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOSE:
			case COMPOUND:
			case CONCAT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COS:
			case COSH:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_DATE:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case DUMP:
			case EACH:
			case ELEMENT:
			case EMPTY_BLOB:
			case EMPTY_CLOB:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXP:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FLOOR:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FROM_TZ:
			case FULL:
			case FUNCTION:
			case GROUP_ID:
			case GROUPING:
			case HASH:
			case HEXTORAW:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INITCAP:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INSTR2:
			case INSTR4:
			case INSTRB:
			case INSTRC:
			case INSTR:
			case INTERFACE:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST_DAY:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LENGTH2:
			case LENGTH4:
			case LENGTHB:
			case LENGTHC:
			case LENGTH:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LN:
			case LNNVL:
			case LOCAL:
			case LOCALTIMESTAMP:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MOD:
			case MONTH:
			case MONTHS_BETWEEN:
			case MULTISET:
			case NAME:
			case NAN:
			case NANVL:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCHR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NEW_TIME:
			case NEXT_DAY:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLIF:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NUMTODSINTERVAL:
			case NUMTOYMINTERVAL:
			case NVARCHAR2:
			case NVL2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPAQUE:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case POWER:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case PROCEDURE:
			case RAISE:
			case RANGE:
			case RAW:
			case RAWTOHEX:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_REPLACE:
			case REGEXP_SUBSTR:
			case REJECT:
			case RELIES_ON:
			case REMAINDER:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROWNUM:
			case ROW:
			case ROWS:
			case RPAD:
			case RTRIM:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGN:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SINH:
			case SIN:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SOUNDEX:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case SQRT:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYS_CONTEXT:
			case SYSDATE:
			case SYSTIMESTAMP:
			case TANH:
			case TAN:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TO_CLOB:
			case TO_DSINTERVAL:
			case TO_LOB:
			case TO_MULTI_BYTE:
			case TO_NCLOB:
			case TO_NUMBER:
			case TO_SINGLE_BYTE:
			case TO_TIMESTAMP:
			case TO_TIMESTAMP_TZ:
			case TO_YMINTERVAL:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TRUNC:
			case TYPE:
			case TZ_OFFSET:
			case UID:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPPER:
			case UPSERT:
			case UROWID:
			case USERENV:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case VSIZE:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case DECODE:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case NVL:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROUND:
			case ROW_NUMBER:
			case SUBSTR:
			case TO_CHAR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case LEAST:
			case GREATEST:
			case TO_DATE:
			case DELIMITED_ID:
			case ASTERISK:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(3335);
				column_name();
				}
				break;
			case LEFT_PAREN:
				{
				setState(3336);
				match(LEFT_PAREN);
				setState(3337);
				column_name();
				setState(3342);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3338);
					match(COMMA);
					setState(3339);
					column_name();
					}
					}
					setState(3344);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3345);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pivot_in_clauseContext extends ParserRuleContext {
		public TerminalNode IN() { return getToken(OracleSQLStatementParser.IN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(OracleSQLStatementParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(OracleSQLStatementParser.RIGHT_PAREN, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public List<TerminalNode> ANY() { return getTokens(OracleSQLStatementParser.ANY); }
		public TerminalNode ANY(int i) {
			return getToken(OracleSQLStatementParser.ANY, i);
		}
		public List<Pivot_in_clause_elementContext> pivot_in_clause_element() {
			return getRuleContexts(Pivot_in_clause_elementContext.class);
		}
		public Pivot_in_clause_elementContext pivot_in_clause_element(int i) {
			return getRuleContext(Pivot_in_clause_elementContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(OracleSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(OracleSQLStatementParser.COMMA, i);
		}
		public Pivot_in_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pivot_in_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterPivot_in_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitPivot_in_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitPivot_in_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Pivot_in_clauseContext pivot_in_clause() throws RecognitionException {
		Pivot_in_clauseContext _localctx = new Pivot_in_clauseContext(_ctx, getState());
		enterRule(_localctx, 382, RULE_pivot_in_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3349);
			match(IN);
			setState(3350);
			match(LEFT_PAREN);
			setState(3368);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,379,_ctx) ) {
			case 1:
				{
				setState(3351);
				subquery();
				}
				break;
			case 2:
				{
				setState(3352);
				match(ANY);
				setState(3357);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3353);
					match(COMMA);
					setState(3354);
					match(ANY);
					}
					}
					setState(3359);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 3:
				{
				setState(3360);
				pivot_in_clause_element();
				setState(3365);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3361);
					match(COMMA);
					setState(3362);
					pivot_in_clause_element();
					}
					}
					setState(3367);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			setState(3370);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pivot_in_clause_elementContext extends ParserRuleContext {
		public Pivot_in_clause_elementsContext pivot_in_clause_elements() {
			return getRuleContext(Pivot_in_clause_elementsContext.class,0);
		}
		public Column_aliasContext column_alias() {
			return getRuleContext(Column_aliasContext.class,0);
		}
		public Pivot_in_clause_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pivot_in_clause_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterPivot_in_clause_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitPivot_in_clause_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitPivot_in_clause_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Pivot_in_clause_elementContext pivot_in_clause_element() throws RecognitionException {
		Pivot_in_clause_elementContext _localctx = new Pivot_in_clause_elementContext(_ctx, getState());
		enterRule(_localctx, 384, RULE_pivot_in_clause_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3372);
			pivot_in_clause_elements();
			setState(3374);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABS) | (1L << ACOS) | (1L << ADD) | (1L << ADD_MONTHS) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << AS) | (1L << ASCII) | (1L << ASCIISTR) | (1L << ASIN) | (1L << ASSOCIATE) | (1L << ATAN2) | (1L << ATAN) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BFILENAME) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BIN_TO_NUM) | (1L << BITAND) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CARDINALITY) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CEIL) | (1L << CHARACTER) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARTOROWID) | (1L << CHR) | (1L << C_LETTER))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOSE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONCAT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COS - 64)) | (1L << (COSH - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_DATE - 64)) | (1L << (CURRENT_TIMESTAMP - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (DIMENSION - 128)) | (1L << (DISABLE - 128)) | (1L << (DISASSOCIATE - 128)) | (1L << (DOCUMENT - 128)) | (1L << (DOUBLE - 128)) | (1L << (DSINTERVAL_UNCONSTRAINED - 128)) | (1L << (DUMP - 128)) | (1L << (EACH - 128)) | (1L << (ELEMENT - 128)) | (1L << (EMPTY_BLOB - 128)) | (1L << (EMPTY_CLOB - 128)) | (1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERR - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXP - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FLOOR - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FROM_TZ - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUP_ID - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HEXTORAW - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (IGNORE - 193)) | (1L << (IMMEDIATE - 193)) | (1L << (INCLUDE - 193)) | (1L << (INCLUDING - 193)) | (1L << (INCREMENT - 193)) | (1L << (INDENT - 193)) | (1L << (INDEXED - 193)) | (1L << (INDICATOR - 193)) | (1L << (INDICES - 193)) | (1L << (INFINITE - 193)) | (1L << (INITCAP - 193)) | (1L << (INLINE - 193)) | (1L << (INNER - 193)) | (1L << (INOUT - 193)) | (1L << (INSTANTIABLE - 193)) | (1L << (INSTEAD - 193)) | (1L << (INSTR2 - 193)) | (1L << (INSTR4 - 193)) | (1L << (INSTRB - 193)) | (1L << (INSTRC - 193)) | (1L << (INSTR - 193)) | (1L << (INTERFACE - 193)) | (1L << (INTEGER - 193)) | (1L << (INTERVAL - 193)) | (1L << (INT - 193)) | (1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (KEY - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST_DAY - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LENGTH2 - 193)) | (1L << (LENGTH4 - 193)) | (1L << (LENGTHB - 193)) | (1L << (LENGTHC - 193)) | (1L << (LENGTH - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LN - 193)) | (1L << (LNNVL - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCALTIMESTAMP - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (LOGON - 257)) | (1L << (LONG - 257)) | (1L << (LOOP - 257)) | (1L << (LOWER - 257)) | (1L << (LPAD - 257)) | (1L << (LTRIM - 257)) | (1L << (MAIN - 257)) | (1L << (MAP - 257)) | (1L << (MATCHED - 257)) | (1L << (MAXVALUE - 257)) | (1L << (MEASURES - 257)) | (1L << (MEMBER - 257)) | (1L << (MERGE - 257)) | (1L << (MINUTE - 257)) | (1L << (MINVALUE - 257)) | (1L << (MLSLABEL - 257)) | (1L << (MODEL - 257)) | (1L << (MODIFY - 257)) | (1L << (MOD - 257)) | (1L << (MONTH - 257)) | (1L << (MONTHS_BETWEEN - 257)) | (1L << (MULTISET - 257)) | (1L << (NAME - 257)) | (1L << (NAN - 257)) | (1L << (NANVL - 257)) | (1L << (NATURAL - 257)) | (1L << (NATURALN - 257)) | (1L << (NAV - 257)) | (1L << (NCHAR_CS - 257)) | (1L << (NCHAR - 257)) | (1L << (NCHR - 257)) | (1L << (NCLOB - 257)) | (1L << (NESTED - 257)) | (1L << (NEW - 257)) | (1L << (NEW_TIME - 257)) | (1L << (NEXT_DAY - 257)) | (1L << (NOAUDIT - 257)) | (1L << (NOCOPY - 257)) | (1L << (NOCYCLE - 257)) | (1L << (NOENTITYESCAPING - 257)) | (1L << (NONE - 257)) | (1L << (NO - 257)) | (1L << (NOSCHEMACHECK - 257)) | (1L << (NULLIF - 257)) | (1L << (NULLS - 257)) | (1L << (NUMBER - 257)) | (1L << (NUMERIC - 257)) | (1L << (NUMTODSINTERVAL - 257)) | (1L << (NUMTOYMINTERVAL - 257)) | (1L << (NVARCHAR2 - 257)) | (1L << (NVL2 - 257)) | (1L << (OBJECT - 257)) | (1L << (OFF - 257)))) != 0) || ((((_la - 321)) & ~0x3f) == 0 && ((1L << (_la - 321)) & ((1L << (OID - 321)) | (1L << (OLD - 321)) | (1L << (ONLY - 321)) | (1L << (OPAQUE - 321)) | (1L << (OPEN - 321)) | (1L << (ORADATA - 321)) | (1L << (ORDINALITY - 321)) | (1L << (OSERROR - 321)) | (1L << (OUTER - 321)) | (1L << (OUT - 321)) | (1L << (OVER - 321)) | (1L << (OVERRIDING - 321)) | (1L << (PACKAGE - 321)) | (1L << (PARALLEL_ENABLE - 321)) | (1L << (PARAMETERS - 321)) | (1L << (PARENT - 321)) | (1L << (PARTITION - 321)) | (1L << (PASSING - 321)) | (1L << (PATH - 321)) | (1L << (PIPELINED - 321)) | (1L << (PLAN - 321)) | (1L << (PLS_INTEGER - 321)) | (1L << (POSITIVEN - 321)) | (1L << (POSITIVE - 321)) | (1L << (POWER - 321)) | (1L << (PRAGMA - 321)) | (1L << (PRECEDING - 321)) | (1L << (PRECISION - 321)) | (1L << (PRESENT - 321)) | (1L << (PRIOR - 321)) | (1L << (PROCEDURE - 321)) | (1L << (RAISE - 321)) | (1L << (RANGE - 321)) | (1L << (RAW - 321)) | (1L << (RAWTOHEX - 321)) | (1L << (READ - 321)) | (1L << (REAL - 321)) | (1L << (RECORD - 321)) | (1L << (REFERENCE - 321)) | (1L << (REFERENCING - 321)) | (1L << (REF - 321)) | (1L << (REGEXP_COUNT - 321)) | (1L << (REGEXP_INSTR - 321)) | (1L << (REGEXP_REPLACE - 321)) | (1L << (REGEXP_SUBSTR - 321)) | (1L << (REJECT - 321)) | (1L << (RELIES_ON - 321)) | (1L << (REMAINDER - 321)))) != 0) || ((((_la - 385)) & ~0x3f) == 0 && ((1L << (_la - 385)) & ((1L << (RENAME - 385)) | (1L << (REPLACE - 385)) | (1L << (RESPECT - 385)) | (1L << (RESTRICT_REFERENCES - 385)) | (1L << (RESULT_CACHE - 385)) | (1L << (RESULT - 385)) | (1L << (RETURNING - 385)) | (1L << (RETURN - 385)) | (1L << (REUSE - 385)) | (1L << (REVERSE - 385)) | (1L << (RIGHT - 385)) | (1L << (ROLLBACK - 385)) | (1L << (ROLLUP - 385)) | (1L << (ROWID - 385)) | (1L << (ROWNUM - 385)) | (1L << (ROW - 385)) | (1L << (ROWS - 385)) | (1L << (RPAD - 385)) | (1L << (RTRIM - 385)) | (1L << (RULES - 385)) | (1L << (SAMPLE - 385)) | (1L << (SAVEPOINT - 385)) | (1L << (SAVE - 385)) | (1L << (SCHEMACHECK - 385)) | (1L << (SCHEMA - 385)) | (1L << (SCN - 385)) | (1L << (SECOND - 385)) | (1L << (SEED - 385)) | (1L << (SEGMENT - 385)) | (1L << (SELF - 385)) | (1L << (SEQUENTIAL - 385)) | (1L << (SERIALIZABLE - 385)) | (1L << (SERIALLY_REUSABLE - 385)) | (1L << (SERVERERROR - 385)) | (1L << (SESSIONTIMEZONE - 385)) | (1L << (SET - 385)) | (1L << (SETS - 385)) | (1L << (SETTINGS - 385)) | (1L << (SHOW - 385)) | (1L << (SHUTDOWN - 385)) | (1L << (SIBLINGS - 385)) | (1L << (SIGN - 385)) | (1L << (SIGNTYPE - 385)) | (1L << (SIMPLE_INTEGER - 385)) | (1L << (SINGLE - 385)) | (1L << (SINH - 385)) | (1L << (SIN - 385)) | (1L << (SKIP_ - 385)) | (1L << (SMALLINT - 385)) | (1L << (SNAPSHOT - 385)) | (1L << (SOME - 385)) | (1L << (SOUNDEX - 385)) | (1L << (SPECIFICATION - 385)) | (1L << (SQLDATA - 385)) | (1L << (SQLERROR - 385)) | (1L << (SQRT - 385)) | (1L << (STANDALONE - 385)))) != 0) || ((((_la - 449)) & ~0x3f) == 0 && ((1L << (_la - 449)) & ((1L << (STARTUP - 449)) | (1L << (STATEMENT_ID - 449)) | (1L << (STATEMENT - 449)) | (1L << (STATIC - 449)) | (1L << (STATISTICS - 449)) | (1L << (STRING - 449)) | (1L << (SUBMULTISET - 449)) | (1L << (SUBPARTITION - 449)) | (1L << (SUBSTITUTABLE - 449)) | (1L << (SUBTYPE - 449)) | (1L << (SUCCESS - 449)) | (1L << (SUSPEND - 449)) | (1L << (SYS_CONTEXT - 449)) | (1L << (SYSDATE - 449)) | (1L << (SYSTIMESTAMP - 449)) | (1L << (TANH - 449)) | (1L << (TAN - 449)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 449)) | (1L << (TIMESTAMP - 449)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 449)) | (1L << (TIMESTAMP_UNCONSTRAINED - 449)) | (1L << (TIME - 449)) | (1L << (TIMEZONE_ABBR - 449)) | (1L << (TIMEZONE_HOUR - 449)) | (1L << (TIMEZONE_MINUTE - 449)) | (1L << (TIMEZONE_REGION - 449)) | (1L << (TO_CLOB - 449)) | (1L << (TO_DSINTERVAL - 449)) | (1L << (TO_LOB - 449)) | (1L << (TO_MULTI_BYTE - 449)) | (1L << (TO_NCLOB - 449)) | (1L << (TO_NUMBER - 449)) | (1L << (TO_SINGLE_BYTE - 449)) | (1L << (TO_TIMESTAMP - 449)) | (1L << (TO_TIMESTAMP_TZ - 449)) | (1L << (TO_YMINTERVAL - 449)) | (1L << (TRAILING - 449)) | (1L << (TRANSACTION - 449)) | (1L << (TRANSLATE - 449)) | (1L << (TREAT - 449)) | (1L << (TRIGGER - 449)) | (1L << (TRUNCATE - 449)) | (1L << (TRUNC - 449)) | (1L << (TYPE - 449)) | (1L << (TZ_OFFSET - 449)) | (1L << (UID - 449)) | (1L << (UNBOUNDED - 449)) | (1L << (UNDER - 449)) | (1L << (UNLIMITED - 449)) | (1L << (UNTIL - 449)) | (1L << (UPDATED - 449)))) != 0) || ((((_la - 513)) & ~0x3f) == 0 && ((1L << (_la - 513)) & ((1L << (UPPER - 513)) | (1L << (UPSERT - 513)) | (1L << (UROWID - 513)) | (1L << (USERENV - 513)) | (1L << (USER - 513)) | (1L << (USE - 513)) | (1L << (VALIDATE - 513)) | (1L << (VALUE - 513)) | (1L << (VARCHAR2 - 513)) | (1L << (VARCHAR - 513)) | (1L << (VARIABLE - 513)) | (1L << (VARRAY - 513)) | (1L << (VARYING - 513)) | (1L << (VERSIONS - 513)) | (1L << (VERSION - 513)) | (1L << (VSIZE - 513)) | (1L << (WAIT - 513)) | (1L << (WARNING - 513)) | (1L << (WELLFORMED - 513)) | (1L << (WHENEVER - 513)) | (1L << (WHILE - 513)) | (1L << (WITHIN - 513)) | (1L << (WORK - 513)) | (1L << (WRITE - 513)) | (1L << (XMLAGG - 513)) | (1L << (XMLATTRIBUTES - 513)) | (1L << (XMLCAST - 513)) | (1L << (XMLCOLATTVAL - 513)) | (1L << (XMLELEMENT - 513)) | (1L << (XMLEXISTS - 513)) | (1L << (XMLFOREST - 513)) | (1L << (XMLNAMESPACES - 513)) | (1L << (XMLPARSE - 513)) | (1L << (XMLPI - 513)) | (1L << (XMLQUERY - 513)) | (1L << (XMLROOT - 513)) | (1L << (XMLSERIALIZE - 513)) | (1L << (XMLTABLE - 513)) | (1L << (XML - 513)) | (1L << (YEAR - 513)) | (1L << (YES - 513)) | (1L << (YMINTERVAL_UNCONSTRAINED - 513)) | (1L << (ZONE - 513)) | (1L << (PREDICTION - 513)) | (1L << (PREDICTION_BOUNDS - 513)) | (1L << (PREDICTION_COST - 513)) | (1L << (PREDICTION_DETAILS - 513)) | (1L << (PREDICTION_PROBABILITY - 513)) | (1L << (PREDICTION_SET - 513)) | (1L << (CUME_DIST - 513)) | (1L << (DENSE_RANK - 513)) | (1L << (LISTAGG - 513)) | (1L << (PERCENT_RANK - 513)) | (1L << (PERCENTILE_CONT - 513)) | (1L << (PERCENTILE_DISC - 513)) | (1L << (RANK - 513)))) != 0) || ((((_la - 577)) & ~0x3f) == 0 && ((1L << (_la - 577)) & ((1L << (AVG - 577)) | (1L << (CORR - 577)) | (1L << (COVAR_ - 577)) | (1L << (DECODE - 577)) | (1L << (LAG - 577)) | (1L << (LEAD - 577)) | (1L << (MAX - 577)) | (1L << (MEDIAN - 577)) | (1L << (MIN - 577)) | (1L << (NTILE - 577)) | (1L << (NVL - 577)) | (1L << (RATIO_TO_REPORT - 577)) | (1L << (REGR_ - 577)) | (1L << (ROUND - 577)) | (1L << (ROW_NUMBER - 577)) | (1L << (SUBSTR - 577)) | (1L << (TO_CHAR - 577)) | (1L << (TRIM - 577)) | (1L << (SUM - 577)) | (1L << (STDDEV - 577)) | (1L << (VAR_ - 577)) | (1L << (VARIANCE - 577)) | (1L << (LEAST - 577)) | (1L << (GREATEST - 577)) | (1L << (TO_DATE - 577)) | (1L << (NATIONAL_CHAR_STRING_LIT - 577)) | (1L << (CHAR_STRING - 577)) | (1L << (DELIMITED_ID - 577)) | (1L << (ASTERISK - 577)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
				{
				setState(3373);
				column_alias();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pivot_in_clause_elementsContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public Pivot_in_clause_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pivot_in_clause_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterPivot_in_clause_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitPivot_in_clause_elements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitPivot_in_clause_elements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Pivot_in_clause_elementsContext pivot_in_clause_elements() throws RecognitionException {
		Pivot_in_clause_elementsContext _localctx = new Pivot_in_clause_elementsContext(_ctx, getState());
		enterRule(_localctx, 386, RULE_pivot_in_clause_elements);
		try {
			setState(3378);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,381,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3376);
				expression();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3377);
				expression_list();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unpivot_clauseContext extends ParserRuleContext {
		public TerminalNode UNPIVOT() { return getToken(OracleSQLStatementParser.UNPIVOT, 0); }
		public List<TerminalNode> LEFT_PAREN() { return getTokens(OracleSQLStatementParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(OracleSQLStatementParser.LEFT_PAREN, i);
		}
		public Pivot_for_clauseContext pivot_for_clause() {
			return getRuleContext(Pivot_for_clauseContext.class,0);
		}
		public Unpivot_in_clauseContext unpivot_in_clause() {
			return getRuleContext(Unpivot_in_clauseContext.class,0);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(OracleSQLStatementParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(OracleSQLStatementParser.RIGHT_PAREN, i);
		}
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public TerminalNode NULLS() { return getToken(OracleSQLStatementParser.NULLS, 0); }
		public TerminalNode INCLUDE() { return getToken(OracleSQLStatementParser.INCLUDE, 0); }
		public TerminalNode EXCLUDE() { return getToken(OracleSQLStatementParser.EXCLUDE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(OracleSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(OracleSQLStatementParser.COMMA, i);
		}
		public Unpivot_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unpivot_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterUnpivot_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitUnpivot_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitUnpivot_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Unpivot_clauseContext unpivot_clause() throws RecognitionException {
		Unpivot_clauseContext _localctx = new Unpivot_clauseContext(_ctx, getState());
		enterRule(_localctx, 388, RULE_unpivot_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3380);
			match(UNPIVOT);
			setState(3383);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXCLUDE || _la==INCLUDE) {
				{
				setState(3381);
				_la = _input.LA(1);
				if ( !(_la==EXCLUDE || _la==INCLUDE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3382);
				match(NULLS);
				}
			}

			setState(3385);
			match(LEFT_PAREN);
			setState(3398);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ABS:
			case ACOS:
			case ADD:
			case ADD_MONTHS:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASCII:
			case ASCIISTR:
			case ASIN:
			case ASSOCIATE:
			case ATAN2:
			case ATAN:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BFILENAME:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BIN_TO_NUM:
			case BITAND:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CARDINALITY:
			case CASCADE:
			case CASE:
			case CAST:
			case CEIL:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHARTOROWID:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOSE:
			case COMPOUND:
			case CONCAT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COS:
			case COSH:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_DATE:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case DUMP:
			case EACH:
			case ELEMENT:
			case EMPTY_BLOB:
			case EMPTY_CLOB:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXP:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FLOOR:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FROM_TZ:
			case FULL:
			case FUNCTION:
			case GROUP_ID:
			case GROUPING:
			case HASH:
			case HEXTORAW:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INITCAP:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INSTR2:
			case INSTR4:
			case INSTRB:
			case INSTRC:
			case INSTR:
			case INTERFACE:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST_DAY:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LENGTH2:
			case LENGTH4:
			case LENGTHB:
			case LENGTHC:
			case LENGTH:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LN:
			case LNNVL:
			case LOCAL:
			case LOCALTIMESTAMP:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MOD:
			case MONTH:
			case MONTHS_BETWEEN:
			case MULTISET:
			case NAME:
			case NAN:
			case NANVL:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCHR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NEW_TIME:
			case NEXT_DAY:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLIF:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NUMTODSINTERVAL:
			case NUMTOYMINTERVAL:
			case NVARCHAR2:
			case NVL2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPAQUE:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case POWER:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case PROCEDURE:
			case RAISE:
			case RANGE:
			case RAW:
			case RAWTOHEX:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_REPLACE:
			case REGEXP_SUBSTR:
			case REJECT:
			case RELIES_ON:
			case REMAINDER:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROWNUM:
			case ROW:
			case ROWS:
			case RPAD:
			case RTRIM:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGN:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SINH:
			case SIN:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SOUNDEX:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case SQRT:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYS_CONTEXT:
			case SYSDATE:
			case SYSTIMESTAMP:
			case TANH:
			case TAN:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TO_CLOB:
			case TO_DSINTERVAL:
			case TO_LOB:
			case TO_MULTI_BYTE:
			case TO_NCLOB:
			case TO_NUMBER:
			case TO_SINGLE_BYTE:
			case TO_TIMESTAMP:
			case TO_TIMESTAMP_TZ:
			case TO_YMINTERVAL:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TRUNC:
			case TYPE:
			case TZ_OFFSET:
			case UID:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPPER:
			case UPSERT:
			case UROWID:
			case USERENV:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case VSIZE:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case DECODE:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case NVL:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROUND:
			case ROW_NUMBER:
			case SUBSTR:
			case TO_CHAR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case LEAST:
			case GREATEST:
			case TO_DATE:
			case DELIMITED_ID:
			case ASTERISK:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(3386);
				column_name();
				}
				break;
			case LEFT_PAREN:
				{
				setState(3387);
				match(LEFT_PAREN);
				setState(3388);
				column_name();
				setState(3393);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3389);
					match(COMMA);
					setState(3390);
					column_name();
					}
					}
					setState(3395);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3396);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3400);
			pivot_for_clause();
			setState(3401);
			unpivot_in_clause();
			setState(3402);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unpivot_in_clauseContext extends ParserRuleContext {
		public TerminalNode IN() { return getToken(OracleSQLStatementParser.IN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(OracleSQLStatementParser.LEFT_PAREN, 0); }
		public List<Unpivot_in_elementsContext> unpivot_in_elements() {
			return getRuleContexts(Unpivot_in_elementsContext.class);
		}
		public Unpivot_in_elementsContext unpivot_in_elements(int i) {
			return getRuleContext(Unpivot_in_elementsContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(OracleSQLStatementParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(OracleSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(OracleSQLStatementParser.COMMA, i);
		}
		public Unpivot_in_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unpivot_in_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterUnpivot_in_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitUnpivot_in_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitUnpivot_in_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Unpivot_in_clauseContext unpivot_in_clause() throws RecognitionException {
		Unpivot_in_clauseContext _localctx = new Unpivot_in_clauseContext(_ctx, getState());
		enterRule(_localctx, 390, RULE_unpivot_in_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3404);
			match(IN);
			setState(3405);
			match(LEFT_PAREN);
			setState(3406);
			unpivot_in_elements();
			setState(3411);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3407);
				match(COMMA);
				setState(3408);
				unpivot_in_elements();
				}
				}
				setState(3413);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3414);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unpivot_in_elementsContext extends ParserRuleContext {
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public List<TerminalNode> LEFT_PAREN() { return getTokens(OracleSQLStatementParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(OracleSQLStatementParser.LEFT_PAREN, i);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(OracleSQLStatementParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(OracleSQLStatementParser.RIGHT_PAREN, i);
		}
		public TerminalNode AS() { return getToken(OracleSQLStatementParser.AS, 0); }
		public List<TerminalNode> COMMA() { return getTokens(OracleSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(OracleSQLStatementParser.COMMA, i);
		}
		public List<ConstantContext> constant() {
			return getRuleContexts(ConstantContext.class);
		}
		public ConstantContext constant(int i) {
			return getRuleContext(ConstantContext.class,i);
		}
		public Unpivot_in_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unpivot_in_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterUnpivot_in_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitUnpivot_in_elements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitUnpivot_in_elements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Unpivot_in_elementsContext unpivot_in_elements() throws RecognitionException {
		Unpivot_in_elementsContext _localctx = new Unpivot_in_elementsContext(_ctx, getState());
		enterRule(_localctx, 392, RULE_unpivot_in_elements);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3428);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ABS:
			case ACOS:
			case ADD:
			case ADD_MONTHS:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASCII:
			case ASCIISTR:
			case ASIN:
			case ASSOCIATE:
			case ATAN2:
			case ATAN:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BFILENAME:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BIN_TO_NUM:
			case BITAND:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CARDINALITY:
			case CASCADE:
			case CASE:
			case CAST:
			case CEIL:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHARTOROWID:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOSE:
			case COMPOUND:
			case CONCAT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COS:
			case COSH:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_DATE:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case DUMP:
			case EACH:
			case ELEMENT:
			case EMPTY_BLOB:
			case EMPTY_CLOB:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXP:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FLOOR:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FROM_TZ:
			case FULL:
			case FUNCTION:
			case GROUP_ID:
			case GROUPING:
			case HASH:
			case HEXTORAW:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INITCAP:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INSTR2:
			case INSTR4:
			case INSTRB:
			case INSTRC:
			case INSTR:
			case INTERFACE:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST_DAY:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LENGTH2:
			case LENGTH4:
			case LENGTHB:
			case LENGTHC:
			case LENGTH:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LN:
			case LNNVL:
			case LOCAL:
			case LOCALTIMESTAMP:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MOD:
			case MONTH:
			case MONTHS_BETWEEN:
			case MULTISET:
			case NAME:
			case NAN:
			case NANVL:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCHR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NEW_TIME:
			case NEXT_DAY:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLIF:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NUMTODSINTERVAL:
			case NUMTOYMINTERVAL:
			case NVARCHAR2:
			case NVL2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPAQUE:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case POWER:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case PROCEDURE:
			case RAISE:
			case RANGE:
			case RAW:
			case RAWTOHEX:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_REPLACE:
			case REGEXP_SUBSTR:
			case REJECT:
			case RELIES_ON:
			case REMAINDER:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROWNUM:
			case ROW:
			case ROWS:
			case RPAD:
			case RTRIM:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGN:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SINH:
			case SIN:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SOUNDEX:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case SQRT:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYS_CONTEXT:
			case SYSDATE:
			case SYSTIMESTAMP:
			case TANH:
			case TAN:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TO_CLOB:
			case TO_DSINTERVAL:
			case TO_LOB:
			case TO_MULTI_BYTE:
			case TO_NCLOB:
			case TO_NUMBER:
			case TO_SINGLE_BYTE:
			case TO_TIMESTAMP:
			case TO_TIMESTAMP_TZ:
			case TO_YMINTERVAL:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TRUNC:
			case TYPE:
			case TZ_OFFSET:
			case UID:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPPER:
			case UPSERT:
			case UROWID:
			case USERENV:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case VSIZE:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case DECODE:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case NVL:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROUND:
			case ROW_NUMBER:
			case SUBSTR:
			case TO_CHAR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case LEAST:
			case GREATEST:
			case TO_DATE:
			case DELIMITED_ID:
			case ASTERISK:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(3416);
				column_name();
				}
				break;
			case LEFT_PAREN:
				{
				setState(3417);
				match(LEFT_PAREN);
				setState(3418);
				column_name();
				setState(3423);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3419);
					match(COMMA);
					setState(3420);
					column_name();
					}
					}
					setState(3425);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3426);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3445);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(3430);
				match(AS);
				setState(3443);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case DATE:
				case DBTIMEZONE:
				case DEFAULT:
				case FALSE:
				case INTERVAL:
				case MAXVALUE:
				case MINVALUE:
				case NULL:
				case SESSIONTIMEZONE:
				case TIMESTAMP:
				case TRUE:
				case NATIONAL_CHAR_STRING_LIT:
				case UNSIGNED_INTEGER:
				case APPROXIMATE_NUM_LIT:
				case CHAR_STRING:
					{
					setState(3431);
					constant();
					}
					break;
				case LEFT_PAREN:
					{
					setState(3432);
					match(LEFT_PAREN);
					setState(3433);
					constant();
					setState(3438);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(3434);
						match(COMMA);
						setState(3435);
						constant();
						}
						}
						setState(3440);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(3441);
					match(RIGHT_PAREN);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Hierarchical_query_clauseContext extends ParserRuleContext {
		public TerminalNode CONNECT() { return getToken(OracleSQLStatementParser.CONNECT, 0); }
		public TerminalNode BY() { return getToken(OracleSQLStatementParser.BY, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public TerminalNode NOCYCLE() { return getToken(OracleSQLStatementParser.NOCYCLE, 0); }
		public Start_partContext start_part() {
			return getRuleContext(Start_partContext.class,0);
		}
		public Hierarchical_query_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hierarchical_query_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterHierarchical_query_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitHierarchical_query_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitHierarchical_query_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Hierarchical_query_clauseContext hierarchical_query_clause() throws RecognitionException {
		Hierarchical_query_clauseContext _localctx = new Hierarchical_query_clauseContext(_ctx, getState());
		enterRule(_localctx, 394, RULE_hierarchical_query_clause);
		try {
			setState(3464);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CONNECT:
				enterOuterAlt(_localctx, 1);
				{
				setState(3447);
				match(CONNECT);
				setState(3448);
				match(BY);
				setState(3450);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,391,_ctx) ) {
				case 1:
					{
					setState(3449);
					match(NOCYCLE);
					}
					break;
				}
				setState(3452);
				condition();
				setState(3454);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,392,_ctx) ) {
				case 1:
					{
					setState(3453);
					start_part();
					}
					break;
				}
				}
				break;
			case START:
				enterOuterAlt(_localctx, 2);
				{
				setState(3456);
				start_part();
				setState(3457);
				match(CONNECT);
				setState(3458);
				match(BY);
				setState(3460);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,393,_ctx) ) {
				case 1:
					{
					setState(3459);
					match(NOCYCLE);
					}
					break;
				}
				setState(3462);
				condition();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Start_partContext extends ParserRuleContext {
		public TerminalNode START() { return getToken(OracleSQLStatementParser.START, 0); }
		public TerminalNode WITH() { return getToken(OracleSQLStatementParser.WITH, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public Start_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_start_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterStart_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitStart_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitStart_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Start_partContext start_part() throws RecognitionException {
		Start_partContext _localctx = new Start_partContext(_ctx, getState());
		enterRule(_localctx, 396, RULE_start_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3466);
			match(START);
			setState(3467);
			match(WITH);
			setState(3468);
			condition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Group_by_clauseContext extends ParserRuleContext {
		public TerminalNode GROUP() { return getToken(OracleSQLStatementParser.GROUP, 0); }
		public TerminalNode BY() { return getToken(OracleSQLStatementParser.BY, 0); }
		public List<Group_by_elementsContext> group_by_elements() {
			return getRuleContexts(Group_by_elementsContext.class);
		}
		public Group_by_elementsContext group_by_elements(int i) {
			return getRuleContext(Group_by_elementsContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(OracleSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(OracleSQLStatementParser.COMMA, i);
		}
		public Having_clauseContext having_clause() {
			return getRuleContext(Having_clauseContext.class,0);
		}
		public Group_by_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_group_by_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterGroup_by_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitGroup_by_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitGroup_by_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Group_by_clauseContext group_by_clause() throws RecognitionException {
		Group_by_clauseContext _localctx = new Group_by_clauseContext(_ctx, getState());
		enterRule(_localctx, 398, RULE_group_by_clause);
		try {
			int _alt;
			setState(3496);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case GROUP:
				enterOuterAlt(_localctx, 1);
				{
				setState(3470);
				match(GROUP);
				setState(3471);
				match(BY);
				setState(3472);
				group_by_elements();
				setState(3477);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,395,_ctx);
				while ( _alt!=2 && _alt!= ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(3473);
						match(COMMA);
						setState(3474);
						group_by_elements();
						}
						} 
					}
					setState(3479);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,395,_ctx);
				}
				setState(3481);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,396,_ctx) ) {
				case 1:
					{
					setState(3480);
					having_clause();
					}
					break;
				}
				}
				break;
			case HAVING:
				enterOuterAlt(_localctx, 2);
				{
				setState(3483);
				having_clause();
				setState(3494);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,398,_ctx) ) {
				case 1:
					{
					setState(3484);
					match(GROUP);
					setState(3485);
					match(BY);
					setState(3486);
					group_by_elements();
					setState(3491);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,397,_ctx);
					while ( _alt!=2 && _alt!= ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(3487);
							match(COMMA);
							setState(3488);
							group_by_elements();
							}
							} 
						}
						setState(3493);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,397,_ctx);
					}
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Group_by_elementsContext extends ParserRuleContext {
		public Grouping_sets_clauseContext grouping_sets_clause() {
			return getRuleContext(Grouping_sets_clauseContext.class,0);
		}
		public Rollup_cube_clauseContext rollup_cube_clause() {
			return getRuleContext(Rollup_cube_clauseContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Group_by_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_group_by_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterGroup_by_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitGroup_by_elements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitGroup_by_elements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Group_by_elementsContext group_by_elements() throws RecognitionException {
		Group_by_elementsContext _localctx = new Group_by_elementsContext(_ctx, getState());
		enterRule(_localctx, 400, RULE_group_by_elements);
		try {
			setState(3501);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,400,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3498);
				grouping_sets_clause();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3499);
				rollup_cube_clause();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3500);
				expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rollup_cube_clauseContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(OracleSQLStatementParser.LEFT_PAREN, 0); }
		public List<Grouping_sets_elementsContext> grouping_sets_elements() {
			return getRuleContexts(Grouping_sets_elementsContext.class);
		}
		public Grouping_sets_elementsContext grouping_sets_elements(int i) {
			return getRuleContext(Grouping_sets_elementsContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(OracleSQLStatementParser.RIGHT_PAREN, 0); }
		public TerminalNode ROLLUP() { return getToken(OracleSQLStatementParser.ROLLUP, 0); }
		public TerminalNode CUBE() { return getToken(OracleSQLStatementParser.CUBE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(OracleSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(OracleSQLStatementParser.COMMA, i);
		}
		public Rollup_cube_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rollup_cube_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterRollup_cube_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitRollup_cube_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitRollup_cube_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Rollup_cube_clauseContext rollup_cube_clause() throws RecognitionException {
		Rollup_cube_clauseContext _localctx = new Rollup_cube_clauseContext(_ctx, getState());
		enterRule(_localctx, 402, RULE_rollup_cube_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3503);
			_la = _input.LA(1);
			if ( !(_la==CUBE || _la==ROLLUP) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3504);
			match(LEFT_PAREN);
			setState(3505);
			grouping_sets_elements();
			setState(3510);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3506);
				match(COMMA);
				setState(3507);
				grouping_sets_elements();
				}
				}
				setState(3512);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3513);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Grouping_sets_clauseContext extends ParserRuleContext {
		public TerminalNode GROUPING() { return getToken(OracleSQLStatementParser.GROUPING, 0); }
		public TerminalNode SETS() { return getToken(OracleSQLStatementParser.SETS, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(OracleSQLStatementParser.LEFT_PAREN, 0); }
		public List<Grouping_sets_elementsContext> grouping_sets_elements() {
			return getRuleContexts(Grouping_sets_elementsContext.class);
		}
		public Grouping_sets_elementsContext grouping_sets_elements(int i) {
			return getRuleContext(Grouping_sets_elementsContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(OracleSQLStatementParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(OracleSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(OracleSQLStatementParser.COMMA, i);
		}
		public Grouping_sets_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grouping_sets_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterGrouping_sets_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitGrouping_sets_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitGrouping_sets_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Grouping_sets_clauseContext grouping_sets_clause() throws RecognitionException {
		Grouping_sets_clauseContext _localctx = new Grouping_sets_clauseContext(_ctx, getState());
		enterRule(_localctx, 404, RULE_grouping_sets_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3515);
			match(GROUPING);
			setState(3516);
			match(SETS);
			setState(3517);
			match(LEFT_PAREN);
			setState(3518);
			grouping_sets_elements();
			setState(3523);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3519);
				match(COMMA);
				setState(3520);
				grouping_sets_elements();
				}
				}
				setState(3525);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3526);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Grouping_sets_elementsContext extends ParserRuleContext {
		public Rollup_cube_clauseContext rollup_cube_clause() {
			return getRuleContext(Rollup_cube_clauseContext.class,0);
		}
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Grouping_sets_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grouping_sets_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterGrouping_sets_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitGrouping_sets_elements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitGrouping_sets_elements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Grouping_sets_elementsContext grouping_sets_elements() throws RecognitionException {
		Grouping_sets_elementsContext _localctx = new Grouping_sets_elementsContext(_ctx, getState());
		enterRule(_localctx, 406, RULE_grouping_sets_elements);
		try {
			setState(3531);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,403,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3528);
				rollup_cube_clause();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3529);
				expression_list();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3530);
				expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Having_clauseContext extends ParserRuleContext {
		public TerminalNode HAVING() { return getToken(OracleSQLStatementParser.HAVING, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public Having_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_having_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterHaving_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitHaving_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitHaving_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Having_clauseContext having_clause() throws RecognitionException {
		Having_clauseContext _localctx = new Having_clauseContext(_ctx, getState());
		enterRule(_localctx, 408, RULE_having_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3533);
			match(HAVING);
			setState(3534);
			condition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_clauseContext extends ParserRuleContext {
		public TerminalNode MODEL() { return getToken(OracleSQLStatementParser.MODEL, 0); }
		public Main_modelContext main_model() {
			return getRuleContext(Main_modelContext.class,0);
		}
		public List<Cell_reference_optionsContext> cell_reference_options() {
			return getRuleContexts(Cell_reference_optionsContext.class);
		}
		public Cell_reference_optionsContext cell_reference_options(int i) {
			return getRuleContext(Cell_reference_optionsContext.class,i);
		}
		public Return_rows_clauseContext return_rows_clause() {
			return getRuleContext(Return_rows_clauseContext.class,0);
		}
		public List<Reference_modelContext> reference_model() {
			return getRuleContexts(Reference_modelContext.class);
		}
		public Reference_modelContext reference_model(int i) {
			return getRuleContext(Reference_modelContext.class,i);
		}
		public Model_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterModel_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitModel_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitModel_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Model_clauseContext model_clause() throws RecognitionException {
		Model_clauseContext _localctx = new Model_clauseContext(_ctx, getState());
		enterRule(_localctx, 410, RULE_model_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3536);
			match(MODEL);
			setState(3540);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==IGNORE || _la==KEEP || _la==UNIQUE) {
				{
				{
				setState(3537);
				cell_reference_options();
				}
				}
				setState(3542);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3544);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RETURN) {
				{
				setState(3543);
				return_rows_clause();
				}
			}

			setState(3549);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==REFERENCE) {
				{
				{
				setState(3546);
				reference_model();
				}
				}
				setState(3551);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3552);
			main_model();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cell_reference_optionsContext extends ParserRuleContext {
		public TerminalNode NAV() { return getToken(OracleSQLStatementParser.NAV, 0); }
		public TerminalNode IGNORE() { return getToken(OracleSQLStatementParser.IGNORE, 0); }
		public TerminalNode KEEP() { return getToken(OracleSQLStatementParser.KEEP, 0); }
		public TerminalNode UNIQUE() { return getToken(OracleSQLStatementParser.UNIQUE, 0); }
		public TerminalNode DIMENSION() { return getToken(OracleSQLStatementParser.DIMENSION, 0); }
		public TerminalNode SINGLE() { return getToken(OracleSQLStatementParser.SINGLE, 0); }
		public TerminalNode REFERENCE() { return getToken(OracleSQLStatementParser.REFERENCE, 0); }
		public Cell_reference_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cell_reference_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterCell_reference_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitCell_reference_options(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitCell_reference_options(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cell_reference_optionsContext cell_reference_options() throws RecognitionException {
		Cell_reference_optionsContext _localctx = new Cell_reference_optionsContext(_ctx, getState());
		enterRule(_localctx, 412, RULE_cell_reference_options);
		int _la;
		try {
			setState(3562);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case IGNORE:
			case KEEP:
				enterOuterAlt(_localctx, 1);
				{
				setState(3554);
				_la = _input.LA(1);
				if ( !(_la==IGNORE || _la==KEEP) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3555);
				match(NAV);
				}
				break;
			case UNIQUE:
				enterOuterAlt(_localctx, 2);
				{
				setState(3556);
				match(UNIQUE);
				setState(3560);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case DIMENSION:
					{
					setState(3557);
					match(DIMENSION);
					}
					break;
				case SINGLE:
					{
					setState(3558);
					match(SINGLE);
					setState(3559);
					match(REFERENCE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Return_rows_clauseContext extends ParserRuleContext {
		public TerminalNode RETURN() { return getToken(OracleSQLStatementParser.RETURN, 0); }
		public TerminalNode ROWS() { return getToken(OracleSQLStatementParser.ROWS, 0); }
		public TerminalNode UPDATED() { return getToken(OracleSQLStatementParser.UPDATED, 0); }
		public TerminalNode ALL() { return getToken(OracleSQLStatementParser.ALL, 0); }
		public Return_rows_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_return_rows_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterReturn_rows_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitReturn_rows_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitReturn_rows_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Return_rows_clauseContext return_rows_clause() throws RecognitionException {
		Return_rows_clauseContext _localctx = new Return_rows_clauseContext(_ctx, getState());
		enterRule(_localctx, 414, RULE_return_rows_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3564);
			match(RETURN);
			setState(3565);
			_la = _input.LA(1);
			if ( !(_la==ALL || _la==UPDATED) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3566);
			match(ROWS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Reference_modelContext extends ParserRuleContext {
		public TerminalNode REFERENCE() { return getToken(OracleSQLStatementParser.REFERENCE, 0); }
		public Reference_model_nameContext reference_model_name() {
			return getRuleContext(Reference_model_nameContext.class,0);
		}
		public TerminalNode ON() { return getToken(OracleSQLStatementParser.ON, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(OracleSQLStatementParser.LEFT_PAREN, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(OracleSQLStatementParser.RIGHT_PAREN, 0); }
		public Model_column_clausesContext model_column_clauses() {
			return getRuleContext(Model_column_clausesContext.class,0);
		}
		public List<Cell_reference_optionsContext> cell_reference_options() {
			return getRuleContexts(Cell_reference_optionsContext.class);
		}
		public Cell_reference_optionsContext cell_reference_options(int i) {
			return getRuleContext(Cell_reference_optionsContext.class,i);
		}
		public Reference_modelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reference_model; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterReference_model(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitReference_model(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitReference_model(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Reference_modelContext reference_model() throws RecognitionException {
		Reference_modelContext _localctx = new Reference_modelContext(_ctx, getState());
		enterRule(_localctx, 416, RULE_reference_model);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3568);
			match(REFERENCE);
			setState(3569);
			reference_model_name();
			setState(3570);
			match(ON);
			setState(3571);
			match(LEFT_PAREN);
			setState(3572);
			subquery();
			setState(3573);
			match(RIGHT_PAREN);
			setState(3574);
			model_column_clauses();
			setState(3578);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==IGNORE || _la==KEEP || _la==UNIQUE) {
				{
				{
				setState(3575);
				cell_reference_options();
				}
				}
				setState(3580);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Main_modelContext extends ParserRuleContext {
		public Model_column_clausesContext model_column_clauses() {
			return getRuleContext(Model_column_clausesContext.class,0);
		}
		public Model_rules_clauseContext model_rules_clause() {
			return getRuleContext(Model_rules_clauseContext.class,0);
		}
		public TerminalNode MAIN() { return getToken(OracleSQLStatementParser.MAIN, 0); }
		public Main_model_nameContext main_model_name() {
			return getRuleContext(Main_model_nameContext.class,0);
		}
		public List<Cell_reference_optionsContext> cell_reference_options() {
			return getRuleContexts(Cell_reference_optionsContext.class);
		}
		public Cell_reference_optionsContext cell_reference_options(int i) {
			return getRuleContext(Cell_reference_optionsContext.class,i);
		}
		public Main_modelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_main_model; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterMain_model(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitMain_model(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitMain_model(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Main_modelContext main_model() throws RecognitionException {
		Main_modelContext _localctx = new Main_modelContext(_ctx, getState());
		enterRule(_localctx, 418, RULE_main_model);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3583);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==MAIN) {
				{
				setState(3581);
				match(MAIN);
				setState(3582);
				main_model_name();
				}
			}

			setState(3585);
			model_column_clauses();
			setState(3589);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==IGNORE || _la==KEEP || _la==UNIQUE) {
				{
				{
				setState(3586);
				cell_reference_options();
				}
				}
				setState(3591);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3592);
			model_rules_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_column_clausesContext extends ParserRuleContext {
		public TerminalNode DIMENSION() { return getToken(OracleSQLStatementParser.DIMENSION, 0); }
		public TerminalNode BY() { return getToken(OracleSQLStatementParser.BY, 0); }
		public List<Model_column_listContext> model_column_list() {
			return getRuleContexts(Model_column_listContext.class);
		}
		public Model_column_listContext model_column_list(int i) {
			return getRuleContext(Model_column_listContext.class,i);
		}
		public TerminalNode MEASURES() { return getToken(OracleSQLStatementParser.MEASURES, 0); }
		public Model_column_partition_partContext model_column_partition_part() {
			return getRuleContext(Model_column_partition_partContext.class,0);
		}
		public Model_column_clausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_column_clauses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterModel_column_clauses(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitModel_column_clauses(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitModel_column_clauses(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Model_column_clausesContext model_column_clauses() throws RecognitionException {
		Model_column_clausesContext _localctx = new Model_column_clausesContext(_ctx, getState());
		enterRule(_localctx, 420, RULE_model_column_clauses);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3595);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(3594);
				model_column_partition_part();
				}
			}

			setState(3597);
			match(DIMENSION);
			setState(3598);
			match(BY);
			setState(3599);
			model_column_list();
			setState(3600);
			match(MEASURES);
			setState(3601);
			model_column_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_column_partition_partContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(OracleSQLStatementParser.PARTITION, 0); }
		public TerminalNode BY() { return getToken(OracleSQLStatementParser.BY, 0); }
		public Model_column_listContext model_column_list() {
			return getRuleContext(Model_column_listContext.class,0);
		}
		public Model_column_partition_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_column_partition_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterModel_column_partition_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitModel_column_partition_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitModel_column_partition_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Model_column_partition_partContext model_column_partition_part() throws RecognitionException {
		Model_column_partition_partContext _localctx = new Model_column_partition_partContext(_ctx, getState());
		enterRule(_localctx, 422, RULE_model_column_partition_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3603);
			match(PARTITION);
			setState(3604);
			match(BY);
			setState(3605);
			model_column_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_column_listContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(OracleSQLStatementParser.LEFT_PAREN, 0); }
		public List<Model_columnContext> model_column() {
			return getRuleContexts(Model_columnContext.class);
		}
		public Model_columnContext model_column(int i) {
			return getRuleContext(Model_columnContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(OracleSQLStatementParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(OracleSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(OracleSQLStatementParser.COMMA, i);
		}
		public Model_column_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_column_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterModel_column_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitModel_column_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitModel_column_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Model_column_listContext model_column_list() throws RecognitionException {
		Model_column_listContext _localctx = new Model_column_listContext(_ctx, getState());
		enterRule(_localctx, 424, RULE_model_column_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3607);
			match(LEFT_PAREN);
			setState(3608);
			model_column();
			setState(3613);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3609);
				match(COMMA);
				setState(3610);
				model_column();
				}
				}
				setState(3615);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3616);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_columnContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Query_blockContext query_block() {
			return getRuleContext(Query_blockContext.class,0);
		}
		public Column_aliasContext column_alias() {
			return getRuleContext(Column_aliasContext.class,0);
		}
		public Model_columnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_column; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterModel_column(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitModel_column(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitModel_column(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Model_columnContext model_column() throws RecognitionException {
		Model_columnContext _localctx = new Model_columnContext(_ctx, getState());
		enterRule(_localctx, 426, RULE_model_column);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3620);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ABS:
			case ACOS:
			case ADD:
			case ADD_MONTHS:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ALL:
			case ANALYZE:
			case ANY:
			case ARRAY:
			case ASCII:
			case ASCIISTR:
			case ASIN:
			case ASSOCIATE:
			case ATAN2:
			case ATAN:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BFILENAME:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BIN_TO_NUM:
			case BITAND:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CARDINALITY:
			case CASCADE:
			case CASE:
			case CAST:
			case CEIL:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHARTOROWID:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOSE:
			case COMPOUND:
			case CONCAT:
			case CONNECT_BY_ROOT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COS:
			case COSH:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_DATE:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DISTINCT:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case DUMP:
			case EACH:
			case ELEMENT:
			case EMPTY_BLOB:
			case EMPTY_CLOB:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXP:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FALSE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FLOOR:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FROM_TZ:
			case FULL:
			case FUNCTION:
			case GROUP_ID:
			case GROUPING:
			case HASH:
			case HEXTORAW:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INITCAP:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INSTR2:
			case INSTR4:
			case INSTRB:
			case INSTRC:
			case INSTR:
			case INTERFACE:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST_DAY:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LENGTH2:
			case LENGTH4:
			case LENGTHB:
			case LENGTHC:
			case LENGTH:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LN:
			case LNNVL:
			case LOCAL:
			case LOCALTIMESTAMP:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MOD:
			case MONTH:
			case MONTHS_BETWEEN:
			case MULTISET:
			case NAME:
			case NAN:
			case NANVL:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCHR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NEW_TIME:
			case NEXT_DAY:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NOT:
			case NULLIF:
			case NULL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NUMTODSINTERVAL:
			case NUMTOYMINTERVAL:
			case NVARCHAR2:
			case NVL2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPAQUE:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case POWER:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case PROCEDURE:
			case RAISE:
			case RANGE:
			case RAW:
			case RAWTOHEX:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_REPLACE:
			case REGEXP_SUBSTR:
			case REJECT:
			case RELIES_ON:
			case REMAINDER:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROWNUM:
			case ROW:
			case ROWS:
			case RPAD:
			case RTRIM:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGN:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SINH:
			case SIN:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SOUNDEX:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case SQRT:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYS_CONTEXT:
			case SYSDATE:
			case SYSTIMESTAMP:
			case TANH:
			case TAN:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TO_CLOB:
			case TO_DSINTERVAL:
			case TO_LOB:
			case TO_MULTI_BYTE:
			case TO_NCLOB:
			case TO_NUMBER:
			case TO_SINGLE_BYTE:
			case TO_TIMESTAMP:
			case TO_TIMESTAMP_TZ:
			case TO_YMINTERVAL:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUE:
			case TRUNCATE:
			case TRUNC:
			case TYPE:
			case TZ_OFFSET:
			case UID:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPPER:
			case UPSERT:
			case UROWID:
			case USERENV:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case VSIZE:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case DECODE:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case NVL:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROUND:
			case ROW_NUMBER:
			case SUBSTR:
			case TO_CHAR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case LEAST:
			case GREATEST:
			case TO_DATE:
			case NATIONAL_CHAR_STRING_LIT:
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
			case CHAR_STRING:
			case DELIMITED_ID:
			case LEFT_PAREN:
			case ASTERISK:
			case PLUS_SIGN:
			case MINUS_SIGN:
			case BINDVAR:
			case COLON:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(3618);
				expression();
				}
				break;
			case SELECT:
				{
				setState(3619);
				query_block();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3623);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABS) | (1L << ACOS) | (1L << ADD) | (1L << ADD_MONTHS) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << AS) | (1L << ASCII) | (1L << ASCIISTR) | (1L << ASIN) | (1L << ASSOCIATE) | (1L << ATAN2) | (1L << ATAN) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BFILENAME) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BIN_TO_NUM) | (1L << BITAND) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CARDINALITY) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CEIL) | (1L << CHARACTER) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARTOROWID) | (1L << CHR) | (1L << C_LETTER))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOSE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONCAT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COS - 64)) | (1L << (COSH - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_DATE - 64)) | (1L << (CURRENT_TIMESTAMP - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (DIMENSION - 128)) | (1L << (DISABLE - 128)) | (1L << (DISASSOCIATE - 128)) | (1L << (DOCUMENT - 128)) | (1L << (DOUBLE - 128)) | (1L << (DSINTERVAL_UNCONSTRAINED - 128)) | (1L << (DUMP - 128)) | (1L << (EACH - 128)) | (1L << (ELEMENT - 128)) | (1L << (EMPTY_BLOB - 128)) | (1L << (EMPTY_CLOB - 128)) | (1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERR - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXP - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FLOOR - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FROM_TZ - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUP_ID - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HEXTORAW - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (IGNORE - 193)) | (1L << (IMMEDIATE - 193)) | (1L << (INCLUDE - 193)) | (1L << (INCLUDING - 193)) | (1L << (INCREMENT - 193)) | (1L << (INDENT - 193)) | (1L << (INDEXED - 193)) | (1L << (INDICATOR - 193)) | (1L << (INDICES - 193)) | (1L << (INFINITE - 193)) | (1L << (INITCAP - 193)) | (1L << (INLINE - 193)) | (1L << (INNER - 193)) | (1L << (INOUT - 193)) | (1L << (INSTANTIABLE - 193)) | (1L << (INSTEAD - 193)) | (1L << (INSTR2 - 193)) | (1L << (INSTR4 - 193)) | (1L << (INSTRB - 193)) | (1L << (INSTRC - 193)) | (1L << (INSTR - 193)) | (1L << (INTERFACE - 193)) | (1L << (INTEGER - 193)) | (1L << (INTERVAL - 193)) | (1L << (INT - 193)) | (1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (KEY - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST_DAY - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LENGTH2 - 193)) | (1L << (LENGTH4 - 193)) | (1L << (LENGTHB - 193)) | (1L << (LENGTHC - 193)) | (1L << (LENGTH - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LN - 193)) | (1L << (LNNVL - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCALTIMESTAMP - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (LOGON - 257)) | (1L << (LONG - 257)) | (1L << (LOOP - 257)) | (1L << (LOWER - 257)) | (1L << (LPAD - 257)) | (1L << (LTRIM - 257)) | (1L << (MAIN - 257)) | (1L << (MAP - 257)) | (1L << (MATCHED - 257)) | (1L << (MAXVALUE - 257)) | (1L << (MEASURES - 257)) | (1L << (MEMBER - 257)) | (1L << (MERGE - 257)) | (1L << (MINUTE - 257)) | (1L << (MINVALUE - 257)) | (1L << (MLSLABEL - 257)) | (1L << (MODEL - 257)) | (1L << (MODIFY - 257)) | (1L << (MOD - 257)) | (1L << (MONTH - 257)) | (1L << (MONTHS_BETWEEN - 257)) | (1L << (MULTISET - 257)) | (1L << (NAME - 257)) | (1L << (NAN - 257)) | (1L << (NANVL - 257)) | (1L << (NATURAL - 257)) | (1L << (NATURALN - 257)) | (1L << (NAV - 257)) | (1L << (NCHAR_CS - 257)) | (1L << (NCHAR - 257)) | (1L << (NCHR - 257)) | (1L << (NCLOB - 257)) | (1L << (NESTED - 257)) | (1L << (NEW - 257)) | (1L << (NEW_TIME - 257)) | (1L << (NEXT_DAY - 257)) | (1L << (NOAUDIT - 257)) | (1L << (NOCOPY - 257)) | (1L << (NOCYCLE - 257)) | (1L << (NOENTITYESCAPING - 257)) | (1L << (NONE - 257)) | (1L << (NO - 257)) | (1L << (NOSCHEMACHECK - 257)) | (1L << (NULLIF - 257)) | (1L << (NULLS - 257)) | (1L << (NUMBER - 257)) | (1L << (NUMERIC - 257)) | (1L << (NUMTODSINTERVAL - 257)) | (1L << (NUMTOYMINTERVAL - 257)) | (1L << (NVARCHAR2 - 257)) | (1L << (NVL2 - 257)) | (1L << (OBJECT - 257)) | (1L << (OFF - 257)))) != 0) || ((((_la - 321)) & ~0x3f) == 0 && ((1L << (_la - 321)) & ((1L << (OID - 321)) | (1L << (OLD - 321)) | (1L << (ONLY - 321)) | (1L << (OPAQUE - 321)) | (1L << (OPEN - 321)) | (1L << (ORADATA - 321)) | (1L << (ORDINALITY - 321)) | (1L << (OSERROR - 321)) | (1L << (OUTER - 321)) | (1L << (OUT - 321)) | (1L << (OVER - 321)) | (1L << (OVERRIDING - 321)) | (1L << (PACKAGE - 321)) | (1L << (PARALLEL_ENABLE - 321)) | (1L << (PARAMETERS - 321)) | (1L << (PARENT - 321)) | (1L << (PARTITION - 321)) | (1L << (PASSING - 321)) | (1L << (PATH - 321)) | (1L << (PIPELINED - 321)) | (1L << (PLAN - 321)) | (1L << (PLS_INTEGER - 321)) | (1L << (POSITIVEN - 321)) | (1L << (POSITIVE - 321)) | (1L << (POWER - 321)) | (1L << (PRAGMA - 321)) | (1L << (PRECEDING - 321)) | (1L << (PRECISION - 321)) | (1L << (PRESENT - 321)) | (1L << (PRIOR - 321)) | (1L << (PROCEDURE - 321)) | (1L << (RAISE - 321)) | (1L << (RANGE - 321)) | (1L << (RAW - 321)) | (1L << (RAWTOHEX - 321)) | (1L << (READ - 321)) | (1L << (REAL - 321)) | (1L << (RECORD - 321)) | (1L << (REFERENCE - 321)) | (1L << (REFERENCING - 321)) | (1L << (REF - 321)) | (1L << (REGEXP_COUNT - 321)) | (1L << (REGEXP_INSTR - 321)) | (1L << (REGEXP_REPLACE - 321)) | (1L << (REGEXP_SUBSTR - 321)) | (1L << (REJECT - 321)) | (1L << (RELIES_ON - 321)) | (1L << (REMAINDER - 321)))) != 0) || ((((_la - 385)) & ~0x3f) == 0 && ((1L << (_la - 385)) & ((1L << (RENAME - 385)) | (1L << (REPLACE - 385)) | (1L << (RESPECT - 385)) | (1L << (RESTRICT_REFERENCES - 385)) | (1L << (RESULT_CACHE - 385)) | (1L << (RESULT - 385)) | (1L << (RETURNING - 385)) | (1L << (RETURN - 385)) | (1L << (REUSE - 385)) | (1L << (REVERSE - 385)) | (1L << (RIGHT - 385)) | (1L << (ROLLBACK - 385)) | (1L << (ROLLUP - 385)) | (1L << (ROWID - 385)) | (1L << (ROWNUM - 385)) | (1L << (ROW - 385)) | (1L << (ROWS - 385)) | (1L << (RPAD - 385)) | (1L << (RTRIM - 385)) | (1L << (RULES - 385)) | (1L << (SAMPLE - 385)) | (1L << (SAVEPOINT - 385)) | (1L << (SAVE - 385)) | (1L << (SCHEMACHECK - 385)) | (1L << (SCHEMA - 385)) | (1L << (SCN - 385)) | (1L << (SECOND - 385)) | (1L << (SEED - 385)) | (1L << (SEGMENT - 385)) | (1L << (SELF - 385)) | (1L << (SEQUENTIAL - 385)) | (1L << (SERIALIZABLE - 385)) | (1L << (SERIALLY_REUSABLE - 385)) | (1L << (SERVERERROR - 385)) | (1L << (SESSIONTIMEZONE - 385)) | (1L << (SET - 385)) | (1L << (SETS - 385)) | (1L << (SETTINGS - 385)) | (1L << (SHOW - 385)) | (1L << (SHUTDOWN - 385)) | (1L << (SIBLINGS - 385)) | (1L << (SIGN - 385)) | (1L << (SIGNTYPE - 385)) | (1L << (SIMPLE_INTEGER - 385)) | (1L << (SINGLE - 385)) | (1L << (SINH - 385)) | (1L << (SIN - 385)) | (1L << (SKIP_ - 385)) | (1L << (SMALLINT - 385)) | (1L << (SNAPSHOT - 385)) | (1L << (SOME - 385)) | (1L << (SOUNDEX - 385)) | (1L << (SPECIFICATION - 385)) | (1L << (SQLDATA - 385)) | (1L << (SQLERROR - 385)) | (1L << (SQRT - 385)) | (1L << (STANDALONE - 385)))) != 0) || ((((_la - 449)) & ~0x3f) == 0 && ((1L << (_la - 449)) & ((1L << (STARTUP - 449)) | (1L << (STATEMENT_ID - 449)) | (1L << (STATEMENT - 449)) | (1L << (STATIC - 449)) | (1L << (STATISTICS - 449)) | (1L << (STRING - 449)) | (1L << (SUBMULTISET - 449)) | (1L << (SUBPARTITION - 449)) | (1L << (SUBSTITUTABLE - 449)) | (1L << (SUBTYPE - 449)) | (1L << (SUCCESS - 449)) | (1L << (SUSPEND - 449)) | (1L << (SYS_CONTEXT - 449)) | (1L << (SYSDATE - 449)) | (1L << (SYSTIMESTAMP - 449)) | (1L << (TANH - 449)) | (1L << (TAN - 449)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 449)) | (1L << (TIMESTAMP - 449)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 449)) | (1L << (TIMESTAMP_UNCONSTRAINED - 449)) | (1L << (TIME - 449)) | (1L << (TIMEZONE_ABBR - 449)) | (1L << (TIMEZONE_HOUR - 449)) | (1L << (TIMEZONE_MINUTE - 449)) | (1L << (TIMEZONE_REGION - 449)) | (1L << (TO_CLOB - 449)) | (1L << (TO_DSINTERVAL - 449)) | (1L << (TO_LOB - 449)) | (1L << (TO_MULTI_BYTE - 449)) | (1L << (TO_NCLOB - 449)) | (1L << (TO_NUMBER - 449)) | (1L << (TO_SINGLE_BYTE - 449)) | (1L << (TO_TIMESTAMP - 449)) | (1L << (TO_TIMESTAMP_TZ - 449)) | (1L << (TO_YMINTERVAL - 449)) | (1L << (TRAILING - 449)) | (1L << (TRANSACTION - 449)) | (1L << (TRANSLATE - 449)) | (1L << (TREAT - 449)) | (1L << (TRIGGER - 449)) | (1L << (TRUNCATE - 449)) | (1L << (TRUNC - 449)) | (1L << (TYPE - 449)) | (1L << (TZ_OFFSET - 449)) | (1L << (UID - 449)) | (1L << (UNBOUNDED - 449)) | (1L << (UNDER - 449)) | (1L << (UNLIMITED - 449)) | (1L << (UNTIL - 449)) | (1L << (UPDATED - 449)))) != 0) || ((((_la - 513)) & ~0x3f) == 0 && ((1L << (_la - 513)) & ((1L << (UPPER - 513)) | (1L << (UPSERT - 513)) | (1L << (UROWID - 513)) | (1L << (USERENV - 513)) | (1L << (USER - 513)) | (1L << (USE - 513)) | (1L << (VALIDATE - 513)) | (1L << (VALUE - 513)) | (1L << (VARCHAR2 - 513)) | (1L << (VARCHAR - 513)) | (1L << (VARIABLE - 513)) | (1L << (VARRAY - 513)) | (1L << (VARYING - 513)) | (1L << (VERSIONS - 513)) | (1L << (VERSION - 513)) | (1L << (VSIZE - 513)) | (1L << (WAIT - 513)) | (1L << (WARNING - 513)) | (1L << (WELLFORMED - 513)) | (1L << (WHENEVER - 513)) | (1L << (WHILE - 513)) | (1L << (WITHIN - 513)) | (1L << (WORK - 513)) | (1L << (WRITE - 513)) | (1L << (XMLAGG - 513)) | (1L << (XMLATTRIBUTES - 513)) | (1L << (XMLCAST - 513)) | (1L << (XMLCOLATTVAL - 513)) | (1L << (XMLELEMENT - 513)) | (1L << (XMLEXISTS - 513)) | (1L << (XMLFOREST - 513)) | (1L << (XMLNAMESPACES - 513)) | (1L << (XMLPARSE - 513)) | (1L << (XMLPI - 513)) | (1L << (XMLQUERY - 513)) | (1L << (XMLROOT - 513)) | (1L << (XMLSERIALIZE - 513)) | (1L << (XMLTABLE - 513)) | (1L << (XML - 513)) | (1L << (YEAR - 513)) | (1L << (YES - 513)) | (1L << (YMINTERVAL_UNCONSTRAINED - 513)) | (1L << (ZONE - 513)) | (1L << (PREDICTION - 513)) | (1L << (PREDICTION_BOUNDS - 513)) | (1L << (PREDICTION_COST - 513)) | (1L << (PREDICTION_DETAILS - 513)) | (1L << (PREDICTION_PROBABILITY - 513)) | (1L << (PREDICTION_SET - 513)) | (1L << (CUME_DIST - 513)) | (1L << (DENSE_RANK - 513)) | (1L << (LISTAGG - 513)) | (1L << (PERCENT_RANK - 513)) | (1L << (PERCENTILE_CONT - 513)) | (1L << (PERCENTILE_DISC - 513)) | (1L << (RANK - 513)))) != 0) || ((((_la - 577)) & ~0x3f) == 0 && ((1L << (_la - 577)) & ((1L << (AVG - 577)) | (1L << (CORR - 577)) | (1L << (COVAR_ - 577)) | (1L << (DECODE - 577)) | (1L << (LAG - 577)) | (1L << (LEAD - 577)) | (1L << (MAX - 577)) | (1L << (MEDIAN - 577)) | (1L << (MIN - 577)) | (1L << (NTILE - 577)) | (1L << (NVL - 577)) | (1L << (RATIO_TO_REPORT - 577)) | (1L << (REGR_ - 577)) | (1L << (ROUND - 577)) | (1L << (ROW_NUMBER - 577)) | (1L << (SUBSTR - 577)) | (1L << (TO_CHAR - 577)) | (1L << (TRIM - 577)) | (1L << (SUM - 577)) | (1L << (STDDEV - 577)) | (1L << (VAR_ - 577)) | (1L << (VARIANCE - 577)) | (1L << (LEAST - 577)) | (1L << (GREATEST - 577)) | (1L << (TO_DATE - 577)) | (1L << (NATIONAL_CHAR_STRING_LIT - 577)) | (1L << (CHAR_STRING - 577)) | (1L << (DELIMITED_ID - 577)) | (1L << (ASTERISK - 577)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
				{
				setState(3622);
				column_alias();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_rules_clauseContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(OracleSQLStatementParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(OracleSQLStatementParser.RIGHT_PAREN, 0); }
		public Model_rules_partContext model_rules_part() {
			return getRuleContext(Model_rules_partContext.class,0);
		}
		public List<Model_rules_elementContext> model_rules_element() {
			return getRuleContexts(Model_rules_elementContext.class);
		}
		public Model_rules_elementContext model_rules_element(int i) {
			return getRuleContext(Model_rules_elementContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(OracleSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(OracleSQLStatementParser.COMMA, i);
		}
		public Model_rules_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_rules_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterModel_rules_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitModel_rules_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitModel_rules_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Model_rules_clauseContext model_rules_clause() throws RecognitionException {
		Model_rules_clauseContext _localctx = new Model_rules_clauseContext(_ctx, getState());
		enterRule(_localctx, 428, RULE_model_rules_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3626);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RULES) {
				{
				setState(3625);
				model_rules_part();
				}
			}

			setState(3628);
			match(LEFT_PAREN);
			setState(3637);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABS) | (1L << ACOS) | (1L << ADD) | (1L << ADD_MONTHS) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASCII) | (1L << ASCIISTR) | (1L << ASIN) | (1L << ASSOCIATE) | (1L << ATAN2) | (1L << ATAN) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BFILENAME) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BIN_TO_NUM) | (1L << BITAND) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CARDINALITY) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CEIL) | (1L << CHARACTER) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARTOROWID) | (1L << CHR) | (1L << C_LETTER))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOSE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONCAT - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COS - 64)) | (1L << (COSH - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_DATE - 64)) | (1L << (CURRENT_TIMESTAMP - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (DIMENSION - 128)) | (1L << (DISABLE - 128)) | (1L << (DISASSOCIATE - 128)) | (1L << (DISTINCT - 128)) | (1L << (DOCUMENT - 128)) | (1L << (DOUBLE - 128)) | (1L << (DSINTERVAL_UNCONSTRAINED - 128)) | (1L << (DUMP - 128)) | (1L << (EACH - 128)) | (1L << (ELEMENT - 128)) | (1L << (EMPTY_BLOB - 128)) | (1L << (EMPTY_CLOB - 128)) | (1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERR - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXISTS - 128)) | (1L << (EXIT - 128)) | (1L << (EXP - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FALSE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FLOOR - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FROM_TZ - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUP_ID - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HEXTORAW - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (IGNORE - 193)) | (1L << (IMMEDIATE - 193)) | (1L << (INCLUDE - 193)) | (1L << (INCLUDING - 193)) | (1L << (INCREMENT - 193)) | (1L << (INDENT - 193)) | (1L << (INDEXED - 193)) | (1L << (INDICATOR - 193)) | (1L << (INDICES - 193)) | (1L << (INFINITE - 193)) | (1L << (INITCAP - 193)) | (1L << (INLINE - 193)) | (1L << (INNER - 193)) | (1L << (INOUT - 193)) | (1L << (INSTANTIABLE - 193)) | (1L << (INSTEAD - 193)) | (1L << (INSTR2 - 193)) | (1L << (INSTR4 - 193)) | (1L << (INSTRB - 193)) | (1L << (INSTRC - 193)) | (1L << (INSTR - 193)) | (1L << (INTERFACE - 193)) | (1L << (INTEGER - 193)) | (1L << (INTERVAL - 193)) | (1L << (INT - 193)) | (1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (KEY - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST_DAY - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LENGTH2 - 193)) | (1L << (LENGTH4 - 193)) | (1L << (LENGTHB - 193)) | (1L << (LENGTHC - 193)) | (1L << (LENGTH - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LN - 193)) | (1L << (LNNVL - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCALTIMESTAMP - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (LOGON - 257)) | (1L << (LONG - 257)) | (1L << (LOOP - 257)) | (1L << (LOWER - 257)) | (1L << (LPAD - 257)) | (1L << (LTRIM - 257)) | (1L << (MAIN - 257)) | (1L << (MAP - 257)) | (1L << (MATCHED - 257)) | (1L << (MAXVALUE - 257)) | (1L << (MEASURES - 257)) | (1L << (MEMBER - 257)) | (1L << (MERGE - 257)) | (1L << (MINUTE - 257)) | (1L << (MINVALUE - 257)) | (1L << (MLSLABEL - 257)) | (1L << (MODEL - 257)) | (1L << (MODIFY - 257)) | (1L << (MOD - 257)) | (1L << (MONTH - 257)) | (1L << (MONTHS_BETWEEN - 257)) | (1L << (MULTISET - 257)) | (1L << (NAME - 257)) | (1L << (NAN - 257)) | (1L << (NANVL - 257)) | (1L << (NATURAL - 257)) | (1L << (NATURALN - 257)) | (1L << (NAV - 257)) | (1L << (NCHAR_CS - 257)) | (1L << (NCHAR - 257)) | (1L << (NCHR - 257)) | (1L << (NCLOB - 257)) | (1L << (NESTED - 257)) | (1L << (NEW - 257)) | (1L << (NEW_TIME - 257)) | (1L << (NEXT_DAY - 257)) | (1L << (NOAUDIT - 257)) | (1L << (NOCOPY - 257)) | (1L << (NOCYCLE - 257)) | (1L << (NOENTITYESCAPING - 257)) | (1L << (NONE - 257)) | (1L << (NO - 257)) | (1L << (NOSCHEMACHECK - 257)) | (1L << (NULLIF - 257)) | (1L << (NULL - 257)) | (1L << (NULLS - 257)) | (1L << (NUMBER - 257)) | (1L << (NUMERIC - 257)) | (1L << (NUMTODSINTERVAL - 257)) | (1L << (NUMTOYMINTERVAL - 257)) | (1L << (NVARCHAR2 - 257)) | (1L << (NVL2 - 257)) | (1L << (OBJECT - 257)) | (1L << (OFF - 257)))) != 0) || ((((_la - 321)) & ~0x3f) == 0 && ((1L << (_la - 321)) & ((1L << (OID - 321)) | (1L << (OLD - 321)) | (1L << (ONLY - 321)) | (1L << (OPAQUE - 321)) | (1L << (OPEN - 321)) | (1L << (ORADATA - 321)) | (1L << (ORDINALITY - 321)) | (1L << (OSERROR - 321)) | (1L << (OUTER - 321)) | (1L << (OUT - 321)) | (1L << (OVER - 321)) | (1L << (OVERRIDING - 321)) | (1L << (PACKAGE - 321)) | (1L << (PARALLEL_ENABLE - 321)) | (1L << (PARAMETERS - 321)) | (1L << (PARENT - 321)) | (1L << (PARTITION - 321)) | (1L << (PASSING - 321)) | (1L << (PATH - 321)) | (1L << (PIPELINED - 321)) | (1L << (PLAN - 321)) | (1L << (PLS_INTEGER - 321)) | (1L << (POSITIVEN - 321)) | (1L << (POSITIVE - 321)) | (1L << (POWER - 321)) | (1L << (PRAGMA - 321)) | (1L << (PRECEDING - 321)) | (1L << (PRECISION - 321)) | (1L << (PRESENT - 321)) | (1L << (PRIOR - 321)) | (1L << (PROCEDURE - 321)) | (1L << (RAISE - 321)) | (1L << (RANGE - 321)) | (1L << (RAW - 321)) | (1L << (RAWTOHEX - 321)) | (1L << (READ - 321)) | (1L << (REAL - 321)) | (1L << (RECORD - 321)) | (1L << (REFERENCE - 321)) | (1L << (REFERENCING - 321)) | (1L << (REF - 321)) | (1L << (REGEXP_COUNT - 321)) | (1L << (REGEXP_INSTR - 321)) | (1L << (REGEXP_REPLACE - 321)) | (1L << (REGEXP_SUBSTR - 321)) | (1L << (REJECT - 321)) | (1L << (RELIES_ON - 321)) | (1L << (REMAINDER - 321)))) != 0) || ((((_la - 385)) & ~0x3f) == 0 && ((1L << (_la - 385)) & ((1L << (RENAME - 385)) | (1L << (REPLACE - 385)) | (1L << (RESPECT - 385)) | (1L << (RESTRICT_REFERENCES - 385)) | (1L << (RESULT_CACHE - 385)) | (1L << (RESULT - 385)) | (1L << (RETURNING - 385)) | (1L << (RETURN - 385)) | (1L << (REUSE - 385)) | (1L << (REVERSE - 385)) | (1L << (RIGHT - 385)) | (1L << (ROLLBACK - 385)) | (1L << (ROLLUP - 385)) | (1L << (ROWID - 385)) | (1L << (ROWNUM - 385)) | (1L << (ROW - 385)) | (1L << (ROWS - 385)) | (1L << (RPAD - 385)) | (1L << (RTRIM - 385)) | (1L << (RULES - 385)) | (1L << (SAMPLE - 385)) | (1L << (SAVEPOINT - 385)) | (1L << (SAVE - 385)) | (1L << (SCHEMACHECK - 385)) | (1L << (SCHEMA - 385)) | (1L << (SCN - 385)) | (1L << (SECOND - 385)) | (1L << (SEED - 385)) | (1L << (SEGMENT - 385)) | (1L << (SELF - 385)) | (1L << (SEQUENTIAL - 385)) | (1L << (SERIALIZABLE - 385)) | (1L << (SERIALLY_REUSABLE - 385)) | (1L << (SERVERERROR - 385)) | (1L << (SESSIONTIMEZONE - 385)) | (1L << (SET - 385)) | (1L << (SETS - 385)) | (1L << (SETTINGS - 385)) | (1L << (SHOW - 385)) | (1L << (SHUTDOWN - 385)) | (1L << (SIBLINGS - 385)) | (1L << (SIGN - 385)) | (1L << (SIGNTYPE - 385)) | (1L << (SIMPLE_INTEGER - 385)) | (1L << (SINGLE - 385)) | (1L << (SINH - 385)) | (1L << (SIN - 385)) | (1L << (SKIP_ - 385)) | (1L << (SMALLINT - 385)) | (1L << (SNAPSHOT - 385)) | (1L << (SOME - 385)) | (1L << (SOUNDEX - 385)) | (1L << (SPECIFICATION - 385)) | (1L << (SQLDATA - 385)) | (1L << (SQLERROR - 385)) | (1L << (SQRT - 385)) | (1L << (STANDALONE - 385)))) != 0) || ((((_la - 449)) & ~0x3f) == 0 && ((1L << (_la - 449)) & ((1L << (STARTUP - 449)) | (1L << (STATEMENT_ID - 449)) | (1L << (STATEMENT - 449)) | (1L << (STATIC - 449)) | (1L << (STATISTICS - 449)) | (1L << (STRING - 449)) | (1L << (SUBMULTISET - 449)) | (1L << (SUBPARTITION - 449)) | (1L << (SUBSTITUTABLE - 449)) | (1L << (SUBTYPE - 449)) | (1L << (SUCCESS - 449)) | (1L << (SUSPEND - 449)) | (1L << (SYS_CONTEXT - 449)) | (1L << (SYSDATE - 449)) | (1L << (SYSTIMESTAMP - 449)) | (1L << (TANH - 449)) | (1L << (TAN - 449)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 449)) | (1L << (TIMESTAMP - 449)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 449)) | (1L << (TIMESTAMP_UNCONSTRAINED - 449)) | (1L << (TIME - 449)) | (1L << (TIMEZONE_ABBR - 449)) | (1L << (TIMEZONE_HOUR - 449)) | (1L << (TIMEZONE_MINUTE - 449)) | (1L << (TIMEZONE_REGION - 449)) | (1L << (TO_CLOB - 449)) | (1L << (TO_DSINTERVAL - 449)) | (1L << (TO_LOB - 449)) | (1L << (TO_MULTI_BYTE - 449)) | (1L << (TO_NCLOB - 449)) | (1L << (TO_NUMBER - 449)) | (1L << (TO_SINGLE_BYTE - 449)) | (1L << (TO_TIMESTAMP - 449)) | (1L << (TO_TIMESTAMP_TZ - 449)) | (1L << (TO_YMINTERVAL - 449)) | (1L << (TRAILING - 449)) | (1L << (TRANSACTION - 449)) | (1L << (TRANSLATE - 449)) | (1L << (TREAT - 449)) | (1L << (TRIGGER - 449)) | (1L << (TRUE - 449)) | (1L << (TRUNCATE - 449)) | (1L << (TRUNC - 449)) | (1L << (TYPE - 449)) | (1L << (TZ_OFFSET - 449)) | (1L << (UID - 449)) | (1L << (UNBOUNDED - 449)) | (1L << (UNDER - 449)) | (1L << (UNLIMITED - 449)) | (1L << (UNTIL - 449)) | (1L << (UPDATED - 449)) | (1L << (UPDATE - 449)))) != 0) || ((((_la - 513)) & ~0x3f) == 0 && ((1L << (_la - 513)) & ((1L << (UPPER - 513)) | (1L << (UPSERT - 513)) | (1L << (UROWID - 513)) | (1L << (USERENV - 513)) | (1L << (USER - 513)) | (1L << (USE - 513)) | (1L << (VALIDATE - 513)) | (1L << (VALUE - 513)) | (1L << (VARCHAR2 - 513)) | (1L << (VARCHAR - 513)) | (1L << (VARIABLE - 513)) | (1L << (VARRAY - 513)) | (1L << (VARYING - 513)) | (1L << (VERSIONS - 513)) | (1L << (VERSION - 513)) | (1L << (VSIZE - 513)) | (1L << (WAIT - 513)) | (1L << (WARNING - 513)) | (1L << (WELLFORMED - 513)) | (1L << (WHENEVER - 513)) | (1L << (WHILE - 513)) | (1L << (WITHIN - 513)) | (1L << (WORK - 513)) | (1L << (WRITE - 513)) | (1L << (XMLAGG - 513)) | (1L << (XMLATTRIBUTES - 513)) | (1L << (XMLCAST - 513)) | (1L << (XMLCOLATTVAL - 513)) | (1L << (XMLELEMENT - 513)) | (1L << (XMLEXISTS - 513)) | (1L << (XMLFOREST - 513)) | (1L << (XMLNAMESPACES - 513)) | (1L << (XMLPARSE - 513)) | (1L << (XMLPI - 513)) | (1L << (XMLQUERY - 513)) | (1L << (XMLROOT - 513)) | (1L << (XMLSERIALIZE - 513)) | (1L << (XMLTABLE - 513)) | (1L << (XML - 513)) | (1L << (YEAR - 513)) | (1L << (YES - 513)) | (1L << (YMINTERVAL_UNCONSTRAINED - 513)) | (1L << (ZONE - 513)) | (1L << (PREDICTION - 513)) | (1L << (PREDICTION_BOUNDS - 513)) | (1L << (PREDICTION_COST - 513)) | (1L << (PREDICTION_DETAILS - 513)) | (1L << (PREDICTION_PROBABILITY - 513)) | (1L << (PREDICTION_SET - 513)) | (1L << (CUME_DIST - 513)) | (1L << (DENSE_RANK - 513)) | (1L << (LISTAGG - 513)) | (1L << (PERCENT_RANK - 513)) | (1L << (PERCENTILE_CONT - 513)) | (1L << (PERCENTILE_DISC - 513)) | (1L << (RANK - 513)))) != 0) || ((((_la - 577)) & ~0x3f) == 0 && ((1L << (_la - 577)) & ((1L << (AVG - 577)) | (1L << (CORR - 577)) | (1L << (COVAR_ - 577)) | (1L << (DECODE - 577)) | (1L << (LAG - 577)) | (1L << (LEAD - 577)) | (1L << (MAX - 577)) | (1L << (MEDIAN - 577)) | (1L << (MIN - 577)) | (1L << (NTILE - 577)) | (1L << (NVL - 577)) | (1L << (RATIO_TO_REPORT - 577)) | (1L << (REGR_ - 577)) | (1L << (ROUND - 577)) | (1L << (ROW_NUMBER - 577)) | (1L << (SUBSTR - 577)) | (1L << (TO_CHAR - 577)) | (1L << (TRIM - 577)) | (1L << (SUM - 577)) | (1L << (STDDEV - 577)) | (1L << (VAR_ - 577)) | (1L << (VARIANCE - 577)) | (1L << (LEAST - 577)) | (1L << (GREATEST - 577)) | (1L << (TO_DATE - 577)) | (1L << (NATIONAL_CHAR_STRING_LIT - 577)) | (1L << (UNSIGNED_INTEGER - 577)) | (1L << (APPROXIMATE_NUM_LIT - 577)) | (1L << (CHAR_STRING - 577)) | (1L << (DELIMITED_ID - 577)) | (1L << (LEFT_PAREN - 577)) | (1L << (ASTERISK - 577)) | (1L << (PLUS_SIGN - 577)) | (1L << (MINUS_SIGN - 577)) | (1L << (BINDVAR - 577)) | (1L << (COLON - 577)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
				{
				setState(3629);
				model_rules_element();
				setState(3634);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3630);
					match(COMMA);
					setState(3631);
					model_rules_element();
					}
					}
					setState(3636);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(3639);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_rules_partContext extends ParserRuleContext {
		public TerminalNode RULES() { return getToken(OracleSQLStatementParser.RULES, 0); }
		public TerminalNode UPDATE() { return getToken(OracleSQLStatementParser.UPDATE, 0); }
		public TerminalNode UPSERT() { return getToken(OracleSQLStatementParser.UPSERT, 0); }
		public TerminalNode ORDER() { return getToken(OracleSQLStatementParser.ORDER, 0); }
		public Model_iterate_clauseContext model_iterate_clause() {
			return getRuleContext(Model_iterate_clauseContext.class,0);
		}
		public TerminalNode AUTOMATIC() { return getToken(OracleSQLStatementParser.AUTOMATIC, 0); }
		public TerminalNode SEQUENTIAL() { return getToken(OracleSQLStatementParser.SEQUENTIAL, 0); }
		public TerminalNode ALL() { return getToken(OracleSQLStatementParser.ALL, 0); }
		public Model_rules_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_rules_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterModel_rules_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitModel_rules_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitModel_rules_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Model_rules_partContext model_rules_part() throws RecognitionException {
		Model_rules_partContext _localctx = new Model_rules_partContext(_ctx, getState());
		enterRule(_localctx, 430, RULE_model_rules_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3641);
			match(RULES);
			setState(3647);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UPDATE:
				{
				setState(3642);
				match(UPDATE);
				}
				break;
			case UPSERT:
				{
				setState(3643);
				match(UPSERT);
				setState(3645);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALL) {
					{
					setState(3644);
					match(ALL);
					}
				}

				}
				break;
			case AUTOMATIC:
			case ITERATE:
			case SEQUENTIAL:
			case LEFT_PAREN:
				break;
			default:
				break;
			}
			setState(3651);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTOMATIC || _la==SEQUENTIAL) {
				{
				setState(3649);
				_la = _input.LA(1);
				if ( !(_la==AUTOMATIC || _la==SEQUENTIAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3650);
				match(ORDER);
				}
			}

			setState(3654);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ITERATE) {
				{
				setState(3653);
				model_iterate_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_rules_elementContext extends ParserRuleContext {
		public Cell_assignmentContext cell_assignment() {
			return getRuleContext(Cell_assignmentContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode UPDATE() { return getToken(OracleSQLStatementParser.UPDATE, 0); }
		public TerminalNode UPSERT() { return getToken(OracleSQLStatementParser.UPSERT, 0); }
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public TerminalNode ALL() { return getToken(OracleSQLStatementParser.ALL, 0); }
		public Model_rules_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_rules_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterModel_rules_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitModel_rules_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitModel_rules_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Model_rules_elementContext model_rules_element() throws RecognitionException {
		Model_rules_elementContext _localctx = new Model_rules_elementContext(_ctx, getState());
		enterRule(_localctx, 432, RULE_model_rules_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3661);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,424,_ctx) ) {
			case 1:
				{
				setState(3656);
				match(UPDATE);
				}
				break;
			case 2:
				{
				setState(3657);
				match(UPSERT);
				setState(3659);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,423,_ctx) ) {
				case 1:
					{
					setState(3658);
					match(ALL);
					}
					break;
				}
				}
				break;
			}
			setState(3663);
			cell_assignment();
			setState(3665);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(3664);
				order_by_clause();
				}
			}

			setState(3667);
			match(EQUALS_OP);
			setState(3668);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cell_assignmentContext extends ParserRuleContext {
		public Model_expressionContext model_expression() {
			return getRuleContext(Model_expressionContext.class,0);
		}
		public Cell_assignmentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cell_assignment; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterCell_assignment(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitCell_assignment(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitCell_assignment(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cell_assignmentContext cell_assignment() throws RecognitionException {
		Cell_assignmentContext _localctx = new Cell_assignmentContext(_ctx, getState());
		enterRule(_localctx, 434, RULE_cell_assignment);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3670);
			model_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_iterate_clauseContext extends ParserRuleContext {
		public TerminalNode ITERATE() { return getToken(OracleSQLStatementParser.ITERATE, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(OracleSQLStatementParser.LEFT_PAREN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(OracleSQLStatementParser.RIGHT_PAREN, 0); }
		public Until_partContext until_part() {
			return getRuleContext(Until_partContext.class,0);
		}
		public Model_iterate_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_iterate_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterModel_iterate_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitModel_iterate_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitModel_iterate_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Model_iterate_clauseContext model_iterate_clause() throws RecognitionException {
		Model_iterate_clauseContext _localctx = new Model_iterate_clauseContext(_ctx, getState());
		enterRule(_localctx, 436, RULE_model_iterate_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3672);
			match(ITERATE);
			setState(3673);
			match(LEFT_PAREN);
			setState(3674);
			expression();
			setState(3675);
			match(RIGHT_PAREN);
			setState(3677);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==UNTIL) {
				{
				setState(3676);
				until_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Until_partContext extends ParserRuleContext {
		public TerminalNode UNTIL() { return getToken(OracleSQLStatementParser.UNTIL, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(OracleSQLStatementParser.LEFT_PAREN, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(OracleSQLStatementParser.RIGHT_PAREN, 0); }
		public Until_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_until_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterUntil_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitUntil_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitUntil_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Until_partContext until_part() throws RecognitionException {
		Until_partContext _localctx = new Until_partContext(_ctx, getState());
		enterRule(_localctx, 438, RULE_until_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3679);
			match(UNTIL);
			setState(3680);
			match(LEFT_PAREN);
			setState(3681);
			condition();
			setState(3682);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Order_by_clauseContext extends ParserRuleContext {
		public TerminalNode ORDER() { return getToken(OracleSQLStatementParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(OracleSQLStatementParser.BY, 0); }
		public List<Order_by_elementsContext> order_by_elements() {
			return getRuleContexts(Order_by_elementsContext.class);
		}
		public Order_by_elementsContext order_by_elements(int i) {
			return getRuleContext(Order_by_elementsContext.class,i);
		}
		public TerminalNode SIBLINGS() { return getToken(OracleSQLStatementParser.SIBLINGS, 0); }
		public List<TerminalNode> COMMA() { return getTokens(OracleSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(OracleSQLStatementParser.COMMA, i);
		}
		public Order_by_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_order_by_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterOrder_by_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitOrder_by_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitOrder_by_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Order_by_clauseContext order_by_clause() throws RecognitionException {
		Order_by_clauseContext _localctx = new Order_by_clauseContext(_ctx, getState());
		enterRule(_localctx, 440, RULE_order_by_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3684);
			match(ORDER);
			setState(3686);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SIBLINGS) {
				{
				setState(3685);
				match(SIBLINGS);
				}
			}

			setState(3688);
			match(BY);
			setState(3689);
			order_by_elements();
			setState(3694);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3690);
				match(COMMA);
				setState(3691);
				order_by_elements();
				}
				}
				setState(3696);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Order_by_elementsContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode NULLS() { return getToken(OracleSQLStatementParser.NULLS, 0); }
		public TerminalNode ASC() { return getToken(OracleSQLStatementParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(OracleSQLStatementParser.DESC, 0); }
		public TerminalNode FIRST() { return getToken(OracleSQLStatementParser.FIRST, 0); }
		public TerminalNode LAST() { return getToken(OracleSQLStatementParser.LAST, 0); }
		public Order_by_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_order_by_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterOrder_by_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitOrder_by_elements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitOrder_by_elements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Order_by_elementsContext order_by_elements() throws RecognitionException {
		Order_by_elementsContext _localctx = new Order_by_elementsContext(_ctx, getState());
		enterRule(_localctx, 442, RULE_order_by_elements);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3697);
			expression();
			setState(3699);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ASC || _la==DESC) {
				{
				setState(3698);
				_la = _input.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3703);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NULLS) {
				{
				setState(3701);
				match(NULLS);
				setState(3702);
				_la = _input.LA(1);
				if ( !(_la==FIRST || _la==LAST) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class For_update_clauseContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(OracleSQLStatementParser.FOR, 0); }
		public TerminalNode UPDATE() { return getToken(OracleSQLStatementParser.UPDATE, 0); }
		public For_update_of_partContext for_update_of_part() {
			return getRuleContext(For_update_of_partContext.class,0);
		}
		public For_update_optionsContext for_update_options() {
			return getRuleContext(For_update_optionsContext.class,0);
		}
		public For_update_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_update_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterFor_update_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitFor_update_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitFor_update_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final For_update_clauseContext for_update_clause() throws RecognitionException {
		For_update_clauseContext _localctx = new For_update_clauseContext(_ctx, getState());
		enterRule(_localctx, 444, RULE_for_update_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3705);
			match(FOR);
			setState(3706);
			match(UPDATE);
			setState(3708);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OF) {
				{
				setState(3707);
				for_update_of_part();
				}
			}

			setState(3711);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOWAIT || _la==SKIP_ || _la==WAIT) {
				{
				setState(3710);
				for_update_options();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class For_update_of_partContext extends ParserRuleContext {
		public TerminalNode OF() { return getToken(OracleSQLStatementParser.OF, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(OracleSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(OracleSQLStatementParser.COMMA, i);
		}
		public For_update_of_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_update_of_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterFor_update_of_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitFor_update_of_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitFor_update_of_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final For_update_of_partContext for_update_of_part() throws RecognitionException {
		For_update_of_partContext _localctx = new For_update_of_partContext(_ctx, getState());
		enterRule(_localctx, 446, RULE_for_update_of_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3713);
			match(OF);
			setState(3714);
			column_name();
			setState(3719);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3715);
				match(COMMA);
				setState(3716);
				column_name();
				}
				}
				setState(3721);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class For_update_optionsContext extends ParserRuleContext {
		public TerminalNode SKIP_() { return getToken(OracleSQLStatementParser.SKIP_, 0); }
		public TerminalNode LOCKED() { return getToken(OracleSQLStatementParser.LOCKED, 0); }
		public TerminalNode NOWAIT() { return getToken(OracleSQLStatementParser.NOWAIT, 0); }
		public TerminalNode WAIT() { return getToken(OracleSQLStatementParser.WAIT, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public For_update_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_update_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterFor_update_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitFor_update_options(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitFor_update_options(this);
			else return visitor.visitChildren(this);
		}
	}

	public final For_update_optionsContext for_update_options() throws RecognitionException {
		For_update_optionsContext _localctx = new For_update_optionsContext(_ctx, getState());
		enterRule(_localctx, 448, RULE_for_update_options);
		try {
			setState(3727);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SKIP_:
				enterOuterAlt(_localctx, 1);
				{
				setState(3722);
				match(SKIP_);
				setState(3723);
				match(LOCKED);
				}
				break;
			case NOWAIT:
				enterOuterAlt(_localctx, 2);
				{
				setState(3724);
				match(NOWAIT);
				}
				break;
			case WAIT:
				enterOuterAlt(_localctx, 3);
				{
				setState(3725);
				match(WAIT);
				setState(3726);
				expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Update_statementContext extends ParserRuleContext {
		public TerminalNode UPDATE() { return getToken(OracleSQLStatementParser.UPDATE, 0); }
		public General_table_refContext general_table_ref() {
			return getRuleContext(General_table_refContext.class,0);
		}
		public Update_set_clauseContext update_set_clause() {
			return getRuleContext(Update_set_clauseContext.class,0);
		}
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public Static_returning_clauseContext static_returning_clause() {
			return getRuleContext(Static_returning_clauseContext.class,0);
		}
		public Error_logging_clauseContext error_logging_clause() {
			return getRuleContext(Error_logging_clauseContext.class,0);
		}
		public Update_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_update_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterUpdate_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitUpdate_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitUpdate_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Update_statementContext update_statement() throws RecognitionException {
		Update_statementContext _localctx = new Update_statementContext(_ctx, getState());
		enterRule(_localctx, 450, RULE_update_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3729);
			match(UPDATE);
			setState(3730);
			general_table_ref();
			setState(3731);
			update_set_clause();
			setState(3733);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(3732);
				where_clause();
				}
			}

			setState(3736);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RETURNING || _la==RETURN) {
				{
				setState(3735);
				static_returning_clause();
				}
			}

			setState(3739);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOG) {
				{
				setState(3738);
				error_logging_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Update_set_clauseContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(OracleSQLStatementParser.SET, 0); }
		public List<Column_based_update_set_clauseContext> column_based_update_set_clause() {
			return getRuleContexts(Column_based_update_set_clauseContext.class);
		}
		public Column_based_update_set_clauseContext column_based_update_set_clause(int i) {
			return getRuleContext(Column_based_update_set_clauseContext.class,i);
		}
		public TerminalNode VALUE() { return getToken(OracleSQLStatementParser.VALUE, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(OracleSQLStatementParser.LEFT_PAREN, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(OracleSQLStatementParser.RIGHT_PAREN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(OracleSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(OracleSQLStatementParser.COMMA, i);
		}
		public Update_set_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_update_set_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterUpdate_set_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitUpdate_set_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitUpdate_set_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Update_set_clauseContext update_set_clause() throws RecognitionException {
		Update_set_clauseContext _localctx = new Update_set_clauseContext(_ctx, getState());
		enterRule(_localctx, 452, RULE_update_set_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3741);
			match(SET);
			setState(3757);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,439,_ctx) ) {
			case 1:
				{
				setState(3742);
				column_based_update_set_clause();
				setState(3747);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3743);
					match(COMMA);
					setState(3744);
					column_based_update_set_clause();
					}
					}
					setState(3749);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				{
				setState(3750);
				match(VALUE);
				setState(3751);
				match(LEFT_PAREN);
				setState(3752);
				identifier();
				setState(3753);
				match(RIGHT_PAREN);
				setState(3754);
				match(EQUALS_OP);
				setState(3755);
				expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_based_update_set_clauseContext extends ParserRuleContext {
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(OracleSQLStatementParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(OracleSQLStatementParser.RIGHT_PAREN, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(OracleSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(OracleSQLStatementParser.COMMA, i);
		}
		public Column_based_update_set_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_based_update_set_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterColumn_based_update_set_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitColumn_based_update_set_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitColumn_based_update_set_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_based_update_set_clauseContext column_based_update_set_clause() throws RecognitionException {
		Column_based_update_set_clauseContext _localctx = new Column_based_update_set_clauseContext(_ctx, getState());
		enterRule(_localctx, 454, RULE_column_based_update_set_clause);
		int _la;
		try {
			setState(3776);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ABS:
			case ACOS:
			case ADD:
			case ADD_MONTHS:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASCII:
			case ASCIISTR:
			case ASIN:
			case ASSOCIATE:
			case ATAN2:
			case ATAN:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BFILENAME:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BIN_TO_NUM:
			case BITAND:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CARDINALITY:
			case CASCADE:
			case CASE:
			case CAST:
			case CEIL:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHARTOROWID:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOSE:
			case COMPOUND:
			case CONCAT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COS:
			case COSH:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_DATE:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case DUMP:
			case EACH:
			case ELEMENT:
			case EMPTY_BLOB:
			case EMPTY_CLOB:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXP:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FLOOR:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FROM_TZ:
			case FULL:
			case FUNCTION:
			case GROUP_ID:
			case GROUPING:
			case HASH:
			case HEXTORAW:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INITCAP:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INSTR2:
			case INSTR4:
			case INSTRB:
			case INSTRC:
			case INSTR:
			case INTERFACE:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST_DAY:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LENGTH2:
			case LENGTH4:
			case LENGTHB:
			case LENGTHC:
			case LENGTH:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LN:
			case LNNVL:
			case LOCAL:
			case LOCALTIMESTAMP:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MOD:
			case MONTH:
			case MONTHS_BETWEEN:
			case MULTISET:
			case NAME:
			case NAN:
			case NANVL:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCHR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NEW_TIME:
			case NEXT_DAY:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLIF:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NUMTODSINTERVAL:
			case NUMTOYMINTERVAL:
			case NVARCHAR2:
			case NVL2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPAQUE:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case POWER:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case PROCEDURE:
			case RAISE:
			case RANGE:
			case RAW:
			case RAWTOHEX:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_REPLACE:
			case REGEXP_SUBSTR:
			case REJECT:
			case RELIES_ON:
			case REMAINDER:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROWNUM:
			case ROW:
			case ROWS:
			case RPAD:
			case RTRIM:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGN:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SINH:
			case SIN:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SOUNDEX:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case SQRT:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYS_CONTEXT:
			case SYSDATE:
			case SYSTIMESTAMP:
			case TANH:
			case TAN:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TO_CLOB:
			case TO_DSINTERVAL:
			case TO_LOB:
			case TO_MULTI_BYTE:
			case TO_NCLOB:
			case TO_NUMBER:
			case TO_SINGLE_BYTE:
			case TO_TIMESTAMP:
			case TO_TIMESTAMP_TZ:
			case TO_YMINTERVAL:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TRUNC:
			case TYPE:
			case TZ_OFFSET:
			case UID:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPPER:
			case UPSERT:
			case UROWID:
			case USERENV:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case VSIZE:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case DECODE:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case NVL:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROUND:
			case ROW_NUMBER:
			case SUBSTR:
			case TO_CHAR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case LEAST:
			case GREATEST:
			case TO_DATE:
			case DELIMITED_ID:
			case ASTERISK:
			case INTRODUCER:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(3759);
				column_name();
				setState(3760);
				match(EQUALS_OP);
				setState(3761);
				expression();
				}
				break;
			case LEFT_PAREN:
				enterOuterAlt(_localctx, 2);
				{
				setState(3763);
				match(LEFT_PAREN);
				setState(3764);
				column_name();
				setState(3769);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3765);
					match(COMMA);
					setState(3766);
					column_name();
					}
					}
					setState(3771);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3772);
				match(RIGHT_PAREN);
				setState(3773);
				match(EQUALS_OP);
				setState(3774);
				subquery();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Delete_statementContext extends ParserRuleContext {
		public TerminalNode DELETE() { return getToken(OracleSQLStatementParser.DELETE, 0); }
		public General_table_refContext general_table_ref() {
			return getRuleContext(General_table_refContext.class,0);
		}
		public TerminalNode FROM() { return getToken(OracleSQLStatementParser.FROM, 0); }
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public Static_returning_clauseContext static_returning_clause() {
			return getRuleContext(Static_returning_clauseContext.class,0);
		}
		public Error_logging_clauseContext error_logging_clause() {
			return getRuleContext(Error_logging_clauseContext.class,0);
		}
		public Delete_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_delete_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterDelete_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitDelete_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitDelete_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Delete_statementContext delete_statement() throws RecognitionException {
		Delete_statementContext _localctx = new Delete_statementContext(_ctx, getState());
		enterRule(_localctx, 456, RULE_delete_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3778);
			match(DELETE);
			setState(3780);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(3779);
				match(FROM);
				}
			}

			setState(3782);
			general_table_ref();
			setState(3784);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(3783);
				where_clause();
				}
			}

			setState(3787);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RETURNING || _la==RETURN) {
				{
				setState(3786);
				static_returning_clause();
				}
			}

			setState(3790);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOG) {
				{
				setState(3789);
				error_logging_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Insert_statementContext extends ParserRuleContext {
		public TerminalNode INSERT() { return getToken(OracleSQLStatementParser.INSERT, 0); }
		public Single_table_insertContext single_table_insert() {
			return getRuleContext(Single_table_insertContext.class,0);
		}
		public Multi_table_insertContext multi_table_insert() {
			return getRuleContext(Multi_table_insertContext.class,0);
		}
		public Insert_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insert_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterInsert_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitInsert_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitInsert_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Insert_statementContext insert_statement() throws RecognitionException {
		Insert_statementContext _localctx = new Insert_statementContext(_ctx, getState());
		enterRule(_localctx, 458, RULE_insert_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3792);
			match(INSERT);
			setState(3795);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INTO:
				{
				setState(3793);
				single_table_insert();
				}
				break;
			case ALL:
			case FIRST:
			case WHEN:
				{
				setState(3794);
				multi_table_insert();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Single_table_insertContext extends ParserRuleContext {
		public Insert_into_clauseContext insert_into_clause() {
			return getRuleContext(Insert_into_clauseContext.class,0);
		}
		public Values_clauseContext values_clause() {
			return getRuleContext(Values_clauseContext.class,0);
		}
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public Error_logging_clauseContext error_logging_clause() {
			return getRuleContext(Error_logging_clauseContext.class,0);
		}
		public Static_returning_clauseContext static_returning_clause() {
			return getRuleContext(Static_returning_clauseContext.class,0);
		}
		public Single_table_insertContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_single_table_insert; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterSingle_table_insert(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitSingle_table_insert(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitSingle_table_insert(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Single_table_insertContext single_table_insert() throws RecognitionException {
		Single_table_insertContext _localctx = new Single_table_insertContext(_ctx, getState());
		enterRule(_localctx, 460, RULE_single_table_insert);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3797);
			insert_into_clause();
			setState(3803);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case VALUES:
				{
				setState(3798);
				values_clause();
				setState(3800);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RETURNING || _la==RETURN) {
					{
					setState(3799);
					static_returning_clause();
					}
				}

				}
				break;
			case SELECT:
			case WITH:
			case LEFT_PAREN:
				{
				setState(3802);
				select_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3806);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOG) {
				{
				setState(3805);
				error_logging_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Multi_table_insertContext extends ParserRuleContext {
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public TerminalNode ALL() { return getToken(OracleSQLStatementParser.ALL, 0); }
		public Conditional_insert_clauseContext conditional_insert_clause() {
			return getRuleContext(Conditional_insert_clauseContext.class,0);
		}
		public List<Multi_table_elementContext> multi_table_element() {
			return getRuleContexts(Multi_table_elementContext.class);
		}
		public Multi_table_elementContext multi_table_element(int i) {
			return getRuleContext(Multi_table_elementContext.class,i);
		}
		public Multi_table_insertContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multi_table_insert; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterMulti_table_insert(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitMulti_table_insert(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitMulti_table_insert(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Multi_table_insertContext multi_table_insert() throws RecognitionException {
		Multi_table_insertContext _localctx = new Multi_table_insertContext(_ctx, getState());
		enterRule(_localctx, 462, RULE_multi_table_insert);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3815);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,451,_ctx) ) {
			case 1:
				{
				setState(3808);
				match(ALL);
				setState(3810); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(3809);
					multi_table_element();
					}
					}
					setState(3812); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==INTO );
				}
				break;
			case 2:
				{
				setState(3814);
				conditional_insert_clause();
				}
				break;
			}
			setState(3817);
			select_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Multi_table_elementContext extends ParserRuleContext {
		public Insert_into_clauseContext insert_into_clause() {
			return getRuleContext(Insert_into_clauseContext.class,0);
		}
		public Values_clauseContext values_clause() {
			return getRuleContext(Values_clauseContext.class,0);
		}
		public Error_logging_clauseContext error_logging_clause() {
			return getRuleContext(Error_logging_clauseContext.class,0);
		}
		public Multi_table_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multi_table_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterMulti_table_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitMulti_table_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitMulti_table_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Multi_table_elementContext multi_table_element() throws RecognitionException {
		Multi_table_elementContext _localctx = new Multi_table_elementContext(_ctx, getState());
		enterRule(_localctx, 464, RULE_multi_table_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3819);
			insert_into_clause();
			setState(3821);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==VALUES) {
				{
				setState(3820);
				values_clause();
				}
			}

			setState(3824);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOG) {
				{
				setState(3823);
				error_logging_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Conditional_insert_clauseContext extends ParserRuleContext {
		public List<Conditional_insert_when_partContext> conditional_insert_when_part() {
			return getRuleContexts(Conditional_insert_when_partContext.class);
		}
		public Conditional_insert_when_partContext conditional_insert_when_part(int i) {
			return getRuleContext(Conditional_insert_when_partContext.class,i);
		}
		public Conditional_insert_else_partContext conditional_insert_else_part() {
			return getRuleContext(Conditional_insert_else_partContext.class,0);
		}
		public TerminalNode ALL() { return getToken(OracleSQLStatementParser.ALL, 0); }
		public TerminalNode FIRST() { return getToken(OracleSQLStatementParser.FIRST, 0); }
		public Conditional_insert_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_conditional_insert_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterConditional_insert_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitConditional_insert_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitConditional_insert_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Conditional_insert_clauseContext conditional_insert_clause() throws RecognitionException {
		Conditional_insert_clauseContext _localctx = new Conditional_insert_clauseContext(_ctx, getState());
		enterRule(_localctx, 466, RULE_conditional_insert_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3827);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALL || _la==FIRST) {
				{
				setState(3826);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==FIRST) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3830); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(3829);
				conditional_insert_when_part();
				}
				}
				setState(3832); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==WHEN );
			setState(3835);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(3834);
				conditional_insert_else_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Conditional_insert_when_partContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(OracleSQLStatementParser.WHEN, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public TerminalNode THEN() { return getToken(OracleSQLStatementParser.THEN, 0); }
		public List<Multi_table_elementContext> multi_table_element() {
			return getRuleContexts(Multi_table_elementContext.class);
		}
		public Multi_table_elementContext multi_table_element(int i) {
			return getRuleContext(Multi_table_elementContext.class,i);
		}
		public Conditional_insert_when_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_conditional_insert_when_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterConditional_insert_when_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitConditional_insert_when_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitConditional_insert_when_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Conditional_insert_when_partContext conditional_insert_when_part() throws RecognitionException {
		Conditional_insert_when_partContext _localctx = new Conditional_insert_when_partContext(_ctx, getState());
		enterRule(_localctx, 468, RULE_conditional_insert_when_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3837);
			match(WHEN);
			setState(3838);
			condition();
			setState(3839);
			match(THEN);
			setState(3841); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(3840);
				multi_table_element();
				}
				}
				setState(3843); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==INTO );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Conditional_insert_else_partContext extends ParserRuleContext {
		public TerminalNode ELSE() { return getToken(OracleSQLStatementParser.ELSE, 0); }
		public List<Multi_table_elementContext> multi_table_element() {
			return getRuleContexts(Multi_table_elementContext.class);
		}
		public Multi_table_elementContext multi_table_element(int i) {
			return getRuleContext(Multi_table_elementContext.class,i);
		}
		public Conditional_insert_else_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_conditional_insert_else_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterConditional_insert_else_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitConditional_insert_else_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitConditional_insert_else_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Conditional_insert_else_partContext conditional_insert_else_part() throws RecognitionException {
		Conditional_insert_else_partContext _localctx = new Conditional_insert_else_partContext(_ctx, getState());
		enterRule(_localctx, 470, RULE_conditional_insert_else_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3845);
			match(ELSE);
			setState(3847); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(3846);
				multi_table_element();
				}
				}
				setState(3849); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==INTO );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Insert_into_clauseContext extends ParserRuleContext {
		public TerminalNode INTO() { return getToken(OracleSQLStatementParser.INTO, 0); }
		public General_table_refContext general_table_ref() {
			return getRuleContext(General_table_refContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(OracleSQLStatementParser.LEFT_PAREN, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(OracleSQLStatementParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(OracleSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(OracleSQLStatementParser.COMMA, i);
		}
		public Insert_into_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insert_into_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterInsert_into_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitInsert_into_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitInsert_into_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Insert_into_clauseContext insert_into_clause() throws RecognitionException {
		Insert_into_clauseContext _localctx = new Insert_into_clauseContext(_ctx, getState());
		enterRule(_localctx, 472, RULE_insert_into_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3851);
			match(INTO);
			setState(3852);
			general_table_ref();
			setState(3864);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,460,_ctx) ) {
			case 1:
				{
				setState(3853);
				match(LEFT_PAREN);
				setState(3854);
				column_name();
				setState(3859);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3855);
					match(COMMA);
					setState(3856);
					column_name();
					}
					}
					setState(3861);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3862);
				match(RIGHT_PAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Values_clauseContext extends ParserRuleContext {
		public TerminalNode VALUES() { return getToken(OracleSQLStatementParser.VALUES, 0); }
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Values_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_values_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterValues_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitValues_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitValues_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Values_clauseContext values_clause() throws RecognitionException {
		Values_clauseContext _localctx = new Values_clauseContext(_ctx, getState());
		enterRule(_localctx, 474, RULE_values_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3866);
			match(VALUES);
			setState(3869);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LEFT_PAREN:
				{
				setState(3867);
				expression_list();
				}
				break;
			case ABS:
			case ACOS:
			case ADD:
			case ADD_MONTHS:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASCII:
			case ASCIISTR:
			case ASIN:
			case ASSOCIATE:
			case ATAN2:
			case ATAN:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BFILENAME:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BIN_TO_NUM:
			case BITAND:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CARDINALITY:
			case CASCADE:
			case CASE:
			case CAST:
			case CEIL:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHARTOROWID:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOSE:
			case COMPOUND:
			case CONCAT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COS:
			case COSH:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_DATE:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case DUMP:
			case EACH:
			case ELEMENT:
			case EMPTY_BLOB:
			case EMPTY_CLOB:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXP:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FLOOR:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FROM_TZ:
			case FULL:
			case FUNCTION:
			case GROUP_ID:
			case GROUPING:
			case HASH:
			case HEXTORAW:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INITCAP:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INSTR2:
			case INSTR4:
			case INSTRB:
			case INSTRC:
			case INSTR:
			case INTERFACE:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST_DAY:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LENGTH2:
			case LENGTH4:
			case LENGTHB:
			case LENGTHC:
			case LENGTH:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LN:
			case LNNVL:
			case LOCAL:
			case LOCALTIMESTAMP:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MOD:
			case MONTH:
			case MONTHS_BETWEEN:
			case MULTISET:
			case NAME:
			case NAN:
			case NANVL:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCHR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NEW_TIME:
			case NEXT_DAY:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLIF:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NUMTODSINTERVAL:
			case NUMTOYMINTERVAL:
			case NVARCHAR2:
			case NVL2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPAQUE:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case POWER:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case PROCEDURE:
			case RAISE:
			case RANGE:
			case RAW:
			case RAWTOHEX:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_REPLACE:
			case REGEXP_SUBSTR:
			case REJECT:
			case RELIES_ON:
			case REMAINDER:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROWNUM:
			case ROW:
			case ROWS:
			case RPAD:
			case RTRIM:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGN:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SINH:
			case SIN:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SOUNDEX:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case SQRT:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYS_CONTEXT:
			case SYSDATE:
			case SYSTIMESTAMP:
			case TANH:
			case TAN:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TO_CLOB:
			case TO_DSINTERVAL:
			case TO_LOB:
			case TO_MULTI_BYTE:
			case TO_NCLOB:
			case TO_NUMBER:
			case TO_SINGLE_BYTE:
			case TO_TIMESTAMP:
			case TO_TIMESTAMP_TZ:
			case TO_YMINTERVAL:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TRUNC:
			case TYPE:
			case TZ_OFFSET:
			case UID:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPPER:
			case UPSERT:
			case UROWID:
			case USERENV:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case VSIZE:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case DECODE:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case NVL:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROUND:
			case ROW_NUMBER:
			case SUBSTR:
			case TO_CHAR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case LEAST:
			case GREATEST:
			case TO_DATE:
			case DELIMITED_ID:
			case ASTERISK:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(3868);
				identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Merge_statementContext extends ParserRuleContext {
		public TerminalNode MERGE() { return getToken(OracleSQLStatementParser.MERGE, 0); }
		public TerminalNode INTO() { return getToken(OracleSQLStatementParser.INTO, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public TerminalNode USING() { return getToken(OracleSQLStatementParser.USING, 0); }
		public Selected_tableviewContext selected_tableview() {
			return getRuleContext(Selected_tableviewContext.class,0);
		}
		public TerminalNode ON() { return getToken(OracleSQLStatementParser.ON, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(OracleSQLStatementParser.LEFT_PAREN, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(OracleSQLStatementParser.RIGHT_PAREN, 0); }
		public Table_aliasContext table_alias() {
			return getRuleContext(Table_aliasContext.class,0);
		}
		public Merge_update_clauseContext merge_update_clause() {
			return getRuleContext(Merge_update_clauseContext.class,0);
		}
		public Merge_insert_clauseContext merge_insert_clause() {
			return getRuleContext(Merge_insert_clauseContext.class,0);
		}
		public Error_logging_clauseContext error_logging_clause() {
			return getRuleContext(Error_logging_clauseContext.class,0);
		}
		public Merge_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_merge_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterMerge_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitMerge_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitMerge_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Merge_statementContext merge_statement() throws RecognitionException {
		Merge_statementContext _localctx = new Merge_statementContext(_ctx, getState());
		enterRule(_localctx, 476, RULE_merge_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3871);
			match(MERGE);
			setState(3872);
			match(INTO);
			setState(3873);
			tableview_name();
			setState(3875);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABS) | (1L << ACOS) | (1L << ADD) | (1L << ADD_MONTHS) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASCII) | (1L << ASCIISTR) | (1L << ASIN) | (1L << ASSOCIATE) | (1L << ATAN2) | (1L << ATAN) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BFILENAME) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BIN_TO_NUM) | (1L << BITAND) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CARDINALITY) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CEIL) | (1L << CHARACTER) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARTOROWID) | (1L << CHR) | (1L << C_LETTER))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOSE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONCAT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COS - 64)) | (1L << (COSH - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_DATE - 64)) | (1L << (CURRENT_TIMESTAMP - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (DIMENSION - 128)) | (1L << (DISABLE - 128)) | (1L << (DISASSOCIATE - 128)) | (1L << (DOCUMENT - 128)) | (1L << (DOUBLE - 128)) | (1L << (DSINTERVAL_UNCONSTRAINED - 128)) | (1L << (DUMP - 128)) | (1L << (EACH - 128)) | (1L << (ELEMENT - 128)) | (1L << (EMPTY_BLOB - 128)) | (1L << (EMPTY_CLOB - 128)) | (1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERR - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXP - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FLOOR - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FROM_TZ - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUP_ID - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HEXTORAW - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (IGNORE - 193)) | (1L << (IMMEDIATE - 193)) | (1L << (INCLUDE - 193)) | (1L << (INCLUDING - 193)) | (1L << (INCREMENT - 193)) | (1L << (INDENT - 193)) | (1L << (INDEXED - 193)) | (1L << (INDICATOR - 193)) | (1L << (INDICES - 193)) | (1L << (INFINITE - 193)) | (1L << (INITCAP - 193)) | (1L << (INLINE - 193)) | (1L << (INNER - 193)) | (1L << (INOUT - 193)) | (1L << (INSTANTIABLE - 193)) | (1L << (INSTEAD - 193)) | (1L << (INSTR2 - 193)) | (1L << (INSTR4 - 193)) | (1L << (INSTRB - 193)) | (1L << (INSTRC - 193)) | (1L << (INSTR - 193)) | (1L << (INTERFACE - 193)) | (1L << (INTEGER - 193)) | (1L << (INTERVAL - 193)) | (1L << (INT - 193)) | (1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (KEY - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST_DAY - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LENGTH2 - 193)) | (1L << (LENGTH4 - 193)) | (1L << (LENGTHB - 193)) | (1L << (LENGTHC - 193)) | (1L << (LENGTH - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LN - 193)) | (1L << (LNNVL - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCALTIMESTAMP - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (LOGON - 257)) | (1L << (LONG - 257)) | (1L << (LOOP - 257)) | (1L << (LOWER - 257)) | (1L << (LPAD - 257)) | (1L << (LTRIM - 257)) | (1L << (MAIN - 257)) | (1L << (MAP - 257)) | (1L << (MATCHED - 257)) | (1L << (MAXVALUE - 257)) | (1L << (MEASURES - 257)) | (1L << (MEMBER - 257)) | (1L << (MERGE - 257)) | (1L << (MINUTE - 257)) | (1L << (MINVALUE - 257)) | (1L << (MLSLABEL - 257)) | (1L << (MODEL - 257)) | (1L << (MODIFY - 257)) | (1L << (MOD - 257)) | (1L << (MONTH - 257)) | (1L << (MONTHS_BETWEEN - 257)) | (1L << (MULTISET - 257)) | (1L << (NAME - 257)) | (1L << (NAN - 257)) | (1L << (NANVL - 257)) | (1L << (NATURAL - 257)) | (1L << (NATURALN - 257)) | (1L << (NAV - 257)) | (1L << (NCHAR_CS - 257)) | (1L << (NCHAR - 257)) | (1L << (NCHR - 257)) | (1L << (NCLOB - 257)) | (1L << (NESTED - 257)) | (1L << (NEW - 257)) | (1L << (NEW_TIME - 257)) | (1L << (NEXT_DAY - 257)) | (1L << (NOAUDIT - 257)) | (1L << (NOCOPY - 257)) | (1L << (NOCYCLE - 257)) | (1L << (NOENTITYESCAPING - 257)) | (1L << (NONE - 257)) | (1L << (NO - 257)) | (1L << (NOSCHEMACHECK - 257)) | (1L << (NULLIF - 257)) | (1L << (NULLS - 257)) | (1L << (NUMBER - 257)) | (1L << (NUMERIC - 257)) | (1L << (NUMTODSINTERVAL - 257)) | (1L << (NUMTOYMINTERVAL - 257)) | (1L << (NVARCHAR2 - 257)) | (1L << (NVL2 - 257)) | (1L << (OBJECT - 257)) | (1L << (OFF - 257)))) != 0) || ((((_la - 321)) & ~0x3f) == 0 && ((1L << (_la - 321)) & ((1L << (OID - 321)) | (1L << (OLD - 321)) | (1L << (ONLY - 321)) | (1L << (OPAQUE - 321)) | (1L << (OPEN - 321)) | (1L << (ORADATA - 321)) | (1L << (ORDINALITY - 321)) | (1L << (OSERROR - 321)) | (1L << (OUTER - 321)) | (1L << (OUT - 321)) | (1L << (OVER - 321)) | (1L << (OVERRIDING - 321)) | (1L << (PACKAGE - 321)) | (1L << (PARALLEL_ENABLE - 321)) | (1L << (PARAMETERS - 321)) | (1L << (PARENT - 321)) | (1L << (PARTITION - 321)) | (1L << (PASSING - 321)) | (1L << (PATH - 321)) | (1L << (PIPELINED - 321)) | (1L << (PLAN - 321)) | (1L << (PLS_INTEGER - 321)) | (1L << (POSITIVEN - 321)) | (1L << (POSITIVE - 321)) | (1L << (POWER - 321)) | (1L << (PRAGMA - 321)) | (1L << (PRECEDING - 321)) | (1L << (PRECISION - 321)) | (1L << (PRESENT - 321)) | (1L << (PRIOR - 321)) | (1L << (PROCEDURE - 321)) | (1L << (RAISE - 321)) | (1L << (RANGE - 321)) | (1L << (RAW - 321)) | (1L << (RAWTOHEX - 321)) | (1L << (READ - 321)) | (1L << (REAL - 321)) | (1L << (RECORD - 321)) | (1L << (REFERENCE - 321)) | (1L << (REFERENCING - 321)) | (1L << (REF - 321)) | (1L << (REGEXP_COUNT - 321)) | (1L << (REGEXP_INSTR - 321)) | (1L << (REGEXP_REPLACE - 321)) | (1L << (REGEXP_SUBSTR - 321)) | (1L << (REJECT - 321)) | (1L << (RELIES_ON - 321)) | (1L << (REMAINDER - 321)))) != 0) || ((((_la - 385)) & ~0x3f) == 0 && ((1L << (_la - 385)) & ((1L << (RENAME - 385)) | (1L << (REPLACE - 385)) | (1L << (RESPECT - 385)) | (1L << (RESTRICT_REFERENCES - 385)) | (1L << (RESULT_CACHE - 385)) | (1L << (RESULT - 385)) | (1L << (RETURNING - 385)) | (1L << (RETURN - 385)) | (1L << (REUSE - 385)) | (1L << (REVERSE - 385)) | (1L << (RIGHT - 385)) | (1L << (ROLLBACK - 385)) | (1L << (ROLLUP - 385)) | (1L << (ROWID - 385)) | (1L << (ROWNUM - 385)) | (1L << (ROW - 385)) | (1L << (ROWS - 385)) | (1L << (RPAD - 385)) | (1L << (RTRIM - 385)) | (1L << (RULES - 385)) | (1L << (SAMPLE - 385)) | (1L << (SAVEPOINT - 385)) | (1L << (SAVE - 385)) | (1L << (SCHEMACHECK - 385)) | (1L << (SCHEMA - 385)) | (1L << (SCN - 385)) | (1L << (SECOND - 385)) | (1L << (SEED - 385)) | (1L << (SEGMENT - 385)) | (1L << (SELF - 385)) | (1L << (SEQUENTIAL - 385)) | (1L << (SERIALIZABLE - 385)) | (1L << (SERIALLY_REUSABLE - 385)) | (1L << (SERVERERROR - 385)) | (1L << (SESSIONTIMEZONE - 385)) | (1L << (SET - 385)) | (1L << (SETS - 385)) | (1L << (SETTINGS - 385)) | (1L << (SHOW - 385)) | (1L << (SHUTDOWN - 385)) | (1L << (SIBLINGS - 385)) | (1L << (SIGN - 385)) | (1L << (SIGNTYPE - 385)) | (1L << (SIMPLE_INTEGER - 385)) | (1L << (SINGLE - 385)) | (1L << (SINH - 385)) | (1L << (SIN - 385)) | (1L << (SKIP_ - 385)) | (1L << (SMALLINT - 385)) | (1L << (SNAPSHOT - 385)) | (1L << (SOME - 385)) | (1L << (SOUNDEX - 385)) | (1L << (SPECIFICATION - 385)) | (1L << (SQLDATA - 385)) | (1L << (SQLERROR - 385)) | (1L << (SQRT - 385)) | (1L << (STANDALONE - 385)))) != 0) || ((((_la - 449)) & ~0x3f) == 0 && ((1L << (_la - 449)) & ((1L << (STARTUP - 449)) | (1L << (STATEMENT_ID - 449)) | (1L << (STATEMENT - 449)) | (1L << (STATIC - 449)) | (1L << (STATISTICS - 449)) | (1L << (STRING - 449)) | (1L << (SUBMULTISET - 449)) | (1L << (SUBPARTITION - 449)) | (1L << (SUBSTITUTABLE - 449)) | (1L << (SUBTYPE - 449)) | (1L << (SUCCESS - 449)) | (1L << (SUSPEND - 449)) | (1L << (SYS_CONTEXT - 449)) | (1L << (SYSDATE - 449)) | (1L << (SYSTIMESTAMP - 449)) | (1L << (TANH - 449)) | (1L << (TAN - 449)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 449)) | (1L << (TIMESTAMP - 449)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 449)) | (1L << (TIMESTAMP_UNCONSTRAINED - 449)) | (1L << (TIME - 449)) | (1L << (TIMEZONE_ABBR - 449)) | (1L << (TIMEZONE_HOUR - 449)) | (1L << (TIMEZONE_MINUTE - 449)) | (1L << (TIMEZONE_REGION - 449)) | (1L << (TO_CLOB - 449)) | (1L << (TO_DSINTERVAL - 449)) | (1L << (TO_LOB - 449)) | (1L << (TO_MULTI_BYTE - 449)) | (1L << (TO_NCLOB - 449)) | (1L << (TO_NUMBER - 449)) | (1L << (TO_SINGLE_BYTE - 449)) | (1L << (TO_TIMESTAMP - 449)) | (1L << (TO_TIMESTAMP_TZ - 449)) | (1L << (TO_YMINTERVAL - 449)) | (1L << (TRAILING - 449)) | (1L << (TRANSACTION - 449)) | (1L << (TRANSLATE - 449)) | (1L << (TREAT - 449)) | (1L << (TRIGGER - 449)) | (1L << (TRUNCATE - 449)) | (1L << (TRUNC - 449)) | (1L << (TYPE - 449)) | (1L << (TZ_OFFSET - 449)) | (1L << (UID - 449)) | (1L << (UNBOUNDED - 449)) | (1L << (UNDER - 449)) | (1L << (UNLIMITED - 449)) | (1L << (UNTIL - 449)) | (1L << (UPDATED - 449)))) != 0) || ((((_la - 513)) & ~0x3f) == 0 && ((1L << (_la - 513)) & ((1L << (UPPER - 513)) | (1L << (UPSERT - 513)) | (1L << (UROWID - 513)) | (1L << (USERENV - 513)) | (1L << (USER - 513)) | (1L << (USE - 513)) | (1L << (VALIDATE - 513)) | (1L << (VALUE - 513)) | (1L << (VARCHAR2 - 513)) | (1L << (VARCHAR - 513)) | (1L << (VARIABLE - 513)) | (1L << (VARRAY - 513)) | (1L << (VARYING - 513)) | (1L << (VERSIONS - 513)) | (1L << (VERSION - 513)) | (1L << (VSIZE - 513)) | (1L << (WAIT - 513)) | (1L << (WARNING - 513)) | (1L << (WELLFORMED - 513)) | (1L << (WHENEVER - 513)) | (1L << (WHILE - 513)) | (1L << (WITHIN - 513)) | (1L << (WORK - 513)) | (1L << (WRITE - 513)) | (1L << (XMLAGG - 513)) | (1L << (XMLATTRIBUTES - 513)) | (1L << (XMLCAST - 513)) | (1L << (XMLCOLATTVAL - 513)) | (1L << (XMLELEMENT - 513)) | (1L << (XMLEXISTS - 513)) | (1L << (XMLFOREST - 513)) | (1L << (XMLNAMESPACES - 513)) | (1L << (XMLPARSE - 513)) | (1L << (XMLPI - 513)) | (1L << (XMLQUERY - 513)) | (1L << (XMLROOT - 513)) | (1L << (XMLSERIALIZE - 513)) | (1L << (XMLTABLE - 513)) | (1L << (XML - 513)) | (1L << (YEAR - 513)) | (1L << (YES - 513)) | (1L << (YMINTERVAL_UNCONSTRAINED - 513)) | (1L << (ZONE - 513)) | (1L << (PREDICTION - 513)) | (1L << (PREDICTION_BOUNDS - 513)) | (1L << (PREDICTION_COST - 513)) | (1L << (PREDICTION_DETAILS - 513)) | (1L << (PREDICTION_PROBABILITY - 513)) | (1L << (PREDICTION_SET - 513)) | (1L << (CUME_DIST - 513)) | (1L << (DENSE_RANK - 513)) | (1L << (LISTAGG - 513)) | (1L << (PERCENT_RANK - 513)) | (1L << (PERCENTILE_CONT - 513)) | (1L << (PERCENTILE_DISC - 513)) | (1L << (RANK - 513)))) != 0) || ((((_la - 577)) & ~0x3f) == 0 && ((1L << (_la - 577)) & ((1L << (AVG - 577)) | (1L << (CORR - 577)) | (1L << (COVAR_ - 577)) | (1L << (DECODE - 577)) | (1L << (LAG - 577)) | (1L << (LEAD - 577)) | (1L << (MAX - 577)) | (1L << (MEDIAN - 577)) | (1L << (MIN - 577)) | (1L << (NTILE - 577)) | (1L << (NVL - 577)) | (1L << (RATIO_TO_REPORT - 577)) | (1L << (REGR_ - 577)) | (1L << (ROUND - 577)) | (1L << (ROW_NUMBER - 577)) | (1L << (SUBSTR - 577)) | (1L << (TO_CHAR - 577)) | (1L << (TRIM - 577)) | (1L << (SUM - 577)) | (1L << (STDDEV - 577)) | (1L << (VAR_ - 577)) | (1L << (VARIANCE - 577)) | (1L << (LEAST - 577)) | (1L << (GREATEST - 577)) | (1L << (TO_DATE - 577)) | (1L << (NATIONAL_CHAR_STRING_LIT - 577)) | (1L << (CHAR_STRING - 577)) | (1L << (DELIMITED_ID - 577)) | (1L << (ASTERISK - 577)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
				{
				setState(3874);
				table_alias();
				}
			}

			setState(3877);
			match(USING);
			setState(3878);
			selected_tableview();
			setState(3879);
			match(ON);
			setState(3880);
			match(LEFT_PAREN);
			setState(3881);
			condition();
			setState(3882);
			match(RIGHT_PAREN);
			setState(3891);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,465,_ctx) ) {
			case 1:
				{
				setState(3883);
				merge_update_clause();
				setState(3885);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WHEN) {
					{
					setState(3884);
					merge_insert_clause();
					}
				}

				}
				break;
			case 2:
				{
				setState(3887);
				merge_insert_clause();
				setState(3889);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WHEN) {
					{
					setState(3888);
					merge_update_clause();
					}
				}

				}
				break;
			}
			setState(3894);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOG) {
				{
				setState(3893);
				error_logging_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Merge_update_clauseContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(OracleSQLStatementParser.WHEN, 0); }
		public TerminalNode MATCHED() { return getToken(OracleSQLStatementParser.MATCHED, 0); }
		public TerminalNode THEN() { return getToken(OracleSQLStatementParser.THEN, 0); }
		public TerminalNode UPDATE() { return getToken(OracleSQLStatementParser.UPDATE, 0); }
		public TerminalNode SET() { return getToken(OracleSQLStatementParser.SET, 0); }
		public List<Merge_elementContext> merge_element() {
			return getRuleContexts(Merge_elementContext.class);
		}
		public Merge_elementContext merge_element(int i) {
			return getRuleContext(Merge_elementContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(OracleSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(OracleSQLStatementParser.COMMA, i);
		}
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public Merge_update_delete_partContext merge_update_delete_part() {
			return getRuleContext(Merge_update_delete_partContext.class,0);
		}
		public Merge_update_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_merge_update_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterMerge_update_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitMerge_update_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitMerge_update_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Merge_update_clauseContext merge_update_clause() throws RecognitionException {
		Merge_update_clauseContext _localctx = new Merge_update_clauseContext(_ctx, getState());
		enterRule(_localctx, 478, RULE_merge_update_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3896);
			match(WHEN);
			setState(3897);
			match(MATCHED);
			setState(3898);
			match(THEN);
			setState(3899);
			match(UPDATE);
			setState(3900);
			match(SET);
			setState(3901);
			merge_element();
			setState(3906);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3902);
				match(COMMA);
				setState(3903);
				merge_element();
				}
				}
				setState(3908);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3910);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(3909);
				where_clause();
				}
			}

			setState(3913);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,469,_ctx) ) {
			case 1:
				{
				setState(3912);
				merge_update_delete_part();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Merge_elementContext extends ParserRuleContext {
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Merge_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_merge_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterMerge_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitMerge_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitMerge_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Merge_elementContext merge_element() throws RecognitionException {
		Merge_elementContext _localctx = new Merge_elementContext(_ctx, getState());
		enterRule(_localctx, 480, RULE_merge_element);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3915);
			column_name();
			setState(3916);
			match(EQUALS_OP);
			setState(3917);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Merge_update_delete_partContext extends ParserRuleContext {
		public TerminalNode DELETE() { return getToken(OracleSQLStatementParser.DELETE, 0); }
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public Merge_update_delete_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_merge_update_delete_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterMerge_update_delete_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitMerge_update_delete_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitMerge_update_delete_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Merge_update_delete_partContext merge_update_delete_part() throws RecognitionException {
		Merge_update_delete_partContext _localctx = new Merge_update_delete_partContext(_ctx, getState());
		enterRule(_localctx, 482, RULE_merge_update_delete_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3919);
			match(DELETE);
			setState(3920);
			where_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Merge_insert_clauseContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(OracleSQLStatementParser.WHEN, 0); }
		public TerminalNode NOT() { return getToken(OracleSQLStatementParser.NOT, 0); }
		public TerminalNode MATCHED() { return getToken(OracleSQLStatementParser.MATCHED, 0); }
		public TerminalNode THEN() { return getToken(OracleSQLStatementParser.THEN, 0); }
		public TerminalNode INSERT() { return getToken(OracleSQLStatementParser.INSERT, 0); }
		public TerminalNode VALUES() { return getToken(OracleSQLStatementParser.VALUES, 0); }
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(OracleSQLStatementParser.LEFT_PAREN, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(OracleSQLStatementParser.RIGHT_PAREN, 0); }
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(OracleSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(OracleSQLStatementParser.COMMA, i);
		}
		public Merge_insert_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_merge_insert_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterMerge_insert_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitMerge_insert_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitMerge_insert_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Merge_insert_clauseContext merge_insert_clause() throws RecognitionException {
		Merge_insert_clauseContext _localctx = new Merge_insert_clauseContext(_ctx, getState());
		enterRule(_localctx, 484, RULE_merge_insert_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3922);
			match(WHEN);
			setState(3923);
			match(NOT);
			setState(3924);
			match(MATCHED);
			setState(3925);
			match(THEN);
			setState(3926);
			match(INSERT);
			setState(3938);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(3927);
				match(LEFT_PAREN);
				setState(3928);
				column_name();
				setState(3933);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3929);
					match(COMMA);
					setState(3930);
					column_name();
					}
					}
					setState(3935);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3936);
				match(RIGHT_PAREN);
				}
			}

			setState(3940);
			match(VALUES);
			setState(3941);
			expression_list();
			setState(3943);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(3942);
				where_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Selected_tableviewContext extends ParserRuleContext {
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(OracleSQLStatementParser.LEFT_PAREN, 0); }
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(OracleSQLStatementParser.RIGHT_PAREN, 0); }
		public Table_aliasContext table_alias() {
			return getRuleContext(Table_aliasContext.class,0);
		}
		public Selected_tableviewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selected_tableview; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterSelected_tableview(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitSelected_tableview(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitSelected_tableview(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Selected_tableviewContext selected_tableview() throws RecognitionException {
		Selected_tableviewContext _localctx = new Selected_tableviewContext(_ctx, getState());
		enterRule(_localctx, 486, RULE_selected_tableview);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3950);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ABS:
			case ACOS:
			case ADD:
			case ADD_MONTHS:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASCII:
			case ASCIISTR:
			case ASIN:
			case ASSOCIATE:
			case ATAN2:
			case ATAN:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BFILENAME:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BIN_TO_NUM:
			case BITAND:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CARDINALITY:
			case CASCADE:
			case CASE:
			case CAST:
			case CEIL:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHARTOROWID:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOSE:
			case COMPOUND:
			case CONCAT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COS:
			case COSH:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_DATE:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case DUMP:
			case EACH:
			case ELEMENT:
			case EMPTY_BLOB:
			case EMPTY_CLOB:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXP:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FLOOR:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FROM_TZ:
			case FULL:
			case FUNCTION:
			case GROUP_ID:
			case GROUPING:
			case HASH:
			case HEXTORAW:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INITCAP:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INSTR2:
			case INSTR4:
			case INSTRB:
			case INSTRC:
			case INSTR:
			case INTERFACE:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST_DAY:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LENGTH2:
			case LENGTH4:
			case LENGTHB:
			case LENGTHC:
			case LENGTH:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LN:
			case LNNVL:
			case LOCAL:
			case LOCALTIMESTAMP:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MOD:
			case MONTH:
			case MONTHS_BETWEEN:
			case MULTISET:
			case NAME:
			case NAN:
			case NANVL:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCHR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NEW_TIME:
			case NEXT_DAY:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLIF:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NUMTODSINTERVAL:
			case NUMTOYMINTERVAL:
			case NVARCHAR2:
			case NVL2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPAQUE:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case POWER:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case PROCEDURE:
			case RAISE:
			case RANGE:
			case RAW:
			case RAWTOHEX:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_REPLACE:
			case REGEXP_SUBSTR:
			case REJECT:
			case RELIES_ON:
			case REMAINDER:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROWNUM:
			case ROW:
			case ROWS:
			case RPAD:
			case RTRIM:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGN:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SINH:
			case SIN:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SOUNDEX:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case SQRT:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYS_CONTEXT:
			case SYSDATE:
			case SYSTIMESTAMP:
			case TANH:
			case TAN:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TO_CLOB:
			case TO_DSINTERVAL:
			case TO_LOB:
			case TO_MULTI_BYTE:
			case TO_NCLOB:
			case TO_NUMBER:
			case TO_SINGLE_BYTE:
			case TO_TIMESTAMP:
			case TO_TIMESTAMP_TZ:
			case TO_YMINTERVAL:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TRUNC:
			case TYPE:
			case TZ_OFFSET:
			case UID:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPPER:
			case UPSERT:
			case UROWID:
			case USERENV:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case VSIZE:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case DECODE:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case NVL:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROUND:
			case ROW_NUMBER:
			case SUBSTR:
			case TO_CHAR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case LEAST:
			case GREATEST:
			case TO_DATE:
			case DELIMITED_ID:
			case ASTERISK:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(3945);
				tableview_name();
				}
				break;
			case LEFT_PAREN:
				{
				setState(3946);
				match(LEFT_PAREN);
				setState(3947);
				select_statement();
				setState(3948);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3953);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABS) | (1L << ACOS) | (1L << ADD) | (1L << ADD_MONTHS) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASCII) | (1L << ASCIISTR) | (1L << ASIN) | (1L << ASSOCIATE) | (1L << ATAN2) | (1L << ATAN) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BFILENAME) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BIN_TO_NUM) | (1L << BITAND) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CARDINALITY) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CEIL) | (1L << CHARACTER) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARTOROWID) | (1L << CHR) | (1L << C_LETTER))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOSE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONCAT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COS - 64)) | (1L << (COSH - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_DATE - 64)) | (1L << (CURRENT_TIMESTAMP - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (DIMENSION - 128)) | (1L << (DISABLE - 128)) | (1L << (DISASSOCIATE - 128)) | (1L << (DOCUMENT - 128)) | (1L << (DOUBLE - 128)) | (1L << (DSINTERVAL_UNCONSTRAINED - 128)) | (1L << (DUMP - 128)) | (1L << (EACH - 128)) | (1L << (ELEMENT - 128)) | (1L << (EMPTY_BLOB - 128)) | (1L << (EMPTY_CLOB - 128)) | (1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERR - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXP - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FLOOR - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FROM_TZ - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUP_ID - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HEXTORAW - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (IGNORE - 193)) | (1L << (IMMEDIATE - 193)) | (1L << (INCLUDE - 193)) | (1L << (INCLUDING - 193)) | (1L << (INCREMENT - 193)) | (1L << (INDENT - 193)) | (1L << (INDEXED - 193)) | (1L << (INDICATOR - 193)) | (1L << (INDICES - 193)) | (1L << (INFINITE - 193)) | (1L << (INITCAP - 193)) | (1L << (INLINE - 193)) | (1L << (INNER - 193)) | (1L << (INOUT - 193)) | (1L << (INSTANTIABLE - 193)) | (1L << (INSTEAD - 193)) | (1L << (INSTR2 - 193)) | (1L << (INSTR4 - 193)) | (1L << (INSTRB - 193)) | (1L << (INSTRC - 193)) | (1L << (INSTR - 193)) | (1L << (INTERFACE - 193)) | (1L << (INTEGER - 193)) | (1L << (INTERVAL - 193)) | (1L << (INT - 193)) | (1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (KEY - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST_DAY - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LENGTH2 - 193)) | (1L << (LENGTH4 - 193)) | (1L << (LENGTHB - 193)) | (1L << (LENGTHC - 193)) | (1L << (LENGTH - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LN - 193)) | (1L << (LNNVL - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCALTIMESTAMP - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (LOGON - 257)) | (1L << (LONG - 257)) | (1L << (LOOP - 257)) | (1L << (LOWER - 257)) | (1L << (LPAD - 257)) | (1L << (LTRIM - 257)) | (1L << (MAIN - 257)) | (1L << (MAP - 257)) | (1L << (MATCHED - 257)) | (1L << (MAXVALUE - 257)) | (1L << (MEASURES - 257)) | (1L << (MEMBER - 257)) | (1L << (MERGE - 257)) | (1L << (MINUTE - 257)) | (1L << (MINVALUE - 257)) | (1L << (MLSLABEL - 257)) | (1L << (MODEL - 257)) | (1L << (MODIFY - 257)) | (1L << (MOD - 257)) | (1L << (MONTH - 257)) | (1L << (MONTHS_BETWEEN - 257)) | (1L << (MULTISET - 257)) | (1L << (NAME - 257)) | (1L << (NAN - 257)) | (1L << (NANVL - 257)) | (1L << (NATURAL - 257)) | (1L << (NATURALN - 257)) | (1L << (NAV - 257)) | (1L << (NCHAR_CS - 257)) | (1L << (NCHAR - 257)) | (1L << (NCHR - 257)) | (1L << (NCLOB - 257)) | (1L << (NESTED - 257)) | (1L << (NEW - 257)) | (1L << (NEW_TIME - 257)) | (1L << (NEXT_DAY - 257)) | (1L << (NOAUDIT - 257)) | (1L << (NOCOPY - 257)) | (1L << (NOCYCLE - 257)) | (1L << (NOENTITYESCAPING - 257)) | (1L << (NONE - 257)) | (1L << (NO - 257)) | (1L << (NOSCHEMACHECK - 257)) | (1L << (NULLIF - 257)) | (1L << (NULLS - 257)) | (1L << (NUMBER - 257)) | (1L << (NUMERIC - 257)) | (1L << (NUMTODSINTERVAL - 257)) | (1L << (NUMTOYMINTERVAL - 257)) | (1L << (NVARCHAR2 - 257)) | (1L << (NVL2 - 257)) | (1L << (OBJECT - 257)) | (1L << (OFF - 257)))) != 0) || ((((_la - 321)) & ~0x3f) == 0 && ((1L << (_la - 321)) & ((1L << (OID - 321)) | (1L << (OLD - 321)) | (1L << (ONLY - 321)) | (1L << (OPAQUE - 321)) | (1L << (OPEN - 321)) | (1L << (ORADATA - 321)) | (1L << (ORDINALITY - 321)) | (1L << (OSERROR - 321)) | (1L << (OUTER - 321)) | (1L << (OUT - 321)) | (1L << (OVER - 321)) | (1L << (OVERRIDING - 321)) | (1L << (PACKAGE - 321)) | (1L << (PARALLEL_ENABLE - 321)) | (1L << (PARAMETERS - 321)) | (1L << (PARENT - 321)) | (1L << (PARTITION - 321)) | (1L << (PASSING - 321)) | (1L << (PATH - 321)) | (1L << (PIPELINED - 321)) | (1L << (PLAN - 321)) | (1L << (PLS_INTEGER - 321)) | (1L << (POSITIVEN - 321)) | (1L << (POSITIVE - 321)) | (1L << (POWER - 321)) | (1L << (PRAGMA - 321)) | (1L << (PRECEDING - 321)) | (1L << (PRECISION - 321)) | (1L << (PRESENT - 321)) | (1L << (PRIOR - 321)) | (1L << (PROCEDURE - 321)) | (1L << (RAISE - 321)) | (1L << (RANGE - 321)) | (1L << (RAW - 321)) | (1L << (RAWTOHEX - 321)) | (1L << (READ - 321)) | (1L << (REAL - 321)) | (1L << (RECORD - 321)) | (1L << (REFERENCE - 321)) | (1L << (REFERENCING - 321)) | (1L << (REF - 321)) | (1L << (REGEXP_COUNT - 321)) | (1L << (REGEXP_INSTR - 321)) | (1L << (REGEXP_REPLACE - 321)) | (1L << (REGEXP_SUBSTR - 321)) | (1L << (REJECT - 321)) | (1L << (RELIES_ON - 321)) | (1L << (REMAINDER - 321)))) != 0) || ((((_la - 385)) & ~0x3f) == 0 && ((1L << (_la - 385)) & ((1L << (RENAME - 385)) | (1L << (REPLACE - 385)) | (1L << (RESPECT - 385)) | (1L << (RESTRICT_REFERENCES - 385)) | (1L << (RESULT_CACHE - 385)) | (1L << (RESULT - 385)) | (1L << (RETURNING - 385)) | (1L << (RETURN - 385)) | (1L << (REUSE - 385)) | (1L << (REVERSE - 385)) | (1L << (RIGHT - 385)) | (1L << (ROLLBACK - 385)) | (1L << (ROLLUP - 385)) | (1L << (ROWID - 385)) | (1L << (ROWNUM - 385)) | (1L << (ROW - 385)) | (1L << (ROWS - 385)) | (1L << (RPAD - 385)) | (1L << (RTRIM - 385)) | (1L << (RULES - 385)) | (1L << (SAMPLE - 385)) | (1L << (SAVEPOINT - 385)) | (1L << (SAVE - 385)) | (1L << (SCHEMACHECK - 385)) | (1L << (SCHEMA - 385)) | (1L << (SCN - 385)) | (1L << (SECOND - 385)) | (1L << (SEED - 385)) | (1L << (SEGMENT - 385)) | (1L << (SELF - 385)) | (1L << (SEQUENTIAL - 385)) | (1L << (SERIALIZABLE - 385)) | (1L << (SERIALLY_REUSABLE - 385)) | (1L << (SERVERERROR - 385)) | (1L << (SESSIONTIMEZONE - 385)) | (1L << (SET - 385)) | (1L << (SETS - 385)) | (1L << (SETTINGS - 385)) | (1L << (SHOW - 385)) | (1L << (SHUTDOWN - 385)) | (1L << (SIBLINGS - 385)) | (1L << (SIGN - 385)) | (1L << (SIGNTYPE - 385)) | (1L << (SIMPLE_INTEGER - 385)) | (1L << (SINGLE - 385)) | (1L << (SINH - 385)) | (1L << (SIN - 385)) | (1L << (SKIP_ - 385)) | (1L << (SMALLINT - 385)) | (1L << (SNAPSHOT - 385)) | (1L << (SOME - 385)) | (1L << (SOUNDEX - 385)) | (1L << (SPECIFICATION - 385)) | (1L << (SQLDATA - 385)) | (1L << (SQLERROR - 385)) | (1L << (SQRT - 385)) | (1L << (STANDALONE - 385)))) != 0) || ((((_la - 449)) & ~0x3f) == 0 && ((1L << (_la - 449)) & ((1L << (STARTUP - 449)) | (1L << (STATEMENT_ID - 449)) | (1L << (STATEMENT - 449)) | (1L << (STATIC - 449)) | (1L << (STATISTICS - 449)) | (1L << (STRING - 449)) | (1L << (SUBMULTISET - 449)) | (1L << (SUBPARTITION - 449)) | (1L << (SUBSTITUTABLE - 449)) | (1L << (SUBTYPE - 449)) | (1L << (SUCCESS - 449)) | (1L << (SUSPEND - 449)) | (1L << (SYS_CONTEXT - 449)) | (1L << (SYSDATE - 449)) | (1L << (SYSTIMESTAMP - 449)) | (1L << (TANH - 449)) | (1L << (TAN - 449)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 449)) | (1L << (TIMESTAMP - 449)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 449)) | (1L << (TIMESTAMP_UNCONSTRAINED - 449)) | (1L << (TIME - 449)) | (1L << (TIMEZONE_ABBR - 449)) | (1L << (TIMEZONE_HOUR - 449)) | (1L << (TIMEZONE_MINUTE - 449)) | (1L << (TIMEZONE_REGION - 449)) | (1L << (TO_CLOB - 449)) | (1L << (TO_DSINTERVAL - 449)) | (1L << (TO_LOB - 449)) | (1L << (TO_MULTI_BYTE - 449)) | (1L << (TO_NCLOB - 449)) | (1L << (TO_NUMBER - 449)) | (1L << (TO_SINGLE_BYTE - 449)) | (1L << (TO_TIMESTAMP - 449)) | (1L << (TO_TIMESTAMP_TZ - 449)) | (1L << (TO_YMINTERVAL - 449)) | (1L << (TRAILING - 449)) | (1L << (TRANSACTION - 449)) | (1L << (TRANSLATE - 449)) | (1L << (TREAT - 449)) | (1L << (TRIGGER - 449)) | (1L << (TRUNCATE - 449)) | (1L << (TRUNC - 449)) | (1L << (TYPE - 449)) | (1L << (TZ_OFFSET - 449)) | (1L << (UID - 449)) | (1L << (UNBOUNDED - 449)) | (1L << (UNDER - 449)) | (1L << (UNLIMITED - 449)) | (1L << (UNTIL - 449)) | (1L << (UPDATED - 449)))) != 0) || ((((_la - 513)) & ~0x3f) == 0 && ((1L << (_la - 513)) & ((1L << (UPPER - 513)) | (1L << (UPSERT - 513)) | (1L << (UROWID - 513)) | (1L << (USERENV - 513)) | (1L << (USER - 513)) | (1L << (USE - 513)) | (1L << (VALIDATE - 513)) | (1L << (VALUE - 513)) | (1L << (VARCHAR2 - 513)) | (1L << (VARCHAR - 513)) | (1L << (VARIABLE - 513)) | (1L << (VARRAY - 513)) | (1L << (VARYING - 513)) | (1L << (VERSIONS - 513)) | (1L << (VERSION - 513)) | (1L << (VSIZE - 513)) | (1L << (WAIT - 513)) | (1L << (WARNING - 513)) | (1L << (WELLFORMED - 513)) | (1L << (WHENEVER - 513)) | (1L << (WHILE - 513)) | (1L << (WITHIN - 513)) | (1L << (WORK - 513)) | (1L << (WRITE - 513)) | (1L << (XMLAGG - 513)) | (1L << (XMLATTRIBUTES - 513)) | (1L << (XMLCAST - 513)) | (1L << (XMLCOLATTVAL - 513)) | (1L << (XMLELEMENT - 513)) | (1L << (XMLEXISTS - 513)) | (1L << (XMLFOREST - 513)) | (1L << (XMLNAMESPACES - 513)) | (1L << (XMLPARSE - 513)) | (1L << (XMLPI - 513)) | (1L << (XMLQUERY - 513)) | (1L << (XMLROOT - 513)) | (1L << (XMLSERIALIZE - 513)) | (1L << (XMLTABLE - 513)) | (1L << (XML - 513)) | (1L << (YEAR - 513)) | (1L << (YES - 513)) | (1L << (YMINTERVAL_UNCONSTRAINED - 513)) | (1L << (ZONE - 513)) | (1L << (PREDICTION - 513)) | (1L << (PREDICTION_BOUNDS - 513)) | (1L << (PREDICTION_COST - 513)) | (1L << (PREDICTION_DETAILS - 513)) | (1L << (PREDICTION_PROBABILITY - 513)) | (1L << (PREDICTION_SET - 513)) | (1L << (CUME_DIST - 513)) | (1L << (DENSE_RANK - 513)) | (1L << (LISTAGG - 513)) | (1L << (PERCENT_RANK - 513)) | (1L << (PERCENTILE_CONT - 513)) | (1L << (PERCENTILE_DISC - 513)) | (1L << (RANK - 513)))) != 0) || ((((_la - 577)) & ~0x3f) == 0 && ((1L << (_la - 577)) & ((1L << (AVG - 577)) | (1L << (CORR - 577)) | (1L << (COVAR_ - 577)) | (1L << (DECODE - 577)) | (1L << (LAG - 577)) | (1L << (LEAD - 577)) | (1L << (MAX - 577)) | (1L << (MEDIAN - 577)) | (1L << (MIN - 577)) | (1L << (NTILE - 577)) | (1L << (NVL - 577)) | (1L << (RATIO_TO_REPORT - 577)) | (1L << (REGR_ - 577)) | (1L << (ROUND - 577)) | (1L << (ROW_NUMBER - 577)) | (1L << (SUBSTR - 577)) | (1L << (TO_CHAR - 577)) | (1L << (TRIM - 577)) | (1L << (SUM - 577)) | (1L << (STDDEV - 577)) | (1L << (VAR_ - 577)) | (1L << (VARIANCE - 577)) | (1L << (LEAST - 577)) | (1L << (GREATEST - 577)) | (1L << (TO_DATE - 577)) | (1L << (NATIONAL_CHAR_STRING_LIT - 577)) | (1L << (CHAR_STRING - 577)) | (1L << (DELIMITED_ID - 577)) | (1L << (ASTERISK - 577)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
				{
				setState(3952);
				table_alias();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Lock_table_statementContext extends ParserRuleContext {
		public TerminalNode LOCK() { return getToken(OracleSQLStatementParser.LOCK, 0); }
		public TerminalNode TABLE() { return getToken(OracleSQLStatementParser.TABLE, 0); }
		public List<Lock_table_elementContext> lock_table_element() {
			return getRuleContexts(Lock_table_elementContext.class);
		}
		public Lock_table_elementContext lock_table_element(int i) {
			return getRuleContext(Lock_table_elementContext.class,i);
		}
		public TerminalNode IN() { return getToken(OracleSQLStatementParser.IN, 0); }
		public Lock_modeContext lock_mode() {
			return getRuleContext(Lock_modeContext.class,0);
		}
		public TerminalNode MODE() { return getToken(OracleSQLStatementParser.MODE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(OracleSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(OracleSQLStatementParser.COMMA, i);
		}
		public Wait_nowait_partContext wait_nowait_part() {
			return getRuleContext(Wait_nowait_partContext.class,0);
		}
		public Lock_table_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lock_table_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterLock_table_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitLock_table_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitLock_table_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Lock_table_statementContext lock_table_statement() throws RecognitionException {
		Lock_table_statementContext _localctx = new Lock_table_statementContext(_ctx, getState());
		enterRule(_localctx, 488, RULE_lock_table_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3955);
			match(LOCK);
			setState(3956);
			match(TABLE);
			setState(3957);
			lock_table_element();
			setState(3962);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3958);
				match(COMMA);
				setState(3959);
				lock_table_element();
				}
				}
				setState(3964);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3965);
			match(IN);
			setState(3966);
			lock_mode();
			setState(3967);
			match(MODE);
			setState(3969);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOWAIT || _la==WAIT) {
				{
				setState(3968);
				wait_nowait_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Wait_nowait_partContext extends ParserRuleContext {
		public TerminalNode WAIT() { return getToken(OracleSQLStatementParser.WAIT, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode NOWAIT() { return getToken(OracleSQLStatementParser.NOWAIT, 0); }
		public Wait_nowait_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_wait_nowait_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterWait_nowait_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitWait_nowait_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitWait_nowait_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Wait_nowait_partContext wait_nowait_part() throws RecognitionException {
		Wait_nowait_partContext _localctx = new Wait_nowait_partContext(_ctx, getState());
		enterRule(_localctx, 490, RULE_wait_nowait_part);
		try {
			setState(3974);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WAIT:
				enterOuterAlt(_localctx, 1);
				{
				setState(3971);
				match(WAIT);
				setState(3972);
				expression();
				}
				break;
			case NOWAIT:
				enterOuterAlt(_localctx, 2);
				{
				setState(3973);
				match(NOWAIT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Lock_table_elementContext extends ParserRuleContext {
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public Partition_extension_clauseContext partition_extension_clause() {
			return getRuleContext(Partition_extension_clauseContext.class,0);
		}
		public Lock_table_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lock_table_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterLock_table_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitLock_table_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitLock_table_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Lock_table_elementContext lock_table_element() throws RecognitionException {
		Lock_table_elementContext _localctx = new Lock_table_elementContext(_ctx, getState());
		enterRule(_localctx, 492, RULE_lock_table_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3976);
			tableview_name();
			setState(3978);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION || _la==SUBPARTITION) {
				{
				setState(3977);
				partition_extension_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Lock_modeContext extends ParserRuleContext {
		public TerminalNode ROW() { return getToken(OracleSQLStatementParser.ROW, 0); }
		public TerminalNode SHARE() { return getToken(OracleSQLStatementParser.SHARE, 0); }
		public TerminalNode EXCLUSIVE() { return getToken(OracleSQLStatementParser.EXCLUSIVE, 0); }
		public TerminalNode UPDATE() { return getToken(OracleSQLStatementParser.UPDATE, 0); }
		public Lock_modeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lock_mode; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterLock_mode(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitLock_mode(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitLock_mode(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Lock_modeContext lock_mode() throws RecognitionException {
		Lock_modeContext _localctx = new Lock_modeContext(_ctx, getState());
		enterRule(_localctx, 494, RULE_lock_mode);
		int _la;
		try {
			setState(3992);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,480,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3980);
				match(ROW);
				setState(3981);
				match(SHARE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3982);
				match(ROW);
				setState(3983);
				match(EXCLUSIVE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3984);
				match(SHARE);
				setState(3986);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==UPDATE) {
					{
					setState(3985);
					match(UPDATE);
					}
				}

				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3988);
				match(SHARE);
				setState(3989);
				match(ROW);
				setState(3990);
				match(EXCLUSIVE);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3991);
				match(EXCLUSIVE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class General_table_refContext extends ParserRuleContext {
		public Dml_table_expression_clauseContext dml_table_expression_clause() {
			return getRuleContext(Dml_table_expression_clauseContext.class,0);
		}
		public TerminalNode ONLY() { return getToken(OracleSQLStatementParser.ONLY, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(OracleSQLStatementParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(OracleSQLStatementParser.RIGHT_PAREN, 0); }
		public Table_aliasContext table_alias() {
			return getRuleContext(Table_aliasContext.class,0);
		}
		public General_table_refContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_general_table_ref; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterGeneral_table_ref(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitGeneral_table_ref(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitGeneral_table_ref(this);
			else return visitor.visitChildren(this);
		}
	}

	public final General_table_refContext general_table_ref() throws RecognitionException {
		General_table_refContext _localctx = new General_table_refContext(_ctx, getState());
		enterRule(_localctx, 496, RULE_general_table_ref);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4000);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,481,_ctx) ) {
			case 1:
				{
				setState(3994);
				dml_table_expression_clause();
				}
				break;
			case 2:
				{
				setState(3995);
				match(ONLY);
				setState(3996);
				match(LEFT_PAREN);
				setState(3997);
				dml_table_expression_clause();
				setState(3998);
				match(RIGHT_PAREN);
				}
				break;
			}
			setState(4003);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,482,_ctx) ) {
			case 1:
				{
				setState(4002);
				table_alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Static_returning_clauseContext extends ParserRuleContext {
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public Into_clauseContext into_clause() {
			return getRuleContext(Into_clauseContext.class,0);
		}
		public TerminalNode RETURNING() { return getToken(OracleSQLStatementParser.RETURNING, 0); }
		public TerminalNode RETURN() { return getToken(OracleSQLStatementParser.RETURN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(OracleSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(OracleSQLStatementParser.COMMA, i);
		}
		public Static_returning_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_static_returning_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterStatic_returning_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitStatic_returning_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitStatic_returning_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Static_returning_clauseContext static_returning_clause() throws RecognitionException {
		Static_returning_clauseContext _localctx = new Static_returning_clauseContext(_ctx, getState());
		enterRule(_localctx, 498, RULE_static_returning_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4005);
			_la = _input.LA(1);
			if ( !(_la==RETURNING || _la==RETURN) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4006);
			expression();
			setState(4011);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4007);
				match(COMMA);
				setState(4008);
				expression();
				}
				}
				setState(4013);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4014);
			into_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Error_logging_clauseContext extends ParserRuleContext {
		public TerminalNode LOG() { return getToken(OracleSQLStatementParser.LOG, 0); }
		public TerminalNode ERRORS() { return getToken(OracleSQLStatementParser.ERRORS, 0); }
		public Error_logging_into_partContext error_logging_into_part() {
			return getRuleContext(Error_logging_into_partContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Error_logging_reject_partContext error_logging_reject_part() {
			return getRuleContext(Error_logging_reject_partContext.class,0);
		}
		public Error_logging_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_error_logging_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterError_logging_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitError_logging_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitError_logging_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Error_logging_clauseContext error_logging_clause() throws RecognitionException {
		Error_logging_clauseContext _localctx = new Error_logging_clauseContext(_ctx, getState());
		enterRule(_localctx, 500, RULE_error_logging_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4016);
			match(LOG);
			setState(4017);
			match(ERRORS);
			setState(4019);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,484,_ctx) ) {
			case 1:
				{
				setState(4018);
				error_logging_into_part();
				}
				break;
			}
			setState(4022);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,485,_ctx) ) {
			case 1:
				{
				setState(4021);
				expression();
				}
				break;
			}
			setState(4025);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==REJECT) {
				{
				setState(4024);
				error_logging_reject_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Error_logging_into_partContext extends ParserRuleContext {
		public TerminalNode INTO() { return getToken(OracleSQLStatementParser.INTO, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public Error_logging_into_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_error_logging_into_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterError_logging_into_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitError_logging_into_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitError_logging_into_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Error_logging_into_partContext error_logging_into_part() throws RecognitionException {
		Error_logging_into_partContext _localctx = new Error_logging_into_partContext(_ctx, getState());
		enterRule(_localctx, 502, RULE_error_logging_into_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4027);
			match(INTO);
			setState(4028);
			tableview_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Error_logging_reject_partContext extends ParserRuleContext {
		public TerminalNode REJECT() { return getToken(OracleSQLStatementParser.REJECT, 0); }
		public TerminalNode LIMIT() { return getToken(OracleSQLStatementParser.LIMIT, 0); }
		public TerminalNode UNLIMITED() { return getToken(OracleSQLStatementParser.UNLIMITED, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Error_logging_reject_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_error_logging_reject_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterError_logging_reject_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitError_logging_reject_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitError_logging_reject_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Error_logging_reject_partContext error_logging_reject_part() throws RecognitionException {
		Error_logging_reject_partContext _localctx = new Error_logging_reject_partContext(_ctx, getState());
		enterRule(_localctx, 504, RULE_error_logging_reject_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4030);
			match(REJECT);
			setState(4031);
			match(LIMIT);
			setState(4034);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,487,_ctx) ) {
			case 1:
				{
				setState(4032);
				match(UNLIMITED);
				}
				break;
			case 2:
				{
				setState(4033);
				expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dml_table_expression_clauseContext extends ParserRuleContext {
		public Table_collection_expressionContext table_collection_expression() {
			return getRuleContext(Table_collection_expressionContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(OracleSQLStatementParser.LEFT_PAREN, 0); }
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(OracleSQLStatementParser.RIGHT_PAREN, 0); }
		public Subquery_restriction_clauseContext subquery_restriction_clause() {
			return getRuleContext(Subquery_restriction_clauseContext.class,0);
		}
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public Sample_clauseContext sample_clause() {
			return getRuleContext(Sample_clauseContext.class,0);
		}
		public Dml_table_expression_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dml_table_expression_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterDml_table_expression_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitDml_table_expression_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitDml_table_expression_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Dml_table_expression_clauseContext dml_table_expression_clause() throws RecognitionException {
		Dml_table_expression_clauseContext _localctx = new Dml_table_expression_clauseContext(_ctx, getState());
		enterRule(_localctx, 506, RULE_dml_table_expression_clause);
		int _la;
		try {
			setState(4048);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TABLE:
			case THE:
				enterOuterAlt(_localctx, 1);
				{
				setState(4036);
				table_collection_expression();
				}
				break;
			case LEFT_PAREN:
				enterOuterAlt(_localctx, 2);
				{
				setState(4037);
				match(LEFT_PAREN);
				setState(4038);
				select_statement();
				setState(4040);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(4039);
					subquery_restriction_clause();
					}
				}

				setState(4042);
				match(RIGHT_PAREN);
				}
				break;
			case ABS:
			case ACOS:
			case ADD:
			case ADD_MONTHS:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASCII:
			case ASCIISTR:
			case ASIN:
			case ASSOCIATE:
			case ATAN2:
			case ATAN:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BFILENAME:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BIN_TO_NUM:
			case BITAND:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CARDINALITY:
			case CASCADE:
			case CASE:
			case CAST:
			case CEIL:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHARTOROWID:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOSE:
			case COMPOUND:
			case CONCAT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COS:
			case COSH:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_DATE:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case DUMP:
			case EACH:
			case ELEMENT:
			case EMPTY_BLOB:
			case EMPTY_CLOB:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXP:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FLOOR:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FROM_TZ:
			case FULL:
			case FUNCTION:
			case GROUP_ID:
			case GROUPING:
			case HASH:
			case HEXTORAW:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INITCAP:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INSTR2:
			case INSTR4:
			case INSTRB:
			case INSTRC:
			case INSTR:
			case INTERFACE:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST_DAY:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LENGTH2:
			case LENGTH4:
			case LENGTHB:
			case LENGTHC:
			case LENGTH:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LN:
			case LNNVL:
			case LOCAL:
			case LOCALTIMESTAMP:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MOD:
			case MONTH:
			case MONTHS_BETWEEN:
			case MULTISET:
			case NAME:
			case NAN:
			case NANVL:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCHR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NEW_TIME:
			case NEXT_DAY:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLIF:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NUMTODSINTERVAL:
			case NUMTOYMINTERVAL:
			case NVARCHAR2:
			case NVL2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPAQUE:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case POWER:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case PROCEDURE:
			case RAISE:
			case RANGE:
			case RAW:
			case RAWTOHEX:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_REPLACE:
			case REGEXP_SUBSTR:
			case REJECT:
			case RELIES_ON:
			case REMAINDER:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROWNUM:
			case ROW:
			case ROWS:
			case RPAD:
			case RTRIM:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGN:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SINH:
			case SIN:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SOUNDEX:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case SQRT:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYS_CONTEXT:
			case SYSDATE:
			case SYSTIMESTAMP:
			case TANH:
			case TAN:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TO_CLOB:
			case TO_DSINTERVAL:
			case TO_LOB:
			case TO_MULTI_BYTE:
			case TO_NCLOB:
			case TO_NUMBER:
			case TO_SINGLE_BYTE:
			case TO_TIMESTAMP:
			case TO_TIMESTAMP_TZ:
			case TO_YMINTERVAL:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TRUNC:
			case TYPE:
			case TZ_OFFSET:
			case UID:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPPER:
			case UPSERT:
			case UROWID:
			case USERENV:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case VSIZE:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case DECODE:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case NVL:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROUND:
			case ROW_NUMBER:
			case SUBSTR:
			case TO_CHAR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case LEAST:
			case GREATEST:
			case TO_DATE:
			case DELIMITED_ID:
			case ASTERISK:
			case INTRODUCER:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 3);
				{
				setState(4044);
				tableview_name();
				setState(4046);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,489,_ctx) ) {
				case 1:
					{
					setState(4045);
					sample_clause();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_collection_expressionContext extends ParserRuleContext {
		public TerminalNode TABLE() { return getToken(OracleSQLStatementParser.TABLE, 0); }
		public TerminalNode THE() { return getToken(OracleSQLStatementParser.THE, 0); }
		public List<TerminalNode> LEFT_PAREN() { return getTokens(OracleSQLStatementParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(OracleSQLStatementParser.LEFT_PAREN, i);
		}
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(OracleSQLStatementParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(OracleSQLStatementParser.RIGHT_PAREN, i);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Table_collection_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_collection_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterTable_collection_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitTable_collection_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitTable_collection_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_collection_expressionContext table_collection_expression() throws RecognitionException {
		Table_collection_expressionContext _localctx = new Table_collection_expressionContext(_ctx, getState());
		enterRule(_localctx, 508, RULE_table_collection_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4050);
			_la = _input.LA(1);
			if ( !(_la==TABLE || _la==THE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4063);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,492,_ctx) ) {
			case 1:
				{
				setState(4051);
				match(LEFT_PAREN);
				setState(4052);
				subquery();
				setState(4053);
				match(RIGHT_PAREN);
				}
				break;
			case 2:
				{
				setState(4055);
				match(LEFT_PAREN);
				setState(4056);
				expression();
				setState(4057);
				match(RIGHT_PAREN);
				setState(4061);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,491,_ctx) ) {
				case 1:
					{
					setState(4058);
					match(LEFT_PAREN);
					setState(4059);
					match(PLUS_SIGN);
					setState(4060);
					match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Subquery_restriction_clauseContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(OracleSQLStatementParser.WITH, 0); }
		public TerminalNode READ() { return getToken(OracleSQLStatementParser.READ, 0); }
		public TerminalNode ONLY() { return getToken(OracleSQLStatementParser.ONLY, 0); }
		public TerminalNode CHECK() { return getToken(OracleSQLStatementParser.CHECK, 0); }
		public TerminalNode OPTION() { return getToken(OracleSQLStatementParser.OPTION, 0); }
		public TerminalNode CONSTRAINT() { return getToken(OracleSQLStatementParser.CONSTRAINT, 0); }
		public Constraint_nameContext constraint_name() {
			return getRuleContext(Constraint_nameContext.class,0);
		}
		public Subquery_restriction_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subquery_restriction_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterSubquery_restriction_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitSubquery_restriction_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitSubquery_restriction_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Subquery_restriction_clauseContext subquery_restriction_clause() throws RecognitionException {
		Subquery_restriction_clauseContext _localctx = new Subquery_restriction_clauseContext(_ctx, getState());
		enterRule(_localctx, 510, RULE_subquery_restriction_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4065);
			match(WITH);
			setState(4074);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case READ:
				{
				setState(4066);
				match(READ);
				setState(4067);
				match(ONLY);
				}
				break;
			case CHECK:
				{
				setState(4068);
				match(CHECK);
				setState(4069);
				match(OPTION);
				setState(4072);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(4070);
					match(CONSTRAINT);
					setState(4071);
					constraint_name();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sample_clauseContext extends ParserRuleContext {
		public TerminalNode SAMPLE() { return getToken(OracleSQLStatementParser.SAMPLE, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(OracleSQLStatementParser.LEFT_PAREN, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(OracleSQLStatementParser.RIGHT_PAREN, 0); }
		public TerminalNode BLOCK() { return getToken(OracleSQLStatementParser.BLOCK, 0); }
		public TerminalNode COMMA() { return getToken(OracleSQLStatementParser.COMMA, 0); }
		public Seed_partContext seed_part() {
			return getRuleContext(Seed_partContext.class,0);
		}
		public Sample_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sample_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterSample_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitSample_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitSample_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sample_clauseContext sample_clause() throws RecognitionException {
		Sample_clauseContext _localctx = new Sample_clauseContext(_ctx, getState());
		enterRule(_localctx, 512, RULE_sample_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4076);
			match(SAMPLE);
			setState(4078);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==BLOCK) {
				{
				setState(4077);
				match(BLOCK);
				}
			}

			setState(4080);
			match(LEFT_PAREN);
			setState(4081);
			expression();
			setState(4084);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(4082);
				match(COMMA);
				setState(4083);
				expression();
				}
			}

			setState(4086);
			match(RIGHT_PAREN);
			setState(4088);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,497,_ctx) ) {
			case 1:
				{
				setState(4087);
				seed_part();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Seed_partContext extends ParserRuleContext {
		public TerminalNode SEED() { return getToken(OracleSQLStatementParser.SEED, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(OracleSQLStatementParser.LEFT_PAREN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(OracleSQLStatementParser.RIGHT_PAREN, 0); }
		public Seed_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_seed_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterSeed_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitSeed_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitSeed_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Seed_partContext seed_part() throws RecognitionException {
		Seed_partContext _localctx = new Seed_partContext(_ctx, getState());
		enterRule(_localctx, 514, RULE_seed_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4090);
			match(SEED);
			setState(4091);
			match(LEFT_PAREN);
			setState(4092);
			expression();
			setState(4093);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cursor_expressionContext extends ParserRuleContext {
		public TerminalNode CURSOR() { return getToken(OracleSQLStatementParser.CURSOR, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(OracleSQLStatementParser.LEFT_PAREN, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(OracleSQLStatementParser.RIGHT_PAREN, 0); }
		public Cursor_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterCursor_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitCursor_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitCursor_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cursor_expressionContext cursor_expression() throws RecognitionException {
		Cursor_expressionContext _localctx = new Cursor_expressionContext(_ctx, getState());
		enterRule(_localctx, 516, RULE_cursor_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4095);
			match(CURSOR);
			setState(4096);
			match(LEFT_PAREN);
			setState(4097);
			subquery();
			setState(4098);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Expression_listContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(OracleSQLStatementParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(OracleSQLStatementParser.RIGHT_PAREN, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(OracleSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(OracleSQLStatementParser.COMMA, i);
		}
		public Expression_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expression_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterExpression_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitExpression_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitExpression_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Expression_listContext expression_list() throws RecognitionException {
		Expression_listContext _localctx = new Expression_listContext(_ctx, getState());
		enterRule(_localctx, 518, RULE_expression_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4100);
			match(LEFT_PAREN);
			setState(4102);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABS) | (1L << ACOS) | (1L << ADD) | (1L << ADD_MONTHS) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASCII) | (1L << ASCIISTR) | (1L << ASIN) | (1L << ASSOCIATE) | (1L << ATAN2) | (1L << ATAN) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BFILENAME) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BIN_TO_NUM) | (1L << BITAND) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CARDINALITY) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CEIL) | (1L << CHARACTER) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARTOROWID) | (1L << CHR) | (1L << C_LETTER))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOSE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONCAT - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COS - 64)) | (1L << (COSH - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_DATE - 64)) | (1L << (CURRENT_TIMESTAMP - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (DIMENSION - 128)) | (1L << (DISABLE - 128)) | (1L << (DISASSOCIATE - 128)) | (1L << (DISTINCT - 128)) | (1L << (DOCUMENT - 128)) | (1L << (DOUBLE - 128)) | (1L << (DSINTERVAL_UNCONSTRAINED - 128)) | (1L << (DUMP - 128)) | (1L << (EACH - 128)) | (1L << (ELEMENT - 128)) | (1L << (EMPTY_BLOB - 128)) | (1L << (EMPTY_CLOB - 128)) | (1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERR - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXISTS - 128)) | (1L << (EXIT - 128)) | (1L << (EXP - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FALSE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FLOOR - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FROM_TZ - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUP_ID - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HEXTORAW - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (IGNORE - 193)) | (1L << (IMMEDIATE - 193)) | (1L << (INCLUDE - 193)) | (1L << (INCLUDING - 193)) | (1L << (INCREMENT - 193)) | (1L << (INDENT - 193)) | (1L << (INDEXED - 193)) | (1L << (INDICATOR - 193)) | (1L << (INDICES - 193)) | (1L << (INFINITE - 193)) | (1L << (INITCAP - 193)) | (1L << (INLINE - 193)) | (1L << (INNER - 193)) | (1L << (INOUT - 193)) | (1L << (INSTANTIABLE - 193)) | (1L << (INSTEAD - 193)) | (1L << (INSTR2 - 193)) | (1L << (INSTR4 - 193)) | (1L << (INSTRB - 193)) | (1L << (INSTRC - 193)) | (1L << (INSTR - 193)) | (1L << (INTERFACE - 193)) | (1L << (INTEGER - 193)) | (1L << (INTERVAL - 193)) | (1L << (INT - 193)) | (1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (KEY - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST_DAY - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LENGTH2 - 193)) | (1L << (LENGTH4 - 193)) | (1L << (LENGTHB - 193)) | (1L << (LENGTHC - 193)) | (1L << (LENGTH - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LN - 193)) | (1L << (LNNVL - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCALTIMESTAMP - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (LOGON - 257)) | (1L << (LONG - 257)) | (1L << (LOOP - 257)) | (1L << (LOWER - 257)) | (1L << (LPAD - 257)) | (1L << (LTRIM - 257)) | (1L << (MAIN - 257)) | (1L << (MAP - 257)) | (1L << (MATCHED - 257)) | (1L << (MAXVALUE - 257)) | (1L << (MEASURES - 257)) | (1L << (MEMBER - 257)) | (1L << (MERGE - 257)) | (1L << (MINUTE - 257)) | (1L << (MINVALUE - 257)) | (1L << (MLSLABEL - 257)) | (1L << (MODEL - 257)) | (1L << (MODIFY - 257)) | (1L << (MOD - 257)) | (1L << (MONTH - 257)) | (1L << (MONTHS_BETWEEN - 257)) | (1L << (MULTISET - 257)) | (1L << (NAME - 257)) | (1L << (NAN - 257)) | (1L << (NANVL - 257)) | (1L << (NATURAL - 257)) | (1L << (NATURALN - 257)) | (1L << (NAV - 257)) | (1L << (NCHAR_CS - 257)) | (1L << (NCHAR - 257)) | (1L << (NCHR - 257)) | (1L << (NCLOB - 257)) | (1L << (NESTED - 257)) | (1L << (NEW - 257)) | (1L << (NEW_TIME - 257)) | (1L << (NEXT_DAY - 257)) | (1L << (NOAUDIT - 257)) | (1L << (NOCOPY - 257)) | (1L << (NOCYCLE - 257)) | (1L << (NOENTITYESCAPING - 257)) | (1L << (NONE - 257)) | (1L << (NO - 257)) | (1L << (NOSCHEMACHECK - 257)) | (1L << (NOT - 257)) | (1L << (NULLIF - 257)) | (1L << (NULL - 257)) | (1L << (NULLS - 257)) | (1L << (NUMBER - 257)) | (1L << (NUMERIC - 257)) | (1L << (NUMTODSINTERVAL - 257)) | (1L << (NUMTOYMINTERVAL - 257)) | (1L << (NVARCHAR2 - 257)) | (1L << (NVL2 - 257)) | (1L << (OBJECT - 257)) | (1L << (OFF - 257)))) != 0) || ((((_la - 321)) & ~0x3f) == 0 && ((1L << (_la - 321)) & ((1L << (OID - 321)) | (1L << (OLD - 321)) | (1L << (ONLY - 321)) | (1L << (OPAQUE - 321)) | (1L << (OPEN - 321)) | (1L << (ORADATA - 321)) | (1L << (ORDINALITY - 321)) | (1L << (OSERROR - 321)) | (1L << (OUTER - 321)) | (1L << (OUT - 321)) | (1L << (OVER - 321)) | (1L << (OVERRIDING - 321)) | (1L << (PACKAGE - 321)) | (1L << (PARALLEL_ENABLE - 321)) | (1L << (PARAMETERS - 321)) | (1L << (PARENT - 321)) | (1L << (PARTITION - 321)) | (1L << (PASSING - 321)) | (1L << (PATH - 321)) | (1L << (PIPELINED - 321)) | (1L << (PLAN - 321)) | (1L << (PLS_INTEGER - 321)) | (1L << (POSITIVEN - 321)) | (1L << (POSITIVE - 321)) | (1L << (POWER - 321)) | (1L << (PRAGMA - 321)) | (1L << (PRECEDING - 321)) | (1L << (PRECISION - 321)) | (1L << (PRESENT - 321)) | (1L << (PRIOR - 321)) | (1L << (PROCEDURE - 321)) | (1L << (RAISE - 321)) | (1L << (RANGE - 321)) | (1L << (RAW - 321)) | (1L << (RAWTOHEX - 321)) | (1L << (READ - 321)) | (1L << (REAL - 321)) | (1L << (RECORD - 321)) | (1L << (REFERENCE - 321)) | (1L << (REFERENCING - 321)) | (1L << (REF - 321)) | (1L << (REGEXP_COUNT - 321)) | (1L << (REGEXP_INSTR - 321)) | (1L << (REGEXP_REPLACE - 321)) | (1L << (REGEXP_SUBSTR - 321)) | (1L << (REJECT - 321)) | (1L << (RELIES_ON - 321)) | (1L << (REMAINDER - 321)))) != 0) || ((((_la - 385)) & ~0x3f) == 0 && ((1L << (_la - 385)) & ((1L << (RENAME - 385)) | (1L << (REPLACE - 385)) | (1L << (RESPECT - 385)) | (1L << (RESTRICT_REFERENCES - 385)) | (1L << (RESULT_CACHE - 385)) | (1L << (RESULT - 385)) | (1L << (RETURNING - 385)) | (1L << (RETURN - 385)) | (1L << (REUSE - 385)) | (1L << (REVERSE - 385)) | (1L << (RIGHT - 385)) | (1L << (ROLLBACK - 385)) | (1L << (ROLLUP - 385)) | (1L << (ROWID - 385)) | (1L << (ROWNUM - 385)) | (1L << (ROW - 385)) | (1L << (ROWS - 385)) | (1L << (RPAD - 385)) | (1L << (RTRIM - 385)) | (1L << (RULES - 385)) | (1L << (SAMPLE - 385)) | (1L << (SAVEPOINT - 385)) | (1L << (SAVE - 385)) | (1L << (SCHEMACHECK - 385)) | (1L << (SCHEMA - 385)) | (1L << (SCN - 385)) | (1L << (SECOND - 385)) | (1L << (SEED - 385)) | (1L << (SEGMENT - 385)) | (1L << (SELF - 385)) | (1L << (SEQUENTIAL - 385)) | (1L << (SERIALIZABLE - 385)) | (1L << (SERIALLY_REUSABLE - 385)) | (1L << (SERVERERROR - 385)) | (1L << (SESSIONTIMEZONE - 385)) | (1L << (SET - 385)) | (1L << (SETS - 385)) | (1L << (SETTINGS - 385)) | (1L << (SHOW - 385)) | (1L << (SHUTDOWN - 385)) | (1L << (SIBLINGS - 385)) | (1L << (SIGN - 385)) | (1L << (SIGNTYPE - 385)) | (1L << (SIMPLE_INTEGER - 385)) | (1L << (SINGLE - 385)) | (1L << (SINH - 385)) | (1L << (SIN - 385)) | (1L << (SKIP_ - 385)) | (1L << (SMALLINT - 385)) | (1L << (SNAPSHOT - 385)) | (1L << (SOME - 385)) | (1L << (SOUNDEX - 385)) | (1L << (SPECIFICATION - 385)) | (1L << (SQLDATA - 385)) | (1L << (SQLERROR - 385)) | (1L << (SQRT - 385)) | (1L << (STANDALONE - 385)))) != 0) || ((((_la - 449)) & ~0x3f) == 0 && ((1L << (_la - 449)) & ((1L << (STARTUP - 449)) | (1L << (STATEMENT_ID - 449)) | (1L << (STATEMENT - 449)) | (1L << (STATIC - 449)) | (1L << (STATISTICS - 449)) | (1L << (STRING - 449)) | (1L << (SUBMULTISET - 449)) | (1L << (SUBPARTITION - 449)) | (1L << (SUBSTITUTABLE - 449)) | (1L << (SUBTYPE - 449)) | (1L << (SUCCESS - 449)) | (1L << (SUSPEND - 449)) | (1L << (SYS_CONTEXT - 449)) | (1L << (SYSDATE - 449)) | (1L << (SYSTIMESTAMP - 449)) | (1L << (TANH - 449)) | (1L << (TAN - 449)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 449)) | (1L << (TIMESTAMP - 449)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 449)) | (1L << (TIMESTAMP_UNCONSTRAINED - 449)) | (1L << (TIME - 449)) | (1L << (TIMEZONE_ABBR - 449)) | (1L << (TIMEZONE_HOUR - 449)) | (1L << (TIMEZONE_MINUTE - 449)) | (1L << (TIMEZONE_REGION - 449)) | (1L << (TO_CLOB - 449)) | (1L << (TO_DSINTERVAL - 449)) | (1L << (TO_LOB - 449)) | (1L << (TO_MULTI_BYTE - 449)) | (1L << (TO_NCLOB - 449)) | (1L << (TO_NUMBER - 449)) | (1L << (TO_SINGLE_BYTE - 449)) | (1L << (TO_TIMESTAMP - 449)) | (1L << (TO_TIMESTAMP_TZ - 449)) | (1L << (TO_YMINTERVAL - 449)) | (1L << (TRAILING - 449)) | (1L << (TRANSACTION - 449)) | (1L << (TRANSLATE - 449)) | (1L << (TREAT - 449)) | (1L << (TRIGGER - 449)) | (1L << (TRUE - 449)) | (1L << (TRUNCATE - 449)) | (1L << (TRUNC - 449)) | (1L << (TYPE - 449)) | (1L << (TZ_OFFSET - 449)) | (1L << (UID - 449)) | (1L << (UNBOUNDED - 449)) | (1L << (UNDER - 449)) | (1L << (UNLIMITED - 449)) | (1L << (UNTIL - 449)) | (1L << (UPDATED - 449)))) != 0) || ((((_la - 513)) & ~0x3f) == 0 && ((1L << (_la - 513)) & ((1L << (UPPER - 513)) | (1L << (UPSERT - 513)) | (1L << (UROWID - 513)) | (1L << (USERENV - 513)) | (1L << (USER - 513)) | (1L << (USE - 513)) | (1L << (VALIDATE - 513)) | (1L << (VALUE - 513)) | (1L << (VARCHAR2 - 513)) | (1L << (VARCHAR - 513)) | (1L << (VARIABLE - 513)) | (1L << (VARRAY - 513)) | (1L << (VARYING - 513)) | (1L << (VERSIONS - 513)) | (1L << (VERSION - 513)) | (1L << (VSIZE - 513)) | (1L << (WAIT - 513)) | (1L << (WARNING - 513)) | (1L << (WELLFORMED - 513)) | (1L << (WHENEVER - 513)) | (1L << (WHILE - 513)) | (1L << (WITHIN - 513)) | (1L << (WORK - 513)) | (1L << (WRITE - 513)) | (1L << (XMLAGG - 513)) | (1L << (XMLATTRIBUTES - 513)) | (1L << (XMLCAST - 513)) | (1L << (XMLCOLATTVAL - 513)) | (1L << (XMLELEMENT - 513)) | (1L << (XMLEXISTS - 513)) | (1L << (XMLFOREST - 513)) | (1L << (XMLNAMESPACES - 513)) | (1L << (XMLPARSE - 513)) | (1L << (XMLPI - 513)) | (1L << (XMLQUERY - 513)) | (1L << (XMLROOT - 513)) | (1L << (XMLSERIALIZE - 513)) | (1L << (XMLTABLE - 513)) | (1L << (XML - 513)) | (1L << (YEAR - 513)) | (1L << (YES - 513)) | (1L << (YMINTERVAL_UNCONSTRAINED - 513)) | (1L << (ZONE - 513)) | (1L << (PREDICTION - 513)) | (1L << (PREDICTION_BOUNDS - 513)) | (1L << (PREDICTION_COST - 513)) | (1L << (PREDICTION_DETAILS - 513)) | (1L << (PREDICTION_PROBABILITY - 513)) | (1L << (PREDICTION_SET - 513)) | (1L << (CUME_DIST - 513)) | (1L << (DENSE_RANK - 513)) | (1L << (LISTAGG - 513)) | (1L << (PERCENT_RANK - 513)) | (1L << (PERCENTILE_CONT - 513)) | (1L << (PERCENTILE_DISC - 513)) | (1L << (RANK - 513)))) != 0) || ((((_la - 577)) & ~0x3f) == 0 && ((1L << (_la - 577)) & ((1L << (AVG - 577)) | (1L << (CORR - 577)) | (1L << (COVAR_ - 577)) | (1L << (DECODE - 577)) | (1L << (LAG - 577)) | (1L << (LEAD - 577)) | (1L << (MAX - 577)) | (1L << (MEDIAN - 577)) | (1L << (MIN - 577)) | (1L << (NTILE - 577)) | (1L << (NVL - 577)) | (1L << (RATIO_TO_REPORT - 577)) | (1L << (REGR_ - 577)) | (1L << (ROUND - 577)) | (1L << (ROW_NUMBER - 577)) | (1L << (SUBSTR - 577)) | (1L << (TO_CHAR - 577)) | (1L << (TRIM - 577)) | (1L << (SUM - 577)) | (1L << (STDDEV - 577)) | (1L << (VAR_ - 577)) | (1L << (VARIANCE - 577)) | (1L << (LEAST - 577)) | (1L << (GREATEST - 577)) | (1L << (TO_DATE - 577)) | (1L << (NATIONAL_CHAR_STRING_LIT - 577)) | (1L << (UNSIGNED_INTEGER - 577)) | (1L << (APPROXIMATE_NUM_LIT - 577)) | (1L << (CHAR_STRING - 577)) | (1L << (DELIMITED_ID - 577)) | (1L << (LEFT_PAREN - 577)) | (1L << (ASTERISK - 577)) | (1L << (PLUS_SIGN - 577)) | (1L << (MINUS_SIGN - 577)) | (1L << (BINDVAR - 577)) | (1L << (COLON - 577)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
				{
				setState(4101);
				expression();
				}
			}

			setState(4108);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4104);
				match(COMMA);
				setState(4105);
				expression();
				}
				}
				setState(4110);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4111);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConditionContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public ConditionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_condition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterCondition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitCondition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitCondition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConditionContext condition() throws RecognitionException {
		ConditionContext _localctx = new ConditionContext(_ctx, getState());
		enterRule(_localctx, 520, RULE_condition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4113);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExpressionContext extends ParserRuleContext {
		public Cursor_expressionContext cursor_expression() {
			return getRuleContext(Cursor_expressionContext.class,0);
		}
		public Logical_or_expressionContext logical_or_expression() {
			return getRuleContext(Logical_or_expressionContext.class,0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExpressionContext expression() throws RecognitionException {
		ExpressionContext _localctx = new ExpressionContext(_ctx, getState());
		enterRule(_localctx, 522, RULE_expression);
		try {
			setState(4117);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,500,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4115);
				cursor_expression();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4116);
				logical_or_expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Logical_or_expressionContext extends ParserRuleContext {
		public Logical_and_expressionContext logical_and_expression() {
			return getRuleContext(Logical_and_expressionContext.class,0);
		}
		public Logical_or_expressionContext logical_or_expression() {
			return getRuleContext(Logical_or_expressionContext.class,0);
		}
		public TerminalNode OR() { return getToken(OracleSQLStatementParser.OR, 0); }
		public Logical_or_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_logical_or_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterLogical_or_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitLogical_or_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitLogical_or_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Logical_or_expressionContext logical_or_expression() throws RecognitionException {
		return logical_or_expression(0);
	}

	private Logical_or_expressionContext logical_or_expression(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Logical_or_expressionContext _localctx = new Logical_or_expressionContext(_ctx, _parentState);
		Logical_or_expressionContext _prevctx = _localctx;
		int _startState = 524;
		enterRecursionRule(_localctx, 524, RULE_logical_or_expression, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4120);
			logical_and_expression(0);
			}
			_ctx.stop = _input.LT(-1);
			setState(4127);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,501,_ctx);
			while ( _alt!=2 && _alt!= ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Logical_or_expressionContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_logical_or_expression);
					setState(4122);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(4123);
					match(OR);
					setState(4124);
					logical_and_expression(0);
					}
					} 
				}
				setState(4129);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,501,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Logical_and_expressionContext extends ParserRuleContext {
		public Negated_expressionContext negated_expression() {
			return getRuleContext(Negated_expressionContext.class,0);
		}
		public Logical_and_expressionContext logical_and_expression() {
			return getRuleContext(Logical_and_expressionContext.class,0);
		}
		public TerminalNode AND() { return getToken(OracleSQLStatementParser.AND, 0); }
		public Logical_and_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_logical_and_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterLogical_and_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitLogical_and_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitLogical_and_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Logical_and_expressionContext logical_and_expression() throws RecognitionException {
		return logical_and_expression(0);
	}

	private Logical_and_expressionContext logical_and_expression(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Logical_and_expressionContext _localctx = new Logical_and_expressionContext(_ctx, _parentState);
		Logical_and_expressionContext _prevctx = _localctx;
		int _startState = 526;
		enterRecursionRule(_localctx, 526, RULE_logical_and_expression, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4131);
			negated_expression();
			}
			_ctx.stop = _input.LT(-1);
			setState(4138);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,502,_ctx);
			while ( _alt!=2 && _alt!= ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Logical_and_expressionContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_logical_and_expression);
					setState(4133);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(4134);
					match(AND);
					setState(4135);
					negated_expression();
					}
					} 
				}
				setState(4140);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,502,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Negated_expressionContext extends ParserRuleContext {
		public TerminalNode NOT() { return getToken(OracleSQLStatementParser.NOT, 0); }
		public Negated_expressionContext negated_expression() {
			return getRuleContext(Negated_expressionContext.class,0);
		}
		public Equality_expressionContext equality_expression() {
			return getRuleContext(Equality_expressionContext.class,0);
		}
		public Negated_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_negated_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterNegated_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitNegated_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitNegated_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Negated_expressionContext negated_expression() throws RecognitionException {
		Negated_expressionContext _localctx = new Negated_expressionContext(_ctx, getState());
		enterRule(_localctx, 528, RULE_negated_expression);
		try {
			setState(4144);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NOT:
				enterOuterAlt(_localctx, 1);
				{
				setState(4141);
				match(NOT);
				setState(4142);
				negated_expression();
				}
				break;
			case ABS:
			case ACOS:
			case ADD:
			case ADD_MONTHS:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ALL:
			case ANALYZE:
			case ANY:
			case ARRAY:
			case ASCII:
			case ASCIISTR:
			case ASIN:
			case ASSOCIATE:
			case ATAN2:
			case ATAN:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BFILENAME:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BIN_TO_NUM:
			case BITAND:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CARDINALITY:
			case CASCADE:
			case CASE:
			case CAST:
			case CEIL:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHARTOROWID:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOSE:
			case COMPOUND:
			case CONCAT:
			case CONNECT_BY_ROOT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COS:
			case COSH:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_DATE:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DISTINCT:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case DUMP:
			case EACH:
			case ELEMENT:
			case EMPTY_BLOB:
			case EMPTY_CLOB:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXP:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FALSE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FLOOR:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FROM_TZ:
			case FULL:
			case FUNCTION:
			case GROUP_ID:
			case GROUPING:
			case HASH:
			case HEXTORAW:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INITCAP:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INSTR2:
			case INSTR4:
			case INSTRB:
			case INSTRC:
			case INSTR:
			case INTERFACE:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST_DAY:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LENGTH2:
			case LENGTH4:
			case LENGTHB:
			case LENGTHC:
			case LENGTH:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LN:
			case LNNVL:
			case LOCAL:
			case LOCALTIMESTAMP:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MOD:
			case MONTH:
			case MONTHS_BETWEEN:
			case MULTISET:
			case NAME:
			case NAN:
			case NANVL:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCHR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NEW_TIME:
			case NEXT_DAY:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLIF:
			case NULL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NUMTODSINTERVAL:
			case NUMTOYMINTERVAL:
			case NVARCHAR2:
			case NVL2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPAQUE:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case POWER:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case PROCEDURE:
			case RAISE:
			case RANGE:
			case RAW:
			case RAWTOHEX:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_REPLACE:
			case REGEXP_SUBSTR:
			case REJECT:
			case RELIES_ON:
			case REMAINDER:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROWNUM:
			case ROW:
			case ROWS:
			case RPAD:
			case RTRIM:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGN:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SINH:
			case SIN:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SOUNDEX:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case SQRT:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYS_CONTEXT:
			case SYSDATE:
			case SYSTIMESTAMP:
			case TANH:
			case TAN:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TO_CLOB:
			case TO_DSINTERVAL:
			case TO_LOB:
			case TO_MULTI_BYTE:
			case TO_NCLOB:
			case TO_NUMBER:
			case TO_SINGLE_BYTE:
			case TO_TIMESTAMP:
			case TO_TIMESTAMP_TZ:
			case TO_YMINTERVAL:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUE:
			case TRUNCATE:
			case TRUNC:
			case TYPE:
			case TZ_OFFSET:
			case UID:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPPER:
			case UPSERT:
			case UROWID:
			case USERENV:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case VSIZE:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case DECODE:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case NVL:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROUND:
			case ROW_NUMBER:
			case SUBSTR:
			case TO_CHAR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case LEAST:
			case GREATEST:
			case TO_DATE:
			case NATIONAL_CHAR_STRING_LIT:
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
			case CHAR_STRING:
			case DELIMITED_ID:
			case LEFT_PAREN:
			case ASTERISK:
			case PLUS_SIGN:
			case MINUS_SIGN:
			case BINDVAR:
			case COLON:
			case INTRODUCER:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 2);
				{
				setState(4143);
				equality_expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Equality_expressionContext extends ParserRuleContext {
		public Multiset_expressionContext multiset_expression() {
			return getRuleContext(Multiset_expressionContext.class,0);
		}
		public List<TerminalNode> IS() { return getTokens(OracleSQLStatementParser.IS); }
		public TerminalNode IS(int i) {
			return getToken(OracleSQLStatementParser.IS, i);
		}
		public List<TerminalNode> NULL() { return getTokens(OracleSQLStatementParser.NULL); }
		public TerminalNode NULL(int i) {
			return getToken(OracleSQLStatementParser.NULL, i);
		}
		public List<TerminalNode> NAN() { return getTokens(OracleSQLStatementParser.NAN); }
		public TerminalNode NAN(int i) {
			return getToken(OracleSQLStatementParser.NAN, i);
		}
		public List<TerminalNode> PRESENT() { return getTokens(OracleSQLStatementParser.PRESENT); }
		public TerminalNode PRESENT(int i) {
			return getToken(OracleSQLStatementParser.PRESENT, i);
		}
		public List<TerminalNode> INFINITE() { return getTokens(OracleSQLStatementParser.INFINITE); }
		public TerminalNode INFINITE(int i) {
			return getToken(OracleSQLStatementParser.INFINITE, i);
		}
		public List<TerminalNode> A_LETTER() { return getTokens(OracleSQLStatementParser.A_LETTER); }
		public TerminalNode A_LETTER(int i) {
			return getToken(OracleSQLStatementParser.A_LETTER, i);
		}
		public List<TerminalNode> SET() { return getTokens(OracleSQLStatementParser.SET); }
		public TerminalNode SET(int i) {
			return getToken(OracleSQLStatementParser.SET, i);
		}
		public List<TerminalNode> EMPTY() { return getTokens(OracleSQLStatementParser.EMPTY); }
		public TerminalNode EMPTY(int i) {
			return getToken(OracleSQLStatementParser.EMPTY, i);
		}
		public List<TerminalNode> OF() { return getTokens(OracleSQLStatementParser.OF); }
		public TerminalNode OF(int i) {
			return getToken(OracleSQLStatementParser.OF, i);
		}
		public List<TerminalNode> LEFT_PAREN() { return getTokens(OracleSQLStatementParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(OracleSQLStatementParser.LEFT_PAREN, i);
		}
		public List<Type_specContext> type_spec() {
			return getRuleContexts(Type_specContext.class);
		}
		public Type_specContext type_spec(int i) {
			return getRuleContext(Type_specContext.class,i);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(OracleSQLStatementParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(OracleSQLStatementParser.RIGHT_PAREN, i);
		}
		public List<TerminalNode> NOT() { return getTokens(OracleSQLStatementParser.NOT); }
		public TerminalNode NOT(int i) {
			return getToken(OracleSQLStatementParser.NOT, i);
		}
		public List<TerminalNode> TYPE() { return getTokens(OracleSQLStatementParser.TYPE); }
		public TerminalNode TYPE(int i) {
			return getToken(OracleSQLStatementParser.TYPE, i);
		}
		public List<TerminalNode> ONLY() { return getTokens(OracleSQLStatementParser.ONLY); }
		public TerminalNode ONLY(int i) {
			return getToken(OracleSQLStatementParser.ONLY, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(OracleSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(OracleSQLStatementParser.COMMA, i);
		}
		public Equality_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_equality_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterEquality_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitEquality_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitEquality_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Equality_expressionContext equality_expression() throws RecognitionException {
		Equality_expressionContext _localctx = new Equality_expressionContext(_ctx, getState());
		enterRule(_localctx, 530, RULE_equality_expression);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4146);
			multiset_expression();
			setState(4180);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,509,_ctx);
			while ( _alt!=2 && _alt!= ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4147);
					match(IS);
					setState(4149);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==NOT) {
						{
						setState(4148);
						match(NOT);
						}
					}

					setState(4176);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case NULL:
						{
						setState(4151);
						match(NULL);
						}
						break;
					case NAN:
						{
						setState(4152);
						match(NAN);
						}
						break;
					case PRESENT:
						{
						setState(4153);
						match(PRESENT);
						}
						break;
					case INFINITE:
						{
						setState(4154);
						match(INFINITE);
						}
						break;
					case A_LETTER:
						{
						setState(4155);
						match(A_LETTER);
						setState(4156);
						match(SET);
						}
						break;
					case EMPTY:
						{
						setState(4157);
						match(EMPTY);
						}
						break;
					case OF:
						{
						setState(4158);
						match(OF);
						setState(4160);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==TYPE) {
							{
							setState(4159);
							match(TYPE);
							}
						}

						setState(4162);
						match(LEFT_PAREN);
						setState(4164);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,506,_ctx) ) {
						case 1:
							{
							setState(4163);
							match(ONLY);
							}
							break;
						}
						setState(4166);
						type_spec();
						setState(4171);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la==COMMA) {
							{
							{
							setState(4167);
							match(COMMA);
							setState(4168);
							type_spec();
							}
							}
							setState(4173);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						setState(4174);
						match(RIGHT_PAREN);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					} 
				}
				setState(4182);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,509,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Multiset_expressionContext extends ParserRuleContext {
		public Relational_expressionContext relational_expression() {
			return getRuleContext(Relational_expressionContext.class,0);
		}
		public Multiset_typeContext multiset_type() {
			return getRuleContext(Multiset_typeContext.class,0);
		}
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public TerminalNode OF() { return getToken(OracleSQLStatementParser.OF, 0); }
		public Multiset_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multiset_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterMultiset_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitMultiset_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitMultiset_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Multiset_expressionContext multiset_expression() throws RecognitionException {
		Multiset_expressionContext _localctx = new Multiset_expressionContext(_ctx, getState());
		enterRule(_localctx, 532, RULE_multiset_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4183);
			relational_expression(0);
			setState(4190);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,511,_ctx) ) {
			case 1:
				{
				setState(4184);
				multiset_type();
				setState(4186);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OF) {
					{
					setState(4185);
					match(OF);
					}
				}

				setState(4188);
				concatenation();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Multiset_typeContext extends ParserRuleContext {
		public TerminalNode MEMBER() { return getToken(OracleSQLStatementParser.MEMBER, 0); }
		public TerminalNode SUBMULTISET() { return getToken(OracleSQLStatementParser.SUBMULTISET, 0); }
		public Multiset_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multiset_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterMultiset_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitMultiset_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitMultiset_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Multiset_typeContext multiset_type() throws RecognitionException {
		Multiset_typeContext _localctx = new Multiset_typeContext(_ctx, getState());
		enterRule(_localctx, 534, RULE_multiset_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4192);
			_la = _input.LA(1);
			if ( !(_la==MEMBER || _la==SUBMULTISET) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Relational_expressionContext extends ParserRuleContext {
		public Compound_expressionContext compound_expression() {
			return getRuleContext(Compound_expressionContext.class,0);
		}
		public List<Relational_expressionContext> relational_expression() {
			return getRuleContexts(Relational_expressionContext.class);
		}
		public Relational_expressionContext relational_expression(int i) {
			return getRuleContext(Relational_expressionContext.class,i);
		}
		public Relational_operatorContext relational_operator() {
			return getRuleContext(Relational_operatorContext.class,0);
		}
		public Relational_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_relational_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterRelational_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitRelational_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitRelational_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Relational_expressionContext relational_expression() throws RecognitionException {
		return relational_expression(0);
	}

	private Relational_expressionContext relational_expression(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Relational_expressionContext _localctx = new Relational_expressionContext(_ctx, _parentState);
		Relational_expressionContext _prevctx = _localctx;
		int _startState = 536;
		enterRecursionRule(_localctx, 536, RULE_relational_expression, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4195);
			compound_expression();
			}
			_ctx.stop = _input.LT(-1);
			setState(4203);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,512,_ctx);
			while ( _alt!=2 && _alt!= ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Relational_expressionContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_relational_expression);
					setState(4197);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(4198);
					relational_operator();
					setState(4199);
					relational_expression(3);
					}
					} 
				}
				setState(4205);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,512,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Relational_operatorContext extends ParserRuleContext {
		public Not_equal_opContext not_equal_op() {
			return getRuleContext(Not_equal_opContext.class,0);
		}
		public Less_than_or_equals_opContext less_than_or_equals_op() {
			return getRuleContext(Less_than_or_equals_opContext.class,0);
		}
		public Greater_than_or_equals_opContext greater_than_or_equals_op() {
			return getRuleContext(Greater_than_or_equals_opContext.class,0);
		}
		public Relational_operatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_relational_operator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterRelational_operator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitRelational_operator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitRelational_operator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Relational_operatorContext relational_operator() throws RecognitionException {
		Relational_operatorContext _localctx = new Relational_operatorContext(_ctx, getState());
		enterRule(_localctx, 538, RULE_relational_operator);
		try {
			setState(4212);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,513,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4206);
				match(EQUALS_OP);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4207);
				not_equal_op();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4208);
				match(LESS_THAN_OP);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4209);
				match(GREATER_THAN_OP);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4210);
				less_than_or_equals_op();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4211);
				greater_than_or_equals_op();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Compound_expressionContext extends ParserRuleContext {
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public TerminalNode IN() { return getToken(OracleSQLStatementParser.IN, 0); }
		public In_elementsContext in_elements() {
			return getRuleContext(In_elementsContext.class,0);
		}
		public TerminalNode BETWEEN() { return getToken(OracleSQLStatementParser.BETWEEN, 0); }
		public Between_elementsContext between_elements() {
			return getRuleContext(Between_elementsContext.class,0);
		}
		public Like_typeContext like_type() {
			return getRuleContext(Like_typeContext.class,0);
		}
		public Like_concatenationContext like_concatenation() {
			return getRuleContext(Like_concatenationContext.class,0);
		}
		public TerminalNode NOT() { return getToken(OracleSQLStatementParser.NOT, 0); }
		public Like_escape_partContext like_escape_part() {
			return getRuleContext(Like_escape_partContext.class,0);
		}
		public Compound_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compound_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterCompound_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitCompound_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitCompound_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Compound_expressionContext compound_expression() throws RecognitionException {
		Compound_expressionContext _localctx = new Compound_expressionContext(_ctx, getState());
		enterRule(_localctx, 540, RULE_compound_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4214);
			concatenation();
			setState(4229);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,517,_ctx) ) {
			case 1:
				{
				setState(4216);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(4215);
					match(NOT);
					}
				}

				setState(4227);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case IN:
					{
					setState(4218);
					match(IN);
					setState(4219);
					in_elements();
					}
					break;
				case BETWEEN:
					{
					setState(4220);
					match(BETWEEN);
					setState(4221);
					between_elements();
					}
					break;
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIKE:
					{
					setState(4222);
					like_type();
					setState(4223);
					like_concatenation();
					setState(4225);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,515,_ctx) ) {
					case 1:
						{
						setState(4224);
						like_escape_part();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Like_concatenationContext extends ParserRuleContext {
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public Like_concatenationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_like_concatenation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterLike_concatenation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitLike_concatenation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitLike_concatenation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Like_concatenationContext like_concatenation() throws RecognitionException {
		Like_concatenationContext _localctx = new Like_concatenationContext(_ctx, getState());
		enterRule(_localctx, 542, RULE_like_concatenation);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4231);
			concatenation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Like_typeContext extends ParserRuleContext {
		public TerminalNode LIKE() { return getToken(OracleSQLStatementParser.LIKE, 0); }
		public TerminalNode LIKEC() { return getToken(OracleSQLStatementParser.LIKEC, 0); }
		public TerminalNode LIKE2() { return getToken(OracleSQLStatementParser.LIKE2, 0); }
		public TerminalNode LIKE4() { return getToken(OracleSQLStatementParser.LIKE4, 0); }
		public Like_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_like_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterLike_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitLike_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitLike_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Like_typeContext like_type() throws RecognitionException {
		Like_typeContext _localctx = new Like_typeContext(_ctx, getState());
		enterRule(_localctx, 544, RULE_like_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4233);
			_la = _input.LA(1);
			if ( !(((((_la - 244)) & ~0x3f) == 0 && ((1L << (_la - 244)) & ((1L << (LIKE2 - 244)) | (1L << (LIKE4 - 244)) | (1L << (LIKEC - 244)) | (1L << (LIKE - 244)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Like_escape_partContext extends ParserRuleContext {
		public TerminalNode ESCAPE() { return getToken(OracleSQLStatementParser.ESCAPE, 0); }
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public Like_escape_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_like_escape_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterLike_escape_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitLike_escape_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitLike_escape_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Like_escape_partContext like_escape_part() throws RecognitionException {
		Like_escape_partContext _localctx = new Like_escape_partContext(_ctx, getState());
		enterRule(_localctx, 546, RULE_like_escape_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4235);
			match(ESCAPE);
			setState(4236);
			concatenation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class In_elementsContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(OracleSQLStatementParser.LEFT_PAREN, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(OracleSQLStatementParser.RIGHT_PAREN, 0); }
		public List<ConcatenationContext> concatenation() {
			return getRuleContexts(ConcatenationContext.class);
		}
		public ConcatenationContext concatenation(int i) {
			return getRuleContext(ConcatenationContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(OracleSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(OracleSQLStatementParser.COMMA, i);
		}
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public Bind_variableContext bind_variable() {
			return getRuleContext(Bind_variableContext.class,0);
		}
		public General_elementContext general_element() {
			return getRuleContext(General_elementContext.class,0);
		}
		public In_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_in_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterIn_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitIn_elements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitIn_elements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final In_elementsContext in_elements() throws RecognitionException {
		In_elementsContext _localctx = new In_elementsContext(_ctx, getState());
		enterRule(_localctx, 548, RULE_in_elements);
		int _la;
		try {
			setState(4256);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,519,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4238);
				match(LEFT_PAREN);
				setState(4239);
				subquery();
				setState(4240);
				match(RIGHT_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4242);
				match(LEFT_PAREN);
				setState(4243);
				concatenation();
				setState(4248);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4244);
					match(COMMA);
					setState(4245);
					concatenation();
					}
					}
					setState(4250);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4251);
				match(RIGHT_PAREN);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4253);
				constant();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4254);
				bind_variable();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4255);
				general_element();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Between_elementsContext extends ParserRuleContext {
		public List<ConcatenationContext> concatenation() {
			return getRuleContexts(ConcatenationContext.class);
		}
		public ConcatenationContext concatenation(int i) {
			return getRuleContext(ConcatenationContext.class,i);
		}
		public TerminalNode AND() { return getToken(OracleSQLStatementParser.AND, 0); }
		public Between_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_between_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterBetween_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitBetween_elements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitBetween_elements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Between_elementsContext between_elements() throws RecognitionException {
		Between_elementsContext _localctx = new Between_elementsContext(_ctx, getState());
		enterRule(_localctx, 550, RULE_between_elements);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4258);
			concatenation();
			setState(4259);
			match(AND);
			setState(4260);
			concatenation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConcatenationContext extends ParserRuleContext {
		public List<Additive_expressionContext> additive_expression() {
			return getRuleContexts(Additive_expressionContext.class);
		}
		public Additive_expressionContext additive_expression(int i) {
			return getRuleContext(Additive_expressionContext.class,i);
		}
		public List<Concatenation_opContext> concatenation_op() {
			return getRuleContexts(Concatenation_opContext.class);
		}
		public Concatenation_opContext concatenation_op(int i) {
			return getRuleContext(Concatenation_opContext.class,i);
		}
		public ConcatenationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_concatenation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterConcatenation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitConcatenation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitConcatenation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConcatenationContext concatenation() throws RecognitionException {
		ConcatenationContext _localctx = new ConcatenationContext(_ctx, getState());
		enterRule(_localctx, 552, RULE_concatenation);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4262);
			additive_expression();
			setState(4268);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,520,_ctx);
			while ( _alt!=2 && _alt!= ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4263);
					concatenation_op();
					setState(4264);
					additive_expression();
					}
					} 
				}
				setState(4270);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,520,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Additive_expressionContext extends ParserRuleContext {
		public Token PLUS_SIGN;
		public List<Token> op = new ArrayList<Token>();
		public Token MINUS_SIGN;
		public Token _tset7570;
		public List<Multiply_expressionContext> multiply_expression() {
			return getRuleContexts(Multiply_expressionContext.class);
		}
		public Multiply_expressionContext multiply_expression(int i) {
			return getRuleContext(Multiply_expressionContext.class,i);
		}
		public List<TerminalNode> PLUS_SIGN() { return getTokens(OracleSQLStatementParser.PLUS_SIGN); }
		public TerminalNode PLUS_SIGN(int i) {
			return getToken(OracleSQLStatementParser.PLUS_SIGN, i);
		}
		public List<TerminalNode> MINUS_SIGN() { return getTokens(OracleSQLStatementParser.MINUS_SIGN); }
		public TerminalNode MINUS_SIGN(int i) {
			return getToken(OracleSQLStatementParser.MINUS_SIGN, i);
		}
		public Additive_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_additive_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterAdditive_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitAdditive_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitAdditive_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Additive_expressionContext additive_expression() throws RecognitionException {
		Additive_expressionContext _localctx = new Additive_expressionContext(_ctx, getState());
		enterRule(_localctx, 554, RULE_additive_expression);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4271);
			multiply_expression();
			setState(4276);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,521,_ctx);
			while ( _alt!=2 && _alt!= ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4272);
					((Additive_expressionContext)_localctx)._tset7570 = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==PLUS_SIGN || _la==MINUS_SIGN) ) {
						((Additive_expressionContext)_localctx)._tset7570 = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					((Additive_expressionContext)_localctx).op.add(((Additive_expressionContext)_localctx)._tset7570);
					setState(4273);
					multiply_expression();
					}
					} 
				}
				setState(4278);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,521,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Multiply_expressionContext extends ParserRuleContext {
		public Token ASTERISK;
		public List<Token> op = new ArrayList<Token>();
		public Token SOLIDUS;
		public Token MOD;
		public Token _tset7593;
		public List<Datetime_expressionContext> datetime_expression() {
			return getRuleContexts(Datetime_expressionContext.class);
		}
		public Datetime_expressionContext datetime_expression(int i) {
			return getRuleContext(Datetime_expressionContext.class,i);
		}
		public List<TerminalNode> ASTERISK() { return getTokens(OracleSQLStatementParser.ASTERISK); }
		public TerminalNode ASTERISK(int i) {
			return getToken(OracleSQLStatementParser.ASTERISK, i);
		}
		public List<TerminalNode> SOLIDUS() { return getTokens(OracleSQLStatementParser.SOLIDUS); }
		public TerminalNode SOLIDUS(int i) {
			return getToken(OracleSQLStatementParser.SOLIDUS, i);
		}
		public List<TerminalNode> MOD() { return getTokens(OracleSQLStatementParser.MOD); }
		public TerminalNode MOD(int i) {
			return getToken(OracleSQLStatementParser.MOD, i);
		}
		public Multiply_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multiply_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterMultiply_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitMultiply_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitMultiply_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Multiply_expressionContext multiply_expression() throws RecognitionException {
		Multiply_expressionContext _localctx = new Multiply_expressionContext(_ctx, getState());
		enterRule(_localctx, 556, RULE_multiply_expression);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4279);
			datetime_expression();
			setState(4284);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,522,_ctx);
			while ( _alt!=2 && _alt!= ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4280);
					((Multiply_expressionContext)_localctx)._tset7593 = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==MOD || _la==ASTERISK || _la==SOLIDUS) ) {
						((Multiply_expressionContext)_localctx)._tset7593 = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					((Multiply_expressionContext)_localctx).op.add(((Multiply_expressionContext)_localctx)._tset7593);
					setState(4281);
					datetime_expression();
					}
					} 
				}
				setState(4286);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,522,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Datetime_expressionContext extends ParserRuleContext {
		public Model_expressionContext model_expression() {
			return getRuleContext(Model_expressionContext.class,0);
		}
		public TerminalNode AT() { return getToken(OracleSQLStatementParser.AT, 0); }
		public Interval_expressionContext interval_expression() {
			return getRuleContext(Interval_expressionContext.class,0);
		}
		public TerminalNode LOCAL() { return getToken(OracleSQLStatementParser.LOCAL, 0); }
		public TerminalNode TIME() { return getToken(OracleSQLStatementParser.TIME, 0); }
		public TerminalNode ZONE() { return getToken(OracleSQLStatementParser.ZONE, 0); }
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public Datetime_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_datetime_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterDatetime_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitDatetime_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitDatetime_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Datetime_expressionContext datetime_expression() throws RecognitionException {
		Datetime_expressionContext _localctx = new Datetime_expressionContext(_ctx, getState());
		enterRule(_localctx, 558, RULE_datetime_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4287);
			model_expression();
			setState(4296);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,524,_ctx) ) {
			case 1:
				{
				setState(4288);
				match(AT);
				setState(4293);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case LOCAL:
					{
					setState(4289);
					match(LOCAL);
					}
					break;
				case TIME:
					{
					setState(4290);
					match(TIME);
					setState(4291);
					match(ZONE);
					setState(4292);
					concatenation();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				{
				setState(4295);
				interval_expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Interval_expressionContext extends ParserRuleContext {
		public TerminalNode DAY() { return getToken(OracleSQLStatementParser.DAY, 0); }
		public TerminalNode TO() { return getToken(OracleSQLStatementParser.TO, 0); }
		public TerminalNode SECOND() { return getToken(OracleSQLStatementParser.SECOND, 0); }
		public List<TerminalNode> LEFT_PAREN() { return getTokens(OracleSQLStatementParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(OracleSQLStatementParser.LEFT_PAREN, i);
		}
		public List<ConcatenationContext> concatenation() {
			return getRuleContexts(ConcatenationContext.class);
		}
		public ConcatenationContext concatenation(int i) {
			return getRuleContext(ConcatenationContext.class,i);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(OracleSQLStatementParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(OracleSQLStatementParser.RIGHT_PAREN, i);
		}
		public TerminalNode YEAR() { return getToken(OracleSQLStatementParser.YEAR, 0); }
		public TerminalNode MONTH() { return getToken(OracleSQLStatementParser.MONTH, 0); }
		public Interval_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_interval_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterInterval_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitInterval_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitInterval_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Interval_expressionContext interval_expression() throws RecognitionException {
		Interval_expressionContext _localctx = new Interval_expressionContext(_ctx, getState());
		enterRule(_localctx, 560, RULE_interval_expression);
		int _la;
		try {
			setState(4322);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DAY:
				enterOuterAlt(_localctx, 1);
				{
				setState(4298);
				match(DAY);
				setState(4303);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN) {
					{
					setState(4299);
					match(LEFT_PAREN);
					setState(4300);
					concatenation();
					setState(4301);
					match(RIGHT_PAREN);
					}
				}

				setState(4305);
				match(TO);
				setState(4306);
				match(SECOND);
				setState(4311);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,526,_ctx) ) {
				case 1:
					{
					setState(4307);
					match(LEFT_PAREN);
					setState(4308);
					concatenation();
					setState(4309);
					match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			case YEAR:
				enterOuterAlt(_localctx, 2);
				{
				setState(4313);
				match(YEAR);
				setState(4318);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN) {
					{
					setState(4314);
					match(LEFT_PAREN);
					setState(4315);
					concatenation();
					setState(4316);
					match(RIGHT_PAREN);
					}
				}

				setState(4320);
				match(TO);
				setState(4321);
				match(MONTH);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_expressionContext extends ParserRuleContext {
		public Unary_expressionContext unary_expression() {
			return getRuleContext(Unary_expressionContext.class,0);
		}
		public Model_expression_elementContext model_expression_element() {
			return getRuleContext(Model_expression_elementContext.class,0);
		}
		public Model_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterModel_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitModel_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitModel_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Model_expressionContext model_expression() throws RecognitionException {
		Model_expressionContext _localctx = new Model_expressionContext(_ctx, getState());
		enterRule(_localctx, 562, RULE_model_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4324);
			unary_expression();
			setState(4329);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,529,_ctx) ) {
			case 1:
				{
				setState(4325);
				match(LEFT_BRACKET);
				setState(4326);
				model_expression_element();
				setState(4327);
				match(RIGHT_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_expression_elementContext extends ParserRuleContext {
		public List<TerminalNode> ANY() { return getTokens(OracleSQLStatementParser.ANY); }
		public TerminalNode ANY(int i) {
			return getToken(OracleSQLStatementParser.ANY, i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(OracleSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(OracleSQLStatementParser.COMMA, i);
		}
		public List<Single_column_for_loopContext> single_column_for_loop() {
			return getRuleContexts(Single_column_for_loopContext.class);
		}
		public Single_column_for_loopContext single_column_for_loop(int i) {
			return getRuleContext(Single_column_for_loopContext.class,i);
		}
		public Multi_column_for_loopContext multi_column_for_loop() {
			return getRuleContext(Multi_column_for_loopContext.class,0);
		}
		public Model_expression_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_expression_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterModel_expression_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitModel_expression_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitModel_expression_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Model_expression_elementContext model_expression_element() throws RecognitionException {
		Model_expression_elementContext _localctx = new Model_expression_elementContext(_ctx, getState());
		enterRule(_localctx, 564, RULE_model_expression_element);
		int _la;
		try {
			setState(4354);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,534,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4333);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,530,_ctx) ) {
				case 1:
					{
					setState(4331);
					match(ANY);
					}
					break;
				case 2:
					{
					setState(4332);
					expression();
					}
					break;
				}
				setState(4342);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4335);
					match(COMMA);
					setState(4338);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,531,_ctx) ) {
					case 1:
						{
						setState(4336);
						match(ANY);
						}
						break;
					case 2:
						{
						setState(4337);
						expression();
						}
						break;
					}
					}
					}
					setState(4344);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4345);
				single_column_for_loop();
				setState(4350);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4346);
					match(COMMA);
					setState(4347);
					single_column_for_loop();
					}
					}
					setState(4352);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4353);
				multi_column_for_loop();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Single_column_for_loopContext extends ParserRuleContext {
		public ExpressionContext ex1;
		public ExpressionContext ex2;
		public ExpressionContext ex3;
		public TerminalNode FOR() { return getToken(OracleSQLStatementParser.FOR, 0); }
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public TerminalNode IN() { return getToken(OracleSQLStatementParser.IN, 0); }
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public TerminalNode FROM() { return getToken(OracleSQLStatementParser.FROM, 0); }
		public TerminalNode TO() { return getToken(OracleSQLStatementParser.TO, 0); }
		public For_increment_decrement_typeContext for_increment_decrement_type() {
			return getRuleContext(For_increment_decrement_typeContext.class,0);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public For_like_partContext for_like_part() {
			return getRuleContext(For_like_partContext.class,0);
		}
		public Single_column_for_loopContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_single_column_for_loop; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterSingle_column_for_loop(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitSingle_column_for_loop(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitSingle_column_for_loop(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Single_column_for_loopContext single_column_for_loop() throws RecognitionException {
		Single_column_for_loopContext _localctx = new Single_column_for_loopContext(_ctx, getState());
		enterRule(_localctx, 566, RULE_single_column_for_loop);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4356);
			match(FOR);
			setState(4357);
			column_name();
			setState(4370);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case IN:
				{
				setState(4358);
				match(IN);
				setState(4359);
				expression_list();
				}
				break;
			case FROM:
			case LIKE:
				{
				setState(4361);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIKE) {
					{
					setState(4360);
					for_like_part();
					}
				}

				setState(4363);
				match(FROM);
				setState(4364);
				((Single_column_for_loopContext)_localctx).ex1 = expression();
				setState(4365);
				match(TO);
				setState(4366);
				((Single_column_for_loopContext)_localctx).ex2 = expression();
				setState(4367);
				for_increment_decrement_type();
				setState(4368);
				((Single_column_for_loopContext)_localctx).ex3 = expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class For_like_partContext extends ParserRuleContext {
		public TerminalNode LIKE() { return getToken(OracleSQLStatementParser.LIKE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public For_like_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_like_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterFor_like_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitFor_like_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitFor_like_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final For_like_partContext for_like_part() throws RecognitionException {
		For_like_partContext _localctx = new For_like_partContext(_ctx, getState());
		enterRule(_localctx, 568, RULE_for_like_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4372);
			match(LIKE);
			setState(4373);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class For_increment_decrement_typeContext extends ParserRuleContext {
		public TerminalNode INCREMENT() { return getToken(OracleSQLStatementParser.INCREMENT, 0); }
		public TerminalNode DECREMENT() { return getToken(OracleSQLStatementParser.DECREMENT, 0); }
		public For_increment_decrement_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_increment_decrement_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterFor_increment_decrement_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitFor_increment_decrement_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitFor_increment_decrement_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final For_increment_decrement_typeContext for_increment_decrement_type() throws RecognitionException {
		For_increment_decrement_typeContext _localctx = new For_increment_decrement_typeContext(_ctx, getState());
		enterRule(_localctx, 570, RULE_for_increment_decrement_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4375);
			_la = _input.LA(1);
			if ( !(_la==DECREMENT || _la==INCREMENT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Multi_column_for_loopContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(OracleSQLStatementParser.FOR, 0); }
		public List<TerminalNode> LEFT_PAREN() { return getTokens(OracleSQLStatementParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(OracleSQLStatementParser.LEFT_PAREN, i);
		}
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(OracleSQLStatementParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(OracleSQLStatementParser.RIGHT_PAREN, i);
		}
		public TerminalNode IN() { return getToken(OracleSQLStatementParser.IN, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public List<Expression_listContext> expression_list() {
			return getRuleContexts(Expression_listContext.class);
		}
		public Expression_listContext expression_list(int i) {
			return getRuleContext(Expression_listContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(OracleSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(OracleSQLStatementParser.COMMA, i);
		}
		public Multi_column_for_loopContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multi_column_for_loop; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterMulti_column_for_loop(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitMulti_column_for_loop(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitMulti_column_for_loop(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Multi_column_for_loopContext multi_column_for_loop() throws RecognitionException {
		Multi_column_for_loopContext _localctx = new Multi_column_for_loopContext(_ctx, getState());
		enterRule(_localctx, 572, RULE_multi_column_for_loop);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4377);
			match(FOR);
			setState(4378);
			match(LEFT_PAREN);
			setState(4379);
			column_name();
			setState(4384);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4380);
				match(COMMA);
				setState(4381);
				column_name();
				}
				}
				setState(4386);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4387);
			match(RIGHT_PAREN);
			setState(4388);
			match(IN);
			setState(4389);
			match(LEFT_PAREN);
			setState(4402);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,539,_ctx) ) {
			case 1:
				{
				setState(4390);
				subquery();
				}
				break;
			case 2:
				{
				setState(4391);
				match(LEFT_PAREN);
				setState(4392);
				expression_list();
				setState(4397);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4393);
					match(COMMA);
					setState(4394);
					expression_list();
					}
					}
					setState(4399);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4400);
				match(RIGHT_PAREN);
				}
				break;
			}
			setState(4404);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unary_expressionContext extends ParserRuleContext {
		public Unary_expressionContext unary_expression() {
			return getRuleContext(Unary_expressionContext.class,0);
		}
		public TerminalNode MINUS_SIGN() { return getToken(OracleSQLStatementParser.MINUS_SIGN, 0); }
		public TerminalNode PLUS_SIGN() { return getToken(OracleSQLStatementParser.PLUS_SIGN, 0); }
		public TerminalNode PRIOR() { return getToken(OracleSQLStatementParser.PRIOR, 0); }
		public TerminalNode CONNECT_BY_ROOT() { return getToken(OracleSQLStatementParser.CONNECT_BY_ROOT, 0); }
		public TerminalNode NEW() { return getToken(OracleSQLStatementParser.NEW, 0); }
		public TerminalNode DISTINCT() { return getToken(OracleSQLStatementParser.DISTINCT, 0); }
		public TerminalNode ALL() { return getToken(OracleSQLStatementParser.ALL, 0); }
		public Case_statementContext case_statement() {
			return getRuleContext(Case_statementContext.class,0);
		}
		public Quantified_expressionContext quantified_expression() {
			return getRuleContext(Quantified_expressionContext.class,0);
		}
		public AtomContext atom() {
			return getRuleContext(AtomContext.class,0);
		}
		public Unary_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unary_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterUnary_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitUnary_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitUnary_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Unary_expressionContext unary_expression() throws RecognitionException {
		Unary_expressionContext _localctx = new Unary_expressionContext(_ctx, getState());
		enterRule(_localctx, 574, RULE_unary_expression);
		int _la;
		try {
			setState(4421);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,540,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4406);
				_la = _input.LA(1);
				if ( !(_la==PLUS_SIGN || _la==MINUS_SIGN) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4407);
				unary_expression();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4408);
				match(PRIOR);
				setState(4409);
				unary_expression();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4410);
				match(CONNECT_BY_ROOT);
				setState(4411);
				unary_expression();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4412);
				match(NEW);
				setState(4413);
				unary_expression();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4414);
				match(DISTINCT);
				setState(4415);
				unary_expression();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4416);
				match(ALL);
				setState(4417);
				unary_expression();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4418);
				case_statement();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(4419);
				quantified_expression();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(4420);
				atom();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Case_statementContext extends ParserRuleContext {
		public Searched_case_statementContext searched_case_statement() {
			return getRuleContext(Searched_case_statementContext.class,0);
		}
		public Simple_case_statementContext simple_case_statement() {
			return getRuleContext(Simple_case_statementContext.class,0);
		}
		public Case_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_case_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterCase_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitCase_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitCase_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Case_statementContext case_statement() throws RecognitionException {
		Case_statementContext _localctx = new Case_statementContext(_ctx, getState());
		enterRule(_localctx, 576, RULE_case_statement);
		try {
			setState(4425);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,541,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4423);
				searched_case_statement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4424);
				simple_case_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Simple_case_statementContext extends ParserRuleContext {
		public List<TerminalNode> CASE() { return getTokens(OracleSQLStatementParser.CASE); }
		public TerminalNode CASE(int i) {
			return getToken(OracleSQLStatementParser.CASE, i);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode END() { return getToken(OracleSQLStatementParser.END, 0); }
		public List<Simple_case_when_partContext> simple_case_when_part() {
			return getRuleContexts(Simple_case_when_partContext.class);
		}
		public Simple_case_when_partContext simple_case_when_part(int i) {
			return getRuleContext(Simple_case_when_partContext.class,i);
		}
		public Case_else_partContext case_else_part() {
			return getRuleContext(Case_else_partContext.class,0);
		}
		public Simple_case_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simple_case_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterSimple_case_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitSimple_case_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitSimple_case_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Simple_case_statementContext simple_case_statement() throws RecognitionException {
		Simple_case_statementContext _localctx = new Simple_case_statementContext(_ctx, getState());
		enterRule(_localctx, 578, RULE_simple_case_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4427);
			match(CASE);
			setState(4428);
			expression();
			setState(4430); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(4429);
				simple_case_when_part();
				}
				}
				setState(4432); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==WHEN );
			setState(4435);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(4434);
				case_else_part();
				}
			}

			setState(4437);
			match(END);
			setState(4439);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,544,_ctx) ) {
			case 1:
				{
				setState(4438);
				match(CASE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Simple_case_when_partContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(OracleSQLStatementParser.WHEN, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode THEN() { return getToken(OracleSQLStatementParser.THEN, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public Simple_case_when_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simple_case_when_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterSimple_case_when_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitSimple_case_when_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitSimple_case_when_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Simple_case_when_partContext simple_case_when_part() throws RecognitionException {
		Simple_case_when_partContext _localctx = new Simple_case_when_partContext(_ctx, getState());
		enterRule(_localctx, 580, RULE_simple_case_when_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4441);
			match(WHEN);
			setState(4442);
			expression();
			setState(4443);
			match(THEN);
			setState(4446);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,545,_ctx) ) {
			case 1:
				{
				setState(4444);
				seq_of_statements();
				}
				break;
			case 2:
				{
				setState(4445);
				expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Searched_case_statementContext extends ParserRuleContext {
		public List<TerminalNode> CASE() { return getTokens(OracleSQLStatementParser.CASE); }
		public TerminalNode CASE(int i) {
			return getToken(OracleSQLStatementParser.CASE, i);
		}
		public TerminalNode END() { return getToken(OracleSQLStatementParser.END, 0); }
		public List<Searched_case_when_partContext> searched_case_when_part() {
			return getRuleContexts(Searched_case_when_partContext.class);
		}
		public Searched_case_when_partContext searched_case_when_part(int i) {
			return getRuleContext(Searched_case_when_partContext.class,i);
		}
		public Case_else_partContext case_else_part() {
			return getRuleContext(Case_else_partContext.class,0);
		}
		public Searched_case_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_searched_case_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterSearched_case_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitSearched_case_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitSearched_case_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Searched_case_statementContext searched_case_statement() throws RecognitionException {
		Searched_case_statementContext _localctx = new Searched_case_statementContext(_ctx, getState());
		enterRule(_localctx, 582, RULE_searched_case_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4448);
			match(CASE);
			setState(4450); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(4449);
				searched_case_when_part();
				}
				}
				setState(4452); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==WHEN );
			setState(4455);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(4454);
				case_else_part();
				}
			}

			setState(4457);
			match(END);
			setState(4459);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,548,_ctx) ) {
			case 1:
				{
				setState(4458);
				match(CASE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Searched_case_when_partContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(OracleSQLStatementParser.WHEN, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode THEN() { return getToken(OracleSQLStatementParser.THEN, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public Searched_case_when_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_searched_case_when_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterSearched_case_when_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitSearched_case_when_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitSearched_case_when_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Searched_case_when_partContext searched_case_when_part() throws RecognitionException {
		Searched_case_when_partContext _localctx = new Searched_case_when_partContext(_ctx, getState());
		enterRule(_localctx, 584, RULE_searched_case_when_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4461);
			match(WHEN);
			setState(4462);
			expression();
			setState(4463);
			match(THEN);
			setState(4466);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,549,_ctx) ) {
			case 1:
				{
				setState(4464);
				seq_of_statements();
				}
				break;
			case 2:
				{
				setState(4465);
				expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Case_else_partContext extends ParserRuleContext {
		public TerminalNode ELSE() { return getToken(OracleSQLStatementParser.ELSE, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Case_else_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_case_else_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterCase_else_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitCase_else_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitCase_else_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Case_else_partContext case_else_part() throws RecognitionException {
		Case_else_partContext _localctx = new Case_else_partContext(_ctx, getState());
		enterRule(_localctx, 586, RULE_case_else_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4468);
			match(ELSE);
			setState(4471);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,550,_ctx) ) {
			case 1:
				{
				setState(4469);
				seq_of_statements();
				}
				break;
			case 2:
				{
				setState(4470);
				expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AtomContext extends ParserRuleContext {
		public Table_elementContext table_element() {
			return getRuleContext(Table_elementContext.class,0);
		}
		public Outer_join_signContext outer_join_sign() {
			return getRuleContext(Outer_join_signContext.class,0);
		}
		public Bind_variableContext bind_variable() {
			return getRuleContext(Bind_variableContext.class,0);
		}
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public General_elementContext general_element() {
			return getRuleContext(General_elementContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(OracleSQLStatementParser.LEFT_PAREN, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(OracleSQLStatementParser.RIGHT_PAREN, 0); }
		public Expression_or_vectorContext expression_or_vector() {
			return getRuleContext(Expression_or_vectorContext.class,0);
		}
		public List<Subquery_operation_partContext> subquery_operation_part() {
			return getRuleContexts(Subquery_operation_partContext.class);
		}
		public Subquery_operation_partContext subquery_operation_part(int i) {
			return getRuleContext(Subquery_operation_partContext.class,i);
		}
		public AtomContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_atom; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitAtom(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AtomContext atom() throws RecognitionException {
		AtomContext _localctx = new AtomContext(_ctx, getState());
		enterRule(_localctx, 588, RULE_atom);
		try {
			int _alt;
			setState(4493);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,553,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4473);
				table_element();
				setState(4474);
				outer_join_sign();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4476);
				bind_variable();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4477);
				constant();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4478);
				general_element();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4479);
				match(LEFT_PAREN);
				setState(4491);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,552,_ctx) ) {
				case 1:
					{
					setState(4480);
					subquery();
					setState(4481);
					match(RIGHT_PAREN);
					setState(4485);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,551,_ctx);
					while ( _alt!=2 && _alt!= ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(4482);
							subquery_operation_part();
							}
							} 
						}
						setState(4487);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,551,_ctx);
					}
					}
					break;
				case 2:
					{
					setState(4488);
					expression_or_vector();
					setState(4489);
					match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Expression_or_vectorContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Vector_exprContext vector_expr() {
			return getRuleContext(Vector_exprContext.class,0);
		}
		public Expression_or_vectorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expression_or_vector; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterExpression_or_vector(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitExpression_or_vector(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitExpression_or_vector(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Expression_or_vectorContext expression_or_vector() throws RecognitionException {
		Expression_or_vectorContext _localctx = new Expression_or_vectorContext(_ctx, getState());
		enterRule(_localctx, 590, RULE_expression_or_vector);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4495);
			expression();
			setState(4497);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(4496);
				vector_expr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Vector_exprContext extends ParserRuleContext {
		public List<TerminalNode> COMMA() { return getTokens(OracleSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(OracleSQLStatementParser.COMMA, i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public Vector_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_vector_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterVector_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitVector_expr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitVector_expr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Vector_exprContext vector_expr() throws RecognitionException {
		Vector_exprContext _localctx = new Vector_exprContext(_ctx, getState());
		enterRule(_localctx, 592, RULE_vector_expr);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4499);
			match(COMMA);
			setState(4500);
			expression();
			setState(4505);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4501);
				match(COMMA);
				setState(4502);
				expression();
				}
				}
				setState(4507);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Quantified_expressionContext extends ParserRuleContext {
		public TerminalNode SOME() { return getToken(OracleSQLStatementParser.SOME, 0); }
		public TerminalNode EXISTS() { return getToken(OracleSQLStatementParser.EXISTS, 0); }
		public TerminalNode ALL() { return getToken(OracleSQLStatementParser.ALL, 0); }
		public TerminalNode ANY() { return getToken(OracleSQLStatementParser.ANY, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(OracleSQLStatementParser.LEFT_PAREN, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(OracleSQLStatementParser.RIGHT_PAREN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Quantified_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_quantified_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterQuantified_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitQuantified_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitQuantified_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Quantified_expressionContext quantified_expression() throws RecognitionException {
		Quantified_expressionContext _localctx = new Quantified_expressionContext(_ctx, getState());
		enterRule(_localctx, 594, RULE_quantified_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4508);
			_la = _input.LA(1);
			if ( !(_la==ALL || _la==ANY || _la==EXISTS || _la==SOME) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4517);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,556,_ctx) ) {
			case 1:
				{
				setState(4509);
				match(LEFT_PAREN);
				setState(4510);
				subquery();
				setState(4511);
				match(RIGHT_PAREN);
				}
				break;
			case 2:
				{
				setState(4513);
				match(LEFT_PAREN);
				setState(4514);
				expression();
				setState(4515);
				match(RIGHT_PAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class String_functionContext extends ParserRuleContext {
		public TerminalNode SUBSTR() { return getToken(OracleSQLStatementParser.SUBSTR, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(OracleSQLStatementParser.LEFT_PAREN, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(OracleSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(OracleSQLStatementParser.COMMA, i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(OracleSQLStatementParser.RIGHT_PAREN, 0); }
		public TerminalNode TO_CHAR() { return getToken(OracleSQLStatementParser.TO_CHAR, 0); }
		public List<Quoted_stringContext> quoted_string() {
			return getRuleContexts(Quoted_stringContext.class);
		}
		public Quoted_stringContext quoted_string(int i) {
			return getRuleContext(Quoted_stringContext.class,i);
		}
		public TerminalNode DECODE() { return getToken(OracleSQLStatementParser.DECODE, 0); }
		public TerminalNode CHR() { return getToken(OracleSQLStatementParser.CHR, 0); }
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public TerminalNode USING() { return getToken(OracleSQLStatementParser.USING, 0); }
		public TerminalNode NCHAR_CS() { return getToken(OracleSQLStatementParser.NCHAR_CS, 0); }
		public TerminalNode NVL() { return getToken(OracleSQLStatementParser.NVL, 0); }
		public TerminalNode TRIM() { return getToken(OracleSQLStatementParser.TRIM, 0); }
		public TerminalNode FROM() { return getToken(OracleSQLStatementParser.FROM, 0); }
		public TerminalNode LEADING() { return getToken(OracleSQLStatementParser.LEADING, 0); }
		public TerminalNode TRAILING() { return getToken(OracleSQLStatementParser.TRAILING, 0); }
		public TerminalNode BOTH() { return getToken(OracleSQLStatementParser.BOTH, 0); }
		public TerminalNode TO_DATE() { return getToken(OracleSQLStatementParser.TO_DATE, 0); }
		public TerminalNode WM_CONCAT() { return getToken(OracleSQLStatementParser.WM_CONCAT, 0); }
		public String_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_string_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterString_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitString_function(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitString_function(this);
			else return visitor.visitChildren(this);
		}
	}

	public final String_functionContext string_function() throws RecognitionException {
		String_functionContext _localctx = new String_functionContext(_ctx, getState());
		enterRule(_localctx, 596, RULE_string_function);
		int _la;
		try {
			setState(4597);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SUBSTR:
				enterOuterAlt(_localctx, 1);
				{
				setState(4519);
				match(SUBSTR);
				setState(4520);
				match(LEFT_PAREN);
				setState(4521);
				expression();
				setState(4522);
				match(COMMA);
				setState(4523);
				expression();
				setState(4526);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(4524);
					match(COMMA);
					setState(4525);
					expression();
					}
				}

				setState(4528);
				match(RIGHT_PAREN);
				}
				break;
			case TO_CHAR:
				enterOuterAlt(_localctx, 2);
				{
				setState(4530);
				match(TO_CHAR);
				setState(4531);
				match(LEFT_PAREN);
				setState(4532);
				expression();
				setState(4535);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,558,_ctx) ) {
				case 1:
					{
					setState(4533);
					match(COMMA);
					setState(4534);
					quoted_string();
					}
					break;
				}
				setState(4539);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(4537);
					match(COMMA);
					setState(4538);
					quoted_string();
					}
				}

				setState(4541);
				match(RIGHT_PAREN);
				}
				break;
			case DECODE:
				enterOuterAlt(_localctx, 3);
				{
				setState(4543);
				match(DECODE);
				setState(4544);
				match(LEFT_PAREN);
				setState(4545);
				expression();
				setState(4550);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4546);
					match(COMMA);
					setState(4547);
					expression();
					}
					}
					setState(4552);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4553);
				match(RIGHT_PAREN);
				}
				break;
			case CHR:
				enterOuterAlt(_localctx, 4);
				{
				setState(4555);
				match(CHR);
				setState(4556);
				match(LEFT_PAREN);
				setState(4557);
				concatenation();
				setState(4558);
				match(USING);
				setState(4559);
				match(NCHAR_CS);
				setState(4560);
				match(RIGHT_PAREN);
				}
				break;
			case NVL:
				enterOuterAlt(_localctx, 5);
				{
				setState(4562);
				match(NVL);
				setState(4563);
				match(LEFT_PAREN);
				setState(4564);
				expression();
				setState(4565);
				match(COMMA);
				setState(4566);
				expression();
				setState(4567);
				match(RIGHT_PAREN);
				}
				break;
			case TRIM:
				enterOuterAlt(_localctx, 6);
				{
				setState(4569);
				match(TRIM);
				setState(4570);
				match(LEFT_PAREN);
				setState(4578);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,563,_ctx) ) {
				case 1:
					{
					setState(4572);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==BOTH || _la==LEADING || _la==TRAILING) {
						{
						setState(4571);
						_la = _input.LA(1);
						if ( !(_la==BOTH || _la==LEADING || _la==TRAILING) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
					}

					setState(4575);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==NATIONAL_CHAR_STRING_LIT || _la==CHAR_STRING) {
						{
						setState(4574);
						quoted_string();
						}
					}

					setState(4577);
					match(FROM);
					}
					break;
				}
				setState(4580);
				concatenation();
				setState(4581);
				match(RIGHT_PAREN);
				}
				break;
			case TO_DATE:
				enterOuterAlt(_localctx, 7);
				{
				setState(4583);
				match(TO_DATE);
				setState(4584);
				match(LEFT_PAREN);
				setState(4585);
				expression();
				setState(4588);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(4586);
					match(COMMA);
					setState(4587);
					expression();
					}
				}

				setState(4590);
				match(RIGHT_PAREN);
				}
				break;
			case WM_CONCAT:
				enterOuterAlt(_localctx, 8);
				{
				setState(4592);
				match(WM_CONCAT);
				setState(4593);
				match(LEFT_PAREN);
				{
				setState(4594);
				expression();
				}
				setState(4595);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Standard_functionContext extends ParserRuleContext {
		public Other_functionContext other_function() {
			return getRuleContext(Other_functionContext.class,0);
		}
		public Standard_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_standard_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterStandard_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitStandard_function(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitStandard_function(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Standard_functionContext standard_function() throws RecognitionException {
		Standard_functionContext _localctx = new Standard_functionContext(_ctx, getState());
		enterRule(_localctx, 598, RULE_standard_function);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4599);
			other_function();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Numeric_function_wrapperContext extends ParserRuleContext {
		public Numeric_functionContext numeric_function() {
			return getRuleContext(Numeric_functionContext.class,0);
		}
		public Single_column_for_loopContext single_column_for_loop() {
			return getRuleContext(Single_column_for_loopContext.class,0);
		}
		public Multi_column_for_loopContext multi_column_for_loop() {
			return getRuleContext(Multi_column_for_loopContext.class,0);
		}
		public Numeric_function_wrapperContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numeric_function_wrapper; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterNumeric_function_wrapper(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitNumeric_function_wrapper(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitNumeric_function_wrapper(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Numeric_function_wrapperContext numeric_function_wrapper() throws RecognitionException {
		Numeric_function_wrapperContext _localctx = new Numeric_function_wrapperContext(_ctx, getState());
		enterRule(_localctx, 600, RULE_numeric_function_wrapper);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4601);
			numeric_function();
			setState(4604);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,566,_ctx) ) {
			case 1:
				{
				setState(4602);
				single_column_for_loop();
				}
				break;
			case 2:
				{
				setState(4603);
				multi_column_for_loop();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Numeric_functionContext extends ParserRuleContext {
		public TerminalNode SUM() { return getToken(OracleSQLStatementParser.SUM, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(OracleSQLStatementParser.LEFT_PAREN, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(OracleSQLStatementParser.RIGHT_PAREN, 0); }
		public TerminalNode DISTINCT() { return getToken(OracleSQLStatementParser.DISTINCT, 0); }
		public TerminalNode ALL() { return getToken(OracleSQLStatementParser.ALL, 0); }
		public TerminalNode COUNT() { return getToken(OracleSQLStatementParser.COUNT, 0); }
		public Over_clauseContext over_clause() {
			return getRuleContext(Over_clauseContext.class,0);
		}
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public TerminalNode UNIQUE() { return getToken(OracleSQLStatementParser.UNIQUE, 0); }
		public TerminalNode ROUND() { return getToken(OracleSQLStatementParser.ROUND, 0); }
		public List<TerminalNode> COMMA() { return getTokens(OracleSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(OracleSQLStatementParser.COMMA, i);
		}
		public TerminalNode AVG() { return getToken(OracleSQLStatementParser.AVG, 0); }
		public TerminalNode MIN() { return getToken(OracleSQLStatementParser.MIN, 0); }
		public TerminalNode MAX() { return getToken(OracleSQLStatementParser.MAX, 0); }
		public TerminalNode LEAST() { return getToken(OracleSQLStatementParser.LEAST, 0); }
		public TerminalNode GREATEST() { return getToken(OracleSQLStatementParser.GREATEST, 0); }
		public TerminalNode TO_NUMBER() { return getToken(OracleSQLStatementParser.TO_NUMBER, 0); }
		public List<Quoted_stringContext> quoted_string() {
			return getRuleContexts(Quoted_stringContext.class);
		}
		public Quoted_stringContext quoted_string(int i) {
			return getRuleContext(Quoted_stringContext.class,i);
		}
		public TerminalNode MOD() { return getToken(OracleSQLStatementParser.MOD, 0); }
		public Numeric_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numeric_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterNumeric_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitNumeric_function(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitNumeric_function(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Numeric_functionContext numeric_function() throws RecognitionException {
		Numeric_functionContext _localctx = new Numeric_functionContext(_ctx, getState());
		enterRule(_localctx, 602, RULE_numeric_function);
		int _la;
		try {
			setState(4706);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SUM:
				enterOuterAlt(_localctx, 1);
				{
				setState(4606);
				match(SUM);
				setState(4607);
				match(LEFT_PAREN);
				setState(4609);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,567,_ctx) ) {
				case 1:
					{
					setState(4608);
					_la = _input.LA(1);
					if ( !(_la==ALL || _la==DISTINCT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(4611);
				expression();
				setState(4612);
				match(RIGHT_PAREN);
				}
				break;
			case COUNT:
				enterOuterAlt(_localctx, 2);
				{
				setState(4614);
				match(COUNT);
				setState(4615);
				match(LEFT_PAREN);
				setState(4623);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,570,_ctx) ) {
				case 1:
					{
					setState(4616);
					match(ASTERISK);
					}
					break;
				case 2:
					{
					setState(4621);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABS) | (1L << ACOS) | (1L << ADD) | (1L << ADD_MONTHS) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASCII) | (1L << ASCIISTR) | (1L << ASIN) | (1L << ASSOCIATE) | (1L << ATAN2) | (1L << ATAN) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BFILENAME) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BIN_TO_NUM) | (1L << BITAND) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CARDINALITY) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CEIL) | (1L << CHARACTER) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARTOROWID) | (1L << CHR) | (1L << C_LETTER))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOSE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONCAT - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COS - 64)) | (1L << (COSH - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_DATE - 64)) | (1L << (CURRENT_TIMESTAMP - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (DIMENSION - 128)) | (1L << (DISABLE - 128)) | (1L << (DISASSOCIATE - 128)) | (1L << (DISTINCT - 128)) | (1L << (DOCUMENT - 128)) | (1L << (DOUBLE - 128)) | (1L << (DSINTERVAL_UNCONSTRAINED - 128)) | (1L << (DUMP - 128)) | (1L << (EACH - 128)) | (1L << (ELEMENT - 128)) | (1L << (EMPTY_BLOB - 128)) | (1L << (EMPTY_CLOB - 128)) | (1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERR - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXISTS - 128)) | (1L << (EXIT - 128)) | (1L << (EXP - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FALSE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FLOOR - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FROM_TZ - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUP_ID - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HEXTORAW - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (IGNORE - 193)) | (1L << (IMMEDIATE - 193)) | (1L << (INCLUDE - 193)) | (1L << (INCLUDING - 193)) | (1L << (INCREMENT - 193)) | (1L << (INDENT - 193)) | (1L << (INDEXED - 193)) | (1L << (INDICATOR - 193)) | (1L << (INDICES - 193)) | (1L << (INFINITE - 193)) | (1L << (INITCAP - 193)) | (1L << (INLINE - 193)) | (1L << (INNER - 193)) | (1L << (INOUT - 193)) | (1L << (INSTANTIABLE - 193)) | (1L << (INSTEAD - 193)) | (1L << (INSTR2 - 193)) | (1L << (INSTR4 - 193)) | (1L << (INSTRB - 193)) | (1L << (INSTRC - 193)) | (1L << (INSTR - 193)) | (1L << (INTERFACE - 193)) | (1L << (INTEGER - 193)) | (1L << (INTERVAL - 193)) | (1L << (INT - 193)) | (1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (KEY - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST_DAY - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LENGTH2 - 193)) | (1L << (LENGTH4 - 193)) | (1L << (LENGTHB - 193)) | (1L << (LENGTHC - 193)) | (1L << (LENGTH - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LN - 193)) | (1L << (LNNVL - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCALTIMESTAMP - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (LOGON - 257)) | (1L << (LONG - 257)) | (1L << (LOOP - 257)) | (1L << (LOWER - 257)) | (1L << (LPAD - 257)) | (1L << (LTRIM - 257)) | (1L << (MAIN - 257)) | (1L << (MAP - 257)) | (1L << (MATCHED - 257)) | (1L << (MAXVALUE - 257)) | (1L << (MEASURES - 257)) | (1L << (MEMBER - 257)) | (1L << (MERGE - 257)) | (1L << (MINUTE - 257)) | (1L << (MINVALUE - 257)) | (1L << (MLSLABEL - 257)) | (1L << (MODEL - 257)) | (1L << (MODIFY - 257)) | (1L << (MOD - 257)) | (1L << (MONTH - 257)) | (1L << (MONTHS_BETWEEN - 257)) | (1L << (MULTISET - 257)) | (1L << (NAME - 257)) | (1L << (NAN - 257)) | (1L << (NANVL - 257)) | (1L << (NATURAL - 257)) | (1L << (NATURALN - 257)) | (1L << (NAV - 257)) | (1L << (NCHAR_CS - 257)) | (1L << (NCHAR - 257)) | (1L << (NCHR - 257)) | (1L << (NCLOB - 257)) | (1L << (NESTED - 257)) | (1L << (NEW - 257)) | (1L << (NEW_TIME - 257)) | (1L << (NEXT_DAY - 257)) | (1L << (NOAUDIT - 257)) | (1L << (NOCOPY - 257)) | (1L << (NOCYCLE - 257)) | (1L << (NOENTITYESCAPING - 257)) | (1L << (NONE - 257)) | (1L << (NO - 257)) | (1L << (NOSCHEMACHECK - 257)) | (1L << (NULLIF - 257)) | (1L << (NULL - 257)) | (1L << (NULLS - 257)) | (1L << (NUMBER - 257)) | (1L << (NUMERIC - 257)) | (1L << (NUMTODSINTERVAL - 257)) | (1L << (NUMTOYMINTERVAL - 257)) | (1L << (NVARCHAR2 - 257)) | (1L << (NVL2 - 257)) | (1L << (OBJECT - 257)) | (1L << (OFF - 257)))) != 0) || ((((_la - 321)) & ~0x3f) == 0 && ((1L << (_la - 321)) & ((1L << (OID - 321)) | (1L << (OLD - 321)) | (1L << (ONLY - 321)) | (1L << (OPAQUE - 321)) | (1L << (OPEN - 321)) | (1L << (ORADATA - 321)) | (1L << (ORDINALITY - 321)) | (1L << (OSERROR - 321)) | (1L << (OUTER - 321)) | (1L << (OUT - 321)) | (1L << (OVER - 321)) | (1L << (OVERRIDING - 321)) | (1L << (PACKAGE - 321)) | (1L << (PARALLEL_ENABLE - 321)) | (1L << (PARAMETERS - 321)) | (1L << (PARENT - 321)) | (1L << (PARTITION - 321)) | (1L << (PASSING - 321)) | (1L << (PATH - 321)) | (1L << (PIPELINED - 321)) | (1L << (PLAN - 321)) | (1L << (PLS_INTEGER - 321)) | (1L << (POSITIVEN - 321)) | (1L << (POSITIVE - 321)) | (1L << (POWER - 321)) | (1L << (PRAGMA - 321)) | (1L << (PRECEDING - 321)) | (1L << (PRECISION - 321)) | (1L << (PRESENT - 321)) | (1L << (PRIOR - 321)) | (1L << (PROCEDURE - 321)) | (1L << (RAISE - 321)) | (1L << (RANGE - 321)) | (1L << (RAW - 321)) | (1L << (RAWTOHEX - 321)) | (1L << (READ - 321)) | (1L << (REAL - 321)) | (1L << (RECORD - 321)) | (1L << (REFERENCE - 321)) | (1L << (REFERENCING - 321)) | (1L << (REF - 321)) | (1L << (REGEXP_COUNT - 321)) | (1L << (REGEXP_INSTR - 321)) | (1L << (REGEXP_REPLACE - 321)) | (1L << (REGEXP_SUBSTR - 321)) | (1L << (REJECT - 321)) | (1L << (RELIES_ON - 321)) | (1L << (REMAINDER - 321)))) != 0) || ((((_la - 385)) & ~0x3f) == 0 && ((1L << (_la - 385)) & ((1L << (RENAME - 385)) | (1L << (REPLACE - 385)) | (1L << (RESPECT - 385)) | (1L << (RESTRICT_REFERENCES - 385)) | (1L << (RESULT_CACHE - 385)) | (1L << (RESULT - 385)) | (1L << (RETURNING - 385)) | (1L << (RETURN - 385)) | (1L << (REUSE - 385)) | (1L << (REVERSE - 385)) | (1L << (RIGHT - 385)) | (1L << (ROLLBACK - 385)) | (1L << (ROLLUP - 385)) | (1L << (ROWID - 385)) | (1L << (ROWNUM - 385)) | (1L << (ROW - 385)) | (1L << (ROWS - 385)) | (1L << (RPAD - 385)) | (1L << (RTRIM - 385)) | (1L << (RULES - 385)) | (1L << (SAMPLE - 385)) | (1L << (SAVEPOINT - 385)) | (1L << (SAVE - 385)) | (1L << (SCHEMACHECK - 385)) | (1L << (SCHEMA - 385)) | (1L << (SCN - 385)) | (1L << (SECOND - 385)) | (1L << (SEED - 385)) | (1L << (SEGMENT - 385)) | (1L << (SELF - 385)) | (1L << (SEQUENTIAL - 385)) | (1L << (SERIALIZABLE - 385)) | (1L << (SERIALLY_REUSABLE - 385)) | (1L << (SERVERERROR - 385)) | (1L << (SESSIONTIMEZONE - 385)) | (1L << (SET - 385)) | (1L << (SETS - 385)) | (1L << (SETTINGS - 385)) | (1L << (SHOW - 385)) | (1L << (SHUTDOWN - 385)) | (1L << (SIBLINGS - 385)) | (1L << (SIGN - 385)) | (1L << (SIGNTYPE - 385)) | (1L << (SIMPLE_INTEGER - 385)) | (1L << (SINGLE - 385)) | (1L << (SINH - 385)) | (1L << (SIN - 385)) | (1L << (SKIP_ - 385)) | (1L << (SMALLINT - 385)) | (1L << (SNAPSHOT - 385)) | (1L << (SOME - 385)) | (1L << (SOUNDEX - 385)) | (1L << (SPECIFICATION - 385)) | (1L << (SQLDATA - 385)) | (1L << (SQLERROR - 385)) | (1L << (SQRT - 385)) | (1L << (STANDALONE - 385)))) != 0) || ((((_la - 449)) & ~0x3f) == 0 && ((1L << (_la - 449)) & ((1L << (STARTUP - 449)) | (1L << (STATEMENT_ID - 449)) | (1L << (STATEMENT - 449)) | (1L << (STATIC - 449)) | (1L << (STATISTICS - 449)) | (1L << (STRING - 449)) | (1L << (SUBMULTISET - 449)) | (1L << (SUBPARTITION - 449)) | (1L << (SUBSTITUTABLE - 449)) | (1L << (SUBTYPE - 449)) | (1L << (SUCCESS - 449)) | (1L << (SUSPEND - 449)) | (1L << (SYS_CONTEXT - 449)) | (1L << (SYSDATE - 449)) | (1L << (SYSTIMESTAMP - 449)) | (1L << (TANH - 449)) | (1L << (TAN - 449)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 449)) | (1L << (TIMESTAMP - 449)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 449)) | (1L << (TIMESTAMP_UNCONSTRAINED - 449)) | (1L << (TIME - 449)) | (1L << (TIMEZONE_ABBR - 449)) | (1L << (TIMEZONE_HOUR - 449)) | (1L << (TIMEZONE_MINUTE - 449)) | (1L << (TIMEZONE_REGION - 449)) | (1L << (TO_CLOB - 449)) | (1L << (TO_DSINTERVAL - 449)) | (1L << (TO_LOB - 449)) | (1L << (TO_MULTI_BYTE - 449)) | (1L << (TO_NCLOB - 449)) | (1L << (TO_NUMBER - 449)) | (1L << (TO_SINGLE_BYTE - 449)) | (1L << (TO_TIMESTAMP - 449)) | (1L << (TO_TIMESTAMP_TZ - 449)) | (1L << (TO_YMINTERVAL - 449)) | (1L << (TRAILING - 449)) | (1L << (TRANSACTION - 449)) | (1L << (TRANSLATE - 449)) | (1L << (TREAT - 449)) | (1L << (TRIGGER - 449)) | (1L << (TRUE - 449)) | (1L << (TRUNCATE - 449)) | (1L << (TRUNC - 449)) | (1L << (TYPE - 449)) | (1L << (TZ_OFFSET - 449)) | (1L << (UID - 449)) | (1L << (UNBOUNDED - 449)) | (1L << (UNDER - 449)) | (1L << (UNIQUE - 449)) | (1L << (UNLIMITED - 449)) | (1L << (UNTIL - 449)) | (1L << (UPDATED - 449)))) != 0) || ((((_la - 513)) & ~0x3f) == 0 && ((1L << (_la - 513)) & ((1L << (UPPER - 513)) | (1L << (UPSERT - 513)) | (1L << (UROWID - 513)) | (1L << (USERENV - 513)) | (1L << (USER - 513)) | (1L << (USE - 513)) | (1L << (VALIDATE - 513)) | (1L << (VALUE - 513)) | (1L << (VARCHAR2 - 513)) | (1L << (VARCHAR - 513)) | (1L << (VARIABLE - 513)) | (1L << (VARRAY - 513)) | (1L << (VARYING - 513)) | (1L << (VERSIONS - 513)) | (1L << (VERSION - 513)) | (1L << (VSIZE - 513)) | (1L << (WAIT - 513)) | (1L << (WARNING - 513)) | (1L << (WELLFORMED - 513)) | (1L << (WHENEVER - 513)) | (1L << (WHILE - 513)) | (1L << (WITHIN - 513)) | (1L << (WORK - 513)) | (1L << (WRITE - 513)) | (1L << (XMLAGG - 513)) | (1L << (XMLATTRIBUTES - 513)) | (1L << (XMLCAST - 513)) | (1L << (XMLCOLATTVAL - 513)) | (1L << (XMLELEMENT - 513)) | (1L << (XMLEXISTS - 513)) | (1L << (XMLFOREST - 513)) | (1L << (XMLNAMESPACES - 513)) | (1L << (XMLPARSE - 513)) | (1L << (XMLPI - 513)) | (1L << (XMLQUERY - 513)) | (1L << (XMLROOT - 513)) | (1L << (XMLSERIALIZE - 513)) | (1L << (XMLTABLE - 513)) | (1L << (XML - 513)) | (1L << (YEAR - 513)) | (1L << (YES - 513)) | (1L << (YMINTERVAL_UNCONSTRAINED - 513)) | (1L << (ZONE - 513)) | (1L << (PREDICTION - 513)) | (1L << (PREDICTION_BOUNDS - 513)) | (1L << (PREDICTION_COST - 513)) | (1L << (PREDICTION_DETAILS - 513)) | (1L << (PREDICTION_PROBABILITY - 513)) | (1L << (PREDICTION_SET - 513)) | (1L << (CUME_DIST - 513)) | (1L << (DENSE_RANK - 513)) | (1L << (LISTAGG - 513)) | (1L << (PERCENT_RANK - 513)) | (1L << (PERCENTILE_CONT - 513)) | (1L << (PERCENTILE_DISC - 513)) | (1L << (RANK - 513)))) != 0) || ((((_la - 577)) & ~0x3f) == 0 && ((1L << (_la - 577)) & ((1L << (AVG - 577)) | (1L << (CORR - 577)) | (1L << (COVAR_ - 577)) | (1L << (DECODE - 577)) | (1L << (LAG - 577)) | (1L << (LEAD - 577)) | (1L << (MAX - 577)) | (1L << (MEDIAN - 577)) | (1L << (MIN - 577)) | (1L << (NTILE - 577)) | (1L << (NVL - 577)) | (1L << (RATIO_TO_REPORT - 577)) | (1L << (REGR_ - 577)) | (1L << (ROUND - 577)) | (1L << (ROW_NUMBER - 577)) | (1L << (SUBSTR - 577)) | (1L << (TO_CHAR - 577)) | (1L << (TRIM - 577)) | (1L << (SUM - 577)) | (1L << (STDDEV - 577)) | (1L << (VAR_ - 577)) | (1L << (VARIANCE - 577)) | (1L << (LEAST - 577)) | (1L << (GREATEST - 577)) | (1L << (TO_DATE - 577)) | (1L << (NATIONAL_CHAR_STRING_LIT - 577)) | (1L << (UNSIGNED_INTEGER - 577)) | (1L << (APPROXIMATE_NUM_LIT - 577)) | (1L << (CHAR_STRING - 577)) | (1L << (DELIMITED_ID - 577)) | (1L << (LEFT_PAREN - 577)) | (1L << (ASTERISK - 577)) | (1L << (PLUS_SIGN - 577)) | (1L << (MINUS_SIGN - 577)) | (1L << (BINDVAR - 577)) | (1L << (COLON - 577)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
						{
						setState(4618);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,568,_ctx) ) {
						case 1:
							{
							setState(4617);
							_la = _input.LA(1);
							if ( !(_la==ALL || _la==DISTINCT || _la==UNIQUE) ) {
							_errHandler.recoverInline(this);
							}
							else {
								if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
								_errHandler.reportMatch(this);
								consume();
							}
							}
							break;
						}
						setState(4620);
						concatenation();
						}
					}

					}
					break;
				}
				setState(4625);
				match(RIGHT_PAREN);
				setState(4627);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OVER) {
					{
					setState(4626);
					over_clause();
					}
				}

				}
				break;
			case ROUND:
				enterOuterAlt(_localctx, 3);
				{
				setState(4629);
				match(ROUND);
				setState(4630);
				match(LEFT_PAREN);
				setState(4631);
				expression();
				setState(4634);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(4632);
					match(COMMA);
					setState(4633);
					expression();
					}
				}

				setState(4636);
				match(RIGHT_PAREN);
				}
				break;
			case AVG:
				enterOuterAlt(_localctx, 4);
				{
				setState(4638);
				match(AVG);
				setState(4639);
				match(LEFT_PAREN);
				setState(4641);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,573,_ctx) ) {
				case 1:
					{
					setState(4640);
					_la = _input.LA(1);
					if ( !(_la==ALL || _la==DISTINCT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(4643);
				expression();
				setState(4644);
				match(RIGHT_PAREN);
				}
				break;
			case MIN:
				enterOuterAlt(_localctx, 5);
				{
				setState(4646);
				match(MIN);
				setState(4647);
				match(LEFT_PAREN);
				setState(4649);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,574,_ctx) ) {
				case 1:
					{
					setState(4648);
					_la = _input.LA(1);
					if ( !(_la==ALL || _la==DISTINCT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(4651);
				expression();
				setState(4652);
				match(RIGHT_PAREN);
				}
				break;
			case MAX:
				enterOuterAlt(_localctx, 6);
				{
				setState(4654);
				match(MAX);
				setState(4655);
				match(LEFT_PAREN);
				setState(4657);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,575,_ctx) ) {
				case 1:
					{
					setState(4656);
					_la = _input.LA(1);
					if ( !(_la==ALL || _la==DISTINCT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(4659);
				expression();
				setState(4660);
				match(RIGHT_PAREN);
				}
				break;
			case LEAST:
				enterOuterAlt(_localctx, 7);
				{
				setState(4662);
				match(LEAST);
				setState(4663);
				match(LEFT_PAREN);
				setState(4664);
				expression();
				setState(4669);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4665);
					match(COMMA);
					setState(4666);
					expression();
					}
					}
					setState(4671);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4672);
				match(RIGHT_PAREN);
				}
				break;
			case GREATEST:
				enterOuterAlt(_localctx, 8);
				{
				setState(4674);
				match(GREATEST);
				setState(4675);
				match(LEFT_PAREN);
				setState(4676);
				expression();
				setState(4681);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4677);
					match(COMMA);
					setState(4678);
					expression();
					}
					}
					setState(4683);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4684);
				match(RIGHT_PAREN);
				}
				break;
			case TO_NUMBER:
				enterOuterAlt(_localctx, 9);
				{
				setState(4686);
				match(TO_NUMBER);
				setState(4687);
				match(LEFT_PAREN);
				setState(4688);
				expression();
				setState(4691);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,578,_ctx) ) {
				case 1:
					{
					setState(4689);
					match(COMMA);
					setState(4690);
					quoted_string();
					}
					break;
				}
				setState(4695);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(4693);
					match(COMMA);
					setState(4694);
					quoted_string();
					}
				}

				setState(4697);
				match(RIGHT_PAREN);
				}
				break;
			case MOD:
				enterOuterAlt(_localctx, 10);
				{
				setState(4699);
				match(MOD);
				setState(4700);
				match(LEFT_PAREN);
				setState(4701);
				expression();
				setState(4702);
				match(COMMA);
				setState(4703);
				expression();
				setState(4704);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Date_time_functionContext extends ParserRuleContext {
		public TerminalNode SYSDATE() { return getToken(OracleSQLStatementParser.SYSDATE, 0); }
		public Date_time_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_date_time_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterDate_time_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitDate_time_function(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitDate_time_function(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Date_time_functionContext date_time_function() throws RecognitionException {
		Date_time_functionContext _localctx = new Date_time_functionContext(_ctx, getState());
		enterRule(_localctx, 604, RULE_date_time_function);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4708);
			match(SYSDATE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Other_functionContext extends ParserRuleContext {
		public Over_clause_keywordContext over_clause_keyword() {
			return getRuleContext(Over_clause_keywordContext.class,0);
		}
		public Function_argument_analyticContext function_argument_analytic() {
			return getRuleContext(Function_argument_analyticContext.class,0);
		}
		public Over_clauseContext over_clause() {
			return getRuleContext(Over_clauseContext.class,0);
		}
		public Regular_idContext regular_id() {
			return getRuleContext(Regular_idContext.class,0);
		}
		public Function_argument_modelingContext function_argument_modeling() {
			return getRuleContext(Function_argument_modelingContext.class,0);
		}
		public Using_clauseContext using_clause() {
			return getRuleContext(Using_clauseContext.class,0);
		}
		public TerminalNode COLLECT() { return getToken(OracleSQLStatementParser.COLLECT, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(OracleSQLStatementParser.LEFT_PAREN, 0); }
		public List<ConcatenationContext> concatenation() {
			return getRuleContexts(ConcatenationContext.class);
		}
		public ConcatenationContext concatenation(int i) {
			return getRuleContext(ConcatenationContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(OracleSQLStatementParser.RIGHT_PAREN, 0); }
		public Collect_order_by_partContext collect_order_by_part() {
			return getRuleContext(Collect_order_by_partContext.class,0);
		}
		public TerminalNode DISTINCT() { return getToken(OracleSQLStatementParser.DISTINCT, 0); }
		public TerminalNode UNIQUE() { return getToken(OracleSQLStatementParser.UNIQUE, 0); }
		public Within_or_over_clause_keywordContext within_or_over_clause_keyword() {
			return getRuleContext(Within_or_over_clause_keywordContext.class,0);
		}
		public Function_argumentContext function_argument() {
			return getRuleContext(Function_argumentContext.class,0);
		}
		public List<Within_or_over_partContext> within_or_over_part() {
			return getRuleContexts(Within_or_over_partContext.class);
		}
		public Within_or_over_partContext within_or_over_part(int i) {
			return getRuleContext(Within_or_over_partContext.class,i);
		}
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public TerminalNode PERCENT_ISOPEN() { return getToken(OracleSQLStatementParser.PERCENT_ISOPEN, 0); }
		public TerminalNode PERCENT_FOUND() { return getToken(OracleSQLStatementParser.PERCENT_FOUND, 0); }
		public TerminalNode PERCENT_NOTFOUND() { return getToken(OracleSQLStatementParser.PERCENT_NOTFOUND, 0); }
		public TerminalNode PERCENT_ROWCOUNT() { return getToken(OracleSQLStatementParser.PERCENT_ROWCOUNT, 0); }
		public TerminalNode EXTRACT() { return getToken(OracleSQLStatementParser.EXTRACT, 0); }
		public TerminalNode FROM() { return getToken(OracleSQLStatementParser.FROM, 0); }
		public TerminalNode FIRST_VALUE() { return getToken(OracleSQLStatementParser.FIRST_VALUE, 0); }
		public TerminalNode LAST_VALUE() { return getToken(OracleSQLStatementParser.LAST_VALUE, 0); }
		public Respect_or_ignore_nullsContext respect_or_ignore_nulls() {
			return getRuleContext(Respect_or_ignore_nullsContext.class,0);
		}
		public Standard_prediction_function_keywordContext standard_prediction_function_keyword() {
			return getRuleContext(Standard_prediction_function_keywordContext.class,0);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(OracleSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(OracleSQLStatementParser.COMMA, i);
		}
		public Cost_matrix_clauseContext cost_matrix_clause() {
			return getRuleContext(Cost_matrix_clauseContext.class,0);
		}
		public TerminalNode TREAT() { return getToken(OracleSQLStatementParser.TREAT, 0); }
		public TerminalNode AS() { return getToken(OracleSQLStatementParser.AS, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode REF() { return getToken(OracleSQLStatementParser.REF, 0); }
		public TerminalNode TRIM() { return getToken(OracleSQLStatementParser.TRIM, 0); }
		public Quoted_stringContext quoted_string() {
			return getRuleContext(Quoted_stringContext.class,0);
		}
		public TerminalNode LEADING() { return getToken(OracleSQLStatementParser.LEADING, 0); }
		public TerminalNode TRAILING() { return getToken(OracleSQLStatementParser.TRAILING, 0); }
		public TerminalNode BOTH() { return getToken(OracleSQLStatementParser.BOTH, 0); }
		public TerminalNode XMLAGG() { return getToken(OracleSQLStatementParser.XMLAGG, 0); }
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public General_element_partContext general_element_part() {
			return getRuleContext(General_element_partContext.class,0);
		}
		public List<Xml_multiuse_expression_elementContext> xml_multiuse_expression_element() {
			return getRuleContexts(Xml_multiuse_expression_elementContext.class);
		}
		public Xml_multiuse_expression_elementContext xml_multiuse_expression_element(int i) {
			return getRuleContext(Xml_multiuse_expression_elementContext.class,i);
		}
		public TerminalNode XMLCOLATTVAL() { return getToken(OracleSQLStatementParser.XMLCOLATTVAL, 0); }
		public TerminalNode XMLFOREST() { return getToken(OracleSQLStatementParser.XMLFOREST, 0); }
		public TerminalNode XMLELEMENT() { return getToken(OracleSQLStatementParser.XMLELEMENT, 0); }
		public Xml_attributes_clauseContext xml_attributes_clause() {
			return getRuleContext(Xml_attributes_clauseContext.class,0);
		}
		public TerminalNode ENTITYESCAPING() { return getToken(OracleSQLStatementParser.ENTITYESCAPING, 0); }
		public TerminalNode NOENTITYESCAPING() { return getToken(OracleSQLStatementParser.NOENTITYESCAPING, 0); }
		public TerminalNode NAME() { return getToken(OracleSQLStatementParser.NAME, 0); }
		public TerminalNode EVALNAME() { return getToken(OracleSQLStatementParser.EVALNAME, 0); }
		public List<Column_aliasContext> column_alias() {
			return getRuleContexts(Column_aliasContext.class);
		}
		public Column_aliasContext column_alias(int i) {
			return getRuleContext(Column_aliasContext.class,i);
		}
		public TerminalNode XMLEXISTS() { return getToken(OracleSQLStatementParser.XMLEXISTS, 0); }
		public Xml_passing_clauseContext xml_passing_clause() {
			return getRuleContext(Xml_passing_clauseContext.class,0);
		}
		public TerminalNode XMLPARSE() { return getToken(OracleSQLStatementParser.XMLPARSE, 0); }
		public TerminalNode DOCUMENT() { return getToken(OracleSQLStatementParser.DOCUMENT, 0); }
		public TerminalNode CONTENT() { return getToken(OracleSQLStatementParser.CONTENT, 0); }
		public TerminalNode WELLFORMED() { return getToken(OracleSQLStatementParser.WELLFORMED, 0); }
		public TerminalNode XMLPI() { return getToken(OracleSQLStatementParser.XMLPI, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode XMLQUERY() { return getToken(OracleSQLStatementParser.XMLQUERY, 0); }
		public TerminalNode RETURNING() { return getToken(OracleSQLStatementParser.RETURNING, 0); }
		public TerminalNode NULL() { return getToken(OracleSQLStatementParser.NULL, 0); }
		public TerminalNode ON() { return getToken(OracleSQLStatementParser.ON, 0); }
		public TerminalNode EMPTY() { return getToken(OracleSQLStatementParser.EMPTY, 0); }
		public TerminalNode XMLROOT() { return getToken(OracleSQLStatementParser.XMLROOT, 0); }
		public Xmlroot_param_version_partContext xmlroot_param_version_part() {
			return getRuleContext(Xmlroot_param_version_partContext.class,0);
		}
		public Xmlroot_param_standalone_partContext xmlroot_param_standalone_part() {
			return getRuleContext(Xmlroot_param_standalone_partContext.class,0);
		}
		public TerminalNode XMLSERIALIZE() { return getToken(OracleSQLStatementParser.XMLSERIALIZE, 0); }
		public Xmlserialize_param_enconding_partContext xmlserialize_param_enconding_part() {
			return getRuleContext(Xmlserialize_param_enconding_partContext.class,0);
		}
		public Xmlserialize_param_version_partContext xmlserialize_param_version_part() {
			return getRuleContext(Xmlserialize_param_version_partContext.class,0);
		}
		public Xmlserialize_param_ident_partContext xmlserialize_param_ident_part() {
			return getRuleContext(Xmlserialize_param_ident_partContext.class,0);
		}
		public TerminalNode DEFAULTS() { return getToken(OracleSQLStatementParser.DEFAULTS, 0); }
		public TerminalNode HIDE() { return getToken(OracleSQLStatementParser.HIDE, 0); }
		public TerminalNode SHOW() { return getToken(OracleSQLStatementParser.SHOW, 0); }
		public TerminalNode XMLTABLE() { return getToken(OracleSQLStatementParser.XMLTABLE, 0); }
		public Xml_namespaces_clauseContext xml_namespaces_clause() {
			return getRuleContext(Xml_namespaces_clauseContext.class,0);
		}
		public TerminalNode COLUMNS() { return getToken(OracleSQLStatementParser.COLUMNS, 0); }
		public List<Xml_table_columnContext> xml_table_column() {
			return getRuleContexts(Xml_table_columnContext.class);
		}
		public Xml_table_columnContext xml_table_column(int i) {
			return getRuleContext(Xml_table_columnContext.class,i);
		}
		public Other_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_other_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterOther_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitOther_function(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitOther_function(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Other_functionContext other_function() throws RecognitionException {
		Other_functionContext _localctx = new Other_functionContext(_ctx, getState());
		enterRule(_localctx, 606, RULE_other_function);
		int _la;
		try {
			setState(4968);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,625,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4710);
				over_clause_keyword();
				setState(4711);
				function_argument_analytic();
				setState(4712);
				over_clause();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4714);
				regular_id();
				setState(4715);
				function_argument_modeling();
				setState(4717);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(4716);
					using_clause();
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4719);
				match(COLLECT);
				setState(4720);
				match(LEFT_PAREN);
				setState(4722);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,582,_ctx) ) {
				case 1:
					{
					setState(4721);
					_la = _input.LA(1);
					if ( !(_la==DISTINCT || _la==UNIQUE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(4724);
				concatenation();
				setState(4726);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(4725);
					collect_order_by_part();
					}
				}

				setState(4728);
				match(RIGHT_PAREN);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4730);
				within_or_over_clause_keyword();
				setState(4731);
				function_argument();
				setState(4733); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(4732);
					within_or_over_part();
					}
					}
					setState(4735); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==OVER || _la==WITHIN );
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4737);
				cursor_name();
				setState(4738);
				_la = _input.LA(1);
				if ( !(((((_la - 345)) & ~0x3f) == 0 && ((1L << (_la - 345)) & ((1L << (PERCENT_FOUND - 345)) | (1L << (PERCENT_ISOPEN - 345)) | (1L << (PERCENT_NOTFOUND - 345)) | (1L << (PERCENT_ROWCOUNT - 345)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4740);
				match(EXTRACT);
				setState(4741);
				match(LEFT_PAREN);
				setState(4742);
				regular_id();
				setState(4743);
				match(FROM);
				setState(4744);
				concatenation();
				setState(4745);
				match(RIGHT_PAREN);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4747);
				_la = _input.LA(1);
				if ( !(_la==FIRST_VALUE || _la==LAST_VALUE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4748);
				function_argument_analytic();
				setState(4750);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IGNORE || _la==RESPECT) {
					{
					setState(4749);
					respect_or_ignore_nulls();
					}
				}

				setState(4752);
				over_clause();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(4754);
				standard_prediction_function_keyword();
				setState(4755);
				match(LEFT_PAREN);
				setState(4756);
				expression();
				setState(4761);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4757);
					match(COMMA);
					setState(4758);
					expression();
					}
					}
					setState(4763);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4765);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COST) {
					{
					setState(4764);
					cost_matrix_clause();
					}
				}

				setState(4768);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(4767);
					using_clause();
					}
				}

				setState(4770);
				match(RIGHT_PAREN);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(4772);
				match(TREAT);
				setState(4773);
				match(LEFT_PAREN);
				setState(4774);
				expression();
				setState(4775);
				match(AS);
				setState(4777);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,589,_ctx) ) {
				case 1:
					{
					setState(4776);
					match(REF);
					}
					break;
				}
				setState(4779);
				type_spec();
				setState(4780);
				match(RIGHT_PAREN);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(4782);
				match(TRIM);
				setState(4783);
				match(LEFT_PAREN);
				setState(4791);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,592,_ctx) ) {
				case 1:
					{
					setState(4785);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==BOTH || _la==LEADING || _la==TRAILING) {
						{
						setState(4784);
						_la = _input.LA(1);
						if ( !(_la==BOTH || _la==LEADING || _la==TRAILING) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
					}

					setState(4788);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==NATIONAL_CHAR_STRING_LIT || _la==CHAR_STRING) {
						{
						setState(4787);
						quoted_string();
						}
					}

					setState(4790);
					match(FROM);
					}
					break;
				}
				setState(4793);
				concatenation();
				setState(4794);
				match(RIGHT_PAREN);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(4796);
				match(XMLAGG);
				setState(4797);
				match(LEFT_PAREN);
				setState(4798);
				expression();
				setState(4800);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(4799);
					order_by_clause();
					}
				}

				setState(4802);
				match(RIGHT_PAREN);
				setState(4805);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PERIOD) {
					{
					setState(4803);
					match(PERIOD);
					setState(4804);
					general_element_part();
					}
				}

				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(4807);
				_la = _input.LA(1);
				if ( !(_la==XMLCOLATTVAL || _la==XMLFOREST) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4808);
				match(LEFT_PAREN);
				setState(4809);
				xml_multiuse_expression_element();
				setState(4814);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4810);
					match(COMMA);
					setState(4811);
					xml_multiuse_expression_element();
					}
					}
					setState(4816);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4817);
				match(RIGHT_PAREN);
				setState(4820);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PERIOD) {
					{
					setState(4818);
					match(PERIOD);
					setState(4819);
					general_element_part();
					}
				}

				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(4822);
				match(XMLELEMENT);
				setState(4823);
				match(LEFT_PAREN);
				setState(4825);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,597,_ctx) ) {
				case 1:
					{
					setState(4824);
					_la = _input.LA(1);
					if ( !(_la==ENTITYESCAPING || _la==NOENTITYESCAPING) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(4828);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,598,_ctx) ) {
				case 1:
					{
					setState(4827);
					_la = _input.LA(1);
					if ( !(_la==EVALNAME || _la==NAME) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(4830);
				expression();
				setState(4833);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,599,_ctx) ) {
				case 1:
					{
					setState(4831);
					match(COMMA);
					setState(4832);
					xml_attributes_clause();
					}
					break;
				}
				setState(4842);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4835);
					match(COMMA);
					setState(4836);
					expression();
					setState(4838);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABS) | (1L << ACOS) | (1L << ADD) | (1L << ADD_MONTHS) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << AS) | (1L << ASCII) | (1L << ASCIISTR) | (1L << ASIN) | (1L << ASSOCIATE) | (1L << ATAN2) | (1L << ATAN) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BFILENAME) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BIN_TO_NUM) | (1L << BITAND) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CARDINALITY) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CEIL) | (1L << CHARACTER) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARTOROWID) | (1L << CHR) | (1L << C_LETTER))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOSE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONCAT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COS - 64)) | (1L << (COSH - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_DATE - 64)) | (1L << (CURRENT_TIMESTAMP - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (DIMENSION - 128)) | (1L << (DISABLE - 128)) | (1L << (DISASSOCIATE - 128)) | (1L << (DOCUMENT - 128)) | (1L << (DOUBLE - 128)) | (1L << (DSINTERVAL_UNCONSTRAINED - 128)) | (1L << (DUMP - 128)) | (1L << (EACH - 128)) | (1L << (ELEMENT - 128)) | (1L << (EMPTY_BLOB - 128)) | (1L << (EMPTY_CLOB - 128)) | (1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERR - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXP - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FLOOR - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FROM_TZ - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUP_ID - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HEXTORAW - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (IGNORE - 193)) | (1L << (IMMEDIATE - 193)) | (1L << (INCLUDE - 193)) | (1L << (INCLUDING - 193)) | (1L << (INCREMENT - 193)) | (1L << (INDENT - 193)) | (1L << (INDEXED - 193)) | (1L << (INDICATOR - 193)) | (1L << (INDICES - 193)) | (1L << (INFINITE - 193)) | (1L << (INITCAP - 193)) | (1L << (INLINE - 193)) | (1L << (INNER - 193)) | (1L << (INOUT - 193)) | (1L << (INSTANTIABLE - 193)) | (1L << (INSTEAD - 193)) | (1L << (INSTR2 - 193)) | (1L << (INSTR4 - 193)) | (1L << (INSTRB - 193)) | (1L << (INSTRC - 193)) | (1L << (INSTR - 193)) | (1L << (INTERFACE - 193)) | (1L << (INTEGER - 193)) | (1L << (INTERVAL - 193)) | (1L << (INT - 193)) | (1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (KEY - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST_DAY - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LENGTH2 - 193)) | (1L << (LENGTH4 - 193)) | (1L << (LENGTHB - 193)) | (1L << (LENGTHC - 193)) | (1L << (LENGTH - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LN - 193)) | (1L << (LNNVL - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCALTIMESTAMP - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (LOGON - 257)) | (1L << (LONG - 257)) | (1L << (LOOP - 257)) | (1L << (LOWER - 257)) | (1L << (LPAD - 257)) | (1L << (LTRIM - 257)) | (1L << (MAIN - 257)) | (1L << (MAP - 257)) | (1L << (MATCHED - 257)) | (1L << (MAXVALUE - 257)) | (1L << (MEASURES - 257)) | (1L << (MEMBER - 257)) | (1L << (MERGE - 257)) | (1L << (MINUTE - 257)) | (1L << (MINVALUE - 257)) | (1L << (MLSLABEL - 257)) | (1L << (MODEL - 257)) | (1L << (MODIFY - 257)) | (1L << (MOD - 257)) | (1L << (MONTH - 257)) | (1L << (MONTHS_BETWEEN - 257)) | (1L << (MULTISET - 257)) | (1L << (NAME - 257)) | (1L << (NAN - 257)) | (1L << (NANVL - 257)) | (1L << (NATURAL - 257)) | (1L << (NATURALN - 257)) | (1L << (NAV - 257)) | (1L << (NCHAR_CS - 257)) | (1L << (NCHAR - 257)) | (1L << (NCHR - 257)) | (1L << (NCLOB - 257)) | (1L << (NESTED - 257)) | (1L << (NEW - 257)) | (1L << (NEW_TIME - 257)) | (1L << (NEXT_DAY - 257)) | (1L << (NOAUDIT - 257)) | (1L << (NOCOPY - 257)) | (1L << (NOCYCLE - 257)) | (1L << (NOENTITYESCAPING - 257)) | (1L << (NONE - 257)) | (1L << (NO - 257)) | (1L << (NOSCHEMACHECK - 257)) | (1L << (NULLIF - 257)) | (1L << (NULLS - 257)) | (1L << (NUMBER - 257)) | (1L << (NUMERIC - 257)) | (1L << (NUMTODSINTERVAL - 257)) | (1L << (NUMTOYMINTERVAL - 257)) | (1L << (NVARCHAR2 - 257)) | (1L << (NVL2 - 257)) | (1L << (OBJECT - 257)) | (1L << (OFF - 257)))) != 0) || ((((_la - 321)) & ~0x3f) == 0 && ((1L << (_la - 321)) & ((1L << (OID - 321)) | (1L << (OLD - 321)) | (1L << (ONLY - 321)) | (1L << (OPAQUE - 321)) | (1L << (OPEN - 321)) | (1L << (ORADATA - 321)) | (1L << (ORDINALITY - 321)) | (1L << (OSERROR - 321)) | (1L << (OUTER - 321)) | (1L << (OUT - 321)) | (1L << (OVER - 321)) | (1L << (OVERRIDING - 321)) | (1L << (PACKAGE - 321)) | (1L << (PARALLEL_ENABLE - 321)) | (1L << (PARAMETERS - 321)) | (1L << (PARENT - 321)) | (1L << (PARTITION - 321)) | (1L << (PASSING - 321)) | (1L << (PATH - 321)) | (1L << (PIPELINED - 321)) | (1L << (PLAN - 321)) | (1L << (PLS_INTEGER - 321)) | (1L << (POSITIVEN - 321)) | (1L << (POSITIVE - 321)) | (1L << (POWER - 321)) | (1L << (PRAGMA - 321)) | (1L << (PRECEDING - 321)) | (1L << (PRECISION - 321)) | (1L << (PRESENT - 321)) | (1L << (PRIOR - 321)) | (1L << (PROCEDURE - 321)) | (1L << (RAISE - 321)) | (1L << (RANGE - 321)) | (1L << (RAW - 321)) | (1L << (RAWTOHEX - 321)) | (1L << (READ - 321)) | (1L << (REAL - 321)) | (1L << (RECORD - 321)) | (1L << (REFERENCE - 321)) | (1L << (REFERENCING - 321)) | (1L << (REF - 321)) | (1L << (REGEXP_COUNT - 321)) | (1L << (REGEXP_INSTR - 321)) | (1L << (REGEXP_REPLACE - 321)) | (1L << (REGEXP_SUBSTR - 321)) | (1L << (REJECT - 321)) | (1L << (RELIES_ON - 321)) | (1L << (REMAINDER - 321)))) != 0) || ((((_la - 385)) & ~0x3f) == 0 && ((1L << (_la - 385)) & ((1L << (RENAME - 385)) | (1L << (REPLACE - 385)) | (1L << (RESPECT - 385)) | (1L << (RESTRICT_REFERENCES - 385)) | (1L << (RESULT_CACHE - 385)) | (1L << (RESULT - 385)) | (1L << (RETURNING - 385)) | (1L << (RETURN - 385)) | (1L << (REUSE - 385)) | (1L << (REVERSE - 385)) | (1L << (RIGHT - 385)) | (1L << (ROLLBACK - 385)) | (1L << (ROLLUP - 385)) | (1L << (ROWID - 385)) | (1L << (ROWNUM - 385)) | (1L << (ROW - 385)) | (1L << (ROWS - 385)) | (1L << (RPAD - 385)) | (1L << (RTRIM - 385)) | (1L << (RULES - 385)) | (1L << (SAMPLE - 385)) | (1L << (SAVEPOINT - 385)) | (1L << (SAVE - 385)) | (1L << (SCHEMACHECK - 385)) | (1L << (SCHEMA - 385)) | (1L << (SCN - 385)) | (1L << (SECOND - 385)) | (1L << (SEED - 385)) | (1L << (SEGMENT - 385)) | (1L << (SELF - 385)) | (1L << (SEQUENTIAL - 385)) | (1L << (SERIALIZABLE - 385)) | (1L << (SERIALLY_REUSABLE - 385)) | (1L << (SERVERERROR - 385)) | (1L << (SESSIONTIMEZONE - 385)) | (1L << (SET - 385)) | (1L << (SETS - 385)) | (1L << (SETTINGS - 385)) | (1L << (SHOW - 385)) | (1L << (SHUTDOWN - 385)) | (1L << (SIBLINGS - 385)) | (1L << (SIGN - 385)) | (1L << (SIGNTYPE - 385)) | (1L << (SIMPLE_INTEGER - 385)) | (1L << (SINGLE - 385)) | (1L << (SINH - 385)) | (1L << (SIN - 385)) | (1L << (SKIP_ - 385)) | (1L << (SMALLINT - 385)) | (1L << (SNAPSHOT - 385)) | (1L << (SOME - 385)) | (1L << (SOUNDEX - 385)) | (1L << (SPECIFICATION - 385)) | (1L << (SQLDATA - 385)) | (1L << (SQLERROR - 385)) | (1L << (SQRT - 385)) | (1L << (STANDALONE - 385)))) != 0) || ((((_la - 449)) & ~0x3f) == 0 && ((1L << (_la - 449)) & ((1L << (STARTUP - 449)) | (1L << (STATEMENT_ID - 449)) | (1L << (STATEMENT - 449)) | (1L << (STATIC - 449)) | (1L << (STATISTICS - 449)) | (1L << (STRING - 449)) | (1L << (SUBMULTISET - 449)) | (1L << (SUBPARTITION - 449)) | (1L << (SUBSTITUTABLE - 449)) | (1L << (SUBTYPE - 449)) | (1L << (SUCCESS - 449)) | (1L << (SUSPEND - 449)) | (1L << (SYS_CONTEXT - 449)) | (1L << (SYSDATE - 449)) | (1L << (SYSTIMESTAMP - 449)) | (1L << (TANH - 449)) | (1L << (TAN - 449)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 449)) | (1L << (TIMESTAMP - 449)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 449)) | (1L << (TIMESTAMP_UNCONSTRAINED - 449)) | (1L << (TIME - 449)) | (1L << (TIMEZONE_ABBR - 449)) | (1L << (TIMEZONE_HOUR - 449)) | (1L << (TIMEZONE_MINUTE - 449)) | (1L << (TIMEZONE_REGION - 449)) | (1L << (TO_CLOB - 449)) | (1L << (TO_DSINTERVAL - 449)) | (1L << (TO_LOB - 449)) | (1L << (TO_MULTI_BYTE - 449)) | (1L << (TO_NCLOB - 449)) | (1L << (TO_NUMBER - 449)) | (1L << (TO_SINGLE_BYTE - 449)) | (1L << (TO_TIMESTAMP - 449)) | (1L << (TO_TIMESTAMP_TZ - 449)) | (1L << (TO_YMINTERVAL - 449)) | (1L << (TRAILING - 449)) | (1L << (TRANSACTION - 449)) | (1L << (TRANSLATE - 449)) | (1L << (TREAT - 449)) | (1L << (TRIGGER - 449)) | (1L << (TRUNCATE - 449)) | (1L << (TRUNC - 449)) | (1L << (TYPE - 449)) | (1L << (TZ_OFFSET - 449)) | (1L << (UID - 449)) | (1L << (UNBOUNDED - 449)) | (1L << (UNDER - 449)) | (1L << (UNLIMITED - 449)) | (1L << (UNTIL - 449)) | (1L << (UPDATED - 449)))) != 0) || ((((_la - 513)) & ~0x3f) == 0 && ((1L << (_la - 513)) & ((1L << (UPPER - 513)) | (1L << (UPSERT - 513)) | (1L << (UROWID - 513)) | (1L << (USERENV - 513)) | (1L << (USER - 513)) | (1L << (USE - 513)) | (1L << (VALIDATE - 513)) | (1L << (VALUE - 513)) | (1L << (VARCHAR2 - 513)) | (1L << (VARCHAR - 513)) | (1L << (VARIABLE - 513)) | (1L << (VARRAY - 513)) | (1L << (VARYING - 513)) | (1L << (VERSIONS - 513)) | (1L << (VERSION - 513)) | (1L << (VSIZE - 513)) | (1L << (WAIT - 513)) | (1L << (WARNING - 513)) | (1L << (WELLFORMED - 513)) | (1L << (WHENEVER - 513)) | (1L << (WHILE - 513)) | (1L << (WITHIN - 513)) | (1L << (WORK - 513)) | (1L << (WRITE - 513)) | (1L << (XMLAGG - 513)) | (1L << (XMLATTRIBUTES - 513)) | (1L << (XMLCAST - 513)) | (1L << (XMLCOLATTVAL - 513)) | (1L << (XMLELEMENT - 513)) | (1L << (XMLEXISTS - 513)) | (1L << (XMLFOREST - 513)) | (1L << (XMLNAMESPACES - 513)) | (1L << (XMLPARSE - 513)) | (1L << (XMLPI - 513)) | (1L << (XMLQUERY - 513)) | (1L << (XMLROOT - 513)) | (1L << (XMLSERIALIZE - 513)) | (1L << (XMLTABLE - 513)) | (1L << (XML - 513)) | (1L << (YEAR - 513)) | (1L << (YES - 513)) | (1L << (YMINTERVAL_UNCONSTRAINED - 513)) | (1L << (ZONE - 513)) | (1L << (PREDICTION - 513)) | (1L << (PREDICTION_BOUNDS - 513)) | (1L << (PREDICTION_COST - 513)) | (1L << (PREDICTION_DETAILS - 513)) | (1L << (PREDICTION_PROBABILITY - 513)) | (1L << (PREDICTION_SET - 513)) | (1L << (CUME_DIST - 513)) | (1L << (DENSE_RANK - 513)) | (1L << (LISTAGG - 513)) | (1L << (PERCENT_RANK - 513)) | (1L << (PERCENTILE_CONT - 513)) | (1L << (PERCENTILE_DISC - 513)) | (1L << (RANK - 513)))) != 0) || ((((_la - 577)) & ~0x3f) == 0 && ((1L << (_la - 577)) & ((1L << (AVG - 577)) | (1L << (CORR - 577)) | (1L << (COVAR_ - 577)) | (1L << (DECODE - 577)) | (1L << (LAG - 577)) | (1L << (LEAD - 577)) | (1L << (MAX - 577)) | (1L << (MEDIAN - 577)) | (1L << (MIN - 577)) | (1L << (NTILE - 577)) | (1L << (NVL - 577)) | (1L << (RATIO_TO_REPORT - 577)) | (1L << (REGR_ - 577)) | (1L << (ROUND - 577)) | (1L << (ROW_NUMBER - 577)) | (1L << (SUBSTR - 577)) | (1L << (TO_CHAR - 577)) | (1L << (TRIM - 577)) | (1L << (SUM - 577)) | (1L << (STDDEV - 577)) | (1L << (VAR_ - 577)) | (1L << (VARIANCE - 577)) | (1L << (LEAST - 577)) | (1L << (GREATEST - 577)) | (1L << (TO_DATE - 577)) | (1L << (NATIONAL_CHAR_STRING_LIT - 577)) | (1L << (CHAR_STRING - 577)) | (1L << (DELIMITED_ID - 577)) | (1L << (ASTERISK - 577)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
						{
						setState(4837);
						column_alias();
						}
					}

					}
					}
					setState(4844);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4845);
				match(RIGHT_PAREN);
				setState(4848);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PERIOD) {
					{
					setState(4846);
					match(PERIOD);
					setState(4847);
					general_element_part();
					}
				}

				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(4850);
				match(XMLEXISTS);
				setState(4851);
				match(LEFT_PAREN);
				setState(4852);
				expression();
				setState(4854);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PASSING) {
					{
					setState(4853);
					xml_passing_clause();
					}
				}

				setState(4856);
				match(RIGHT_PAREN);
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(4858);
				match(XMLPARSE);
				setState(4859);
				match(LEFT_PAREN);
				setState(4860);
				_la = _input.LA(1);
				if ( !(_la==CONTENT || _la==DOCUMENT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4861);
				concatenation();
				setState(4863);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WELLFORMED) {
					{
					setState(4862);
					match(WELLFORMED);
					}
				}

				setState(4865);
				match(RIGHT_PAREN);
				setState(4868);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PERIOD) {
					{
					setState(4866);
					match(PERIOD);
					setState(4867);
					general_element_part();
					}
				}

				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(4870);
				match(XMLPI);
				setState(4871);
				match(LEFT_PAREN);
				setState(4876);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NAME:
					{
					setState(4872);
					match(NAME);
					setState(4873);
					identifier();
					}
					break;
				case EVALNAME:
					{
					setState(4874);
					match(EVALNAME);
					setState(4875);
					concatenation();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4880);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(4878);
					match(COMMA);
					setState(4879);
					concatenation();
					}
				}

				setState(4882);
				match(RIGHT_PAREN);
				setState(4885);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PERIOD) {
					{
					setState(4883);
					match(PERIOD);
					setState(4884);
					general_element_part();
					}
				}

				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(4887);
				match(XMLQUERY);
				setState(4888);
				match(LEFT_PAREN);
				setState(4889);
				concatenation();
				setState(4891);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PASSING) {
					{
					setState(4890);
					xml_passing_clause();
					}
				}

				setState(4893);
				match(RETURNING);
				setState(4894);
				match(CONTENT);
				setState(4898);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NULL) {
					{
					setState(4895);
					match(NULL);
					setState(4896);
					match(ON);
					setState(4897);
					match(EMPTY);
					}
				}

				setState(4900);
				match(RIGHT_PAREN);
				setState(4903);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PERIOD) {
					{
					setState(4901);
					match(PERIOD);
					setState(4902);
					general_element_part();
					}
				}

				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(4905);
				match(XMLROOT);
				setState(4906);
				match(LEFT_PAREN);
				setState(4907);
				concatenation();
				setState(4910);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,612,_ctx) ) {
				case 1:
					{
					setState(4908);
					match(COMMA);
					setState(4909);
					xmlroot_param_version_part();
					}
					break;
				}
				setState(4914);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(4912);
					match(COMMA);
					setState(4913);
					xmlroot_param_standalone_part();
					}
				}

				setState(4916);
				match(RIGHT_PAREN);
				setState(4919);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PERIOD) {
					{
					setState(4917);
					match(PERIOD);
					setState(4918);
					general_element_part();
					}
				}

				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(4921);
				match(XMLSERIALIZE);
				setState(4922);
				match(LEFT_PAREN);
				setState(4923);
				_la = _input.LA(1);
				if ( !(_la==CONTENT || _la==DOCUMENT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4924);
				concatenation();
				setState(4927);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(4925);
					match(AS);
					setState(4926);
					type_spec();
					}
				}

				setState(4930);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ENCODING) {
					{
					setState(4929);
					xmlserialize_param_enconding_part();
					}
				}

				setState(4933);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VERSION) {
					{
					setState(4932);
					xmlserialize_param_version_part();
					}
				}

				setState(4936);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INDENT || _la==NO) {
					{
					setState(4935);
					xmlserialize_param_ident_part();
					}
				}

				setState(4940);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==HIDE || _la==SHOW) {
					{
					setState(4938);
					_la = _input.LA(1);
					if ( !(_la==HIDE || _la==SHOW) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(4939);
					match(DEFAULTS);
					}
				}

				setState(4942);
				match(RIGHT_PAREN);
				setState(4945);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PERIOD) {
					{
					setState(4943);
					match(PERIOD);
					setState(4944);
					general_element_part();
					}
				}

				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(4947);
				match(XMLTABLE);
				setState(4948);
				match(LEFT_PAREN);
				setState(4950);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,621,_ctx) ) {
				case 1:
					{
					setState(4949);
					xml_namespaces_clause();
					}
					break;
				}
				setState(4952);
				concatenation();
				setState(4954);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PASSING) {
					{
					setState(4953);
					xml_passing_clause();
					}
				}

				setState(4961);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMNS) {
					{
					setState(4956);
					match(COLUMNS);
					setState(4957);
					xml_table_column();
					{
					setState(4958);
					match(COMMA);
					setState(4959);
					xml_table_column();
					}
					}
				}

				setState(4963);
				match(RIGHT_PAREN);
				setState(4966);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PERIOD) {
					{
					setState(4964);
					match(PERIOD);
					setState(4965);
					general_element_part();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Over_clause_keywordContext extends ParserRuleContext {
		public TerminalNode AVG() { return getToken(OracleSQLStatementParser.AVG, 0); }
		public TerminalNode CORR() { return getToken(OracleSQLStatementParser.CORR, 0); }
		public TerminalNode LAG() { return getToken(OracleSQLStatementParser.LAG, 0); }
		public TerminalNode LEAD() { return getToken(OracleSQLStatementParser.LEAD, 0); }
		public TerminalNode MAX() { return getToken(OracleSQLStatementParser.MAX, 0); }
		public TerminalNode MEDIAN() { return getToken(OracleSQLStatementParser.MEDIAN, 0); }
		public TerminalNode MIN() { return getToken(OracleSQLStatementParser.MIN, 0); }
		public TerminalNode NTILE() { return getToken(OracleSQLStatementParser.NTILE, 0); }
		public TerminalNode RATIO_TO_REPORT() { return getToken(OracleSQLStatementParser.RATIO_TO_REPORT, 0); }
		public TerminalNode ROW_NUMBER() { return getToken(OracleSQLStatementParser.ROW_NUMBER, 0); }
		public TerminalNode SUM() { return getToken(OracleSQLStatementParser.SUM, 0); }
		public TerminalNode VARIANCE() { return getToken(OracleSQLStatementParser.VARIANCE, 0); }
		public TerminalNode REGR_() { return getToken(OracleSQLStatementParser.REGR_, 0); }
		public TerminalNode STDDEV() { return getToken(OracleSQLStatementParser.STDDEV, 0); }
		public TerminalNode VAR_() { return getToken(OracleSQLStatementParser.VAR_, 0); }
		public TerminalNode COVAR_() { return getToken(OracleSQLStatementParser.COVAR_, 0); }
		public TerminalNode WM_CONCAT() { return getToken(OracleSQLStatementParser.WM_CONCAT, 0); }
		public Over_clause_keywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_over_clause_keyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterOver_clause_keyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitOver_clause_keyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitOver_clause_keyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Over_clause_keywordContext over_clause_keyword() throws RecognitionException {
		Over_clause_keywordContext _localctx = new Over_clause_keywordContext(_ctx, getState());
		enterRule(_localctx, 608, RULE_over_clause_keyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4970);
			_la = _input.LA(1);
			if ( !(((((_la - 577)) & ~0x3f) == 0 && ((1L << (_la - 577)) & ((1L << (AVG - 577)) | (1L << (CORR - 577)) | (1L << (COVAR_ - 577)) | (1L << (LAG - 577)) | (1L << (LEAD - 577)) | (1L << (MAX - 577)) | (1L << (MEDIAN - 577)) | (1L << (MIN - 577)) | (1L << (NTILE - 577)) | (1L << (RATIO_TO_REPORT - 577)) | (1L << (REGR_ - 577)) | (1L << (ROW_NUMBER - 577)) | (1L << (SUM - 577)) | (1L << (STDDEV - 577)) | (1L << (VAR_ - 577)) | (1L << (VARIANCE - 577)) | (1L << (WM_CONCAT - 577)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Within_or_over_clause_keywordContext extends ParserRuleContext {
		public TerminalNode CUME_DIST() { return getToken(OracleSQLStatementParser.CUME_DIST, 0); }
		public TerminalNode DENSE_RANK() { return getToken(OracleSQLStatementParser.DENSE_RANK, 0); }
		public TerminalNode LISTAGG() { return getToken(OracleSQLStatementParser.LISTAGG, 0); }
		public TerminalNode PERCENT_RANK() { return getToken(OracleSQLStatementParser.PERCENT_RANK, 0); }
		public TerminalNode PERCENTILE_CONT() { return getToken(OracleSQLStatementParser.PERCENTILE_CONT, 0); }
		public TerminalNode PERCENTILE_DISC() { return getToken(OracleSQLStatementParser.PERCENTILE_DISC, 0); }
		public TerminalNode RANK() { return getToken(OracleSQLStatementParser.RANK, 0); }
		public Within_or_over_clause_keywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_within_or_over_clause_keyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterWithin_or_over_clause_keyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitWithin_or_over_clause_keyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitWithin_or_over_clause_keyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Within_or_over_clause_keywordContext within_or_over_clause_keyword() throws RecognitionException {
		Within_or_over_clause_keywordContext _localctx = new Within_or_over_clause_keywordContext(_ctx, getState());
		enterRule(_localctx, 610, RULE_within_or_over_clause_keyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4972);
			_la = _input.LA(1);
			if ( !(((((_la - 570)) & ~0x3f) == 0 && ((1L << (_la - 570)) & ((1L << (CUME_DIST - 570)) | (1L << (DENSE_RANK - 570)) | (1L << (LISTAGG - 570)) | (1L << (PERCENT_RANK - 570)) | (1L << (PERCENTILE_CONT - 570)) | (1L << (PERCENTILE_DISC - 570)) | (1L << (RANK - 570)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Standard_prediction_function_keywordContext extends ParserRuleContext {
		public TerminalNode PREDICTION() { return getToken(OracleSQLStatementParser.PREDICTION, 0); }
		public TerminalNode PREDICTION_BOUNDS() { return getToken(OracleSQLStatementParser.PREDICTION_BOUNDS, 0); }
		public TerminalNode PREDICTION_COST() { return getToken(OracleSQLStatementParser.PREDICTION_COST, 0); }
		public TerminalNode PREDICTION_DETAILS() { return getToken(OracleSQLStatementParser.PREDICTION_DETAILS, 0); }
		public TerminalNode PREDICTION_PROBABILITY() { return getToken(OracleSQLStatementParser.PREDICTION_PROBABILITY, 0); }
		public TerminalNode PREDICTION_SET() { return getToken(OracleSQLStatementParser.PREDICTION_SET, 0); }
		public Standard_prediction_function_keywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_standard_prediction_function_keyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterStandard_prediction_function_keyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitStandard_prediction_function_keyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitStandard_prediction_function_keyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Standard_prediction_function_keywordContext standard_prediction_function_keyword() throws RecognitionException {
		Standard_prediction_function_keywordContext _localctx = new Standard_prediction_function_keywordContext(_ctx, getState());
		enterRule(_localctx, 612, RULE_standard_prediction_function_keyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4974);
			_la = _input.LA(1);
			if ( !(((((_la - 564)) & ~0x3f) == 0 && ((1L << (_la - 564)) & ((1L << (PREDICTION - 564)) | (1L << (PREDICTION_BOUNDS - 564)) | (1L << (PREDICTION_COST - 564)) | (1L << (PREDICTION_DETAILS - 564)) | (1L << (PREDICTION_PROBABILITY - 564)) | (1L << (PREDICTION_SET - 564)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Over_clauseContext extends ParserRuleContext {
		public TerminalNode OVER() { return getToken(OracleSQLStatementParser.OVER, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(OracleSQLStatementParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(OracleSQLStatementParser.RIGHT_PAREN, 0); }
		public Query_partition_clauseContext query_partition_clause() {
			return getRuleContext(Query_partition_clauseContext.class,0);
		}
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public Windowing_clauseContext windowing_clause() {
			return getRuleContext(Windowing_clauseContext.class,0);
		}
		public Over_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_over_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterOver_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitOver_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitOver_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Over_clauseContext over_clause() throws RecognitionException {
		Over_clauseContext _localctx = new Over_clauseContext(_ctx, getState());
		enterRule(_localctx, 614, RULE_over_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4976);
			match(OVER);
			setState(4977);
			match(LEFT_PAREN);
			setState(4979);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(4978);
				query_partition_clause();
				}
			}

			setState(4985);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(4981);
				order_by_clause();
				setState(4983);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RANGE || _la==ROWS) {
					{
					setState(4982);
					windowing_clause();
					}
				}

				}
			}

			setState(4987);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Windowing_clauseContext extends ParserRuleContext {
		public Windowing_typeContext windowing_type() {
			return getRuleContext(Windowing_typeContext.class,0);
		}
		public TerminalNode BETWEEN() { return getToken(OracleSQLStatementParser.BETWEEN, 0); }
		public List<Windowing_elementsContext> windowing_elements() {
			return getRuleContexts(Windowing_elementsContext.class);
		}
		public Windowing_elementsContext windowing_elements(int i) {
			return getRuleContext(Windowing_elementsContext.class,i);
		}
		public TerminalNode AND() { return getToken(OracleSQLStatementParser.AND, 0); }
		public Windowing_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowing_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterWindowing_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitWindowing_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitWindowing_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Windowing_clauseContext windowing_clause() throws RecognitionException {
		Windowing_clauseContext _localctx = new Windowing_clauseContext(_ctx, getState());
		enterRule(_localctx, 616, RULE_windowing_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4989);
			windowing_type();
			setState(4996);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BETWEEN:
				{
				setState(4990);
				match(BETWEEN);
				setState(4991);
				windowing_elements();
				setState(4992);
				match(AND);
				setState(4993);
				windowing_elements();
				}
				break;
			case ABS:
			case ACOS:
			case ADD:
			case ADD_MONTHS:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ALL:
			case ANALYZE:
			case ANY:
			case ARRAY:
			case ASCII:
			case ASCIISTR:
			case ASIN:
			case ASSOCIATE:
			case ATAN2:
			case ATAN:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BFILENAME:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BIN_TO_NUM:
			case BITAND:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CARDINALITY:
			case CASCADE:
			case CASE:
			case CAST:
			case CEIL:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHARTOROWID:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOSE:
			case COMPOUND:
			case CONCAT:
			case CONNECT_BY_ROOT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COS:
			case COSH:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT:
			case CURRENT_DATE:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DISTINCT:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case DUMP:
			case EACH:
			case ELEMENT:
			case EMPTY_BLOB:
			case EMPTY_CLOB:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXP:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FALSE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FLOOR:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FROM_TZ:
			case FULL:
			case FUNCTION:
			case GROUP_ID:
			case GROUPING:
			case HASH:
			case HEXTORAW:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INITCAP:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INSTR2:
			case INSTR4:
			case INSTRB:
			case INSTRC:
			case INSTR:
			case INTERFACE:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST_DAY:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LENGTH2:
			case LENGTH4:
			case LENGTHB:
			case LENGTHC:
			case LENGTH:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LN:
			case LNNVL:
			case LOCAL:
			case LOCALTIMESTAMP:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MOD:
			case MONTH:
			case MONTHS_BETWEEN:
			case MULTISET:
			case NAME:
			case NAN:
			case NANVL:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCHR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NEW_TIME:
			case NEXT_DAY:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLIF:
			case NULL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NUMTODSINTERVAL:
			case NUMTOYMINTERVAL:
			case NVARCHAR2:
			case NVL2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPAQUE:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case POWER:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case PROCEDURE:
			case RAISE:
			case RANGE:
			case RAW:
			case RAWTOHEX:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_REPLACE:
			case REGEXP_SUBSTR:
			case REJECT:
			case RELIES_ON:
			case REMAINDER:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROWNUM:
			case ROW:
			case ROWS:
			case RPAD:
			case RTRIM:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGN:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SINH:
			case SIN:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SOUNDEX:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case SQRT:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYS_CONTEXT:
			case SYSDATE:
			case SYSTIMESTAMP:
			case TANH:
			case TAN:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TO_CLOB:
			case TO_DSINTERVAL:
			case TO_LOB:
			case TO_MULTI_BYTE:
			case TO_NCLOB:
			case TO_NUMBER:
			case TO_SINGLE_BYTE:
			case TO_TIMESTAMP:
			case TO_TIMESTAMP_TZ:
			case TO_YMINTERVAL:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUE:
			case TRUNCATE:
			case TRUNC:
			case TYPE:
			case TZ_OFFSET:
			case UID:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPPER:
			case UPSERT:
			case UROWID:
			case USERENV:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case VSIZE:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case DECODE:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case NVL:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROUND:
			case ROW_NUMBER:
			case SUBSTR:
			case TO_CHAR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case LEAST:
			case GREATEST:
			case TO_DATE:
			case NATIONAL_CHAR_STRING_LIT:
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
			case CHAR_STRING:
			case DELIMITED_ID:
			case LEFT_PAREN:
			case ASTERISK:
			case PLUS_SIGN:
			case MINUS_SIGN:
			case BINDVAR:
			case COLON:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(4995);
				windowing_elements();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Windowing_typeContext extends ParserRuleContext {
		public TerminalNode ROWS() { return getToken(OracleSQLStatementParser.ROWS, 0); }
		public TerminalNode RANGE() { return getToken(OracleSQLStatementParser.RANGE, 0); }
		public Windowing_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowing_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterWindowing_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitWindowing_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitWindowing_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Windowing_typeContext windowing_type() throws RecognitionException {
		Windowing_typeContext _localctx = new Windowing_typeContext(_ctx, getState());
		enterRule(_localctx, 618, RULE_windowing_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4998);
			_la = _input.LA(1);
			if ( !(_la==RANGE || _la==ROWS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Windowing_elementsContext extends ParserRuleContext {
		public TerminalNode UNBOUNDED() { return getToken(OracleSQLStatementParser.UNBOUNDED, 0); }
		public TerminalNode PRECEDING() { return getToken(OracleSQLStatementParser.PRECEDING, 0); }
		public TerminalNode CURRENT() { return getToken(OracleSQLStatementParser.CURRENT, 0); }
		public TerminalNode ROW() { return getToken(OracleSQLStatementParser.ROW, 0); }
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public TerminalNode FOLLOWING() { return getToken(OracleSQLStatementParser.FOLLOWING, 0); }
		public Windowing_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowing_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterWindowing_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitWindowing_elements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitWindowing_elements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Windowing_elementsContext windowing_elements() throws RecognitionException {
		Windowing_elementsContext _localctx = new Windowing_elementsContext(_ctx, getState());
		enterRule(_localctx, 620, RULE_windowing_elements);
		int _la;
		try {
			setState(5007);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,630,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5000);
				match(UNBOUNDED);
				setState(5001);
				match(PRECEDING);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5002);
				match(CURRENT);
				setState(5003);
				match(ROW);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5004);
				concatenation();
				setState(5005);
				_la = _input.LA(1);
				if ( !(_la==FOLLOWING || _la==PRECEDING) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Using_clauseContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(OracleSQLStatementParser.USING, 0); }
		public List<Using_elementContext> using_element() {
			return getRuleContexts(Using_elementContext.class);
		}
		public Using_elementContext using_element(int i) {
			return getRuleContext(Using_elementContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(OracleSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(OracleSQLStatementParser.COMMA, i);
		}
		public Using_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_using_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterUsing_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitUsing_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitUsing_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Using_clauseContext using_clause() throws RecognitionException {
		Using_clauseContext _localctx = new Using_clauseContext(_ctx, getState());
		enterRule(_localctx, 622, RULE_using_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5009);
			match(USING);
			setState(5019);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,632,_ctx) ) {
			case 1:
				{
				setState(5010);
				match(ASTERISK);
				}
				break;
			case 2:
				{
				setState(5011);
				using_element();
				setState(5016);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5012);
					match(COMMA);
					setState(5013);
					using_element();
					}
					}
					setState(5018);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Using_elementContext extends ParserRuleContext {
		public Select_list_elementsContext select_list_elements() {
			return getRuleContext(Select_list_elementsContext.class,0);
		}
		public TerminalNode IN() { return getToken(OracleSQLStatementParser.IN, 0); }
		public TerminalNode OUT() { return getToken(OracleSQLStatementParser.OUT, 0); }
		public Column_aliasContext column_alias() {
			return getRuleContext(Column_aliasContext.class,0);
		}
		public Using_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_using_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterUsing_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitUsing_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitUsing_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Using_elementContext using_element() throws RecognitionException {
		Using_elementContext _localctx = new Using_elementContext(_ctx, getState());
		enterRule(_localctx, 624, RULE_using_element);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5026);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,634,_ctx) ) {
			case 1:
				{
				setState(5021);
				match(IN);
				setState(5023);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,633,_ctx) ) {
				case 1:
					{
					setState(5022);
					match(OUT);
					}
					break;
				}
				}
				break;
			case 2:
				{
				setState(5025);
				match(OUT);
				}
				break;
			}
			setState(5028);
			select_list_elements();
			setState(5030);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,635,_ctx) ) {
			case 1:
				{
				setState(5029);
				column_alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Collect_order_by_partContext extends ParserRuleContext {
		public TerminalNode ORDER() { return getToken(OracleSQLStatementParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(OracleSQLStatementParser.BY, 0); }
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public Collect_order_by_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collect_order_by_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterCollect_order_by_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitCollect_order_by_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitCollect_order_by_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Collect_order_by_partContext collect_order_by_part() throws RecognitionException {
		Collect_order_by_partContext _localctx = new Collect_order_by_partContext(_ctx, getState());
		enterRule(_localctx, 626, RULE_collect_order_by_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5032);
			match(ORDER);
			setState(5033);
			match(BY);
			setState(5034);
			concatenation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Within_or_over_partContext extends ParserRuleContext {
		public TerminalNode WITHIN() { return getToken(OracleSQLStatementParser.WITHIN, 0); }
		public TerminalNode GROUP() { return getToken(OracleSQLStatementParser.GROUP, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(OracleSQLStatementParser.LEFT_PAREN, 0); }
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(OracleSQLStatementParser.RIGHT_PAREN, 0); }
		public Over_clauseContext over_clause() {
			return getRuleContext(Over_clauseContext.class,0);
		}
		public Within_or_over_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_within_or_over_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterWithin_or_over_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitWithin_or_over_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitWithin_or_over_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Within_or_over_partContext within_or_over_part() throws RecognitionException {
		Within_or_over_partContext _localctx = new Within_or_over_partContext(_ctx, getState());
		enterRule(_localctx, 628, RULE_within_or_over_part);
		try {
			setState(5043);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WITHIN:
				enterOuterAlt(_localctx, 1);
				{
				setState(5036);
				match(WITHIN);
				setState(5037);
				match(GROUP);
				setState(5038);
				match(LEFT_PAREN);
				setState(5039);
				order_by_clause();
				setState(5040);
				match(RIGHT_PAREN);
				}
				break;
			case OVER:
				enterOuterAlt(_localctx, 2);
				{
				setState(5042);
				over_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cost_matrix_clauseContext extends ParserRuleContext {
		public TerminalNode COST() { return getToken(OracleSQLStatementParser.COST, 0); }
		public TerminalNode MODEL() { return getToken(OracleSQLStatementParser.MODEL, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(OracleSQLStatementParser.LEFT_PAREN, 0); }
		public List<Cost_class_nameContext> cost_class_name() {
			return getRuleContexts(Cost_class_nameContext.class);
		}
		public Cost_class_nameContext cost_class_name(int i) {
			return getRuleContext(Cost_class_nameContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(OracleSQLStatementParser.RIGHT_PAREN, 0); }
		public TerminalNode VALUES() { return getToken(OracleSQLStatementParser.VALUES, 0); }
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public TerminalNode AUTO() { return getToken(OracleSQLStatementParser.AUTO, 0); }
		public List<TerminalNode> COMMA() { return getTokens(OracleSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(OracleSQLStatementParser.COMMA, i);
		}
		public Cost_matrix_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cost_matrix_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterCost_matrix_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitCost_matrix_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitCost_matrix_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cost_matrix_clauseContext cost_matrix_clause() throws RecognitionException {
		Cost_matrix_clauseContext _localctx = new Cost_matrix_clauseContext(_ctx, getState());
		enterRule(_localctx, 630, RULE_cost_matrix_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5045);
			match(COST);
			setState(5063);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MODEL:
				{
				setState(5046);
				match(MODEL);
				setState(5048);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AUTO) {
					{
					setState(5047);
					match(AUTO);
					}
				}

				}
				break;
			case LEFT_PAREN:
				{
				setState(5050);
				match(LEFT_PAREN);
				setState(5051);
				cost_class_name();
				setState(5056);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5052);
					match(COMMA);
					setState(5053);
					cost_class_name();
					}
					}
					setState(5058);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(5059);
				match(RIGHT_PAREN);
				setState(5060);
				match(VALUES);
				setState(5061);
				expression_list();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_passing_clauseContext extends ParserRuleContext {
		public TerminalNode PASSING() { return getToken(OracleSQLStatementParser.PASSING, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(OracleSQLStatementParser.COMMA, 0); }
		public TerminalNode BY() { return getToken(OracleSQLStatementParser.BY, 0); }
		public TerminalNode VALUE() { return getToken(OracleSQLStatementParser.VALUE, 0); }
		public List<Column_aliasContext> column_alias() {
			return getRuleContexts(Column_aliasContext.class);
		}
		public Column_aliasContext column_alias(int i) {
			return getRuleContext(Column_aliasContext.class,i);
		}
		public Xml_passing_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_passing_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterXml_passing_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitXml_passing_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitXml_passing_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xml_passing_clauseContext xml_passing_clause() throws RecognitionException {
		Xml_passing_clauseContext _localctx = new Xml_passing_clauseContext(_ctx, getState());
		enterRule(_localctx, 632, RULE_xml_passing_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5065);
			match(PASSING);
			setState(5068);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==BY) {
				{
				setState(5066);
				match(BY);
				setState(5067);
				match(VALUE);
				}
			}

			setState(5070);
			expression();
			setState(5072);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABS) | (1L << ACOS) | (1L << ADD) | (1L << ADD_MONTHS) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << AS) | (1L << ASCII) | (1L << ASCIISTR) | (1L << ASIN) | (1L << ASSOCIATE) | (1L << ATAN2) | (1L << ATAN) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BFILENAME) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BIN_TO_NUM) | (1L << BITAND) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CARDINALITY) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CEIL) | (1L << CHARACTER) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARTOROWID) | (1L << CHR) | (1L << C_LETTER))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOSE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONCAT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COS - 64)) | (1L << (COSH - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_DATE - 64)) | (1L << (CURRENT_TIMESTAMP - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (DIMENSION - 128)) | (1L << (DISABLE - 128)) | (1L << (DISASSOCIATE - 128)) | (1L << (DOCUMENT - 128)) | (1L << (DOUBLE - 128)) | (1L << (DSINTERVAL_UNCONSTRAINED - 128)) | (1L << (DUMP - 128)) | (1L << (EACH - 128)) | (1L << (ELEMENT - 128)) | (1L << (EMPTY_BLOB - 128)) | (1L << (EMPTY_CLOB - 128)) | (1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERR - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXP - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FLOOR - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FROM_TZ - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUP_ID - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HEXTORAW - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (IGNORE - 193)) | (1L << (IMMEDIATE - 193)) | (1L << (INCLUDE - 193)) | (1L << (INCLUDING - 193)) | (1L << (INCREMENT - 193)) | (1L << (INDENT - 193)) | (1L << (INDEXED - 193)) | (1L << (INDICATOR - 193)) | (1L << (INDICES - 193)) | (1L << (INFINITE - 193)) | (1L << (INITCAP - 193)) | (1L << (INLINE - 193)) | (1L << (INNER - 193)) | (1L << (INOUT - 193)) | (1L << (INSTANTIABLE - 193)) | (1L << (INSTEAD - 193)) | (1L << (INSTR2 - 193)) | (1L << (INSTR4 - 193)) | (1L << (INSTRB - 193)) | (1L << (INSTRC - 193)) | (1L << (INSTR - 193)) | (1L << (INTERFACE - 193)) | (1L << (INTEGER - 193)) | (1L << (INTERVAL - 193)) | (1L << (INT - 193)) | (1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (KEY - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST_DAY - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LENGTH2 - 193)) | (1L << (LENGTH4 - 193)) | (1L << (LENGTHB - 193)) | (1L << (LENGTHC - 193)) | (1L << (LENGTH - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LN - 193)) | (1L << (LNNVL - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCALTIMESTAMP - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (LOGON - 257)) | (1L << (LONG - 257)) | (1L << (LOOP - 257)) | (1L << (LOWER - 257)) | (1L << (LPAD - 257)) | (1L << (LTRIM - 257)) | (1L << (MAIN - 257)) | (1L << (MAP - 257)) | (1L << (MATCHED - 257)) | (1L << (MAXVALUE - 257)) | (1L << (MEASURES - 257)) | (1L << (MEMBER - 257)) | (1L << (MERGE - 257)) | (1L << (MINUTE - 257)) | (1L << (MINVALUE - 257)) | (1L << (MLSLABEL - 257)) | (1L << (MODEL - 257)) | (1L << (MODIFY - 257)) | (1L << (MOD - 257)) | (1L << (MONTH - 257)) | (1L << (MONTHS_BETWEEN - 257)) | (1L << (MULTISET - 257)) | (1L << (NAME - 257)) | (1L << (NAN - 257)) | (1L << (NANVL - 257)) | (1L << (NATURAL - 257)) | (1L << (NATURALN - 257)) | (1L << (NAV - 257)) | (1L << (NCHAR_CS - 257)) | (1L << (NCHAR - 257)) | (1L << (NCHR - 257)) | (1L << (NCLOB - 257)) | (1L << (NESTED - 257)) | (1L << (NEW - 257)) | (1L << (NEW_TIME - 257)) | (1L << (NEXT_DAY - 257)) | (1L << (NOAUDIT - 257)) | (1L << (NOCOPY - 257)) | (1L << (NOCYCLE - 257)) | (1L << (NOENTITYESCAPING - 257)) | (1L << (NONE - 257)) | (1L << (NO - 257)) | (1L << (NOSCHEMACHECK - 257)) | (1L << (NULLIF - 257)) | (1L << (NULLS - 257)) | (1L << (NUMBER - 257)) | (1L << (NUMERIC - 257)) | (1L << (NUMTODSINTERVAL - 257)) | (1L << (NUMTOYMINTERVAL - 257)) | (1L << (NVARCHAR2 - 257)) | (1L << (NVL2 - 257)) | (1L << (OBJECT - 257)) | (1L << (OFF - 257)))) != 0) || ((((_la - 321)) & ~0x3f) == 0 && ((1L << (_la - 321)) & ((1L << (OID - 321)) | (1L << (OLD - 321)) | (1L << (ONLY - 321)) | (1L << (OPAQUE - 321)) | (1L << (OPEN - 321)) | (1L << (ORADATA - 321)) | (1L << (ORDINALITY - 321)) | (1L << (OSERROR - 321)) | (1L << (OUTER - 321)) | (1L << (OUT - 321)) | (1L << (OVER - 321)) | (1L << (OVERRIDING - 321)) | (1L << (PACKAGE - 321)) | (1L << (PARALLEL_ENABLE - 321)) | (1L << (PARAMETERS - 321)) | (1L << (PARENT - 321)) | (1L << (PARTITION - 321)) | (1L << (PASSING - 321)) | (1L << (PATH - 321)) | (1L << (PIPELINED - 321)) | (1L << (PLAN - 321)) | (1L << (PLS_INTEGER - 321)) | (1L << (POSITIVEN - 321)) | (1L << (POSITIVE - 321)) | (1L << (POWER - 321)) | (1L << (PRAGMA - 321)) | (1L << (PRECEDING - 321)) | (1L << (PRECISION - 321)) | (1L << (PRESENT - 321)) | (1L << (PRIOR - 321)) | (1L << (PROCEDURE - 321)) | (1L << (RAISE - 321)) | (1L << (RANGE - 321)) | (1L << (RAW - 321)) | (1L << (RAWTOHEX - 321)) | (1L << (READ - 321)) | (1L << (REAL - 321)) | (1L << (RECORD - 321)) | (1L << (REFERENCE - 321)) | (1L << (REFERENCING - 321)) | (1L << (REF - 321)) | (1L << (REGEXP_COUNT - 321)) | (1L << (REGEXP_INSTR - 321)) | (1L << (REGEXP_REPLACE - 321)) | (1L << (REGEXP_SUBSTR - 321)) | (1L << (REJECT - 321)) | (1L << (RELIES_ON - 321)) | (1L << (REMAINDER - 321)))) != 0) || ((((_la - 385)) & ~0x3f) == 0 && ((1L << (_la - 385)) & ((1L << (RENAME - 385)) | (1L << (REPLACE - 385)) | (1L << (RESPECT - 385)) | (1L << (RESTRICT_REFERENCES - 385)) | (1L << (RESULT_CACHE - 385)) | (1L << (RESULT - 385)) | (1L << (RETURNING - 385)) | (1L << (RETURN - 385)) | (1L << (REUSE - 385)) | (1L << (REVERSE - 385)) | (1L << (RIGHT - 385)) | (1L << (ROLLBACK - 385)) | (1L << (ROLLUP - 385)) | (1L << (ROWID - 385)) | (1L << (ROWNUM - 385)) | (1L << (ROW - 385)) | (1L << (ROWS - 385)) | (1L << (RPAD - 385)) | (1L << (RTRIM - 385)) | (1L << (RULES - 385)) | (1L << (SAMPLE - 385)) | (1L << (SAVEPOINT - 385)) | (1L << (SAVE - 385)) | (1L << (SCHEMACHECK - 385)) | (1L << (SCHEMA - 385)) | (1L << (SCN - 385)) | (1L << (SECOND - 385)) | (1L << (SEED - 385)) | (1L << (SEGMENT - 385)) | (1L << (SELF - 385)) | (1L << (SEQUENTIAL - 385)) | (1L << (SERIALIZABLE - 385)) | (1L << (SERIALLY_REUSABLE - 385)) | (1L << (SERVERERROR - 385)) | (1L << (SESSIONTIMEZONE - 385)) | (1L << (SET - 385)) | (1L << (SETS - 385)) | (1L << (SETTINGS - 385)) | (1L << (SHOW - 385)) | (1L << (SHUTDOWN - 385)) | (1L << (SIBLINGS - 385)) | (1L << (SIGN - 385)) | (1L << (SIGNTYPE - 385)) | (1L << (SIMPLE_INTEGER - 385)) | (1L << (SINGLE - 385)) | (1L << (SINH - 385)) | (1L << (SIN - 385)) | (1L << (SKIP_ - 385)) | (1L << (SMALLINT - 385)) | (1L << (SNAPSHOT - 385)) | (1L << (SOME - 385)) | (1L << (SOUNDEX - 385)) | (1L << (SPECIFICATION - 385)) | (1L << (SQLDATA - 385)) | (1L << (SQLERROR - 385)) | (1L << (SQRT - 385)) | (1L << (STANDALONE - 385)))) != 0) || ((((_la - 449)) & ~0x3f) == 0 && ((1L << (_la - 449)) & ((1L << (STARTUP - 449)) | (1L << (STATEMENT_ID - 449)) | (1L << (STATEMENT - 449)) | (1L << (STATIC - 449)) | (1L << (STATISTICS - 449)) | (1L << (STRING - 449)) | (1L << (SUBMULTISET - 449)) | (1L << (SUBPARTITION - 449)) | (1L << (SUBSTITUTABLE - 449)) | (1L << (SUBTYPE - 449)) | (1L << (SUCCESS - 449)) | (1L << (SUSPEND - 449)) | (1L << (SYS_CONTEXT - 449)) | (1L << (SYSDATE - 449)) | (1L << (SYSTIMESTAMP - 449)) | (1L << (TANH - 449)) | (1L << (TAN - 449)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 449)) | (1L << (TIMESTAMP - 449)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 449)) | (1L << (TIMESTAMP_UNCONSTRAINED - 449)) | (1L << (TIME - 449)) | (1L << (TIMEZONE_ABBR - 449)) | (1L << (TIMEZONE_HOUR - 449)) | (1L << (TIMEZONE_MINUTE - 449)) | (1L << (TIMEZONE_REGION - 449)) | (1L << (TO_CLOB - 449)) | (1L << (TO_DSINTERVAL - 449)) | (1L << (TO_LOB - 449)) | (1L << (TO_MULTI_BYTE - 449)) | (1L << (TO_NCLOB - 449)) | (1L << (TO_NUMBER - 449)) | (1L << (TO_SINGLE_BYTE - 449)) | (1L << (TO_TIMESTAMP - 449)) | (1L << (TO_TIMESTAMP_TZ - 449)) | (1L << (TO_YMINTERVAL - 449)) | (1L << (TRAILING - 449)) | (1L << (TRANSACTION - 449)) | (1L << (TRANSLATE - 449)) | (1L << (TREAT - 449)) | (1L << (TRIGGER - 449)) | (1L << (TRUNCATE - 449)) | (1L << (TRUNC - 449)) | (1L << (TYPE - 449)) | (1L << (TZ_OFFSET - 449)) | (1L << (UID - 449)) | (1L << (UNBOUNDED - 449)) | (1L << (UNDER - 449)) | (1L << (UNLIMITED - 449)) | (1L << (UNTIL - 449)) | (1L << (UPDATED - 449)))) != 0) || ((((_la - 513)) & ~0x3f) == 0 && ((1L << (_la - 513)) & ((1L << (UPPER - 513)) | (1L << (UPSERT - 513)) | (1L << (UROWID - 513)) | (1L << (USERENV - 513)) | (1L << (USER - 513)) | (1L << (USE - 513)) | (1L << (VALIDATE - 513)) | (1L << (VALUE - 513)) | (1L << (VARCHAR2 - 513)) | (1L << (VARCHAR - 513)) | (1L << (VARIABLE - 513)) | (1L << (VARRAY - 513)) | (1L << (VARYING - 513)) | (1L << (VERSIONS - 513)) | (1L << (VERSION - 513)) | (1L << (VSIZE - 513)) | (1L << (WAIT - 513)) | (1L << (WARNING - 513)) | (1L << (WELLFORMED - 513)) | (1L << (WHENEVER - 513)) | (1L << (WHILE - 513)) | (1L << (WITHIN - 513)) | (1L << (WORK - 513)) | (1L << (WRITE - 513)) | (1L << (XMLAGG - 513)) | (1L << (XMLATTRIBUTES - 513)) | (1L << (XMLCAST - 513)) | (1L << (XMLCOLATTVAL - 513)) | (1L << (XMLELEMENT - 513)) | (1L << (XMLEXISTS - 513)) | (1L << (XMLFOREST - 513)) | (1L << (XMLNAMESPACES - 513)) | (1L << (XMLPARSE - 513)) | (1L << (XMLPI - 513)) | (1L << (XMLQUERY - 513)) | (1L << (XMLROOT - 513)) | (1L << (XMLSERIALIZE - 513)) | (1L << (XMLTABLE - 513)) | (1L << (XML - 513)) | (1L << (YEAR - 513)) | (1L << (YES - 513)) | (1L << (YMINTERVAL_UNCONSTRAINED - 513)) | (1L << (ZONE - 513)) | (1L << (PREDICTION - 513)) | (1L << (PREDICTION_BOUNDS - 513)) | (1L << (PREDICTION_COST - 513)) | (1L << (PREDICTION_DETAILS - 513)) | (1L << (PREDICTION_PROBABILITY - 513)) | (1L << (PREDICTION_SET - 513)) | (1L << (CUME_DIST - 513)) | (1L << (DENSE_RANK - 513)) | (1L << (LISTAGG - 513)) | (1L << (PERCENT_RANK - 513)) | (1L << (PERCENTILE_CONT - 513)) | (1L << (PERCENTILE_DISC - 513)) | (1L << (RANK - 513)))) != 0) || ((((_la - 577)) & ~0x3f) == 0 && ((1L << (_la - 577)) & ((1L << (AVG - 577)) | (1L << (CORR - 577)) | (1L << (COVAR_ - 577)) | (1L << (DECODE - 577)) | (1L << (LAG - 577)) | (1L << (LEAD - 577)) | (1L << (MAX - 577)) | (1L << (MEDIAN - 577)) | (1L << (MIN - 577)) | (1L << (NTILE - 577)) | (1L << (NVL - 577)) | (1L << (RATIO_TO_REPORT - 577)) | (1L << (REGR_ - 577)) | (1L << (ROUND - 577)) | (1L << (ROW_NUMBER - 577)) | (1L << (SUBSTR - 577)) | (1L << (TO_CHAR - 577)) | (1L << (TRIM - 577)) | (1L << (SUM - 577)) | (1L << (STDDEV - 577)) | (1L << (VAR_ - 577)) | (1L << (VARIANCE - 577)) | (1L << (LEAST - 577)) | (1L << (GREATEST - 577)) | (1L << (TO_DATE - 577)) | (1L << (NATIONAL_CHAR_STRING_LIT - 577)) | (1L << (CHAR_STRING - 577)) | (1L << (DELIMITED_ID - 577)) | (1L << (ASTERISK - 577)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
				{
				setState(5071);
				column_alias();
				}
			}

			{
			setState(5074);
			match(COMMA);
			setState(5075);
			expression();
			setState(5077);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,642,_ctx) ) {
			case 1:
				{
				setState(5076);
				column_alias();
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_attributes_clauseContext extends ParserRuleContext {
		public TerminalNode XMLATTRIBUTES() { return getToken(OracleSQLStatementParser.XMLATTRIBUTES, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(OracleSQLStatementParser.LEFT_PAREN, 0); }
		public List<Xml_multiuse_expression_elementContext> xml_multiuse_expression_element() {
			return getRuleContexts(Xml_multiuse_expression_elementContext.class);
		}
		public Xml_multiuse_expression_elementContext xml_multiuse_expression_element(int i) {
			return getRuleContext(Xml_multiuse_expression_elementContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(OracleSQLStatementParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(OracleSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(OracleSQLStatementParser.COMMA, i);
		}
		public TerminalNode ENTITYESCAPING() { return getToken(OracleSQLStatementParser.ENTITYESCAPING, 0); }
		public TerminalNode NOENTITYESCAPING() { return getToken(OracleSQLStatementParser.NOENTITYESCAPING, 0); }
		public TerminalNode SCHEMACHECK() { return getToken(OracleSQLStatementParser.SCHEMACHECK, 0); }
		public TerminalNode NOSCHEMACHECK() { return getToken(OracleSQLStatementParser.NOSCHEMACHECK, 0); }
		public Xml_attributes_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_attributes_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterXml_attributes_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitXml_attributes_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitXml_attributes_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xml_attributes_clauseContext xml_attributes_clause() throws RecognitionException {
		Xml_attributes_clauseContext _localctx = new Xml_attributes_clauseContext(_ctx, getState());
		enterRule(_localctx, 634, RULE_xml_attributes_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5079);
			match(XMLATTRIBUTES);
			setState(5080);
			match(LEFT_PAREN);
			setState(5082);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,643,_ctx) ) {
			case 1:
				{
				setState(5081);
				_la = _input.LA(1);
				if ( !(_la==ENTITYESCAPING || _la==NOENTITYESCAPING) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(5085);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,644,_ctx) ) {
			case 1:
				{
				setState(5084);
				_la = _input.LA(1);
				if ( !(_la==NOSCHEMACHECK || _la==SCHEMACHECK) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(5087);
			xml_multiuse_expression_element();
			setState(5092);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5088);
				match(COMMA);
				setState(5089);
				xml_multiuse_expression_element();
				}
				}
				setState(5094);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5095);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_namespaces_clauseContext extends ParserRuleContext {
		public TerminalNode XMLNAMESPACES() { return getToken(OracleSQLStatementParser.XMLNAMESPACES, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(OracleSQLStatementParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(OracleSQLStatementParser.RIGHT_PAREN, 0); }
		public List<ConcatenationContext> concatenation() {
			return getRuleContexts(ConcatenationContext.class);
		}
		public ConcatenationContext concatenation(int i) {
			return getRuleContext(ConcatenationContext.class,i);
		}
		public List<Column_aliasContext> column_alias() {
			return getRuleContexts(Column_aliasContext.class);
		}
		public Column_aliasContext column_alias(int i) {
			return getRuleContext(Column_aliasContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(OracleSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(OracleSQLStatementParser.COMMA, i);
		}
		public Xml_general_default_partContext xml_general_default_part() {
			return getRuleContext(Xml_general_default_partContext.class,0);
		}
		public Xml_namespaces_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_namespaces_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterXml_namespaces_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitXml_namespaces_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitXml_namespaces_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xml_namespaces_clauseContext xml_namespaces_clause() throws RecognitionException {
		Xml_namespaces_clauseContext _localctx = new Xml_namespaces_clauseContext(_ctx, getState());
		enterRule(_localctx, 636, RULE_xml_namespaces_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5097);
			match(XMLNAMESPACES);
			setState(5098);
			match(LEFT_PAREN);
			setState(5102);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,646,_ctx) ) {
			case 1:
				{
				setState(5099);
				concatenation();
				setState(5100);
				column_alias();
				}
				break;
			}
			setState(5110);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5104);
				match(COMMA);
				setState(5105);
				concatenation();
				setState(5106);
				column_alias();
				}
				}
				setState(5112);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5114);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT) {
				{
				setState(5113);
				xml_general_default_part();
				}
			}

			setState(5116);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_table_columnContext extends ParserRuleContext {
		public Xml_column_nameContext xml_column_name() {
			return getRuleContext(Xml_column_nameContext.class,0);
		}
		public TerminalNode FOR() { return getToken(OracleSQLStatementParser.FOR, 0); }
		public TerminalNode ORDINALITY() { return getToken(OracleSQLStatementParser.ORDINALITY, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode PATH() { return getToken(OracleSQLStatementParser.PATH, 0); }
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public Xml_general_default_partContext xml_general_default_part() {
			return getRuleContext(Xml_general_default_partContext.class,0);
		}
		public Xml_table_columnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_table_column; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterXml_table_column(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitXml_table_column(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitXml_table_column(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xml_table_columnContext xml_table_column() throws RecognitionException {
		Xml_table_columnContext _localctx = new Xml_table_columnContext(_ctx, getState());
		enterRule(_localctx, 638, RULE_xml_table_column);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5118);
			xml_column_name();
			setState(5129);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FOR:
				{
				setState(5119);
				match(FOR);
				setState(5120);
				match(ORDINALITY);
				}
				break;
			case ABS:
			case ACOS:
			case ADD:
			case ADD_MONTHS:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASCII:
			case ASCIISTR:
			case ASIN:
			case ASSOCIATE:
			case ATAN2:
			case ATAN:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BFILENAME:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BIN_TO_NUM:
			case BITAND:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CARDINALITY:
			case CASCADE:
			case CASE:
			case CAST:
			case CEIL:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHARTOROWID:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOSE:
			case COMPOUND:
			case CONCAT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COS:
			case COSH:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_DATE:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case DUMP:
			case EACH:
			case ELEMENT:
			case EMPTY_BLOB:
			case EMPTY_CLOB:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXP:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FLOOR:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FROM_TZ:
			case FULL:
			case FUNCTION:
			case GROUP_ID:
			case GROUPING:
			case HASH:
			case HEXTORAW:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INITCAP:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INSTR2:
			case INSTR4:
			case INSTRB:
			case INSTRC:
			case INSTR:
			case INTERFACE:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST_DAY:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LENGTH2:
			case LENGTH4:
			case LENGTHB:
			case LENGTHC:
			case LENGTH:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LN:
			case LNNVL:
			case LOCAL:
			case LOCALTIMESTAMP:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MOD:
			case MONTH:
			case MONTHS_BETWEEN:
			case MULTISET:
			case NAME:
			case NAN:
			case NANVL:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCHR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NEW_TIME:
			case NEXT_DAY:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLIF:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NUMTODSINTERVAL:
			case NUMTOYMINTERVAL:
			case NVARCHAR2:
			case NVL2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPAQUE:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case POWER:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case PROCEDURE:
			case RAISE:
			case RANGE:
			case RAW:
			case RAWTOHEX:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_REPLACE:
			case REGEXP_SUBSTR:
			case REJECT:
			case RELIES_ON:
			case REMAINDER:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROWNUM:
			case ROW:
			case ROWS:
			case RPAD:
			case RTRIM:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGN:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SINH:
			case SIN:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SOUNDEX:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case SQRT:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYS_CONTEXT:
			case SYSDATE:
			case SYSTIMESTAMP:
			case TANH:
			case TAN:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIME_TZ_UNCONSTRAINED:
			case TIME_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TO_CLOB:
			case TO_DSINTERVAL:
			case TO_LOB:
			case TO_MULTI_BYTE:
			case TO_NCLOB:
			case TO_NUMBER:
			case TO_SINGLE_BYTE:
			case TO_TIMESTAMP:
			case TO_TIMESTAMP_TZ:
			case TO_YMINTERVAL:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TRUNC:
			case TYPE:
			case TZ_OFFSET:
			case UID:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPPER:
			case UPSERT:
			case UROWID:
			case USERENV:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case VSIZE:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case DECODE:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case NVL:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROUND:
			case ROW_NUMBER:
			case SUBSTR:
			case TO_CHAR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case LEAST:
			case GREATEST:
			case TO_DATE:
			case DELIMITED_ID:
			case ASTERISK:
			case REGULAR_ID:
				{
				setState(5121);
				type_spec();
				setState(5124);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PATH) {
					{
					setState(5122);
					match(PATH);
					setState(5123);
					concatenation();
					}
				}

				setState(5127);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT) {
					{
					setState(5126);
					xml_general_default_part();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_general_default_partContext extends ParserRuleContext {
		public TerminalNode DEFAULT() { return getToken(OracleSQLStatementParser.DEFAULT, 0); }
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public Xml_general_default_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_general_default_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterXml_general_default_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitXml_general_default_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitXml_general_default_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xml_general_default_partContext xml_general_default_part() throws RecognitionException {
		Xml_general_default_partContext _localctx = new Xml_general_default_partContext(_ctx, getState());
		enterRule(_localctx, 640, RULE_xml_general_default_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5131);
			match(DEFAULT);
			setState(5132);
			concatenation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_multiuse_expression_elementContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode AS() { return getToken(OracleSQLStatementParser.AS, 0); }
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public TerminalNode EVALNAME() { return getToken(OracleSQLStatementParser.EVALNAME, 0); }
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public Xml_multiuse_expression_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_multiuse_expression_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterXml_multiuse_expression_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitXml_multiuse_expression_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitXml_multiuse_expression_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xml_multiuse_expression_elementContext xml_multiuse_expression_element() throws RecognitionException {
		Xml_multiuse_expression_elementContext _localctx = new Xml_multiuse_expression_elementContext(_ctx, getState());
		enterRule(_localctx, 642, RULE_xml_multiuse_expression_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5134);
			expression();
			setState(5141);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(5135);
				match(AS);
				setState(5139);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,652,_ctx) ) {
				case 1:
					{
					setState(5136);
					id_expression();
					}
					break;
				case 2:
					{
					setState(5137);
					match(EVALNAME);
					setState(5138);
					concatenation();
					}
					break;
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xmlroot_param_version_partContext extends ParserRuleContext {
		public TerminalNode VERSION() { return getToken(OracleSQLStatementParser.VERSION, 0); }
		public TerminalNode NO() { return getToken(OracleSQLStatementParser.NO, 0); }
		public TerminalNode VALUE() { return getToken(OracleSQLStatementParser.VALUE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Xmlroot_param_version_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlroot_param_version_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterXmlroot_param_version_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitXmlroot_param_version_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitXmlroot_param_version_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xmlroot_param_version_partContext xmlroot_param_version_part() throws RecognitionException {
		Xmlroot_param_version_partContext _localctx = new Xmlroot_param_version_partContext(_ctx, getState());
		enterRule(_localctx, 644, RULE_xmlroot_param_version_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5143);
			match(VERSION);
			setState(5147);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,654,_ctx) ) {
			case 1:
				{
				setState(5144);
				match(NO);
				setState(5145);
				match(VALUE);
				}
				break;
			case 2:
				{
				setState(5146);
				expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xmlroot_param_standalone_partContext extends ParserRuleContext {
		public TerminalNode STANDALONE() { return getToken(OracleSQLStatementParser.STANDALONE, 0); }
		public TerminalNode YES() { return getToken(OracleSQLStatementParser.YES, 0); }
		public TerminalNode NO() { return getToken(OracleSQLStatementParser.NO, 0); }
		public TerminalNode VALUE() { return getToken(OracleSQLStatementParser.VALUE, 0); }
		public Xmlroot_param_standalone_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlroot_param_standalone_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterXmlroot_param_standalone_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitXmlroot_param_standalone_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitXmlroot_param_standalone_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xmlroot_param_standalone_partContext xmlroot_param_standalone_part() throws RecognitionException {
		Xmlroot_param_standalone_partContext _localctx = new Xmlroot_param_standalone_partContext(_ctx, getState());
		enterRule(_localctx, 646, RULE_xmlroot_param_standalone_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5149);
			match(STANDALONE);
			setState(5155);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case YES:
				{
				setState(5150);
				match(YES);
				}
				break;
			case NO:
				{
				setState(5151);
				match(NO);
				setState(5153);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VALUE) {
					{
					setState(5152);
					match(VALUE);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xmlserialize_param_enconding_partContext extends ParserRuleContext {
		public TerminalNode ENCODING() { return getToken(OracleSQLStatementParser.ENCODING, 0); }
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public Xmlserialize_param_enconding_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlserialize_param_enconding_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterXmlserialize_param_enconding_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitXmlserialize_param_enconding_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitXmlserialize_param_enconding_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xmlserialize_param_enconding_partContext xmlserialize_param_enconding_part() throws RecognitionException {
		Xmlserialize_param_enconding_partContext _localctx = new Xmlserialize_param_enconding_partContext(_ctx, getState());
		enterRule(_localctx, 648, RULE_xmlserialize_param_enconding_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5157);
			match(ENCODING);
			setState(5158);
			concatenation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xmlserialize_param_version_partContext extends ParserRuleContext {
		public TerminalNode VERSION() { return getToken(OracleSQLStatementParser.VERSION, 0); }
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public Xmlserialize_param_version_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlserialize_param_version_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterXmlserialize_param_version_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitXmlserialize_param_version_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitXmlserialize_param_version_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xmlserialize_param_version_partContext xmlserialize_param_version_part() throws RecognitionException {
		Xmlserialize_param_version_partContext _localctx = new Xmlserialize_param_version_partContext(_ctx, getState());
		enterRule(_localctx, 650, RULE_xmlserialize_param_version_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5160);
			match(VERSION);
			setState(5161);
			concatenation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xmlserialize_param_ident_partContext extends ParserRuleContext {
		public TerminalNode NO() { return getToken(OracleSQLStatementParser.NO, 0); }
		public TerminalNode INDENT() { return getToken(OracleSQLStatementParser.INDENT, 0); }
		public TerminalNode SIZE() { return getToken(OracleSQLStatementParser.SIZE, 0); }
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public Xmlserialize_param_ident_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlserialize_param_ident_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterXmlserialize_param_ident_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitXmlserialize_param_ident_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitXmlserialize_param_ident_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xmlserialize_param_ident_partContext xmlserialize_param_ident_part() throws RecognitionException {
		Xmlserialize_param_ident_partContext _localctx = new Xmlserialize_param_ident_partContext(_ctx, getState());
		enterRule(_localctx, 652, RULE_xmlserialize_param_ident_part);
		int _la;
		try {
			setState(5171);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NO:
				enterOuterAlt(_localctx, 1);
				{
				setState(5163);
				match(NO);
				setState(5164);
				match(INDENT);
				}
				break;
			case INDENT:
				enterOuterAlt(_localctx, 2);
				{
				setState(5165);
				match(INDENT);
				setState(5169);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SIZE) {
					{
					setState(5166);
					match(SIZE);
					setState(5167);
					match(EQUALS_OP);
					setState(5168);
					concatenation();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sql_plus_commandContext extends ParserRuleContext {
		public Whenever_commandContext whenever_command() {
			return getRuleContext(Whenever_commandContext.class,0);
		}
		public Exit_commandContext exit_command() {
			return getRuleContext(Exit_commandContext.class,0);
		}
		public Prompt_commandContext prompt_command() {
			return getRuleContext(Prompt_commandContext.class,0);
		}
		public Set_commandContext set_command() {
			return getRuleContext(Set_commandContext.class,0);
		}
		public Show_errors_commandContext show_errors_command() {
			return getRuleContext(Show_errors_commandContext.class,0);
		}
		public Start_commandContext start_command() {
			return getRuleContext(Start_commandContext.class,0);
		}
		public TerminalNode SEMI() { return getToken(OracleSQLStatementParser.SEMI, 0); }
		public Sql_plus_commandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_plus_command; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterSql_plus_command(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitSql_plus_command(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitSql_plus_command(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sql_plus_commandContext sql_plus_command() throws RecognitionException {
		Sql_plus_commandContext _localctx = new Sql_plus_commandContext(_ctx, getState());
		enterRule(_localctx, 654, RULE_sql_plus_command);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5180);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SOLIDUS:
				{
				setState(5173);
				match(SOLIDUS);
				}
				break;
			case WHENEVER:
				{
				setState(5174);
				whenever_command();
				}
				break;
			case EXIT:
				{
				setState(5175);
				exit_command();
				}
				break;
			case PROMPT:
				{
				setState(5176);
				prompt_command();
				}
				break;
			case SET:
				{
				setState(5177);
				set_command();
				}
				break;
			case SHOW:
				{
				setState(5178);
				show_errors_command();
				}
				break;
			case START_CMD:
				{
				setState(5179);
				start_command();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(5183);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,660,_ctx) ) {
			case 1:
				{
				setState(5182);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Whenever_commandContext extends ParserRuleContext {
		public TerminalNode WHENEVER() { return getToken(OracleSQLStatementParser.WHENEVER, 0); }
		public TerminalNode SQLERROR() { return getToken(OracleSQLStatementParser.SQLERROR, 0); }
		public TerminalNode OSERROR() { return getToken(OracleSQLStatementParser.OSERROR, 0); }
		public TerminalNode EXIT() { return getToken(OracleSQLStatementParser.EXIT, 0); }
		public TerminalNode CONTINUE() { return getToken(OracleSQLStatementParser.CONTINUE, 0); }
		public TerminalNode SUCCESS() { return getToken(OracleSQLStatementParser.SUCCESS, 0); }
		public TerminalNode FAILURE() { return getToken(OracleSQLStatementParser.FAILURE, 0); }
		public TerminalNode WARNING() { return getToken(OracleSQLStatementParser.WARNING, 0); }
		public TerminalNode COMMIT() { return getToken(OracleSQLStatementParser.COMMIT, 0); }
		public TerminalNode ROLLBACK() { return getToken(OracleSQLStatementParser.ROLLBACK, 0); }
		public TerminalNode NONE() { return getToken(OracleSQLStatementParser.NONE, 0); }
		public Whenever_commandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_whenever_command; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterWhenever_command(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitWhenever_command(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitWhenever_command(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Whenever_commandContext whenever_command() throws RecognitionException {
		Whenever_commandContext _localctx = new Whenever_commandContext(_ctx, getState());
		enterRule(_localctx, 656, RULE_whenever_command);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5185);
			match(WHENEVER);
			setState(5186);
			_la = _input.LA(1);
			if ( !(_la==OSERROR || _la==SQLERROR) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5192);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EXIT:
				{
				setState(5187);
				match(EXIT);
				setState(5188);
				_la = _input.LA(1);
				if ( !(_la==FAILURE || _la==SUCCESS || _la==WARNING) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5189);
				_la = _input.LA(1);
				if ( !(_la==COMMIT || _la==ROLLBACK) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case CONTINUE:
				{
				setState(5190);
				match(CONTINUE);
				setState(5191);
				_la = _input.LA(1);
				if ( !(_la==COMMIT || _la==NONE || _la==ROLLBACK) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_commandContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(OracleSQLStatementParser.SET, 0); }
		public List<Regular_idContext> regular_id() {
			return getRuleContexts(Regular_idContext.class);
		}
		public Regular_idContext regular_id(int i) {
			return getRuleContext(Regular_idContext.class,i);
		}
		public TerminalNode CHAR_STRING() { return getToken(OracleSQLStatementParser.CHAR_STRING, 0); }
		public TerminalNode ON() { return getToken(OracleSQLStatementParser.ON, 0); }
		public TerminalNode OFF() { return getToken(OracleSQLStatementParser.OFF, 0); }
		public NumericContext numeric() {
			return getRuleContext(NumericContext.class,0);
		}
		public Set_commandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_command; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterSet_command(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitSet_command(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitSet_command(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_commandContext set_command() throws RecognitionException {
		Set_commandContext _localctx = new Set_commandContext(_ctx, getState());
		enterRule(_localctx, 658, RULE_set_command);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5194);
			match(SET);
			setState(5195);
			regular_id();
			setState(5201);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,662,_ctx) ) {
			case 1:
				{
				setState(5196);
				match(CHAR_STRING);
				}
				break;
			case 2:
				{
				setState(5197);
				match(ON);
				}
				break;
			case 3:
				{
				setState(5198);
				match(OFF);
				}
				break;
			case 4:
				{
				setState(5199);
				numeric();
				}
				break;
			case 5:
				{
				setState(5200);
				regular_id();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Exit_commandContext extends ParserRuleContext {
		public TerminalNode EXIT() { return getToken(OracleSQLStatementParser.EXIT, 0); }
		public Exit_commandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exit_command; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterExit_command(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitExit_command(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitExit_command(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Exit_commandContext exit_command() throws RecognitionException {
		Exit_commandContext _localctx = new Exit_commandContext(_ctx, getState());
		enterRule(_localctx, 660, RULE_exit_command);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5203);
			match(EXIT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Prompt_commandContext extends ParserRuleContext {
		public TerminalNode PROMPT() { return getToken(OracleSQLStatementParser.PROMPT, 0); }
		public Prompt_commandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_prompt_command; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterPrompt_command(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitPrompt_command(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitPrompt_command(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Prompt_commandContext prompt_command() throws RecognitionException {
		Prompt_commandContext _localctx = new Prompt_commandContext(_ctx, getState());
		enterRule(_localctx, 662, RULE_prompt_command);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5205);
			match(PROMPT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Show_errors_commandContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(OracleSQLStatementParser.SHOW, 0); }
		public TerminalNode ERR() { return getToken(OracleSQLStatementParser.ERR, 0); }
		public TerminalNode ERRORS() { return getToken(OracleSQLStatementParser.ERRORS, 0); }
		public Show_errors_commandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_show_errors_command; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterShow_errors_command(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitShow_errors_command(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitShow_errors_command(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Show_errors_commandContext show_errors_command() throws RecognitionException {
		Show_errors_commandContext _localctx = new Show_errors_commandContext(_ctx, getState());
		enterRule(_localctx, 664, RULE_show_errors_command);
		try {
			setState(5211);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,663,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5207);
				match(SHOW);
				setState(5208);
				match(ERR);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5209);
				match(SHOW);
				setState(5210);
				match(ERRORS);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Start_commandContext extends ParserRuleContext {
		public TerminalNode START_CMD() { return getToken(OracleSQLStatementParser.START_CMD, 0); }
		public Start_commandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_start_command; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterStart_command(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitStart_command(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitStart_command(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Start_commandContext start_command() throws RecognitionException {
		Start_commandContext _localctx = new Start_commandContext(_ctx, getState());
		enterRule(_localctx, 666, RULE_start_command);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5213);
			match(START_CMD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Partition_extension_clauseContext extends ParserRuleContext {
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public TerminalNode SUBPARTITION() { return getToken(OracleSQLStatementParser.SUBPARTITION, 0); }
		public TerminalNode PARTITION() { return getToken(OracleSQLStatementParser.PARTITION, 0); }
		public TerminalNode FOR() { return getToken(OracleSQLStatementParser.FOR, 0); }
		public Partition_extension_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partition_extension_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterPartition_extension_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitPartition_extension_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitPartition_extension_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Partition_extension_clauseContext partition_extension_clause() throws RecognitionException {
		Partition_extension_clauseContext _localctx = new Partition_extension_clauseContext(_ctx, getState());
		enterRule(_localctx, 668, RULE_partition_extension_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5215);
			_la = _input.LA(1);
			if ( !(_la==PARTITION || _la==SUBPARTITION) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5217);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(5216);
				match(FOR);
				}
			}

			setState(5219);
			expression_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_aliasContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Alias_quoted_stringContext alias_quoted_string() {
			return getRuleContext(Alias_quoted_stringContext.class,0);
		}
		public TerminalNode AS() { return getToken(OracleSQLStatementParser.AS, 0); }
		public Column_aliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_alias; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterColumn_alias(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitColumn_alias(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitColumn_alias(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_aliasContext column_alias() throws RecognitionException {
		Column_aliasContext _localctx = new Column_aliasContext(_ctx, getState());
		enterRule(_localctx, 670, RULE_column_alias);
		int _la;
		try {
			setState(5229);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,667,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5222);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(5221);
					match(AS);
					}
				}

				setState(5226);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ABS:
				case ACOS:
				case ADD:
				case ADD_MONTHS:
				case AFTER:
				case AGENT:
				case AGGREGATE:
				case A_LETTER:
				case ANALYZE:
				case ARRAY:
				case ASCII:
				case ASCIISTR:
				case ASIN:
				case ASSOCIATE:
				case ATAN2:
				case ATAN:
				case AT:
				case ATTRIBUTE:
				case AUDIT:
				case AUTHID:
				case AUTO:
				case AUTOMATIC:
				case AUTONOMOUS_TRANSACTION:
				case BATCH:
				case BEFORE:
				case BFILE:
				case BFILENAME:
				case BINARY_DOUBLE:
				case BINARY_FLOAT:
				case BINARY_INTEGER:
				case BIN_TO_NUM:
				case BITAND:
				case BLOB:
				case BLOCK:
				case BODY:
				case BOOLEAN:
				case BOTH:
				case BULK:
				case BYTE:
				case CALL:
				case CANONICAL:
				case CARDINALITY:
				case CASCADE:
				case CASE:
				case CAST:
				case CEIL:
				case CHARACTER:
				case CHAR:
				case CHAR_CS:
				case CHARTOROWID:
				case CHR:
				case C_LETTER:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COALESCE:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPATIBILITY:
				case COMPILE:
				case COMPOSE:
				case COMPOUND:
				case CONCAT:
				case CONSTANT:
				case CONSTRAINT:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTENT:
				case CONTEXT:
				case CONTINUE:
				case CONVERT:
				case CORRUPT_XID_ALL:
				case CORRUPT_XID:
				case COS:
				case COSH:
				case COST:
				case COUNT:
				case CROSS:
				case CUBE:
				case CURRENT_DATE:
				case CURRENT_TIMESTAMP:
				case CURRENT_USER:
				case CURSOR:
				case CUSTOMDATUM:
				case CYCLE:
				case DATABASE:
				case DATA:
				case DAY:
				case DB_ROLE_CHANGE:
				case DBTIMEZONE:
				case DDL:
				case DEBUG:
				case DEC:
				case DECIMAL:
				case DECOMPOSE:
				case DECREMENT:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE:
				case DETERMINISTIC:
				case DIMENSION:
				case DISABLE:
				case DISASSOCIATE:
				case DOCUMENT:
				case DOUBLE:
				case DSINTERVAL_UNCONSTRAINED:
				case DUMP:
				case EACH:
				case ELEMENT:
				case EMPTY_BLOB:
				case EMPTY_CLOB:
				case EMPTY:
				case ENABLE:
				case ENCODING:
				case ENTITYESCAPING:
				case ERR:
				case ERRORS:
				case ESCAPE:
				case EVALNAME:
				case EXCEPTION:
				case EXCEPTION_INIT:
				case EXCEPTIONS:
				case EXCLUDE:
				case EXECUTE:
				case EXIT:
				case EXP:
				case EXPLAIN:
				case EXTERNAL:
				case EXTRACT:
				case FAILURE:
				case FINAL:
				case FIRST:
				case FIRST_VALUE:
				case FLOAT:
				case FLOOR:
				case FOLLOWING:
				case FOLLOWS:
				case FORALL:
				case FORCE:
				case FROM_TZ:
				case FULL:
				case FUNCTION:
				case GROUP_ID:
				case GROUPING:
				case HASH:
				case HEXTORAW:
				case HIDE:
				case HOUR:
				case IGNORE:
				case IMMEDIATE:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDENT:
				case INDEXED:
				case INDICATOR:
				case INDICES:
				case INFINITE:
				case INITCAP:
				case INLINE:
				case INNER:
				case INOUT:
				case INSTANTIABLE:
				case INSTEAD:
				case INSTR2:
				case INSTR4:
				case INSTRB:
				case INSTRC:
				case INSTR:
				case INTERFACE:
				case INTEGER:
				case INTERVAL:
				case INT:
				case INVALIDATE:
				case ISOLATION:
				case ITERATE:
				case JAVA:
				case JOIN:
				case KEEP:
				case KEY:
				case LANGUAGE:
				case LAST_DAY:
				case LAST:
				case LAST_VALUE:
				case LEADING:
				case LEFT:
				case LENGTH2:
				case LENGTH4:
				case LENGTHB:
				case LENGTHC:
				case LENGTH:
				case LEVEL:
				case LIBRARY:
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIMIT:
				case LN:
				case LNNVL:
				case LOCAL:
				case LOCALTIMESTAMP:
				case LOCKED:
				case LOG:
				case LOGOFF:
				case LOGON:
				case LONG:
				case LOOP:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAIN:
				case MAP:
				case MATCHED:
				case MAXVALUE:
				case MEASURES:
				case MEMBER:
				case MERGE:
				case MINUTE:
				case MINVALUE:
				case MLSLABEL:
				case MODEL:
				case MODIFY:
				case MOD:
				case MONTH:
				case MONTHS_BETWEEN:
				case MULTISET:
				case NAME:
				case NAN:
				case NANVL:
				case NATURAL:
				case NATURALN:
				case NAV:
				case NCHAR_CS:
				case NCHAR:
				case NCHR:
				case NCLOB:
				case NESTED:
				case NEW:
				case NEW_TIME:
				case NEXT_DAY:
				case NOAUDIT:
				case NOCOPY:
				case NOCYCLE:
				case NOENTITYESCAPING:
				case NONE:
				case NO:
				case NOSCHEMACHECK:
				case NULLIF:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case NUMTODSINTERVAL:
				case NUMTOYMINTERVAL:
				case NVARCHAR2:
				case NVL2:
				case OBJECT:
				case OFF:
				case OID:
				case OLD:
				case ONLY:
				case OPAQUE:
				case OPEN:
				case ORADATA:
				case ORDINALITY:
				case OSERROR:
				case OUTER:
				case OUT:
				case OVER:
				case OVERRIDING:
				case PACKAGE:
				case PARALLEL_ENABLE:
				case PARAMETERS:
				case PARENT:
				case PARTITION:
				case PASSING:
				case PATH:
				case PIPELINED:
				case PLAN:
				case PLS_INTEGER:
				case POSITIVEN:
				case POSITIVE:
				case POWER:
				case PRAGMA:
				case PRECEDING:
				case PRECISION:
				case PRESENT:
				case PRIOR:
				case PROCEDURE:
				case RAISE:
				case RANGE:
				case RAW:
				case RAWTOHEX:
				case READ:
				case REAL:
				case RECORD:
				case REFERENCE:
				case REFERENCING:
				case REF:
				case REGEXP_COUNT:
				case REGEXP_INSTR:
				case REGEXP_REPLACE:
				case REGEXP_SUBSTR:
				case REJECT:
				case RELIES_ON:
				case REMAINDER:
				case RENAME:
				case REPLACE:
				case RESPECT:
				case RESTRICT_REFERENCES:
				case RESULT_CACHE:
				case RESULT:
				case RETURNING:
				case RETURN:
				case REUSE:
				case REVERSE:
				case RIGHT:
				case ROLLBACK:
				case ROLLUP:
				case ROWID:
				case ROWNUM:
				case ROW:
				case ROWS:
				case RPAD:
				case RTRIM:
				case RULES:
				case SAMPLE:
				case SAVEPOINT:
				case SAVE:
				case SCHEMACHECK:
				case SCHEMA:
				case SCN:
				case SECOND:
				case SEED:
				case SEGMENT:
				case SELF:
				case SEQUENTIAL:
				case SERIALIZABLE:
				case SERIALLY_REUSABLE:
				case SERVERERROR:
				case SESSIONTIMEZONE:
				case SET:
				case SETS:
				case SETTINGS:
				case SHOW:
				case SHUTDOWN:
				case SIBLINGS:
				case SIGN:
				case SIGNTYPE:
				case SIMPLE_INTEGER:
				case SINGLE:
				case SINH:
				case SIN:
				case SKIP_:
				case SMALLINT:
				case SNAPSHOT:
				case SOME:
				case SOUNDEX:
				case SPECIFICATION:
				case SQLDATA:
				case SQLERROR:
				case SQRT:
				case STANDALONE:
				case STARTUP:
				case STATEMENT_ID:
				case STATEMENT:
				case STATIC:
				case STATISTICS:
				case STRING:
				case SUBMULTISET:
				case SUBPARTITION:
				case SUBSTITUTABLE:
				case SUBTYPE:
				case SUCCESS:
				case SUSPEND:
				case SYS_CONTEXT:
				case SYSDATE:
				case SYSTIMESTAMP:
				case TANH:
				case TAN:
				case TIMESTAMP_LTZ_UNCONSTRAINED:
				case TIMESTAMP:
				case TIMESTAMP_TZ_UNCONSTRAINED:
				case TIMESTAMP_UNCONSTRAINED:
				case TIME:
				case TIMEZONE_ABBR:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TIMEZONE_REGION:
				case TO_CLOB:
				case TO_DSINTERVAL:
				case TO_LOB:
				case TO_MULTI_BYTE:
				case TO_NCLOB:
				case TO_NUMBER:
				case TO_SINGLE_BYTE:
				case TO_TIMESTAMP:
				case TO_TIMESTAMP_TZ:
				case TO_YMINTERVAL:
				case TRAILING:
				case TRANSACTION:
				case TRANSLATE:
				case TREAT:
				case TRIGGER:
				case TRUNCATE:
				case TRUNC:
				case TYPE:
				case TZ_OFFSET:
				case UID:
				case UNBOUNDED:
				case UNDER:
				case UNLIMITED:
				case UNTIL:
				case UPDATED:
				case UPPER:
				case UPSERT:
				case UROWID:
				case USERENV:
				case USER:
				case USE:
				case VALIDATE:
				case VALUE:
				case VARCHAR2:
				case VARCHAR:
				case VARIABLE:
				case VARRAY:
				case VARYING:
				case VERSIONS:
				case VERSION:
				case VSIZE:
				case WAIT:
				case WARNING:
				case WELLFORMED:
				case WHENEVER:
				case WHILE:
				case WITHIN:
				case WORK:
				case WRITE:
				case XMLAGG:
				case XMLATTRIBUTES:
				case XMLCAST:
				case XMLCOLATTVAL:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case XML:
				case YEAR:
				case YES:
				case YMINTERVAL_UNCONSTRAINED:
				case ZONE:
				case PREDICTION:
				case PREDICTION_BOUNDS:
				case PREDICTION_COST:
				case PREDICTION_DETAILS:
				case PREDICTION_PROBABILITY:
				case PREDICTION_SET:
				case CUME_DIST:
				case DENSE_RANK:
				case LISTAGG:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case RANK:
				case AVG:
				case CORR:
				case COVAR_:
				case DECODE:
				case LAG:
				case LEAD:
				case MAX:
				case MEDIAN:
				case MIN:
				case NTILE:
				case NVL:
				case RATIO_TO_REPORT:
				case REGR_:
				case ROUND:
				case ROW_NUMBER:
				case SUBSTR:
				case TO_CHAR:
				case TRIM:
				case SUM:
				case STDDEV:
				case VAR_:
				case VARIANCE:
				case LEAST:
				case GREATEST:
				case TO_DATE:
				case DELIMITED_ID:
				case ASTERISK:
				case INTRODUCER:
				case REGULAR_ID:
					{
					setState(5224);
					identifier();
					}
					break;
				case NATIONAL_CHAR_STRING_LIT:
				case CHAR_STRING:
					{
					setState(5225);
					alias_quoted_string();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5228);
				match(AS);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_aliasContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Alias_quoted_stringContext alias_quoted_string() {
			return getRuleContext(Alias_quoted_stringContext.class,0);
		}
		public Table_aliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_alias; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterTable_alias(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitTable_alias(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitTable_alias(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_aliasContext table_alias() throws RecognitionException {
		Table_aliasContext _localctx = new Table_aliasContext(_ctx, getState());
		enterRule(_localctx, 672, RULE_table_alias);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5233);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ABS:
			case ACOS:
			case ADD:
			case ADD_MONTHS:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASCII:
			case ASCIISTR:
			case ASIN:
			case ASSOCIATE:
			case ATAN2:
			case ATAN:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BFILENAME:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BIN_TO_NUM:
			case BITAND:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CARDINALITY:
			case CASCADE:
			case CASE:
			case CAST:
			case CEIL:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHARTOROWID:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOSE:
			case COMPOUND:
			case CONCAT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COS:
			case COSH:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_DATE:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case DUMP:
			case EACH:
			case ELEMENT:
			case EMPTY_BLOB:
			case EMPTY_CLOB:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXP:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FLOOR:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FROM_TZ:
			case FULL:
			case FUNCTION:
			case GROUP_ID:
			case GROUPING:
			case HASH:
			case HEXTORAW:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INITCAP:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INSTR2:
			case INSTR4:
			case INSTRB:
			case INSTRC:
			case INSTR:
			case INTERFACE:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST_DAY:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LENGTH2:
			case LENGTH4:
			case LENGTHB:
			case LENGTHC:
			case LENGTH:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LN:
			case LNNVL:
			case LOCAL:
			case LOCALTIMESTAMP:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MOD:
			case MONTH:
			case MONTHS_BETWEEN:
			case MULTISET:
			case NAME:
			case NAN:
			case NANVL:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCHR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NEW_TIME:
			case NEXT_DAY:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLIF:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NUMTODSINTERVAL:
			case NUMTOYMINTERVAL:
			case NVARCHAR2:
			case NVL2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPAQUE:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case POWER:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case PROCEDURE:
			case RAISE:
			case RANGE:
			case RAW:
			case RAWTOHEX:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_REPLACE:
			case REGEXP_SUBSTR:
			case REJECT:
			case RELIES_ON:
			case REMAINDER:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROWNUM:
			case ROW:
			case ROWS:
			case RPAD:
			case RTRIM:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGN:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SINH:
			case SIN:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SOUNDEX:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case SQRT:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYS_CONTEXT:
			case SYSDATE:
			case SYSTIMESTAMP:
			case TANH:
			case TAN:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TO_CLOB:
			case TO_DSINTERVAL:
			case TO_LOB:
			case TO_MULTI_BYTE:
			case TO_NCLOB:
			case TO_NUMBER:
			case TO_SINGLE_BYTE:
			case TO_TIMESTAMP:
			case TO_TIMESTAMP_TZ:
			case TO_YMINTERVAL:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TRUNC:
			case TYPE:
			case TZ_OFFSET:
			case UID:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPPER:
			case UPSERT:
			case UROWID:
			case USERENV:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case VSIZE:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case DECODE:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case NVL:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROUND:
			case ROW_NUMBER:
			case SUBSTR:
			case TO_CHAR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case LEAST:
			case GREATEST:
			case TO_DATE:
			case DELIMITED_ID:
			case ASTERISK:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(5231);
				identifier();
				}
				break;
			case NATIONAL_CHAR_STRING_LIT:
			case CHAR_STRING:
				{
				setState(5232);
				alias_quoted_string();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alias_quoted_stringContext extends ParserRuleContext {
		public Quoted_stringContext quoted_string() {
			return getRuleContext(Quoted_stringContext.class,0);
		}
		public Alias_quoted_stringContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alias_quoted_string; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterAlias_quoted_string(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitAlias_quoted_string(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitAlias_quoted_string(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alias_quoted_stringContext alias_quoted_string() throws RecognitionException {
		Alias_quoted_stringContext _localctx = new Alias_quoted_stringContext(_ctx, getState());
		enterRule(_localctx, 674, RULE_alias_quoted_string);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5235);
			quoted_string();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Where_clauseContext extends ParserRuleContext {
		public TerminalNode WHERE() { return getToken(OracleSQLStatementParser.WHERE, 0); }
		public Current_of_clauseContext current_of_clause() {
			return getRuleContext(Current_of_clauseContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Where_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_where_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterWhere_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitWhere_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitWhere_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Where_clauseContext where_clause() throws RecognitionException {
		Where_clauseContext _localctx = new Where_clauseContext(_ctx, getState());
		enterRule(_localctx, 676, RULE_where_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5237);
			match(WHERE);
			setState(5240);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CURRENT:
				{
				setState(5238);
				current_of_clause();
				}
				break;
			case ABS:
			case ACOS:
			case ADD:
			case ADD_MONTHS:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ALL:
			case ANALYZE:
			case ANY:
			case ARRAY:
			case ASCII:
			case ASCIISTR:
			case ASIN:
			case ASSOCIATE:
			case ATAN2:
			case ATAN:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BFILENAME:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BIN_TO_NUM:
			case BITAND:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CARDINALITY:
			case CASCADE:
			case CASE:
			case CAST:
			case CEIL:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHARTOROWID:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOSE:
			case COMPOUND:
			case CONCAT:
			case CONNECT_BY_ROOT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COS:
			case COSH:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_DATE:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DISTINCT:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case DUMP:
			case EACH:
			case ELEMENT:
			case EMPTY_BLOB:
			case EMPTY_CLOB:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXP:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FALSE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FLOOR:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FROM_TZ:
			case FULL:
			case FUNCTION:
			case GROUP_ID:
			case GROUPING:
			case HASH:
			case HEXTORAW:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INITCAP:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INSTR2:
			case INSTR4:
			case INSTRB:
			case INSTRC:
			case INSTR:
			case INTERFACE:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST_DAY:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LENGTH2:
			case LENGTH4:
			case LENGTHB:
			case LENGTHC:
			case LENGTH:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LN:
			case LNNVL:
			case LOCAL:
			case LOCALTIMESTAMP:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MOD:
			case MONTH:
			case MONTHS_BETWEEN:
			case MULTISET:
			case NAME:
			case NAN:
			case NANVL:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCHR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NEW_TIME:
			case NEXT_DAY:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NOT:
			case NULLIF:
			case NULL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NUMTODSINTERVAL:
			case NUMTOYMINTERVAL:
			case NVARCHAR2:
			case NVL2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPAQUE:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case POWER:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case PROCEDURE:
			case RAISE:
			case RANGE:
			case RAW:
			case RAWTOHEX:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_REPLACE:
			case REGEXP_SUBSTR:
			case REJECT:
			case RELIES_ON:
			case REMAINDER:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROWNUM:
			case ROW:
			case ROWS:
			case RPAD:
			case RTRIM:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGN:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SINH:
			case SIN:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SOUNDEX:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case SQRT:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYS_CONTEXT:
			case SYSDATE:
			case SYSTIMESTAMP:
			case TANH:
			case TAN:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TO_CLOB:
			case TO_DSINTERVAL:
			case TO_LOB:
			case TO_MULTI_BYTE:
			case TO_NCLOB:
			case TO_NUMBER:
			case TO_SINGLE_BYTE:
			case TO_TIMESTAMP:
			case TO_TIMESTAMP_TZ:
			case TO_YMINTERVAL:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUE:
			case TRUNCATE:
			case TRUNC:
			case TYPE:
			case TZ_OFFSET:
			case UID:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPPER:
			case UPSERT:
			case UROWID:
			case USERENV:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case VSIZE:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case DECODE:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case NVL:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROUND:
			case ROW_NUMBER:
			case SUBSTR:
			case TO_CHAR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case LEAST:
			case GREATEST:
			case TO_DATE:
			case NATIONAL_CHAR_STRING_LIT:
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
			case CHAR_STRING:
			case DELIMITED_ID:
			case LEFT_PAREN:
			case ASTERISK:
			case PLUS_SIGN:
			case MINUS_SIGN:
			case BINDVAR:
			case COLON:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(5239);
				expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Current_of_clauseContext extends ParserRuleContext {
		public TerminalNode CURRENT() { return getToken(OracleSQLStatementParser.CURRENT, 0); }
		public TerminalNode OF() { return getToken(OracleSQLStatementParser.OF, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public Current_of_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_current_of_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterCurrent_of_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitCurrent_of_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitCurrent_of_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Current_of_clauseContext current_of_clause() throws RecognitionException {
		Current_of_clauseContext _localctx = new Current_of_clauseContext(_ctx, getState());
		enterRule(_localctx, 678, RULE_current_of_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5242);
			match(CURRENT);
			setState(5243);
			match(OF);
			setState(5244);
			cursor_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Into_clauseContext extends ParserRuleContext {
		public TerminalNode INTO() { return getToken(OracleSQLStatementParser.INTO, 0); }
		public List<Variable_nameContext> variable_name() {
			return getRuleContexts(Variable_nameContext.class);
		}
		public Variable_nameContext variable_name(int i) {
			return getRuleContext(Variable_nameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(OracleSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(OracleSQLStatementParser.COMMA, i);
		}
		public TerminalNode BULK() { return getToken(OracleSQLStatementParser.BULK, 0); }
		public TerminalNode COLLECT() { return getToken(OracleSQLStatementParser.COLLECT, 0); }
		public Into_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_into_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterInto_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitInto_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitInto_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Into_clauseContext into_clause() throws RecognitionException {
		Into_clauseContext _localctx = new Into_clauseContext(_ctx, getState());
		enterRule(_localctx, 680, RULE_into_clause);
		int _la;
		try {
			setState(5266);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INTO:
				enterOuterAlt(_localctx, 1);
				{
				setState(5246);
				match(INTO);
				setState(5247);
				variable_name();
				setState(5252);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5248);
					match(COMMA);
					setState(5249);
					variable_name();
					}
					}
					setState(5254);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case BULK:
				enterOuterAlt(_localctx, 2);
				{
				setState(5255);
				match(BULK);
				setState(5256);
				match(COLLECT);
				setState(5257);
				match(INTO);
				setState(5258);
				variable_name();
				setState(5263);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5259);
					match(COMMA);
					setState(5260);
					variable_name();
					}
					}
					setState(5265);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_column_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Quoted_stringContext quoted_string() {
			return getRuleContext(Quoted_stringContext.class,0);
		}
		public Xml_column_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_column_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterXml_column_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitXml_column_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitXml_column_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xml_column_nameContext xml_column_name() throws RecognitionException {
		Xml_column_nameContext _localctx = new Xml_column_nameContext(_ctx, getState());
		enterRule(_localctx, 682, RULE_xml_column_name);
		try {
			setState(5270);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ABS:
			case ACOS:
			case ADD:
			case ADD_MONTHS:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASCII:
			case ASCIISTR:
			case ASIN:
			case ASSOCIATE:
			case ATAN2:
			case ATAN:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BFILENAME:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BIN_TO_NUM:
			case BITAND:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CARDINALITY:
			case CASCADE:
			case CASE:
			case CAST:
			case CEIL:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHARTOROWID:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOSE:
			case COMPOUND:
			case CONCAT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COS:
			case COSH:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_DATE:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case DUMP:
			case EACH:
			case ELEMENT:
			case EMPTY_BLOB:
			case EMPTY_CLOB:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXP:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FLOOR:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FROM_TZ:
			case FULL:
			case FUNCTION:
			case GROUP_ID:
			case GROUPING:
			case HASH:
			case HEXTORAW:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INITCAP:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INSTR2:
			case INSTR4:
			case INSTRB:
			case INSTRC:
			case INSTR:
			case INTERFACE:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST_DAY:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LENGTH2:
			case LENGTH4:
			case LENGTHB:
			case LENGTHC:
			case LENGTH:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LN:
			case LNNVL:
			case LOCAL:
			case LOCALTIMESTAMP:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MOD:
			case MONTH:
			case MONTHS_BETWEEN:
			case MULTISET:
			case NAME:
			case NAN:
			case NANVL:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCHR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NEW_TIME:
			case NEXT_DAY:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLIF:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NUMTODSINTERVAL:
			case NUMTOYMINTERVAL:
			case NVARCHAR2:
			case NVL2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPAQUE:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case POWER:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case PROCEDURE:
			case RAISE:
			case RANGE:
			case RAW:
			case RAWTOHEX:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_REPLACE:
			case REGEXP_SUBSTR:
			case REJECT:
			case RELIES_ON:
			case REMAINDER:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROWNUM:
			case ROW:
			case ROWS:
			case RPAD:
			case RTRIM:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGN:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SINH:
			case SIN:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SOUNDEX:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case SQRT:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYS_CONTEXT:
			case SYSDATE:
			case SYSTIMESTAMP:
			case TANH:
			case TAN:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TO_CLOB:
			case TO_DSINTERVAL:
			case TO_LOB:
			case TO_MULTI_BYTE:
			case TO_NCLOB:
			case TO_NUMBER:
			case TO_SINGLE_BYTE:
			case TO_TIMESTAMP:
			case TO_TIMESTAMP_TZ:
			case TO_YMINTERVAL:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TRUNC:
			case TYPE:
			case TZ_OFFSET:
			case UID:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPPER:
			case UPSERT:
			case UROWID:
			case USERENV:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case VSIZE:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case DECODE:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case NVL:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROUND:
			case ROW_NUMBER:
			case SUBSTR:
			case TO_CHAR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case LEAST:
			case GREATEST:
			case TO_DATE:
			case DELIMITED_ID:
			case ASTERISK:
			case INTRODUCER:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(5268);
				identifier();
				}
				break;
			case NATIONAL_CHAR_STRING_LIT:
			case CHAR_STRING:
				enterOuterAlt(_localctx, 2);
				{
				setState(5269);
				quoted_string();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cost_class_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Cost_class_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cost_class_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterCost_class_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitCost_class_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitCost_class_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cost_class_nameContext cost_class_name() throws RecognitionException {
		Cost_class_nameContext _localctx = new Cost_class_nameContext(_ctx, getState());
		enterRule(_localctx, 684, RULE_cost_class_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5272);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Attribute_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Attribute_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_attribute_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterAttribute_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitAttribute_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitAttribute_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Attribute_nameContext attribute_name() throws RecognitionException {
		Attribute_nameContext _localctx = new Attribute_nameContext(_ctx, getState());
		enterRule(_localctx, 686, RULE_attribute_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5274);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Savepoint_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Savepoint_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_savepoint_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterSavepoint_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitSavepoint_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitSavepoint_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Savepoint_nameContext savepoint_name() throws RecognitionException {
		Savepoint_nameContext _localctx = new Savepoint_nameContext(_ctx, getState());
		enterRule(_localctx, 688, RULE_savepoint_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5276);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rollback_segment_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Rollback_segment_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rollback_segment_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterRollback_segment_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitRollback_segment_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitRollback_segment_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Rollback_segment_nameContext rollback_segment_name() throws RecognitionException {
		Rollback_segment_nameContext _localctx = new Rollback_segment_nameContext(_ctx, getState());
		enterRule(_localctx, 690, RULE_rollback_segment_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5278);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_var_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Table_var_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_var_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterTable_var_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitTable_var_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitTable_var_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_var_nameContext table_var_name() throws RecognitionException {
		Table_var_nameContext _localctx = new Table_var_nameContext(_ctx, getState());
		enterRule(_localctx, 692, RULE_table_var_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5280);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Schema_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Schema_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schema_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterSchema_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitSchema_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitSchema_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Schema_nameContext schema_name() throws RecognitionException {
		Schema_nameContext _localctx = new Schema_nameContext(_ctx, getState());
		enterRule(_localctx, 694, RULE_schema_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5282);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Routine_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public Link_nameContext link_name() {
			return getRuleContext(Link_nameContext.class,0);
		}
		public Routine_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_routine_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterRoutine_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitRoutine_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitRoutine_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Routine_nameContext routine_name() throws RecognitionException {
		Routine_nameContext _localctx = new Routine_nameContext(_ctx, getState());
		enterRule(_localctx, 696, RULE_routine_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5284);
			identifier();
			setState(5289);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PERIOD) {
				{
				{
				setState(5285);
				match(PERIOD);
				setState(5286);
				id_expression();
				}
				}
				setState(5291);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5294);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AT_SIGN) {
				{
				setState(5292);
				match(AT_SIGN);
				setState(5293);
				link_name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Package_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Package_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_package_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterPackage_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitPackage_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitPackage_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Package_nameContext package_name() throws RecognitionException {
		Package_nameContext _localctx = new Package_nameContext(_ctx, getState());
		enterRule(_localctx, 698, RULE_package_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5296);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Implementation_type_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Implementation_type_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_implementation_type_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterImplementation_type_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitImplementation_type_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitImplementation_type_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Implementation_type_nameContext implementation_type_name() throws RecognitionException {
		Implementation_type_nameContext _localctx = new Implementation_type_nameContext(_ctx, getState());
		enterRule(_localctx, 700, RULE_implementation_type_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5298);
			identifier();
			setState(5301);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PERIOD) {
				{
				setState(5299);
				match(PERIOD);
				setState(5300);
				id_expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Parameter_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Parameter_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parameter_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterParameter_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitParameter_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitParameter_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Parameter_nameContext parameter_name() throws RecognitionException {
		Parameter_nameContext _localctx = new Parameter_nameContext(_ctx, getState());
		enterRule(_localctx, 702, RULE_parameter_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5303);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Reference_model_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Reference_model_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reference_model_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterReference_model_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitReference_model_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitReference_model_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Reference_model_nameContext reference_model_name() throws RecognitionException {
		Reference_model_nameContext _localctx = new Reference_model_nameContext(_ctx, getState());
		enterRule(_localctx, 704, RULE_reference_model_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5305);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Main_model_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Main_model_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_main_model_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterMain_model_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitMain_model_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitMain_model_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Main_model_nameContext main_model_name() throws RecognitionException {
		Main_model_nameContext _localctx = new Main_model_nameContext(_ctx, getState());
		enterRule(_localctx, 706, RULE_main_model_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5307);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Aggregate_function_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public Aggregate_function_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggregate_function_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterAggregate_function_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitAggregate_function_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitAggregate_function_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Aggregate_function_nameContext aggregate_function_name() throws RecognitionException {
		Aggregate_function_nameContext _localctx = new Aggregate_function_nameContext(_ctx, getState());
		enterRule(_localctx, 708, RULE_aggregate_function_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5309);
			identifier();
			setState(5314);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PERIOD) {
				{
				{
				setState(5310);
				match(PERIOD);
				setState(5311);
				id_expression();
				}
				}
				setState(5316);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Query_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Query_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_query_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterQuery_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitQuery_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitQuery_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Query_nameContext query_name() throws RecognitionException {
		Query_nameContext _localctx = new Query_nameContext(_ctx, getState());
		enterRule(_localctx, 710, RULE_query_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5317);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Constraint_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public Link_nameContext link_name() {
			return getRuleContext(Link_nameContext.class,0);
		}
		public Constraint_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraint_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterConstraint_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitConstraint_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitConstraint_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Constraint_nameContext constraint_name() throws RecognitionException {
		Constraint_nameContext _localctx = new Constraint_nameContext(_ctx, getState());
		enterRule(_localctx, 712, RULE_constraint_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5319);
			identifier();
			setState(5324);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PERIOD) {
				{
				{
				setState(5320);
				match(PERIOD);
				setState(5321);
				id_expression();
				}
				}
				setState(5326);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5329);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AT_SIGN) {
				{
				setState(5327);
				match(AT_SIGN);
				setState(5328);
				link_name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Label_nameContext extends ParserRuleContext {
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Label_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_label_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterLabel_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitLabel_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitLabel_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Label_nameContext label_name() throws RecognitionException {
		Label_nameContext _localctx = new Label_nameContext(_ctx, getState());
		enterRule(_localctx, 714, RULE_label_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5331);
			id_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_nameContext extends ParserRuleContext {
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public Type_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterType_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitType_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitType_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Type_nameContext type_name() throws RecognitionException {
		Type_nameContext _localctx = new Type_nameContext(_ctx, getState());
		enterRule(_localctx, 716, RULE_type_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5333);
			id_expression();
			setState(5338);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PERIOD) {
				{
				{
				setState(5334);
				match(PERIOD);
				setState(5335);
				id_expression();
				}
				}
				setState(5340);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sequence_nameContext extends ParserRuleContext {
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public Sequence_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sequence_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterSequence_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitSequence_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitSequence_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sequence_nameContext sequence_name() throws RecognitionException {
		Sequence_nameContext _localctx = new Sequence_nameContext(_ctx, getState());
		enterRule(_localctx, 718, RULE_sequence_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5341);
			id_expression();
			setState(5346);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PERIOD) {
				{
				{
				setState(5342);
				match(PERIOD);
				setState(5343);
				id_expression();
				}
				}
				setState(5348);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Exception_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public Exception_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exception_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterException_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitException_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitException_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Exception_nameContext exception_name() throws RecognitionException {
		Exception_nameContext _localctx = new Exception_nameContext(_ctx, getState());
		enterRule(_localctx, 720, RULE_exception_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5349);
			identifier();
			setState(5354);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PERIOD) {
				{
				{
				setState(5350);
				match(PERIOD);
				setState(5351);
				id_expression();
				}
				}
				setState(5356);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Function_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterFunction_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitFunction_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitFunction_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Function_nameContext function_name() throws RecognitionException {
		Function_nameContext _localctx = new Function_nameContext(_ctx, getState());
		enterRule(_localctx, 722, RULE_function_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5357);
			identifier();
			setState(5360);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PERIOD) {
				{
				setState(5358);
				match(PERIOD);
				setState(5359);
				id_expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Procedure_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Procedure_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedure_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterProcedure_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitProcedure_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitProcedure_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Procedure_nameContext procedure_name() throws RecognitionException {
		Procedure_nameContext _localctx = new Procedure_nameContext(_ctx, getState());
		enterRule(_localctx, 724, RULE_procedure_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5362);
			identifier();
			setState(5365);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PERIOD) {
				{
				setState(5363);
				match(PERIOD);
				setState(5364);
				id_expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Constructor_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Constructor_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constructor_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterConstructor_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitConstructor_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitConstructor_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Constructor_nameContext constructor_name() throws RecognitionException {
		Constructor_nameContext _localctx = new Constructor_nameContext(_ctx, getState());
		enterRule(_localctx, 726, RULE_constructor_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5367);
			identifier();
			setState(5370);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PERIOD) {
				{
				setState(5368);
				match(PERIOD);
				setState(5369);
				id_expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Trigger_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Trigger_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trigger_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterTrigger_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitTrigger_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitTrigger_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Trigger_nameContext trigger_name() throws RecognitionException {
		Trigger_nameContext _localctx = new Trigger_nameContext(_ctx, getState());
		enterRule(_localctx, 728, RULE_trigger_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5372);
			identifier();
			setState(5375);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PERIOD) {
				{
				setState(5373);
				match(PERIOD);
				setState(5374);
				id_expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Variable_nameContext extends ParserRuleContext {
		public General_elementContext general_element() {
			return getRuleContext(General_elementContext.class,0);
		}
		public TerminalNode INTRODUCER() { return getToken(OracleSQLStatementParser.INTRODUCER, 0); }
		public Char_set_nameContext char_set_name() {
			return getRuleContext(Char_set_nameContext.class,0);
		}
		public Bind_variableContext bind_variable() {
			return getRuleContext(Bind_variableContext.class,0);
		}
		public Variable_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_variable_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterVariable_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitVariable_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitVariable_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Variable_nameContext variable_name() throws RecognitionException {
		Variable_nameContext _localctx = new Variable_nameContext(_ctx, getState());
		enterRule(_localctx, 730, RULE_variable_name);
		try {
			setState(5383);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ABS:
			case ACOS:
			case ADD:
			case ADD_MONTHS:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASCII:
			case ASCIISTR:
			case ASIN:
			case ASSOCIATE:
			case ATAN2:
			case ATAN:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BFILENAME:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BIN_TO_NUM:
			case BITAND:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CARDINALITY:
			case CASCADE:
			case CASE:
			case CAST:
			case CEIL:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHARTOROWID:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOSE:
			case COMPOUND:
			case CONCAT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COS:
			case COSH:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_DATE:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case DUMP:
			case EACH:
			case ELEMENT:
			case EMPTY_BLOB:
			case EMPTY_CLOB:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXP:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FLOOR:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FROM_TZ:
			case FULL:
			case FUNCTION:
			case GROUP_ID:
			case GROUPING:
			case HASH:
			case HEXTORAW:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INITCAP:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INSTR2:
			case INSTR4:
			case INSTRB:
			case INSTRC:
			case INSTR:
			case INTERFACE:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST_DAY:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LENGTH2:
			case LENGTH4:
			case LENGTHB:
			case LENGTHC:
			case LENGTH:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LN:
			case LNNVL:
			case LOCAL:
			case LOCALTIMESTAMP:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MOD:
			case MONTH:
			case MONTHS_BETWEEN:
			case MULTISET:
			case NAME:
			case NAN:
			case NANVL:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCHR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NEW_TIME:
			case NEXT_DAY:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLIF:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NUMTODSINTERVAL:
			case NUMTOYMINTERVAL:
			case NVARCHAR2:
			case NVL2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPAQUE:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case POWER:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case PROCEDURE:
			case RAISE:
			case RANGE:
			case RAW:
			case RAWTOHEX:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_REPLACE:
			case REGEXP_SUBSTR:
			case REJECT:
			case RELIES_ON:
			case REMAINDER:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROWNUM:
			case ROW:
			case ROWS:
			case RPAD:
			case RTRIM:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGN:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SINH:
			case SIN:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SOUNDEX:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case SQRT:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYS_CONTEXT:
			case SYSDATE:
			case SYSTIMESTAMP:
			case TANH:
			case TAN:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TO_CLOB:
			case TO_DSINTERVAL:
			case TO_LOB:
			case TO_MULTI_BYTE:
			case TO_NCLOB:
			case TO_NUMBER:
			case TO_SINGLE_BYTE:
			case TO_TIMESTAMP:
			case TO_TIMESTAMP_TZ:
			case TO_YMINTERVAL:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TRUNC:
			case TYPE:
			case TZ_OFFSET:
			case UID:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPPER:
			case UPSERT:
			case UROWID:
			case USERENV:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case VSIZE:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case DECODE:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case NVL:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROUND:
			case ROW_NUMBER:
			case SUBSTR:
			case TO_CHAR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case LEAST:
			case GREATEST:
			case TO_DATE:
			case DELIMITED_ID:
			case ASTERISK:
			case INTRODUCER:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(5379);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,687,_ctx) ) {
				case 1:
					{
					setState(5377);
					match(INTRODUCER);
					setState(5378);
					char_set_name();
					}
					break;
				}
				setState(5381);
				general_element();
				}
				break;
			case BINDVAR:
			case COLON:
				enterOuterAlt(_localctx, 2);
				{
				setState(5382);
				bind_variable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Index_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Index_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterIndex_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitIndex_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitIndex_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Index_nameContext index_name() throws RecognitionException {
		Index_nameContext _localctx = new Index_nameContext(_ctx, getState());
		enterRule(_localctx, 732, RULE_index_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5385);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cursor_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Bind_variableContext bind_variable() {
			return getRuleContext(Bind_variableContext.class,0);
		}
		public Cursor_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterCursor_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitCursor_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitCursor_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cursor_nameContext cursor_name() throws RecognitionException {
		Cursor_nameContext _localctx = new Cursor_nameContext(_ctx, getState());
		enterRule(_localctx, 734, RULE_cursor_name);
		try {
			setState(5389);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ABS:
			case ACOS:
			case ADD:
			case ADD_MONTHS:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASCII:
			case ASCIISTR:
			case ASIN:
			case ASSOCIATE:
			case ATAN2:
			case ATAN:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BFILENAME:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BIN_TO_NUM:
			case BITAND:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CARDINALITY:
			case CASCADE:
			case CASE:
			case CAST:
			case CEIL:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHARTOROWID:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOSE:
			case COMPOUND:
			case CONCAT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COS:
			case COSH:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_DATE:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case DUMP:
			case EACH:
			case ELEMENT:
			case EMPTY_BLOB:
			case EMPTY_CLOB:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXP:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FLOOR:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FROM_TZ:
			case FULL:
			case FUNCTION:
			case GROUP_ID:
			case GROUPING:
			case HASH:
			case HEXTORAW:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INITCAP:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INSTR2:
			case INSTR4:
			case INSTRB:
			case INSTRC:
			case INSTR:
			case INTERFACE:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST_DAY:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LENGTH2:
			case LENGTH4:
			case LENGTHB:
			case LENGTHC:
			case LENGTH:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LN:
			case LNNVL:
			case LOCAL:
			case LOCALTIMESTAMP:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MOD:
			case MONTH:
			case MONTHS_BETWEEN:
			case MULTISET:
			case NAME:
			case NAN:
			case NANVL:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCHR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NEW_TIME:
			case NEXT_DAY:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLIF:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NUMTODSINTERVAL:
			case NUMTOYMINTERVAL:
			case NVARCHAR2:
			case NVL2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPAQUE:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case POWER:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case PROCEDURE:
			case RAISE:
			case RANGE:
			case RAW:
			case RAWTOHEX:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_REPLACE:
			case REGEXP_SUBSTR:
			case REJECT:
			case RELIES_ON:
			case REMAINDER:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROWNUM:
			case ROW:
			case ROWS:
			case RPAD:
			case RTRIM:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGN:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SINH:
			case SIN:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SOUNDEX:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case SQRT:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYS_CONTEXT:
			case SYSDATE:
			case SYSTIMESTAMP:
			case TANH:
			case TAN:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TO_CLOB:
			case TO_DSINTERVAL:
			case TO_LOB:
			case TO_MULTI_BYTE:
			case TO_NCLOB:
			case TO_NUMBER:
			case TO_SINGLE_BYTE:
			case TO_TIMESTAMP:
			case TO_TIMESTAMP_TZ:
			case TO_YMINTERVAL:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TRUNC:
			case TYPE:
			case TZ_OFFSET:
			case UID:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPPER:
			case UPSERT:
			case UROWID:
			case USERENV:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case VSIZE:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case DECODE:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case NVL:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROUND:
			case ROW_NUMBER:
			case SUBSTR:
			case TO_CHAR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case LEAST:
			case GREATEST:
			case TO_DATE:
			case DELIMITED_ID:
			case ASTERISK:
			case INTRODUCER:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(5387);
				identifier();
				}
				break;
			case BINDVAR:
			case COLON:
				enterOuterAlt(_localctx, 2);
				{
				setState(5388);
				bind_variable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Record_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Bind_variableContext bind_variable() {
			return getRuleContext(Bind_variableContext.class,0);
		}
		public Record_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_record_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterRecord_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitRecord_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitRecord_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Record_nameContext record_name() throws RecognitionException {
		Record_nameContext _localctx = new Record_nameContext(_ctx, getState());
		enterRule(_localctx, 736, RULE_record_name);
		try {
			setState(5393);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ABS:
			case ACOS:
			case ADD:
			case ADD_MONTHS:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASCII:
			case ASCIISTR:
			case ASIN:
			case ASSOCIATE:
			case ATAN2:
			case ATAN:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BFILENAME:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BIN_TO_NUM:
			case BITAND:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CARDINALITY:
			case CASCADE:
			case CASE:
			case CAST:
			case CEIL:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHARTOROWID:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOSE:
			case COMPOUND:
			case CONCAT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COS:
			case COSH:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_DATE:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case DUMP:
			case EACH:
			case ELEMENT:
			case EMPTY_BLOB:
			case EMPTY_CLOB:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXP:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FLOOR:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FROM_TZ:
			case FULL:
			case FUNCTION:
			case GROUP_ID:
			case GROUPING:
			case HASH:
			case HEXTORAW:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INITCAP:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INSTR2:
			case INSTR4:
			case INSTRB:
			case INSTRC:
			case INSTR:
			case INTERFACE:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST_DAY:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LENGTH2:
			case LENGTH4:
			case LENGTHB:
			case LENGTHC:
			case LENGTH:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LN:
			case LNNVL:
			case LOCAL:
			case LOCALTIMESTAMP:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MOD:
			case MONTH:
			case MONTHS_BETWEEN:
			case MULTISET:
			case NAME:
			case NAN:
			case NANVL:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCHR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NEW_TIME:
			case NEXT_DAY:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLIF:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NUMTODSINTERVAL:
			case NUMTOYMINTERVAL:
			case NVARCHAR2:
			case NVL2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPAQUE:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case POWER:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case PROCEDURE:
			case RAISE:
			case RANGE:
			case RAW:
			case RAWTOHEX:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_REPLACE:
			case REGEXP_SUBSTR:
			case REJECT:
			case RELIES_ON:
			case REMAINDER:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROWNUM:
			case ROW:
			case ROWS:
			case RPAD:
			case RTRIM:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGN:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SINH:
			case SIN:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SOUNDEX:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case SQRT:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYS_CONTEXT:
			case SYSDATE:
			case SYSTIMESTAMP:
			case TANH:
			case TAN:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TO_CLOB:
			case TO_DSINTERVAL:
			case TO_LOB:
			case TO_MULTI_BYTE:
			case TO_NCLOB:
			case TO_NUMBER:
			case TO_SINGLE_BYTE:
			case TO_TIMESTAMP:
			case TO_TIMESTAMP_TZ:
			case TO_YMINTERVAL:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TRUNC:
			case TYPE:
			case TZ_OFFSET:
			case UID:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPPER:
			case UPSERT:
			case UROWID:
			case USERENV:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case VSIZE:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case DECODE:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case NVL:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROUND:
			case ROW_NUMBER:
			case SUBSTR:
			case TO_CHAR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case LEAST:
			case GREATEST:
			case TO_DATE:
			case DELIMITED_ID:
			case ASTERISK:
			case INTRODUCER:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(5391);
				identifier();
				}
				break;
			case BINDVAR:
			case COLON:
				enterOuterAlt(_localctx, 2);
				{
				setState(5392);
				bind_variable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Collection_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Collection_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collection_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterCollection_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitCollection_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitCollection_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Collection_nameContext collection_name() throws RecognitionException {
		Collection_nameContext _localctx = new Collection_nameContext(_ctx, getState());
		enterRule(_localctx, 738, RULE_collection_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5395);
			identifier();
			setState(5398);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PERIOD) {
				{
				setState(5396);
				match(PERIOD);
				setState(5397);
				id_expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Link_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Link_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_link_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterLink_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitLink_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitLink_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Link_nameContext link_name() throws RecognitionException {
		Link_nameContext _localctx = new Link_nameContext(_ctx, getState());
		enterRule(_localctx, 740, RULE_link_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5400);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public Column_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterColumn_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitColumn_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitColumn_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_nameContext column_name() throws RecognitionException {
		Column_nameContext _localctx = new Column_nameContext(_ctx, getState());
		enterRule(_localctx, 742, RULE_column_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5402);
			identifier();
			setState(5407);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PERIOD) {
				{
				{
				setState(5403);
				match(PERIOD);
				setState(5404);
				id_expression();
				}
				}
				setState(5409);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Tableview_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Link_nameContext link_name() {
			return getRuleContext(Link_nameContext.class,0);
		}
		public Partition_extension_clauseContext partition_extension_clause() {
			return getRuleContext(Partition_extension_clauseContext.class,0);
		}
		public Tableview_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableview_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterTableview_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitTableview_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitTableview_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Tableview_nameContext tableview_name() throws RecognitionException {
		Tableview_nameContext _localctx = new Tableview_nameContext(_ctx, getState());
		enterRule(_localctx, 744, RULE_tableview_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5410);
			identifier();
			setState(5413);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,693,_ctx) ) {
			case 1:
				{
				setState(5411);
				match(PERIOD);
				setState(5412);
				id_expression();
				}
				break;
			}
			setState(5418);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,694,_ctx) ) {
			case 1:
				{
				setState(5415);
				match(AT_SIGN);
				setState(5416);
				link_name();
				}
				break;
			case 2:
				{
				setState(5417);
				partition_extension_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Char_set_nameContext extends ParserRuleContext {
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public TerminalNode PERCENT_CHARSET() { return getToken(OracleSQLStatementParser.PERCENT_CHARSET, 0); }
		public Char_set_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_char_set_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterChar_set_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitChar_set_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitChar_set_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Char_set_nameContext char_set_name() throws RecognitionException {
		Char_set_nameContext _localctx = new Char_set_nameContext(_ctx, getState());
		enterRule(_localctx, 746, RULE_char_set_name);
		int _la;
		try {
			setState(5431);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,696,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5420);
				id_expression();
				setState(5425);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==PERIOD) {
					{
					{
					setState(5421);
					match(PERIOD);
					setState(5422);
					id_expression();
					}
					}
					setState(5427);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5428);
				id_expression();
				setState(5429);
				match(PERCENT_CHARSET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Synonym_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Synonym_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_synonym_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterSynonym_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitSynonym_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitSynonym_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Synonym_nameContext synonym_name() throws RecognitionException {
		Synonym_nameContext _localctx = new Synonym_nameContext(_ctx, getState());
		enterRule(_localctx, 748, RULE_synonym_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5433);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Schema_object_nameContext extends ParserRuleContext {
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Schema_object_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schema_object_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterSchema_object_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitSchema_object_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitSchema_object_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Schema_object_nameContext schema_object_name() throws RecognitionException {
		Schema_object_nameContext _localctx = new Schema_object_nameContext(_ctx, getState());
		enterRule(_localctx, 750, RULE_schema_object_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5435);
			id_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Keep_clauseContext extends ParserRuleContext {
		public TerminalNode KEEP() { return getToken(OracleSQLStatementParser.KEEP, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(OracleSQLStatementParser.LEFT_PAREN, 0); }
		public TerminalNode DENSE_RANK() { return getToken(OracleSQLStatementParser.DENSE_RANK, 0); }
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(OracleSQLStatementParser.RIGHT_PAREN, 0); }
		public TerminalNode FIRST() { return getToken(OracleSQLStatementParser.FIRST, 0); }
		public TerminalNode LAST() { return getToken(OracleSQLStatementParser.LAST, 0); }
		public Over_clauseContext over_clause() {
			return getRuleContext(Over_clauseContext.class,0);
		}
		public Keep_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_keep_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterKeep_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitKeep_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitKeep_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Keep_clauseContext keep_clause() throws RecognitionException {
		Keep_clauseContext _localctx = new Keep_clauseContext(_ctx, getState());
		enterRule(_localctx, 752, RULE_keep_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5437);
			match(KEEP);
			setState(5438);
			match(LEFT_PAREN);
			setState(5439);
			match(DENSE_RANK);
			setState(5440);
			_la = _input.LA(1);
			if ( !(_la==FIRST || _la==LAST) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5441);
			order_by_clause();
			setState(5442);
			match(RIGHT_PAREN);
			setState(5444);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,697,_ctx) ) {
			case 1:
				{
				setState(5443);
				over_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CommaContext extends ParserRuleContext {
		public TerminalNode COMMA() { return getToken(OracleSQLStatementParser.COMMA, 0); }
		public CommaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comma; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterComma(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitComma(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitComma(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CommaContext comma() throws RecognitionException {
		CommaContext _localctx = new CommaContext(_ctx, getState());
		enterRule(_localctx, 754, RULE_comma);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5446);
			match(COMMA);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_argumentContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(OracleSQLStatementParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(OracleSQLStatementParser.RIGHT_PAREN, 0); }
		public List<ArgumentContext> argument() {
			return getRuleContexts(ArgumentContext.class);
		}
		public ArgumentContext argument(int i) {
			return getRuleContext(ArgumentContext.class,i);
		}
		public List<CommaContext> comma() {
			return getRuleContexts(CommaContext.class);
		}
		public CommaContext comma(int i) {
			return getRuleContext(CommaContext.class,i);
		}
		public Keep_clauseContext keep_clause() {
			return getRuleContext(Keep_clauseContext.class,0);
		}
		public Function_argumentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_argument; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterFunction_argument(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitFunction_argument(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitFunction_argument(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Function_argumentContext function_argument() throws RecognitionException {
		Function_argumentContext _localctx = new Function_argumentContext(_ctx, getState());
		enterRule(_localctx, 756, RULE_function_argument);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5448);
			match(LEFT_PAREN);
			setState(5450);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABS) | (1L << ACOS) | (1L << ADD) | (1L << ADD_MONTHS) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASCII) | (1L << ASCIISTR) | (1L << ASIN) | (1L << ASSOCIATE) | (1L << ATAN2) | (1L << ATAN) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BFILENAME) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BIN_TO_NUM) | (1L << BITAND) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CARDINALITY) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CEIL) | (1L << CHARACTER) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARTOROWID) | (1L << CHR) | (1L << C_LETTER))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOSE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONCAT - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COS - 64)) | (1L << (COSH - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_DATE - 64)) | (1L << (CURRENT_TIMESTAMP - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (DIMENSION - 128)) | (1L << (DISABLE - 128)) | (1L << (DISASSOCIATE - 128)) | (1L << (DISTINCT - 128)) | (1L << (DOCUMENT - 128)) | (1L << (DOUBLE - 128)) | (1L << (DSINTERVAL_UNCONSTRAINED - 128)) | (1L << (DUMP - 128)) | (1L << (EACH - 128)) | (1L << (ELEMENT - 128)) | (1L << (EMPTY_BLOB - 128)) | (1L << (EMPTY_CLOB - 128)) | (1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERR - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXISTS - 128)) | (1L << (EXIT - 128)) | (1L << (EXP - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FALSE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FLOOR - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FROM_TZ - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUP_ID - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HEXTORAW - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (IGNORE - 193)) | (1L << (IMMEDIATE - 193)) | (1L << (INCLUDE - 193)) | (1L << (INCLUDING - 193)) | (1L << (INCREMENT - 193)) | (1L << (INDENT - 193)) | (1L << (INDEXED - 193)) | (1L << (INDICATOR - 193)) | (1L << (INDICES - 193)) | (1L << (INFINITE - 193)) | (1L << (INITCAP - 193)) | (1L << (INLINE - 193)) | (1L << (INNER - 193)) | (1L << (INOUT - 193)) | (1L << (INSTANTIABLE - 193)) | (1L << (INSTEAD - 193)) | (1L << (INSTR2 - 193)) | (1L << (INSTR4 - 193)) | (1L << (INSTRB - 193)) | (1L << (INSTRC - 193)) | (1L << (INSTR - 193)) | (1L << (INTERFACE - 193)) | (1L << (INTEGER - 193)) | (1L << (INTERVAL - 193)) | (1L << (INT - 193)) | (1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (KEY - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST_DAY - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LENGTH2 - 193)) | (1L << (LENGTH4 - 193)) | (1L << (LENGTHB - 193)) | (1L << (LENGTHC - 193)) | (1L << (LENGTH - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LN - 193)) | (1L << (LNNVL - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCALTIMESTAMP - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (LOGON - 257)) | (1L << (LONG - 257)) | (1L << (LOOP - 257)) | (1L << (LOWER - 257)) | (1L << (LPAD - 257)) | (1L << (LTRIM - 257)) | (1L << (MAIN - 257)) | (1L << (MAP - 257)) | (1L << (MATCHED - 257)) | (1L << (MAXVALUE - 257)) | (1L << (MEASURES - 257)) | (1L << (MEMBER - 257)) | (1L << (MERGE - 257)) | (1L << (MINUTE - 257)) | (1L << (MINVALUE - 257)) | (1L << (MLSLABEL - 257)) | (1L << (MODEL - 257)) | (1L << (MODIFY - 257)) | (1L << (MOD - 257)) | (1L << (MONTH - 257)) | (1L << (MONTHS_BETWEEN - 257)) | (1L << (MULTISET - 257)) | (1L << (NAME - 257)) | (1L << (NAN - 257)) | (1L << (NANVL - 257)) | (1L << (NATURAL - 257)) | (1L << (NATURALN - 257)) | (1L << (NAV - 257)) | (1L << (NCHAR_CS - 257)) | (1L << (NCHAR - 257)) | (1L << (NCHR - 257)) | (1L << (NCLOB - 257)) | (1L << (NESTED - 257)) | (1L << (NEW - 257)) | (1L << (NEW_TIME - 257)) | (1L << (NEXT_DAY - 257)) | (1L << (NOAUDIT - 257)) | (1L << (NOCOPY - 257)) | (1L << (NOCYCLE - 257)) | (1L << (NOENTITYESCAPING - 257)) | (1L << (NONE - 257)) | (1L << (NO - 257)) | (1L << (NOSCHEMACHECK - 257)) | (1L << (NOT - 257)) | (1L << (NULLIF - 257)) | (1L << (NULL - 257)) | (1L << (NULLS - 257)) | (1L << (NUMBER - 257)) | (1L << (NUMERIC - 257)) | (1L << (NUMTODSINTERVAL - 257)) | (1L << (NUMTOYMINTERVAL - 257)) | (1L << (NVARCHAR2 - 257)) | (1L << (NVL2 - 257)) | (1L << (OBJECT - 257)) | (1L << (OFF - 257)))) != 0) || ((((_la - 321)) & ~0x3f) == 0 && ((1L << (_la - 321)) & ((1L << (OID - 321)) | (1L << (OLD - 321)) | (1L << (ONLY - 321)) | (1L << (OPAQUE - 321)) | (1L << (OPEN - 321)) | (1L << (ORADATA - 321)) | (1L << (ORDINALITY - 321)) | (1L << (OSERROR - 321)) | (1L << (OUTER - 321)) | (1L << (OUT - 321)) | (1L << (OVER - 321)) | (1L << (OVERRIDING - 321)) | (1L << (PACKAGE - 321)) | (1L << (PARALLEL_ENABLE - 321)) | (1L << (PARAMETERS - 321)) | (1L << (PARENT - 321)) | (1L << (PARTITION - 321)) | (1L << (PASSING - 321)) | (1L << (PATH - 321)) | (1L << (PIPELINED - 321)) | (1L << (PLAN - 321)) | (1L << (PLS_INTEGER - 321)) | (1L << (POSITIVEN - 321)) | (1L << (POSITIVE - 321)) | (1L << (POWER - 321)) | (1L << (PRAGMA - 321)) | (1L << (PRECEDING - 321)) | (1L << (PRECISION - 321)) | (1L << (PRESENT - 321)) | (1L << (PRIOR - 321)) | (1L << (PROCEDURE - 321)) | (1L << (RAISE - 321)) | (1L << (RANGE - 321)) | (1L << (RAW - 321)) | (1L << (RAWTOHEX - 321)) | (1L << (READ - 321)) | (1L << (REAL - 321)) | (1L << (RECORD - 321)) | (1L << (REFERENCE - 321)) | (1L << (REFERENCING - 321)) | (1L << (REF - 321)) | (1L << (REGEXP_COUNT - 321)) | (1L << (REGEXP_INSTR - 321)) | (1L << (REGEXP_REPLACE - 321)) | (1L << (REGEXP_SUBSTR - 321)) | (1L << (REJECT - 321)) | (1L << (RELIES_ON - 321)) | (1L << (REMAINDER - 321)))) != 0) || ((((_la - 385)) & ~0x3f) == 0 && ((1L << (_la - 385)) & ((1L << (RENAME - 385)) | (1L << (REPLACE - 385)) | (1L << (RESPECT - 385)) | (1L << (RESTRICT_REFERENCES - 385)) | (1L << (RESULT_CACHE - 385)) | (1L << (RESULT - 385)) | (1L << (RETURNING - 385)) | (1L << (RETURN - 385)) | (1L << (REUSE - 385)) | (1L << (REVERSE - 385)) | (1L << (RIGHT - 385)) | (1L << (ROLLBACK - 385)) | (1L << (ROLLUP - 385)) | (1L << (ROWID - 385)) | (1L << (ROWNUM - 385)) | (1L << (ROW - 385)) | (1L << (ROWS - 385)) | (1L << (RPAD - 385)) | (1L << (RTRIM - 385)) | (1L << (RULES - 385)) | (1L << (SAMPLE - 385)) | (1L << (SAVEPOINT - 385)) | (1L << (SAVE - 385)) | (1L << (SCHEMACHECK - 385)) | (1L << (SCHEMA - 385)) | (1L << (SCN - 385)) | (1L << (SECOND - 385)) | (1L << (SEED - 385)) | (1L << (SEGMENT - 385)) | (1L << (SELF - 385)) | (1L << (SEQUENTIAL - 385)) | (1L << (SERIALIZABLE - 385)) | (1L << (SERIALLY_REUSABLE - 385)) | (1L << (SERVERERROR - 385)) | (1L << (SESSIONTIMEZONE - 385)) | (1L << (SET - 385)) | (1L << (SETS - 385)) | (1L << (SETTINGS - 385)) | (1L << (SHOW - 385)) | (1L << (SHUTDOWN - 385)) | (1L << (SIBLINGS - 385)) | (1L << (SIGN - 385)) | (1L << (SIGNTYPE - 385)) | (1L << (SIMPLE_INTEGER - 385)) | (1L << (SINGLE - 385)) | (1L << (SINH - 385)) | (1L << (SIN - 385)) | (1L << (SKIP_ - 385)) | (1L << (SMALLINT - 385)) | (1L << (SNAPSHOT - 385)) | (1L << (SOME - 385)) | (1L << (SOUNDEX - 385)) | (1L << (SPECIFICATION - 385)) | (1L << (SQLDATA - 385)) | (1L << (SQLERROR - 385)) | (1L << (SQRT - 385)) | (1L << (STANDALONE - 385)))) != 0) || ((((_la - 449)) & ~0x3f) == 0 && ((1L << (_la - 449)) & ((1L << (STARTUP - 449)) | (1L << (STATEMENT_ID - 449)) | (1L << (STATEMENT - 449)) | (1L << (STATIC - 449)) | (1L << (STATISTICS - 449)) | (1L << (STRING - 449)) | (1L << (SUBMULTISET - 449)) | (1L << (SUBPARTITION - 449)) | (1L << (SUBSTITUTABLE - 449)) | (1L << (SUBTYPE - 449)) | (1L << (SUCCESS - 449)) | (1L << (SUSPEND - 449)) | (1L << (SYS_CONTEXT - 449)) | (1L << (SYSDATE - 449)) | (1L << (SYSTIMESTAMP - 449)) | (1L << (TANH - 449)) | (1L << (TAN - 449)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 449)) | (1L << (TIMESTAMP - 449)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 449)) | (1L << (TIMESTAMP_UNCONSTRAINED - 449)) | (1L << (TIME - 449)) | (1L << (TIMEZONE_ABBR - 449)) | (1L << (TIMEZONE_HOUR - 449)) | (1L << (TIMEZONE_MINUTE - 449)) | (1L << (TIMEZONE_REGION - 449)) | (1L << (TO_CLOB - 449)) | (1L << (TO_DSINTERVAL - 449)) | (1L << (TO_LOB - 449)) | (1L << (TO_MULTI_BYTE - 449)) | (1L << (TO_NCLOB - 449)) | (1L << (TO_NUMBER - 449)) | (1L << (TO_SINGLE_BYTE - 449)) | (1L << (TO_TIMESTAMP - 449)) | (1L << (TO_TIMESTAMP_TZ - 449)) | (1L << (TO_YMINTERVAL - 449)) | (1L << (TRAILING - 449)) | (1L << (TRANSACTION - 449)) | (1L << (TRANSLATE - 449)) | (1L << (TREAT - 449)) | (1L << (TRIGGER - 449)) | (1L << (TRUE - 449)) | (1L << (TRUNCATE - 449)) | (1L << (TRUNC - 449)) | (1L << (TYPE - 449)) | (1L << (TZ_OFFSET - 449)) | (1L << (UID - 449)) | (1L << (UNBOUNDED - 449)) | (1L << (UNDER - 449)) | (1L << (UNLIMITED - 449)) | (1L << (UNTIL - 449)) | (1L << (UPDATED - 449)))) != 0) || ((((_la - 513)) & ~0x3f) == 0 && ((1L << (_la - 513)) & ((1L << (UPPER - 513)) | (1L << (UPSERT - 513)) | (1L << (UROWID - 513)) | (1L << (USERENV - 513)) | (1L << (USER - 513)) | (1L << (USE - 513)) | (1L << (VALIDATE - 513)) | (1L << (VALUE - 513)) | (1L << (VARCHAR2 - 513)) | (1L << (VARCHAR - 513)) | (1L << (VARIABLE - 513)) | (1L << (VARRAY - 513)) | (1L << (VARYING - 513)) | (1L << (VERSIONS - 513)) | (1L << (VERSION - 513)) | (1L << (VSIZE - 513)) | (1L << (WAIT - 513)) | (1L << (WARNING - 513)) | (1L << (WELLFORMED - 513)) | (1L << (WHENEVER - 513)) | (1L << (WHILE - 513)) | (1L << (WITHIN - 513)) | (1L << (WORK - 513)) | (1L << (WRITE - 513)) | (1L << (XMLAGG - 513)) | (1L << (XMLATTRIBUTES - 513)) | (1L << (XMLCAST - 513)) | (1L << (XMLCOLATTVAL - 513)) | (1L << (XMLELEMENT - 513)) | (1L << (XMLEXISTS - 513)) | (1L << (XMLFOREST - 513)) | (1L << (XMLNAMESPACES - 513)) | (1L << (XMLPARSE - 513)) | (1L << (XMLPI - 513)) | (1L << (XMLQUERY - 513)) | (1L << (XMLROOT - 513)) | (1L << (XMLSERIALIZE - 513)) | (1L << (XMLTABLE - 513)) | (1L << (XML - 513)) | (1L << (YEAR - 513)) | (1L << (YES - 513)) | (1L << (YMINTERVAL_UNCONSTRAINED - 513)) | (1L << (ZONE - 513)) | (1L << (PREDICTION - 513)) | (1L << (PREDICTION_BOUNDS - 513)) | (1L << (PREDICTION_COST - 513)) | (1L << (PREDICTION_DETAILS - 513)) | (1L << (PREDICTION_PROBABILITY - 513)) | (1L << (PREDICTION_SET - 513)) | (1L << (CUME_DIST - 513)) | (1L << (DENSE_RANK - 513)) | (1L << (LISTAGG - 513)) | (1L << (PERCENT_RANK - 513)) | (1L << (PERCENTILE_CONT - 513)) | (1L << (PERCENTILE_DISC - 513)) | (1L << (RANK - 513)))) != 0) || ((((_la - 577)) & ~0x3f) == 0 && ((1L << (_la - 577)) & ((1L << (AVG - 577)) | (1L << (CORR - 577)) | (1L << (COVAR_ - 577)) | (1L << (DECODE - 577)) | (1L << (LAG - 577)) | (1L << (LEAD - 577)) | (1L << (MAX - 577)) | (1L << (MEDIAN - 577)) | (1L << (MIN - 577)) | (1L << (NTILE - 577)) | (1L << (NVL - 577)) | (1L << (RATIO_TO_REPORT - 577)) | (1L << (REGR_ - 577)) | (1L << (ROUND - 577)) | (1L << (ROW_NUMBER - 577)) | (1L << (SUBSTR - 577)) | (1L << (TO_CHAR - 577)) | (1L << (TRIM - 577)) | (1L << (SUM - 577)) | (1L << (STDDEV - 577)) | (1L << (VAR_ - 577)) | (1L << (VARIANCE - 577)) | (1L << (LEAST - 577)) | (1L << (GREATEST - 577)) | (1L << (TO_DATE - 577)) | (1L << (NATIONAL_CHAR_STRING_LIT - 577)) | (1L << (UNSIGNED_INTEGER - 577)) | (1L << (APPROXIMATE_NUM_LIT - 577)) | (1L << (CHAR_STRING - 577)) | (1L << (DELIMITED_ID - 577)) | (1L << (LEFT_PAREN - 577)) | (1L << (ASTERISK - 577)) | (1L << (PLUS_SIGN - 577)) | (1L << (MINUS_SIGN - 577)) | (1L << (BINDVAR - 577)) | (1L << (COLON - 577)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
				{
				setState(5449);
				argument();
				}
			}

			setState(5457);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5452);
				comma();
				setState(5453);
				argument();
				}
				}
				setState(5459);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5460);
			match(RIGHT_PAREN);
			setState(5462);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,700,_ctx) ) {
			case 1:
				{
				setState(5461);
				keep_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_argument_analyticContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(OracleSQLStatementParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(OracleSQLStatementParser.RIGHT_PAREN, 0); }
		public List<ArgumentContext> argument() {
			return getRuleContexts(ArgumentContext.class);
		}
		public ArgumentContext argument(int i) {
			return getRuleContext(ArgumentContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(OracleSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(OracleSQLStatementParser.COMMA, i);
		}
		public Keep_clauseContext keep_clause() {
			return getRuleContext(Keep_clauseContext.class,0);
		}
		public List<Respect_or_ignore_nullsContext> respect_or_ignore_nulls() {
			return getRuleContexts(Respect_or_ignore_nullsContext.class);
		}
		public Respect_or_ignore_nullsContext respect_or_ignore_nulls(int i) {
			return getRuleContext(Respect_or_ignore_nullsContext.class,i);
		}
		public Function_argument_analyticContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_argument_analytic; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterFunction_argument_analytic(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitFunction_argument_analytic(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitFunction_argument_analytic(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Function_argument_analyticContext function_argument_analytic() throws RecognitionException {
		Function_argument_analyticContext _localctx = new Function_argument_analyticContext(_ctx, getState());
		enterRule(_localctx, 758, RULE_function_argument_analytic);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5464);
			match(LEFT_PAREN);
			setState(5469);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABS) | (1L << ACOS) | (1L << ADD) | (1L << ADD_MONTHS) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASCII) | (1L << ASCIISTR) | (1L << ASIN) | (1L << ASSOCIATE) | (1L << ATAN2) | (1L << ATAN) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BFILENAME) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BIN_TO_NUM) | (1L << BITAND) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CARDINALITY) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CEIL) | (1L << CHARACTER) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARTOROWID) | (1L << CHR) | (1L << C_LETTER))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOSE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONCAT - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COS - 64)) | (1L << (COSH - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_DATE - 64)) | (1L << (CURRENT_TIMESTAMP - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (DIMENSION - 128)) | (1L << (DISABLE - 128)) | (1L << (DISASSOCIATE - 128)) | (1L << (DISTINCT - 128)) | (1L << (DOCUMENT - 128)) | (1L << (DOUBLE - 128)) | (1L << (DSINTERVAL_UNCONSTRAINED - 128)) | (1L << (DUMP - 128)) | (1L << (EACH - 128)) | (1L << (ELEMENT - 128)) | (1L << (EMPTY_BLOB - 128)) | (1L << (EMPTY_CLOB - 128)) | (1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERR - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXISTS - 128)) | (1L << (EXIT - 128)) | (1L << (EXP - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FALSE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FLOOR - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FROM_TZ - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUP_ID - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HEXTORAW - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (IGNORE - 193)) | (1L << (IMMEDIATE - 193)) | (1L << (INCLUDE - 193)) | (1L << (INCLUDING - 193)) | (1L << (INCREMENT - 193)) | (1L << (INDENT - 193)) | (1L << (INDEXED - 193)) | (1L << (INDICATOR - 193)) | (1L << (INDICES - 193)) | (1L << (INFINITE - 193)) | (1L << (INITCAP - 193)) | (1L << (INLINE - 193)) | (1L << (INNER - 193)) | (1L << (INOUT - 193)) | (1L << (INSTANTIABLE - 193)) | (1L << (INSTEAD - 193)) | (1L << (INSTR2 - 193)) | (1L << (INSTR4 - 193)) | (1L << (INSTRB - 193)) | (1L << (INSTRC - 193)) | (1L << (INSTR - 193)) | (1L << (INTERFACE - 193)) | (1L << (INTEGER - 193)) | (1L << (INTERVAL - 193)) | (1L << (INT - 193)) | (1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (KEY - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST_DAY - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LENGTH2 - 193)) | (1L << (LENGTH4 - 193)) | (1L << (LENGTHB - 193)) | (1L << (LENGTHC - 193)) | (1L << (LENGTH - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LN - 193)) | (1L << (LNNVL - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCALTIMESTAMP - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (LOGON - 257)) | (1L << (LONG - 257)) | (1L << (LOOP - 257)) | (1L << (LOWER - 257)) | (1L << (LPAD - 257)) | (1L << (LTRIM - 257)) | (1L << (MAIN - 257)) | (1L << (MAP - 257)) | (1L << (MATCHED - 257)) | (1L << (MAXVALUE - 257)) | (1L << (MEASURES - 257)) | (1L << (MEMBER - 257)) | (1L << (MERGE - 257)) | (1L << (MINUTE - 257)) | (1L << (MINVALUE - 257)) | (1L << (MLSLABEL - 257)) | (1L << (MODEL - 257)) | (1L << (MODIFY - 257)) | (1L << (MOD - 257)) | (1L << (MONTH - 257)) | (1L << (MONTHS_BETWEEN - 257)) | (1L << (MULTISET - 257)) | (1L << (NAME - 257)) | (1L << (NAN - 257)) | (1L << (NANVL - 257)) | (1L << (NATURAL - 257)) | (1L << (NATURALN - 257)) | (1L << (NAV - 257)) | (1L << (NCHAR_CS - 257)) | (1L << (NCHAR - 257)) | (1L << (NCHR - 257)) | (1L << (NCLOB - 257)) | (1L << (NESTED - 257)) | (1L << (NEW - 257)) | (1L << (NEW_TIME - 257)) | (1L << (NEXT_DAY - 257)) | (1L << (NOAUDIT - 257)) | (1L << (NOCOPY - 257)) | (1L << (NOCYCLE - 257)) | (1L << (NOENTITYESCAPING - 257)) | (1L << (NONE - 257)) | (1L << (NO - 257)) | (1L << (NOSCHEMACHECK - 257)) | (1L << (NOT - 257)) | (1L << (NULLIF - 257)) | (1L << (NULL - 257)) | (1L << (NULLS - 257)) | (1L << (NUMBER - 257)) | (1L << (NUMERIC - 257)) | (1L << (NUMTODSINTERVAL - 257)) | (1L << (NUMTOYMINTERVAL - 257)) | (1L << (NVARCHAR2 - 257)) | (1L << (NVL2 - 257)) | (1L << (OBJECT - 257)) | (1L << (OFF - 257)))) != 0) || ((((_la - 321)) & ~0x3f) == 0 && ((1L << (_la - 321)) & ((1L << (OID - 321)) | (1L << (OLD - 321)) | (1L << (ONLY - 321)) | (1L << (OPAQUE - 321)) | (1L << (OPEN - 321)) | (1L << (ORADATA - 321)) | (1L << (ORDINALITY - 321)) | (1L << (OSERROR - 321)) | (1L << (OUTER - 321)) | (1L << (OUT - 321)) | (1L << (OVER - 321)) | (1L << (OVERRIDING - 321)) | (1L << (PACKAGE - 321)) | (1L << (PARALLEL_ENABLE - 321)) | (1L << (PARAMETERS - 321)) | (1L << (PARENT - 321)) | (1L << (PARTITION - 321)) | (1L << (PASSING - 321)) | (1L << (PATH - 321)) | (1L << (PIPELINED - 321)) | (1L << (PLAN - 321)) | (1L << (PLS_INTEGER - 321)) | (1L << (POSITIVEN - 321)) | (1L << (POSITIVE - 321)) | (1L << (POWER - 321)) | (1L << (PRAGMA - 321)) | (1L << (PRECEDING - 321)) | (1L << (PRECISION - 321)) | (1L << (PRESENT - 321)) | (1L << (PRIOR - 321)) | (1L << (PROCEDURE - 321)) | (1L << (RAISE - 321)) | (1L << (RANGE - 321)) | (1L << (RAW - 321)) | (1L << (RAWTOHEX - 321)) | (1L << (READ - 321)) | (1L << (REAL - 321)) | (1L << (RECORD - 321)) | (1L << (REFERENCE - 321)) | (1L << (REFERENCING - 321)) | (1L << (REF - 321)) | (1L << (REGEXP_COUNT - 321)) | (1L << (REGEXP_INSTR - 321)) | (1L << (REGEXP_REPLACE - 321)) | (1L << (REGEXP_SUBSTR - 321)) | (1L << (REJECT - 321)) | (1L << (RELIES_ON - 321)) | (1L << (REMAINDER - 321)))) != 0) || ((((_la - 385)) & ~0x3f) == 0 && ((1L << (_la - 385)) & ((1L << (RENAME - 385)) | (1L << (REPLACE - 385)) | (1L << (RESPECT - 385)) | (1L << (RESTRICT_REFERENCES - 385)) | (1L << (RESULT_CACHE - 385)) | (1L << (RESULT - 385)) | (1L << (RETURNING - 385)) | (1L << (RETURN - 385)) | (1L << (REUSE - 385)) | (1L << (REVERSE - 385)) | (1L << (RIGHT - 385)) | (1L << (ROLLBACK - 385)) | (1L << (ROLLUP - 385)) | (1L << (ROWID - 385)) | (1L << (ROWNUM - 385)) | (1L << (ROW - 385)) | (1L << (ROWS - 385)) | (1L << (RPAD - 385)) | (1L << (RTRIM - 385)) | (1L << (RULES - 385)) | (1L << (SAMPLE - 385)) | (1L << (SAVEPOINT - 385)) | (1L << (SAVE - 385)) | (1L << (SCHEMACHECK - 385)) | (1L << (SCHEMA - 385)) | (1L << (SCN - 385)) | (1L << (SECOND - 385)) | (1L << (SEED - 385)) | (1L << (SEGMENT - 385)) | (1L << (SELF - 385)) | (1L << (SEQUENTIAL - 385)) | (1L << (SERIALIZABLE - 385)) | (1L << (SERIALLY_REUSABLE - 385)) | (1L << (SERVERERROR - 385)) | (1L << (SESSIONTIMEZONE - 385)) | (1L << (SET - 385)) | (1L << (SETS - 385)) | (1L << (SETTINGS - 385)) | (1L << (SHOW - 385)) | (1L << (SHUTDOWN - 385)) | (1L << (SIBLINGS - 385)) | (1L << (SIGN - 385)) | (1L << (SIGNTYPE - 385)) | (1L << (SIMPLE_INTEGER - 385)) | (1L << (SINGLE - 385)) | (1L << (SINH - 385)) | (1L << (SIN - 385)) | (1L << (SKIP_ - 385)) | (1L << (SMALLINT - 385)) | (1L << (SNAPSHOT - 385)) | (1L << (SOME - 385)) | (1L << (SOUNDEX - 385)) | (1L << (SPECIFICATION - 385)) | (1L << (SQLDATA - 385)) | (1L << (SQLERROR - 385)) | (1L << (SQRT - 385)) | (1L << (STANDALONE - 385)))) != 0) || ((((_la - 449)) & ~0x3f) == 0 && ((1L << (_la - 449)) & ((1L << (STARTUP - 449)) | (1L << (STATEMENT_ID - 449)) | (1L << (STATEMENT - 449)) | (1L << (STATIC - 449)) | (1L << (STATISTICS - 449)) | (1L << (STRING - 449)) | (1L << (SUBMULTISET - 449)) | (1L << (SUBPARTITION - 449)) | (1L << (SUBSTITUTABLE - 449)) | (1L << (SUBTYPE - 449)) | (1L << (SUCCESS - 449)) | (1L << (SUSPEND - 449)) | (1L << (SYS_CONTEXT - 449)) | (1L << (SYSDATE - 449)) | (1L << (SYSTIMESTAMP - 449)) | (1L << (TANH - 449)) | (1L << (TAN - 449)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 449)) | (1L << (TIMESTAMP - 449)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 449)) | (1L << (TIMESTAMP_UNCONSTRAINED - 449)) | (1L << (TIME - 449)) | (1L << (TIMEZONE_ABBR - 449)) | (1L << (TIMEZONE_HOUR - 449)) | (1L << (TIMEZONE_MINUTE - 449)) | (1L << (TIMEZONE_REGION - 449)) | (1L << (TO_CLOB - 449)) | (1L << (TO_DSINTERVAL - 449)) | (1L << (TO_LOB - 449)) | (1L << (TO_MULTI_BYTE - 449)) | (1L << (TO_NCLOB - 449)) | (1L << (TO_NUMBER - 449)) | (1L << (TO_SINGLE_BYTE - 449)) | (1L << (TO_TIMESTAMP - 449)) | (1L << (TO_TIMESTAMP_TZ - 449)) | (1L << (TO_YMINTERVAL - 449)) | (1L << (TRAILING - 449)) | (1L << (TRANSACTION - 449)) | (1L << (TRANSLATE - 449)) | (1L << (TREAT - 449)) | (1L << (TRIGGER - 449)) | (1L << (TRUE - 449)) | (1L << (TRUNCATE - 449)) | (1L << (TRUNC - 449)) | (1L << (TYPE - 449)) | (1L << (TZ_OFFSET - 449)) | (1L << (UID - 449)) | (1L << (UNBOUNDED - 449)) | (1L << (UNDER - 449)) | (1L << (UNLIMITED - 449)) | (1L << (UNTIL - 449)) | (1L << (UPDATED - 449)))) != 0) || ((((_la - 513)) & ~0x3f) == 0 && ((1L << (_la - 513)) & ((1L << (UPPER - 513)) | (1L << (UPSERT - 513)) | (1L << (UROWID - 513)) | (1L << (USERENV - 513)) | (1L << (USER - 513)) | (1L << (USE - 513)) | (1L << (VALIDATE - 513)) | (1L << (VALUE - 513)) | (1L << (VARCHAR2 - 513)) | (1L << (VARCHAR - 513)) | (1L << (VARIABLE - 513)) | (1L << (VARRAY - 513)) | (1L << (VARYING - 513)) | (1L << (VERSIONS - 513)) | (1L << (VERSION - 513)) | (1L << (VSIZE - 513)) | (1L << (WAIT - 513)) | (1L << (WARNING - 513)) | (1L << (WELLFORMED - 513)) | (1L << (WHENEVER - 513)) | (1L << (WHILE - 513)) | (1L << (WITHIN - 513)) | (1L << (WORK - 513)) | (1L << (WRITE - 513)) | (1L << (XMLAGG - 513)) | (1L << (XMLATTRIBUTES - 513)) | (1L << (XMLCAST - 513)) | (1L << (XMLCOLATTVAL - 513)) | (1L << (XMLELEMENT - 513)) | (1L << (XMLEXISTS - 513)) | (1L << (XMLFOREST - 513)) | (1L << (XMLNAMESPACES - 513)) | (1L << (XMLPARSE - 513)) | (1L << (XMLPI - 513)) | (1L << (XMLQUERY - 513)) | (1L << (XMLROOT - 513)) | (1L << (XMLSERIALIZE - 513)) | (1L << (XMLTABLE - 513)) | (1L << (XML - 513)) | (1L << (YEAR - 513)) | (1L << (YES - 513)) | (1L << (YMINTERVAL_UNCONSTRAINED - 513)) | (1L << (ZONE - 513)) | (1L << (PREDICTION - 513)) | (1L << (PREDICTION_BOUNDS - 513)) | (1L << (PREDICTION_COST - 513)) | (1L << (PREDICTION_DETAILS - 513)) | (1L << (PREDICTION_PROBABILITY - 513)) | (1L << (PREDICTION_SET - 513)) | (1L << (CUME_DIST - 513)) | (1L << (DENSE_RANK - 513)) | (1L << (LISTAGG - 513)) | (1L << (PERCENT_RANK - 513)) | (1L << (PERCENTILE_CONT - 513)) | (1L << (PERCENTILE_DISC - 513)) | (1L << (RANK - 513)))) != 0) || ((((_la - 577)) & ~0x3f) == 0 && ((1L << (_la - 577)) & ((1L << (AVG - 577)) | (1L << (CORR - 577)) | (1L << (COVAR_ - 577)) | (1L << (DECODE - 577)) | (1L << (LAG - 577)) | (1L << (LEAD - 577)) | (1L << (MAX - 577)) | (1L << (MEDIAN - 577)) | (1L << (MIN - 577)) | (1L << (NTILE - 577)) | (1L << (NVL - 577)) | (1L << (RATIO_TO_REPORT - 577)) | (1L << (REGR_ - 577)) | (1L << (ROUND - 577)) | (1L << (ROW_NUMBER - 577)) | (1L << (SUBSTR - 577)) | (1L << (TO_CHAR - 577)) | (1L << (TRIM - 577)) | (1L << (SUM - 577)) | (1L << (STDDEV - 577)) | (1L << (VAR_ - 577)) | (1L << (VARIANCE - 577)) | (1L << (LEAST - 577)) | (1L << (GREATEST - 577)) | (1L << (TO_DATE - 577)) | (1L << (NATIONAL_CHAR_STRING_LIT - 577)) | (1L << (UNSIGNED_INTEGER - 577)) | (1L << (APPROXIMATE_NUM_LIT - 577)) | (1L << (CHAR_STRING - 577)) | (1L << (DELIMITED_ID - 577)) | (1L << (LEFT_PAREN - 577)) | (1L << (ASTERISK - 577)) | (1L << (PLUS_SIGN - 577)) | (1L << (MINUS_SIGN - 577)) | (1L << (BINDVAR - 577)) | (1L << (COLON - 577)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
				{
				setState(5465);
				argument();
				setState(5467);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IGNORE || _la==RESPECT) {
					{
					setState(5466);
					respect_or_ignore_nulls();
					}
				}

				}
			}

			setState(5478);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5471);
				match(COMMA);
				setState(5472);
				argument();
				setState(5474);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IGNORE || _la==RESPECT) {
					{
					setState(5473);
					respect_or_ignore_nulls();
					}
				}

				}
				}
				setState(5480);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5481);
			match(RIGHT_PAREN);
			setState(5483);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KEEP) {
				{
				setState(5482);
				keep_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_argument_modelingContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(OracleSQLStatementParser.LEFT_PAREN, 0); }
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public TerminalNode USING() { return getToken(OracleSQLStatementParser.USING, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(OracleSQLStatementParser.RIGHT_PAREN, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(OracleSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(OracleSQLStatementParser.COMMA, i);
		}
		public Keep_clauseContext keep_clause() {
			return getRuleContext(Keep_clauseContext.class,0);
		}
		public List<NumericContext> numeric() {
			return getRuleContexts(NumericContext.class);
		}
		public NumericContext numeric(int i) {
			return getRuleContext(NumericContext.class,i);
		}
		public List<TerminalNode> NULL() { return getTokens(OracleSQLStatementParser.NULL); }
		public TerminalNode NULL(int i) {
			return getToken(OracleSQLStatementParser.NULL, i);
		}
		public List<Column_aliasContext> column_alias() {
			return getRuleContexts(Column_aliasContext.class);
		}
		public Column_aliasContext column_alias(int i) {
			return getRuleContext(Column_aliasContext.class,i);
		}
		public Function_argument_modelingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_argument_modeling; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterFunction_argument_modeling(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitFunction_argument_modeling(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitFunction_argument_modeling(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Function_argument_modelingContext function_argument_modeling() throws RecognitionException {
		Function_argument_modelingContext _localctx = new Function_argument_modelingContext(_ctx, getState());
		enterRule(_localctx, 760, RULE_function_argument_modeling);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5485);
			match(LEFT_PAREN);
			setState(5486);
			column_name();
			setState(5499);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(5487);
				match(COMMA);
				setState(5490);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case UNSIGNED_INTEGER:
				case APPROXIMATE_NUM_LIT:
					{
					setState(5488);
					numeric();
					}
					break;
				case NULL:
					{
					setState(5489);
					match(NULL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5497);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(5492);
					match(COMMA);
					setState(5495);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case UNSIGNED_INTEGER:
					case APPROXIMATE_NUM_LIT:
						{
						setState(5493);
						numeric();
						}
						break;
					case NULL:
						{
						setState(5494);
						match(NULL);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				}
			}

			setState(5501);
			match(USING);
			setState(5521);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,713,_ctx) ) {
			case 1:
				{
				setState(5502);
				tableview_name();
				setState(5503);
				match(PERIOD);
				setState(5504);
				match(ASTERISK);
				}
				break;
			case 2:
				{
				setState(5506);
				match(ASTERISK);
				}
				break;
			case 3:
				{
				setState(5507);
				expression();
				setState(5509);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABS) | (1L << ACOS) | (1L << ADD) | (1L << ADD_MONTHS) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << AS) | (1L << ASCII) | (1L << ASCIISTR) | (1L << ASIN) | (1L << ASSOCIATE) | (1L << ATAN2) | (1L << ATAN) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BFILENAME) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BIN_TO_NUM) | (1L << BITAND) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CARDINALITY) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CEIL) | (1L << CHARACTER) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARTOROWID) | (1L << CHR) | (1L << C_LETTER))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOSE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONCAT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COS - 64)) | (1L << (COSH - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_DATE - 64)) | (1L << (CURRENT_TIMESTAMP - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (DIMENSION - 128)) | (1L << (DISABLE - 128)) | (1L << (DISASSOCIATE - 128)) | (1L << (DOCUMENT - 128)) | (1L << (DOUBLE - 128)) | (1L << (DSINTERVAL_UNCONSTRAINED - 128)) | (1L << (DUMP - 128)) | (1L << (EACH - 128)) | (1L << (ELEMENT - 128)) | (1L << (EMPTY_BLOB - 128)) | (1L << (EMPTY_CLOB - 128)) | (1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERR - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXP - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FLOOR - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FROM_TZ - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUP_ID - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HEXTORAW - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (IGNORE - 193)) | (1L << (IMMEDIATE - 193)) | (1L << (INCLUDE - 193)) | (1L << (INCLUDING - 193)) | (1L << (INCREMENT - 193)) | (1L << (INDENT - 193)) | (1L << (INDEXED - 193)) | (1L << (INDICATOR - 193)) | (1L << (INDICES - 193)) | (1L << (INFINITE - 193)) | (1L << (INITCAP - 193)) | (1L << (INLINE - 193)) | (1L << (INNER - 193)) | (1L << (INOUT - 193)) | (1L << (INSTANTIABLE - 193)) | (1L << (INSTEAD - 193)) | (1L << (INSTR2 - 193)) | (1L << (INSTR4 - 193)) | (1L << (INSTRB - 193)) | (1L << (INSTRC - 193)) | (1L << (INSTR - 193)) | (1L << (INTERFACE - 193)) | (1L << (INTEGER - 193)) | (1L << (INTERVAL - 193)) | (1L << (INT - 193)) | (1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (KEY - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST_DAY - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LENGTH2 - 193)) | (1L << (LENGTH4 - 193)) | (1L << (LENGTHB - 193)) | (1L << (LENGTHC - 193)) | (1L << (LENGTH - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LN - 193)) | (1L << (LNNVL - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCALTIMESTAMP - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (LOGON - 257)) | (1L << (LONG - 257)) | (1L << (LOOP - 257)) | (1L << (LOWER - 257)) | (1L << (LPAD - 257)) | (1L << (LTRIM - 257)) | (1L << (MAIN - 257)) | (1L << (MAP - 257)) | (1L << (MATCHED - 257)) | (1L << (MAXVALUE - 257)) | (1L << (MEASURES - 257)) | (1L << (MEMBER - 257)) | (1L << (MERGE - 257)) | (1L << (MINUTE - 257)) | (1L << (MINVALUE - 257)) | (1L << (MLSLABEL - 257)) | (1L << (MODEL - 257)) | (1L << (MODIFY - 257)) | (1L << (MOD - 257)) | (1L << (MONTH - 257)) | (1L << (MONTHS_BETWEEN - 257)) | (1L << (MULTISET - 257)) | (1L << (NAME - 257)) | (1L << (NAN - 257)) | (1L << (NANVL - 257)) | (1L << (NATURAL - 257)) | (1L << (NATURALN - 257)) | (1L << (NAV - 257)) | (1L << (NCHAR_CS - 257)) | (1L << (NCHAR - 257)) | (1L << (NCHR - 257)) | (1L << (NCLOB - 257)) | (1L << (NESTED - 257)) | (1L << (NEW - 257)) | (1L << (NEW_TIME - 257)) | (1L << (NEXT_DAY - 257)) | (1L << (NOAUDIT - 257)) | (1L << (NOCOPY - 257)) | (1L << (NOCYCLE - 257)) | (1L << (NOENTITYESCAPING - 257)) | (1L << (NONE - 257)) | (1L << (NO - 257)) | (1L << (NOSCHEMACHECK - 257)) | (1L << (NULLIF - 257)) | (1L << (NULLS - 257)) | (1L << (NUMBER - 257)) | (1L << (NUMERIC - 257)) | (1L << (NUMTODSINTERVAL - 257)) | (1L << (NUMTOYMINTERVAL - 257)) | (1L << (NVARCHAR2 - 257)) | (1L << (NVL2 - 257)) | (1L << (OBJECT - 257)) | (1L << (OFF - 257)))) != 0) || ((((_la - 321)) & ~0x3f) == 0 && ((1L << (_la - 321)) & ((1L << (OID - 321)) | (1L << (OLD - 321)) | (1L << (ONLY - 321)) | (1L << (OPAQUE - 321)) | (1L << (OPEN - 321)) | (1L << (ORADATA - 321)) | (1L << (ORDINALITY - 321)) | (1L << (OSERROR - 321)) | (1L << (OUTER - 321)) | (1L << (OUT - 321)) | (1L << (OVER - 321)) | (1L << (OVERRIDING - 321)) | (1L << (PACKAGE - 321)) | (1L << (PARALLEL_ENABLE - 321)) | (1L << (PARAMETERS - 321)) | (1L << (PARENT - 321)) | (1L << (PARTITION - 321)) | (1L << (PASSING - 321)) | (1L << (PATH - 321)) | (1L << (PIPELINED - 321)) | (1L << (PLAN - 321)) | (1L << (PLS_INTEGER - 321)) | (1L << (POSITIVEN - 321)) | (1L << (POSITIVE - 321)) | (1L << (POWER - 321)) | (1L << (PRAGMA - 321)) | (1L << (PRECEDING - 321)) | (1L << (PRECISION - 321)) | (1L << (PRESENT - 321)) | (1L << (PRIOR - 321)) | (1L << (PROCEDURE - 321)) | (1L << (RAISE - 321)) | (1L << (RANGE - 321)) | (1L << (RAW - 321)) | (1L << (RAWTOHEX - 321)) | (1L << (READ - 321)) | (1L << (REAL - 321)) | (1L << (RECORD - 321)) | (1L << (REFERENCE - 321)) | (1L << (REFERENCING - 321)) | (1L << (REF - 321)) | (1L << (REGEXP_COUNT - 321)) | (1L << (REGEXP_INSTR - 321)) | (1L << (REGEXP_REPLACE - 321)) | (1L << (REGEXP_SUBSTR - 321)) | (1L << (REJECT - 321)) | (1L << (RELIES_ON - 321)) | (1L << (REMAINDER - 321)))) != 0) || ((((_la - 385)) & ~0x3f) == 0 && ((1L << (_la - 385)) & ((1L << (RENAME - 385)) | (1L << (REPLACE - 385)) | (1L << (RESPECT - 385)) | (1L << (RESTRICT_REFERENCES - 385)) | (1L << (RESULT_CACHE - 385)) | (1L << (RESULT - 385)) | (1L << (RETURNING - 385)) | (1L << (RETURN - 385)) | (1L << (REUSE - 385)) | (1L << (REVERSE - 385)) | (1L << (RIGHT - 385)) | (1L << (ROLLBACK - 385)) | (1L << (ROLLUP - 385)) | (1L << (ROWID - 385)) | (1L << (ROWNUM - 385)) | (1L << (ROW - 385)) | (1L << (ROWS - 385)) | (1L << (RPAD - 385)) | (1L << (RTRIM - 385)) | (1L << (RULES - 385)) | (1L << (SAMPLE - 385)) | (1L << (SAVEPOINT - 385)) | (1L << (SAVE - 385)) | (1L << (SCHEMACHECK - 385)) | (1L << (SCHEMA - 385)) | (1L << (SCN - 385)) | (1L << (SECOND - 385)) | (1L << (SEED - 385)) | (1L << (SEGMENT - 385)) | (1L << (SELF - 385)) | (1L << (SEQUENTIAL - 385)) | (1L << (SERIALIZABLE - 385)) | (1L << (SERIALLY_REUSABLE - 385)) | (1L << (SERVERERROR - 385)) | (1L << (SESSIONTIMEZONE - 385)) | (1L << (SET - 385)) | (1L << (SETS - 385)) | (1L << (SETTINGS - 385)) | (1L << (SHOW - 385)) | (1L << (SHUTDOWN - 385)) | (1L << (SIBLINGS - 385)) | (1L << (SIGN - 385)) | (1L << (SIGNTYPE - 385)) | (1L << (SIMPLE_INTEGER - 385)) | (1L << (SINGLE - 385)) | (1L << (SINH - 385)) | (1L << (SIN - 385)) | (1L << (SKIP_ - 385)) | (1L << (SMALLINT - 385)) | (1L << (SNAPSHOT - 385)) | (1L << (SOME - 385)) | (1L << (SOUNDEX - 385)) | (1L << (SPECIFICATION - 385)) | (1L << (SQLDATA - 385)) | (1L << (SQLERROR - 385)) | (1L << (SQRT - 385)) | (1L << (STANDALONE - 385)))) != 0) || ((((_la - 449)) & ~0x3f) == 0 && ((1L << (_la - 449)) & ((1L << (STARTUP - 449)) | (1L << (STATEMENT_ID - 449)) | (1L << (STATEMENT - 449)) | (1L << (STATIC - 449)) | (1L << (STATISTICS - 449)) | (1L << (STRING - 449)) | (1L << (SUBMULTISET - 449)) | (1L << (SUBPARTITION - 449)) | (1L << (SUBSTITUTABLE - 449)) | (1L << (SUBTYPE - 449)) | (1L << (SUCCESS - 449)) | (1L << (SUSPEND - 449)) | (1L << (SYS_CONTEXT - 449)) | (1L << (SYSDATE - 449)) | (1L << (SYSTIMESTAMP - 449)) | (1L << (TANH - 449)) | (1L << (TAN - 449)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 449)) | (1L << (TIMESTAMP - 449)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 449)) | (1L << (TIMESTAMP_UNCONSTRAINED - 449)) | (1L << (TIME - 449)) | (1L << (TIMEZONE_ABBR - 449)) | (1L << (TIMEZONE_HOUR - 449)) | (1L << (TIMEZONE_MINUTE - 449)) | (1L << (TIMEZONE_REGION - 449)) | (1L << (TO_CLOB - 449)) | (1L << (TO_DSINTERVAL - 449)) | (1L << (TO_LOB - 449)) | (1L << (TO_MULTI_BYTE - 449)) | (1L << (TO_NCLOB - 449)) | (1L << (TO_NUMBER - 449)) | (1L << (TO_SINGLE_BYTE - 449)) | (1L << (TO_TIMESTAMP - 449)) | (1L << (TO_TIMESTAMP_TZ - 449)) | (1L << (TO_YMINTERVAL - 449)) | (1L << (TRAILING - 449)) | (1L << (TRANSACTION - 449)) | (1L << (TRANSLATE - 449)) | (1L << (TREAT - 449)) | (1L << (TRIGGER - 449)) | (1L << (TRUNCATE - 449)) | (1L << (TRUNC - 449)) | (1L << (TYPE - 449)) | (1L << (TZ_OFFSET - 449)) | (1L << (UID - 449)) | (1L << (UNBOUNDED - 449)) | (1L << (UNDER - 449)) | (1L << (UNLIMITED - 449)) | (1L << (UNTIL - 449)) | (1L << (UPDATED - 449)))) != 0) || ((((_la - 513)) & ~0x3f) == 0 && ((1L << (_la - 513)) & ((1L << (UPPER - 513)) | (1L << (UPSERT - 513)) | (1L << (UROWID - 513)) | (1L << (USERENV - 513)) | (1L << (USER - 513)) | (1L << (USE - 513)) | (1L << (VALIDATE - 513)) | (1L << (VALUE - 513)) | (1L << (VARCHAR2 - 513)) | (1L << (VARCHAR - 513)) | (1L << (VARIABLE - 513)) | (1L << (VARRAY - 513)) | (1L << (VARYING - 513)) | (1L << (VERSIONS - 513)) | (1L << (VERSION - 513)) | (1L << (VSIZE - 513)) | (1L << (WAIT - 513)) | (1L << (WARNING - 513)) | (1L << (WELLFORMED - 513)) | (1L << (WHENEVER - 513)) | (1L << (WHILE - 513)) | (1L << (WITHIN - 513)) | (1L << (WORK - 513)) | (1L << (WRITE - 513)) | (1L << (XMLAGG - 513)) | (1L << (XMLATTRIBUTES - 513)) | (1L << (XMLCAST - 513)) | (1L << (XMLCOLATTVAL - 513)) | (1L << (XMLELEMENT - 513)) | (1L << (XMLEXISTS - 513)) | (1L << (XMLFOREST - 513)) | (1L << (XMLNAMESPACES - 513)) | (1L << (XMLPARSE - 513)) | (1L << (XMLPI - 513)) | (1L << (XMLQUERY - 513)) | (1L << (XMLROOT - 513)) | (1L << (XMLSERIALIZE - 513)) | (1L << (XMLTABLE - 513)) | (1L << (XML - 513)) | (1L << (YEAR - 513)) | (1L << (YES - 513)) | (1L << (YMINTERVAL_UNCONSTRAINED - 513)) | (1L << (ZONE - 513)) | (1L << (PREDICTION - 513)) | (1L << (PREDICTION_BOUNDS - 513)) | (1L << (PREDICTION_COST - 513)) | (1L << (PREDICTION_DETAILS - 513)) | (1L << (PREDICTION_PROBABILITY - 513)) | (1L << (PREDICTION_SET - 513)) | (1L << (CUME_DIST - 513)) | (1L << (DENSE_RANK - 513)) | (1L << (LISTAGG - 513)) | (1L << (PERCENT_RANK - 513)) | (1L << (PERCENTILE_CONT - 513)) | (1L << (PERCENTILE_DISC - 513)) | (1L << (RANK - 513)))) != 0) || ((((_la - 577)) & ~0x3f) == 0 && ((1L << (_la - 577)) & ((1L << (AVG - 577)) | (1L << (CORR - 577)) | (1L << (COVAR_ - 577)) | (1L << (DECODE - 577)) | (1L << (LAG - 577)) | (1L << (LEAD - 577)) | (1L << (MAX - 577)) | (1L << (MEDIAN - 577)) | (1L << (MIN - 577)) | (1L << (NTILE - 577)) | (1L << (NVL - 577)) | (1L << (RATIO_TO_REPORT - 577)) | (1L << (REGR_ - 577)) | (1L << (ROUND - 577)) | (1L << (ROW_NUMBER - 577)) | (1L << (SUBSTR - 577)) | (1L << (TO_CHAR - 577)) | (1L << (TRIM - 577)) | (1L << (SUM - 577)) | (1L << (STDDEV - 577)) | (1L << (VAR_ - 577)) | (1L << (VARIANCE - 577)) | (1L << (LEAST - 577)) | (1L << (GREATEST - 577)) | (1L << (TO_DATE - 577)) | (1L << (NATIONAL_CHAR_STRING_LIT - 577)) | (1L << (CHAR_STRING - 577)) | (1L << (DELIMITED_ID - 577)) | (1L << (ASTERISK - 577)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
					{
					setState(5508);
					column_alias();
					}
				}

				setState(5518);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5511);
					match(COMMA);
					setState(5512);
					expression();
					setState(5514);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABS) | (1L << ACOS) | (1L << ADD) | (1L << ADD_MONTHS) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << AS) | (1L << ASCII) | (1L << ASCIISTR) | (1L << ASIN) | (1L << ASSOCIATE) | (1L << ATAN2) | (1L << ATAN) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BFILENAME) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BIN_TO_NUM) | (1L << BITAND) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CARDINALITY) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CEIL) | (1L << CHARACTER) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARTOROWID) | (1L << CHR) | (1L << C_LETTER))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOSE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONCAT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COS - 64)) | (1L << (COSH - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_DATE - 64)) | (1L << (CURRENT_TIMESTAMP - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (DIMENSION - 128)) | (1L << (DISABLE - 128)) | (1L << (DISASSOCIATE - 128)) | (1L << (DOCUMENT - 128)) | (1L << (DOUBLE - 128)) | (1L << (DSINTERVAL_UNCONSTRAINED - 128)) | (1L << (DUMP - 128)) | (1L << (EACH - 128)) | (1L << (ELEMENT - 128)) | (1L << (EMPTY_BLOB - 128)) | (1L << (EMPTY_CLOB - 128)) | (1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERR - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXP - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FLOOR - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FROM_TZ - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUP_ID - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HEXTORAW - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (IGNORE - 193)) | (1L << (IMMEDIATE - 193)) | (1L << (INCLUDE - 193)) | (1L << (INCLUDING - 193)) | (1L << (INCREMENT - 193)) | (1L << (INDENT - 193)) | (1L << (INDEXED - 193)) | (1L << (INDICATOR - 193)) | (1L << (INDICES - 193)) | (1L << (INFINITE - 193)) | (1L << (INITCAP - 193)) | (1L << (INLINE - 193)) | (1L << (INNER - 193)) | (1L << (INOUT - 193)) | (1L << (INSTANTIABLE - 193)) | (1L << (INSTEAD - 193)) | (1L << (INSTR2 - 193)) | (1L << (INSTR4 - 193)) | (1L << (INSTRB - 193)) | (1L << (INSTRC - 193)) | (1L << (INSTR - 193)) | (1L << (INTERFACE - 193)) | (1L << (INTEGER - 193)) | (1L << (INTERVAL - 193)) | (1L << (INT - 193)) | (1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (KEY - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST_DAY - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LENGTH2 - 193)) | (1L << (LENGTH4 - 193)) | (1L << (LENGTHB - 193)) | (1L << (LENGTHC - 193)) | (1L << (LENGTH - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LN - 193)) | (1L << (LNNVL - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCALTIMESTAMP - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (LOGON - 257)) | (1L << (LONG - 257)) | (1L << (LOOP - 257)) | (1L << (LOWER - 257)) | (1L << (LPAD - 257)) | (1L << (LTRIM - 257)) | (1L << (MAIN - 257)) | (1L << (MAP - 257)) | (1L << (MATCHED - 257)) | (1L << (MAXVALUE - 257)) | (1L << (MEASURES - 257)) | (1L << (MEMBER - 257)) | (1L << (MERGE - 257)) | (1L << (MINUTE - 257)) | (1L << (MINVALUE - 257)) | (1L << (MLSLABEL - 257)) | (1L << (MODEL - 257)) | (1L << (MODIFY - 257)) | (1L << (MOD - 257)) | (1L << (MONTH - 257)) | (1L << (MONTHS_BETWEEN - 257)) | (1L << (MULTISET - 257)) | (1L << (NAME - 257)) | (1L << (NAN - 257)) | (1L << (NANVL - 257)) | (1L << (NATURAL - 257)) | (1L << (NATURALN - 257)) | (1L << (NAV - 257)) | (1L << (NCHAR_CS - 257)) | (1L << (NCHAR - 257)) | (1L << (NCHR - 257)) | (1L << (NCLOB - 257)) | (1L << (NESTED - 257)) | (1L << (NEW - 257)) | (1L << (NEW_TIME - 257)) | (1L << (NEXT_DAY - 257)) | (1L << (NOAUDIT - 257)) | (1L << (NOCOPY - 257)) | (1L << (NOCYCLE - 257)) | (1L << (NOENTITYESCAPING - 257)) | (1L << (NONE - 257)) | (1L << (NO - 257)) | (1L << (NOSCHEMACHECK - 257)) | (1L << (NULLIF - 257)) | (1L << (NULLS - 257)) | (1L << (NUMBER - 257)) | (1L << (NUMERIC - 257)) | (1L << (NUMTODSINTERVAL - 257)) | (1L << (NUMTOYMINTERVAL - 257)) | (1L << (NVARCHAR2 - 257)) | (1L << (NVL2 - 257)) | (1L << (OBJECT - 257)) | (1L << (OFF - 257)))) != 0) || ((((_la - 321)) & ~0x3f) == 0 && ((1L << (_la - 321)) & ((1L << (OID - 321)) | (1L << (OLD - 321)) | (1L << (ONLY - 321)) | (1L << (OPAQUE - 321)) | (1L << (OPEN - 321)) | (1L << (ORADATA - 321)) | (1L << (ORDINALITY - 321)) | (1L << (OSERROR - 321)) | (1L << (OUTER - 321)) | (1L << (OUT - 321)) | (1L << (OVER - 321)) | (1L << (OVERRIDING - 321)) | (1L << (PACKAGE - 321)) | (1L << (PARALLEL_ENABLE - 321)) | (1L << (PARAMETERS - 321)) | (1L << (PARENT - 321)) | (1L << (PARTITION - 321)) | (1L << (PASSING - 321)) | (1L << (PATH - 321)) | (1L << (PIPELINED - 321)) | (1L << (PLAN - 321)) | (1L << (PLS_INTEGER - 321)) | (1L << (POSITIVEN - 321)) | (1L << (POSITIVE - 321)) | (1L << (POWER - 321)) | (1L << (PRAGMA - 321)) | (1L << (PRECEDING - 321)) | (1L << (PRECISION - 321)) | (1L << (PRESENT - 321)) | (1L << (PRIOR - 321)) | (1L << (PROCEDURE - 321)) | (1L << (RAISE - 321)) | (1L << (RANGE - 321)) | (1L << (RAW - 321)) | (1L << (RAWTOHEX - 321)) | (1L << (READ - 321)) | (1L << (REAL - 321)) | (1L << (RECORD - 321)) | (1L << (REFERENCE - 321)) | (1L << (REFERENCING - 321)) | (1L << (REF - 321)) | (1L << (REGEXP_COUNT - 321)) | (1L << (REGEXP_INSTR - 321)) | (1L << (REGEXP_REPLACE - 321)) | (1L << (REGEXP_SUBSTR - 321)) | (1L << (REJECT - 321)) | (1L << (RELIES_ON - 321)) | (1L << (REMAINDER - 321)))) != 0) || ((((_la - 385)) & ~0x3f) == 0 && ((1L << (_la - 385)) & ((1L << (RENAME - 385)) | (1L << (REPLACE - 385)) | (1L << (RESPECT - 385)) | (1L << (RESTRICT_REFERENCES - 385)) | (1L << (RESULT_CACHE - 385)) | (1L << (RESULT - 385)) | (1L << (RETURNING - 385)) | (1L << (RETURN - 385)) | (1L << (REUSE - 385)) | (1L << (REVERSE - 385)) | (1L << (RIGHT - 385)) | (1L << (ROLLBACK - 385)) | (1L << (ROLLUP - 385)) | (1L << (ROWID - 385)) | (1L << (ROWNUM - 385)) | (1L << (ROW - 385)) | (1L << (ROWS - 385)) | (1L << (RPAD - 385)) | (1L << (RTRIM - 385)) | (1L << (RULES - 385)) | (1L << (SAMPLE - 385)) | (1L << (SAVEPOINT - 385)) | (1L << (SAVE - 385)) | (1L << (SCHEMACHECK - 385)) | (1L << (SCHEMA - 385)) | (1L << (SCN - 385)) | (1L << (SECOND - 385)) | (1L << (SEED - 385)) | (1L << (SEGMENT - 385)) | (1L << (SELF - 385)) | (1L << (SEQUENTIAL - 385)) | (1L << (SERIALIZABLE - 385)) | (1L << (SERIALLY_REUSABLE - 385)) | (1L << (SERVERERROR - 385)) | (1L << (SESSIONTIMEZONE - 385)) | (1L << (SET - 385)) | (1L << (SETS - 385)) | (1L << (SETTINGS - 385)) | (1L << (SHOW - 385)) | (1L << (SHUTDOWN - 385)) | (1L << (SIBLINGS - 385)) | (1L << (SIGN - 385)) | (1L << (SIGNTYPE - 385)) | (1L << (SIMPLE_INTEGER - 385)) | (1L << (SINGLE - 385)) | (1L << (SINH - 385)) | (1L << (SIN - 385)) | (1L << (SKIP_ - 385)) | (1L << (SMALLINT - 385)) | (1L << (SNAPSHOT - 385)) | (1L << (SOME - 385)) | (1L << (SOUNDEX - 385)) | (1L << (SPECIFICATION - 385)) | (1L << (SQLDATA - 385)) | (1L << (SQLERROR - 385)) | (1L << (SQRT - 385)) | (1L << (STANDALONE - 385)))) != 0) || ((((_la - 449)) & ~0x3f) == 0 && ((1L << (_la - 449)) & ((1L << (STARTUP - 449)) | (1L << (STATEMENT_ID - 449)) | (1L << (STATEMENT - 449)) | (1L << (STATIC - 449)) | (1L << (STATISTICS - 449)) | (1L << (STRING - 449)) | (1L << (SUBMULTISET - 449)) | (1L << (SUBPARTITION - 449)) | (1L << (SUBSTITUTABLE - 449)) | (1L << (SUBTYPE - 449)) | (1L << (SUCCESS - 449)) | (1L << (SUSPEND - 449)) | (1L << (SYS_CONTEXT - 449)) | (1L << (SYSDATE - 449)) | (1L << (SYSTIMESTAMP - 449)) | (1L << (TANH - 449)) | (1L << (TAN - 449)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 449)) | (1L << (TIMESTAMP - 449)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 449)) | (1L << (TIMESTAMP_UNCONSTRAINED - 449)) | (1L << (TIME - 449)) | (1L << (TIMEZONE_ABBR - 449)) | (1L << (TIMEZONE_HOUR - 449)) | (1L << (TIMEZONE_MINUTE - 449)) | (1L << (TIMEZONE_REGION - 449)) | (1L << (TO_CLOB - 449)) | (1L << (TO_DSINTERVAL - 449)) | (1L << (TO_LOB - 449)) | (1L << (TO_MULTI_BYTE - 449)) | (1L << (TO_NCLOB - 449)) | (1L << (TO_NUMBER - 449)) | (1L << (TO_SINGLE_BYTE - 449)) | (1L << (TO_TIMESTAMP - 449)) | (1L << (TO_TIMESTAMP_TZ - 449)) | (1L << (TO_YMINTERVAL - 449)) | (1L << (TRAILING - 449)) | (1L << (TRANSACTION - 449)) | (1L << (TRANSLATE - 449)) | (1L << (TREAT - 449)) | (1L << (TRIGGER - 449)) | (1L << (TRUNCATE - 449)) | (1L << (TRUNC - 449)) | (1L << (TYPE - 449)) | (1L << (TZ_OFFSET - 449)) | (1L << (UID - 449)) | (1L << (UNBOUNDED - 449)) | (1L << (UNDER - 449)) | (1L << (UNLIMITED - 449)) | (1L << (UNTIL - 449)) | (1L << (UPDATED - 449)))) != 0) || ((((_la - 513)) & ~0x3f) == 0 && ((1L << (_la - 513)) & ((1L << (UPPER - 513)) | (1L << (UPSERT - 513)) | (1L << (UROWID - 513)) | (1L << (USERENV - 513)) | (1L << (USER - 513)) | (1L << (USE - 513)) | (1L << (VALIDATE - 513)) | (1L << (VALUE - 513)) | (1L << (VARCHAR2 - 513)) | (1L << (VARCHAR - 513)) | (1L << (VARIABLE - 513)) | (1L << (VARRAY - 513)) | (1L << (VARYING - 513)) | (1L << (VERSIONS - 513)) | (1L << (VERSION - 513)) | (1L << (VSIZE - 513)) | (1L << (WAIT - 513)) | (1L << (WARNING - 513)) | (1L << (WELLFORMED - 513)) | (1L << (WHENEVER - 513)) | (1L << (WHILE - 513)) | (1L << (WITHIN - 513)) | (1L << (WORK - 513)) | (1L << (WRITE - 513)) | (1L << (XMLAGG - 513)) | (1L << (XMLATTRIBUTES - 513)) | (1L << (XMLCAST - 513)) | (1L << (XMLCOLATTVAL - 513)) | (1L << (XMLELEMENT - 513)) | (1L << (XMLEXISTS - 513)) | (1L << (XMLFOREST - 513)) | (1L << (XMLNAMESPACES - 513)) | (1L << (XMLPARSE - 513)) | (1L << (XMLPI - 513)) | (1L << (XMLQUERY - 513)) | (1L << (XMLROOT - 513)) | (1L << (XMLSERIALIZE - 513)) | (1L << (XMLTABLE - 513)) | (1L << (XML - 513)) | (1L << (YEAR - 513)) | (1L << (YES - 513)) | (1L << (YMINTERVAL_UNCONSTRAINED - 513)) | (1L << (ZONE - 513)) | (1L << (PREDICTION - 513)) | (1L << (PREDICTION_BOUNDS - 513)) | (1L << (PREDICTION_COST - 513)) | (1L << (PREDICTION_DETAILS - 513)) | (1L << (PREDICTION_PROBABILITY - 513)) | (1L << (PREDICTION_SET - 513)) | (1L << (CUME_DIST - 513)) | (1L << (DENSE_RANK - 513)) | (1L << (LISTAGG - 513)) | (1L << (PERCENT_RANK - 513)) | (1L << (PERCENTILE_CONT - 513)) | (1L << (PERCENTILE_DISC - 513)) | (1L << (RANK - 513)))) != 0) || ((((_la - 577)) & ~0x3f) == 0 && ((1L << (_la - 577)) & ((1L << (AVG - 577)) | (1L << (CORR - 577)) | (1L << (COVAR_ - 577)) | (1L << (DECODE - 577)) | (1L << (LAG - 577)) | (1L << (LEAD - 577)) | (1L << (MAX - 577)) | (1L << (MEDIAN - 577)) | (1L << (MIN - 577)) | (1L << (NTILE - 577)) | (1L << (NVL - 577)) | (1L << (RATIO_TO_REPORT - 577)) | (1L << (REGR_ - 577)) | (1L << (ROUND - 577)) | (1L << (ROW_NUMBER - 577)) | (1L << (SUBSTR - 577)) | (1L << (TO_CHAR - 577)) | (1L << (TRIM - 577)) | (1L << (SUM - 577)) | (1L << (STDDEV - 577)) | (1L << (VAR_ - 577)) | (1L << (VARIANCE - 577)) | (1L << (LEAST - 577)) | (1L << (GREATEST - 577)) | (1L << (TO_DATE - 577)) | (1L << (NATIONAL_CHAR_STRING_LIT - 577)) | (1L << (CHAR_STRING - 577)) | (1L << (DELIMITED_ID - 577)) | (1L << (ASTERISK - 577)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
						{
						setState(5513);
						column_alias();
						}
					}

					}
					}
					setState(5520);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			setState(5523);
			match(RIGHT_PAREN);
			setState(5525);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KEEP) {
				{
				setState(5524);
				keep_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Respect_or_ignore_nullsContext extends ParserRuleContext {
		public TerminalNode NULLS() { return getToken(OracleSQLStatementParser.NULLS, 0); }
		public TerminalNode RESPECT() { return getToken(OracleSQLStatementParser.RESPECT, 0); }
		public TerminalNode IGNORE() { return getToken(OracleSQLStatementParser.IGNORE, 0); }
		public Respect_or_ignore_nullsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_respect_or_ignore_nulls; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterRespect_or_ignore_nulls(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitRespect_or_ignore_nulls(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitRespect_or_ignore_nulls(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Respect_or_ignore_nullsContext respect_or_ignore_nulls() throws RecognitionException {
		Respect_or_ignore_nullsContext _localctx = new Respect_or_ignore_nullsContext(_ctx, getState());
		enterRule(_localctx, 762, RULE_respect_or_ignore_nulls);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5527);
			_la = _input.LA(1);
			if ( !(_la==IGNORE || _la==RESPECT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5528);
			match(NULLS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ArgumentContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ArgumentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_argument; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterArgument(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitArgument(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitArgument(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ArgumentContext argument() throws RecognitionException {
		ArgumentContext _localctx = new ArgumentContext(_ctx, getState());
		enterRule(_localctx, 764, RULE_argument);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5534);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,715,_ctx) ) {
			case 1:
				{
				setState(5530);
				identifier();
				setState(5531);
				match(EQUALS_OP);
				setState(5532);
				match(GREATER_THAN_OP);
				}
				break;
			}
			setState(5536);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_specContext extends ParserRuleContext {
		public DatatypeContext datatype() {
			return getRuleContext(DatatypeContext.class,0);
		}
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		public TerminalNode REF() { return getToken(OracleSQLStatementParser.REF, 0); }
		public TerminalNode PERCENT_ROWTYPE() { return getToken(OracleSQLStatementParser.PERCENT_ROWTYPE, 0); }
		public TerminalNode PERCENT_TYPE() { return getToken(OracleSQLStatementParser.PERCENT_TYPE, 0); }
		public Type_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterType_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitType_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitType_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Type_specContext type_spec() throws RecognitionException {
		Type_specContext _localctx = new Type_specContext(_ctx, getState());
		enterRule(_localctx, 766, RULE_type_spec);
		int _la;
		try {
			setState(5546);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,718,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5538);
				datatype();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5540);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,716,_ctx) ) {
				case 1:
					{
					setState(5539);
					match(REF);
					}
					break;
				}
				setState(5542);
				type_name();
				setState(5544);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PERCENT_ROWTYPE || _la==PERCENT_TYPE) {
					{
					setState(5543);
					_la = _input.LA(1);
					if ( !(_la==PERCENT_ROWTYPE || _la==PERCENT_TYPE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DatatypeContext extends ParserRuleContext {
		public Native_datatype_elementContext native_datatype_element() {
			return getRuleContext(Native_datatype_elementContext.class,0);
		}
		public Precision_partContext precision_part() {
			return getRuleContext(Precision_partContext.class,0);
		}
		public TerminalNode WITH() { return getToken(OracleSQLStatementParser.WITH, 0); }
		public TerminalNode TIME() { return getToken(OracleSQLStatementParser.TIME, 0); }
		public TerminalNode ZONE() { return getToken(OracleSQLStatementParser.ZONE, 0); }
		public TerminalNode CHARACTER() { return getToken(OracleSQLStatementParser.CHARACTER, 0); }
		public TerminalNode SET() { return getToken(OracleSQLStatementParser.SET, 0); }
		public Char_set_nameContext char_set_name() {
			return getRuleContext(Char_set_nameContext.class,0);
		}
		public TerminalNode LOCAL() { return getToken(OracleSQLStatementParser.LOCAL, 0); }
		public TerminalNode INTERVAL() { return getToken(OracleSQLStatementParser.INTERVAL, 0); }
		public TerminalNode TO() { return getToken(OracleSQLStatementParser.TO, 0); }
		public TerminalNode YEAR() { return getToken(OracleSQLStatementParser.YEAR, 0); }
		public TerminalNode DAY() { return getToken(OracleSQLStatementParser.DAY, 0); }
		public TerminalNode MONTH() { return getToken(OracleSQLStatementParser.MONTH, 0); }
		public TerminalNode SECOND() { return getToken(OracleSQLStatementParser.SECOND, 0); }
		public List<TerminalNode> LEFT_PAREN() { return getTokens(OracleSQLStatementParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(OracleSQLStatementParser.LEFT_PAREN, i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(OracleSQLStatementParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(OracleSQLStatementParser.RIGHT_PAREN, i);
		}
		public DatatypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_datatype; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterDatatype(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitDatatype(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitDatatype(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DatatypeContext datatype() throws RecognitionException {
		DatatypeContext _localctx = new DatatypeContext(_ctx, getState());
		enterRule(_localctx, 768, RULE_datatype);
		int _la;
		try {
			setState(5579);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BOOLEAN:
			case CHARACTER:
			case CHAR:
			case CLOB:
			case DATE:
			case DAY:
			case DEC:
			case DECIMAL:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case FLOAT:
			case HOUR:
			case INTEGER:
			case INT:
			case LONG:
			case MINUTE:
			case MLSLABEL:
			case MONTH:
			case NATURAL:
			case NATURALN:
			case NCHAR:
			case NCLOB:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case RAW:
			case REAL:
			case ROWID:
			case SECOND:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SMALLINT:
			case STRING:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME_TZ_UNCONSTRAINED:
			case TIME_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case UROWID:
			case VARCHAR2:
			case VARCHAR:
			case YEAR:
			case YMINTERVAL_UNCONSTRAINED:
				enterOuterAlt(_localctx, 1);
				{
				setState(5548);
				native_datatype_element();
				setState(5550);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,719,_ctx) ) {
				case 1:
					{
					setState(5549);
					precision_part();
					}
					break;
				}
				setState(5561);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,721,_ctx) ) {
				case 1:
					{
					setState(5552);
					match(WITH);
					setState(5554);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==LOCAL) {
						{
						setState(5553);
						match(LOCAL);
						}
					}

					setState(5556);
					match(TIME);
					setState(5557);
					match(ZONE);
					}
					break;
				case 2:
					{
					setState(5558);
					match(CHARACTER);
					setState(5559);
					match(SET);
					setState(5560);
					char_set_name();
					}
					break;
				}
				}
				break;
			case INTERVAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(5563);
				match(INTERVAL);
				setState(5564);
				_la = _input.LA(1);
				if ( !(_la==DAY || _la==YEAR) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5569);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN) {
					{
					setState(5565);
					match(LEFT_PAREN);
					setState(5566);
					expression();
					setState(5567);
					match(RIGHT_PAREN);
					}
				}

				setState(5571);
				match(TO);
				setState(5572);
				_la = _input.LA(1);
				if ( !(_la==MONTH || _la==SECOND) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5577);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,723,_ctx) ) {
				case 1:
					{
					setState(5573);
					match(LEFT_PAREN);
					setState(5574);
					expression();
					setState(5575);
					match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Precision_partContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(OracleSQLStatementParser.LEFT_PAREN, 0); }
		public List<NumericContext> numeric() {
			return getRuleContexts(NumericContext.class);
		}
		public NumericContext numeric(int i) {
			return getRuleContext(NumericContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(OracleSQLStatementParser.RIGHT_PAREN, 0); }
		public TerminalNode COMMA() { return getToken(OracleSQLStatementParser.COMMA, 0); }
		public TerminalNode CHAR() { return getToken(OracleSQLStatementParser.CHAR, 0); }
		public TerminalNode BYTE() { return getToken(OracleSQLStatementParser.BYTE, 0); }
		public Precision_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_precision_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterPrecision_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitPrecision_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitPrecision_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Precision_partContext precision_part() throws RecognitionException {
		Precision_partContext _localctx = new Precision_partContext(_ctx, getState());
		enterRule(_localctx, 770, RULE_precision_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5581);
			match(LEFT_PAREN);
			setState(5582);
			numeric();
			setState(5585);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(5583);
				match(COMMA);
				setState(5584);
				numeric();
				}
			}

			setState(5588);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==BYTE || _la==CHAR) {
				{
				setState(5587);
				_la = _input.LA(1);
				if ( !(_la==BYTE || _la==CHAR) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(5590);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Native_datatype_elementContext extends ParserRuleContext {
		public TerminalNode BINARY_INTEGER() { return getToken(OracleSQLStatementParser.BINARY_INTEGER, 0); }
		public TerminalNode PLS_INTEGER() { return getToken(OracleSQLStatementParser.PLS_INTEGER, 0); }
		public TerminalNode NATURAL() { return getToken(OracleSQLStatementParser.NATURAL, 0); }
		public TerminalNode BINARY_FLOAT() { return getToken(OracleSQLStatementParser.BINARY_FLOAT, 0); }
		public TerminalNode BINARY_DOUBLE() { return getToken(OracleSQLStatementParser.BINARY_DOUBLE, 0); }
		public TerminalNode NATURALN() { return getToken(OracleSQLStatementParser.NATURALN, 0); }
		public TerminalNode POSITIVE() { return getToken(OracleSQLStatementParser.POSITIVE, 0); }
		public TerminalNode POSITIVEN() { return getToken(OracleSQLStatementParser.POSITIVEN, 0); }
		public TerminalNode SIGNTYPE() { return getToken(OracleSQLStatementParser.SIGNTYPE, 0); }
		public TerminalNode SIMPLE_INTEGER() { return getToken(OracleSQLStatementParser.SIMPLE_INTEGER, 0); }
		public TerminalNode NVARCHAR2() { return getToken(OracleSQLStatementParser.NVARCHAR2, 0); }
		public TerminalNode DEC() { return getToken(OracleSQLStatementParser.DEC, 0); }
		public TerminalNode INTEGER() { return getToken(OracleSQLStatementParser.INTEGER, 0); }
		public TerminalNode INT() { return getToken(OracleSQLStatementParser.INT, 0); }
		public TerminalNode NUMERIC() { return getToken(OracleSQLStatementParser.NUMERIC, 0); }
		public TerminalNode SMALLINT() { return getToken(OracleSQLStatementParser.SMALLINT, 0); }
		public TerminalNode NUMBER() { return getToken(OracleSQLStatementParser.NUMBER, 0); }
		public TerminalNode DECIMAL() { return getToken(OracleSQLStatementParser.DECIMAL, 0); }
		public TerminalNode DOUBLE() { return getToken(OracleSQLStatementParser.DOUBLE, 0); }
		public TerminalNode PRECISION() { return getToken(OracleSQLStatementParser.PRECISION, 0); }
		public TerminalNode FLOAT() { return getToken(OracleSQLStatementParser.FLOAT, 0); }
		public TerminalNode REAL() { return getToken(OracleSQLStatementParser.REAL, 0); }
		public TerminalNode NCHAR() { return getToken(OracleSQLStatementParser.NCHAR, 0); }
		public TerminalNode LONG() { return getToken(OracleSQLStatementParser.LONG, 0); }
		public TerminalNode RAW() { return getToken(OracleSQLStatementParser.RAW, 0); }
		public TerminalNode CHAR() { return getToken(OracleSQLStatementParser.CHAR, 0); }
		public TerminalNode CHARACTER() { return getToken(OracleSQLStatementParser.CHARACTER, 0); }
		public TerminalNode VARCHAR2() { return getToken(OracleSQLStatementParser.VARCHAR2, 0); }
		public TerminalNode VARCHAR() { return getToken(OracleSQLStatementParser.VARCHAR, 0); }
		public TerminalNode STRING() { return getToken(OracleSQLStatementParser.STRING, 0); }
		public TerminalNode BOOLEAN() { return getToken(OracleSQLStatementParser.BOOLEAN, 0); }
		public TerminalNode DATE() { return getToken(OracleSQLStatementParser.DATE, 0); }
		public TerminalNode ROWID() { return getToken(OracleSQLStatementParser.ROWID, 0); }
		public TerminalNode UROWID() { return getToken(OracleSQLStatementParser.UROWID, 0); }
		public TerminalNode YEAR() { return getToken(OracleSQLStatementParser.YEAR, 0); }
		public TerminalNode MONTH() { return getToken(OracleSQLStatementParser.MONTH, 0); }
		public TerminalNode DAY() { return getToken(OracleSQLStatementParser.DAY, 0); }
		public TerminalNode HOUR() { return getToken(OracleSQLStatementParser.HOUR, 0); }
		public TerminalNode MINUTE() { return getToken(OracleSQLStatementParser.MINUTE, 0); }
		public TerminalNode SECOND() { return getToken(OracleSQLStatementParser.SECOND, 0); }
		public TerminalNode TIMEZONE_HOUR() { return getToken(OracleSQLStatementParser.TIMEZONE_HOUR, 0); }
		public TerminalNode TIMEZONE_MINUTE() { return getToken(OracleSQLStatementParser.TIMEZONE_MINUTE, 0); }
		public TerminalNode TIMEZONE_REGION() { return getToken(OracleSQLStatementParser.TIMEZONE_REGION, 0); }
		public TerminalNode TIMEZONE_ABBR() { return getToken(OracleSQLStatementParser.TIMEZONE_ABBR, 0); }
		public TerminalNode TIMESTAMP() { return getToken(OracleSQLStatementParser.TIMESTAMP, 0); }
		public TerminalNode TIMESTAMP_UNCONSTRAINED() { return getToken(OracleSQLStatementParser.TIMESTAMP_UNCONSTRAINED, 0); }
		public TerminalNode TIMESTAMP_TZ_UNCONSTRAINED() { return getToken(OracleSQLStatementParser.TIMESTAMP_TZ_UNCONSTRAINED, 0); }
		public TerminalNode TIMESTAMP_LTZ_UNCONSTRAINED() { return getToken(OracleSQLStatementParser.TIMESTAMP_LTZ_UNCONSTRAINED, 0); }
		public TerminalNode TIME_TZ_UNCONSTRAINED() { return getToken(OracleSQLStatementParser.TIME_TZ_UNCONSTRAINED, 0); }
		public TerminalNode TIME_UNCONSTRAINED() { return getToken(OracleSQLStatementParser.TIME_UNCONSTRAINED, 0); }
		public TerminalNode YMINTERVAL_UNCONSTRAINED() { return getToken(OracleSQLStatementParser.YMINTERVAL_UNCONSTRAINED, 0); }
		public TerminalNode DSINTERVAL_UNCONSTRAINED() { return getToken(OracleSQLStatementParser.DSINTERVAL_UNCONSTRAINED, 0); }
		public TerminalNode BFILE() { return getToken(OracleSQLStatementParser.BFILE, 0); }
		public TerminalNode BLOB() { return getToken(OracleSQLStatementParser.BLOB, 0); }
		public TerminalNode CLOB() { return getToken(OracleSQLStatementParser.CLOB, 0); }
		public TerminalNode NCLOB() { return getToken(OracleSQLStatementParser.NCLOB, 0); }
		public TerminalNode MLSLABEL() { return getToken(OracleSQLStatementParser.MLSLABEL, 0); }
		public Native_datatype_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_native_datatype_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterNative_datatype_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitNative_datatype_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitNative_datatype_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Native_datatype_elementContext native_datatype_element() throws RecognitionException {
		Native_datatype_elementContext _localctx = new Native_datatype_elementContext(_ctx, getState());
		enterRule(_localctx, 772, RULE_native_datatype_element);
		try {
			setState(5654);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BINARY_INTEGER:
				enterOuterAlt(_localctx, 1);
				{
				setState(5592);
				match(BINARY_INTEGER);
				}
				break;
			case PLS_INTEGER:
				enterOuterAlt(_localctx, 2);
				{
				setState(5593);
				match(PLS_INTEGER);
				}
				break;
			case NATURAL:
				enterOuterAlt(_localctx, 3);
				{
				setState(5594);
				match(NATURAL);
				}
				break;
			case BINARY_FLOAT:
				enterOuterAlt(_localctx, 4);
				{
				setState(5595);
				match(BINARY_FLOAT);
				}
				break;
			case BINARY_DOUBLE:
				enterOuterAlt(_localctx, 5);
				{
				setState(5596);
				match(BINARY_DOUBLE);
				}
				break;
			case NATURALN:
				enterOuterAlt(_localctx, 6);
				{
				setState(5597);
				match(NATURALN);
				}
				break;
			case POSITIVE:
				enterOuterAlt(_localctx, 7);
				{
				setState(5598);
				match(POSITIVE);
				}
				break;
			case POSITIVEN:
				enterOuterAlt(_localctx, 8);
				{
				setState(5599);
				match(POSITIVEN);
				}
				break;
			case SIGNTYPE:
				enterOuterAlt(_localctx, 9);
				{
				setState(5600);
				match(SIGNTYPE);
				}
				break;
			case SIMPLE_INTEGER:
				enterOuterAlt(_localctx, 10);
				{
				setState(5601);
				match(SIMPLE_INTEGER);
				}
				break;
			case NVARCHAR2:
				enterOuterAlt(_localctx, 11);
				{
				setState(5602);
				match(NVARCHAR2);
				}
				break;
			case DEC:
				enterOuterAlt(_localctx, 12);
				{
				setState(5603);
				match(DEC);
				}
				break;
			case INTEGER:
				enterOuterAlt(_localctx, 13);
				{
				setState(5604);
				match(INTEGER);
				}
				break;
			case INT:
				enterOuterAlt(_localctx, 14);
				{
				setState(5605);
				match(INT);
				}
				break;
			case NUMERIC:
				enterOuterAlt(_localctx, 15);
				{
				setState(5606);
				match(NUMERIC);
				}
				break;
			case SMALLINT:
				enterOuterAlt(_localctx, 16);
				{
				setState(5607);
				match(SMALLINT);
				}
				break;
			case NUMBER:
				enterOuterAlt(_localctx, 17);
				{
				setState(5608);
				match(NUMBER);
				}
				break;
			case DECIMAL:
				enterOuterAlt(_localctx, 18);
				{
				setState(5609);
				match(DECIMAL);
				}
				break;
			case DOUBLE:
				enterOuterAlt(_localctx, 19);
				{
				setState(5610);
				match(DOUBLE);
				setState(5612);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,727,_ctx) ) {
				case 1:
					{
					setState(5611);
					match(PRECISION);
					}
					break;
				}
				}
				break;
			case FLOAT:
				enterOuterAlt(_localctx, 20);
				{
				setState(5614);
				match(FLOAT);
				}
				break;
			case REAL:
				enterOuterAlt(_localctx, 21);
				{
				setState(5615);
				match(REAL);
				}
				break;
			case NCHAR:
				enterOuterAlt(_localctx, 22);
				{
				setState(5616);
				match(NCHAR);
				}
				break;
			case LONG:
				enterOuterAlt(_localctx, 23);
				{
				setState(5617);
				match(LONG);
				setState(5619);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,728,_ctx) ) {
				case 1:
					{
					setState(5618);
					match(RAW);
					}
					break;
				}
				}
				break;
			case CHAR:
				enterOuterAlt(_localctx, 24);
				{
				setState(5621);
				match(CHAR);
				}
				break;
			case CHARACTER:
				enterOuterAlt(_localctx, 25);
				{
				setState(5622);
				match(CHARACTER);
				}
				break;
			case VARCHAR2:
				enterOuterAlt(_localctx, 26);
				{
				setState(5623);
				match(VARCHAR2);
				}
				break;
			case VARCHAR:
				enterOuterAlt(_localctx, 27);
				{
				setState(5624);
				match(VARCHAR);
				}
				break;
			case STRING:
				enterOuterAlt(_localctx, 28);
				{
				setState(5625);
				match(STRING);
				}
				break;
			case RAW:
				enterOuterAlt(_localctx, 29);
				{
				setState(5626);
				match(RAW);
				}
				break;
			case BOOLEAN:
				enterOuterAlt(_localctx, 30);
				{
				setState(5627);
				match(BOOLEAN);
				}
				break;
			case DATE:
				enterOuterAlt(_localctx, 31);
				{
				setState(5628);
				match(DATE);
				}
				break;
			case ROWID:
				enterOuterAlt(_localctx, 32);
				{
				setState(5629);
				match(ROWID);
				}
				break;
			case UROWID:
				enterOuterAlt(_localctx, 33);
				{
				setState(5630);
				match(UROWID);
				}
				break;
			case YEAR:
				enterOuterAlt(_localctx, 34);
				{
				setState(5631);
				match(YEAR);
				}
				break;
			case MONTH:
				enterOuterAlt(_localctx, 35);
				{
				setState(5632);
				match(MONTH);
				}
				break;
			case DAY:
				enterOuterAlt(_localctx, 36);
				{
				setState(5633);
				match(DAY);
				}
				break;
			case HOUR:
				enterOuterAlt(_localctx, 37);
				{
				setState(5634);
				match(HOUR);
				}
				break;
			case MINUTE:
				enterOuterAlt(_localctx, 38);
				{
				setState(5635);
				match(MINUTE);
				}
				break;
			case SECOND:
				enterOuterAlt(_localctx, 39);
				{
				setState(5636);
				match(SECOND);
				}
				break;
			case TIMEZONE_HOUR:
				enterOuterAlt(_localctx, 40);
				{
				setState(5637);
				match(TIMEZONE_HOUR);
				}
				break;
			case TIMEZONE_MINUTE:
				enterOuterAlt(_localctx, 41);
				{
				setState(5638);
				match(TIMEZONE_MINUTE);
				}
				break;
			case TIMEZONE_REGION:
				enterOuterAlt(_localctx, 42);
				{
				setState(5639);
				match(TIMEZONE_REGION);
				}
				break;
			case TIMEZONE_ABBR:
				enterOuterAlt(_localctx, 43);
				{
				setState(5640);
				match(TIMEZONE_ABBR);
				}
				break;
			case TIMESTAMP:
				enterOuterAlt(_localctx, 44);
				{
				setState(5641);
				match(TIMESTAMP);
				}
				break;
			case TIMESTAMP_UNCONSTRAINED:
				enterOuterAlt(_localctx, 45);
				{
				setState(5642);
				match(TIMESTAMP_UNCONSTRAINED);
				}
				break;
			case TIMESTAMP_TZ_UNCONSTRAINED:
				enterOuterAlt(_localctx, 46);
				{
				setState(5643);
				match(TIMESTAMP_TZ_UNCONSTRAINED);
				}
				break;
			case TIMESTAMP_LTZ_UNCONSTRAINED:
				enterOuterAlt(_localctx, 47);
				{
				setState(5644);
				match(TIMESTAMP_LTZ_UNCONSTRAINED);
				}
				break;
			case TIME_TZ_UNCONSTRAINED:
				enterOuterAlt(_localctx, 48);
				{
				setState(5645);
				match(TIME_TZ_UNCONSTRAINED);
				}
				break;
			case TIME_UNCONSTRAINED:
				enterOuterAlt(_localctx, 49);
				{
				setState(5646);
				match(TIME_UNCONSTRAINED);
				}
				break;
			case YMINTERVAL_UNCONSTRAINED:
				enterOuterAlt(_localctx, 50);
				{
				setState(5647);
				match(YMINTERVAL_UNCONSTRAINED);
				}
				break;
			case DSINTERVAL_UNCONSTRAINED:
				enterOuterAlt(_localctx, 51);
				{
				setState(5648);
				match(DSINTERVAL_UNCONSTRAINED);
				}
				break;
			case BFILE:
				enterOuterAlt(_localctx, 52);
				{
				setState(5649);
				match(BFILE);
				}
				break;
			case BLOB:
				enterOuterAlt(_localctx, 53);
				{
				setState(5650);
				match(BLOB);
				}
				break;
			case CLOB:
				enterOuterAlt(_localctx, 54);
				{
				setState(5651);
				match(CLOB);
				}
				break;
			case NCLOB:
				enterOuterAlt(_localctx, 55);
				{
				setState(5652);
				match(NCLOB);
				}
				break;
			case MLSLABEL:
				enterOuterAlt(_localctx, 56);
				{
				setState(5653);
				match(MLSLABEL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Bind_variableContext extends ParserRuleContext {
		public List<TerminalNode> BINDVAR() { return getTokens(OracleSQLStatementParser.BINDVAR); }
		public TerminalNode BINDVAR(int i) {
			return getToken(OracleSQLStatementParser.BINDVAR, i);
		}
		public List<TerminalNode> UNSIGNED_INTEGER() { return getTokens(OracleSQLStatementParser.UNSIGNED_INTEGER); }
		public TerminalNode UNSIGNED_INTEGER(int i) {
			return getToken(OracleSQLStatementParser.UNSIGNED_INTEGER, i);
		}
		public List<General_element_partContext> general_element_part() {
			return getRuleContexts(General_element_partContext.class);
		}
		public General_element_partContext general_element_part(int i) {
			return getRuleContext(General_element_partContext.class,i);
		}
		public TerminalNode INDICATOR() { return getToken(OracleSQLStatementParser.INDICATOR, 0); }
		public Bind_variableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bind_variable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterBind_variable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitBind_variable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitBind_variable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Bind_variableContext bind_variable() throws RecognitionException {
		Bind_variableContext _localctx = new Bind_variableContext(_ctx, getState());
		enterRule(_localctx, 774, RULE_bind_variable);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5659);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BINDVAR:
				{
				setState(5656);
				match(BINDVAR);
				}
				break;
			case COLON:
				{
				setState(5657);
				match(COLON);
				setState(5658);
				match(UNSIGNED_INTEGER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(5669);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,733,_ctx) ) {
			case 1:
				{
				setState(5662);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INDICATOR) {
					{
					setState(5661);
					match(INDICATOR);
					}
				}

				setState(5667);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case BINDVAR:
					{
					setState(5664);
					match(BINDVAR);
					}
					break;
				case COLON:
					{
					setState(5665);
					match(COLON);
					setState(5666);
					match(UNSIGNED_INTEGER);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			setState(5675);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,734,_ctx);
			while ( _alt!=2 && _alt!= ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(5671);
					match(PERIOD);
					setState(5672);
					general_element_part();
					}
					} 
				}
				setState(5677);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,734,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class General_elementContext extends ParserRuleContext {
		public List<General_element_partContext> general_element_part() {
			return getRuleContexts(General_element_partContext.class);
		}
		public General_element_partContext general_element_part(int i) {
			return getRuleContext(General_element_partContext.class,i);
		}
		public General_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_general_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterGeneral_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitGeneral_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitGeneral_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final General_elementContext general_element() throws RecognitionException {
		General_elementContext _localctx = new General_elementContext(_ctx, getState());
		enterRule(_localctx, 776, RULE_general_element);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5678);
			general_element_part();
			setState(5683);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,735,_ctx);
			while ( _alt!=2 && _alt!= ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(5679);
					match(PERIOD);
					setState(5680);
					general_element_part();
					}
					} 
				}
				setState(5685);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,735,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class General_element_partContext extends ParserRuleContext {
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public TerminalNode INTRODUCER() { return getToken(OracleSQLStatementParser.INTRODUCER, 0); }
		public Char_set_nameContext char_set_name() {
			return getRuleContext(Char_set_nameContext.class,0);
		}
		public Link_nameContext link_name() {
			return getRuleContext(Link_nameContext.class,0);
		}
		public Function_argumentContext function_argument() {
			return getRuleContext(Function_argumentContext.class,0);
		}
		public General_element_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_general_element_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterGeneral_element_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitGeneral_element_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitGeneral_element_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final General_element_partContext general_element_part() throws RecognitionException {
		General_element_partContext _localctx = new General_element_partContext(_ctx, getState());
		enterRule(_localctx, 778, RULE_general_element_part);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5688);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTRODUCER) {
				{
				setState(5686);
				match(INTRODUCER);
				setState(5687);
				char_set_name();
				}
			}

			setState(5690);
			id_expression();
			setState(5695);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,737,_ctx);
			while ( _alt!=2 && _alt!= ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(5691);
					match(PERIOD);
					setState(5692);
					id_expression();
					}
					} 
				}
				setState(5697);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,737,_ctx);
			}
			setState(5700);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,738,_ctx) ) {
			case 1:
				{
				setState(5698);
				match(AT_SIGN);
				setState(5699);
				link_name();
				}
				break;
			}
			setState(5703);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,739,_ctx) ) {
			case 1:
				{
				setState(5702);
				function_argument();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_elementContext extends ParserRuleContext {
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public TerminalNode INTRODUCER() { return getToken(OracleSQLStatementParser.INTRODUCER, 0); }
		public Char_set_nameContext char_set_name() {
			return getRuleContext(Char_set_nameContext.class,0);
		}
		public Table_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterTable_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitTable_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitTable_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_elementContext table_element() throws RecognitionException {
		Table_elementContext _localctx = new Table_elementContext(_ctx, getState());
		enterRule(_localctx, 780, RULE_table_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5707);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTRODUCER) {
				{
				setState(5705);
				match(INTRODUCER);
				setState(5706);
				char_set_name();
				}
			}

			setState(5709);
			id_expression();
			setState(5714);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PERIOD) {
				{
				{
				setState(5710);
				match(PERIOD);
				setState(5711);
				id_expression();
				}
				}
				setState(5716);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstantContext extends ParserRuleContext {
		public TerminalNode TIMESTAMP() { return getToken(OracleSQLStatementParser.TIMESTAMP, 0); }
		public List<Quoted_stringContext> quoted_string() {
			return getRuleContexts(Quoted_stringContext.class);
		}
		public Quoted_stringContext quoted_string(int i) {
			return getRuleContext(Quoted_stringContext.class,i);
		}
		public List<Bind_variableContext> bind_variable() {
			return getRuleContexts(Bind_variableContext.class);
		}
		public Bind_variableContext bind_variable(int i) {
			return getRuleContext(Bind_variableContext.class,i);
		}
		public TerminalNode AT() { return getToken(OracleSQLStatementParser.AT, 0); }
		public TerminalNode TIME() { return getToken(OracleSQLStatementParser.TIME, 0); }
		public TerminalNode ZONE() { return getToken(OracleSQLStatementParser.ZONE, 0); }
		public TerminalNode INTERVAL() { return getToken(OracleSQLStatementParser.INTERVAL, 0); }
		public TerminalNode YEAR() { return getToken(OracleSQLStatementParser.YEAR, 0); }
		public TerminalNode MONTH() { return getToken(OracleSQLStatementParser.MONTH, 0); }
		public List<TerminalNode> DAY() { return getTokens(OracleSQLStatementParser.DAY); }
		public TerminalNode DAY(int i) {
			return getToken(OracleSQLStatementParser.DAY, i);
		}
		public List<TerminalNode> HOUR() { return getTokens(OracleSQLStatementParser.HOUR); }
		public TerminalNode HOUR(int i) {
			return getToken(OracleSQLStatementParser.HOUR, i);
		}
		public List<TerminalNode> MINUTE() { return getTokens(OracleSQLStatementParser.MINUTE); }
		public TerminalNode MINUTE(int i) {
			return getToken(OracleSQLStatementParser.MINUTE, i);
		}
		public List<TerminalNode> SECOND() { return getTokens(OracleSQLStatementParser.SECOND); }
		public TerminalNode SECOND(int i) {
			return getToken(OracleSQLStatementParser.SECOND, i);
		}
		public General_element_partContext general_element_part() {
			return getRuleContext(General_element_partContext.class,0);
		}
		public List<TerminalNode> LEFT_PAREN() { return getTokens(OracleSQLStatementParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(OracleSQLStatementParser.LEFT_PAREN, i);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(OracleSQLStatementParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(OracleSQLStatementParser.RIGHT_PAREN, i);
		}
		public TerminalNode TO() { return getToken(OracleSQLStatementParser.TO, 0); }
		public List<TerminalNode> UNSIGNED_INTEGER() { return getTokens(OracleSQLStatementParser.UNSIGNED_INTEGER); }
		public TerminalNode UNSIGNED_INTEGER(int i) {
			return getToken(OracleSQLStatementParser.UNSIGNED_INTEGER, i);
		}
		public TerminalNode COMMA() { return getToken(OracleSQLStatementParser.COMMA, 0); }
		public NumericContext numeric() {
			return getRuleContext(NumericContext.class,0);
		}
		public TerminalNode DATE() { return getToken(OracleSQLStatementParser.DATE, 0); }
		public TerminalNode NULL() { return getToken(OracleSQLStatementParser.NULL, 0); }
		public TerminalNode TRUE() { return getToken(OracleSQLStatementParser.TRUE, 0); }
		public TerminalNode FALSE() { return getToken(OracleSQLStatementParser.FALSE, 0); }
		public TerminalNode DBTIMEZONE() { return getToken(OracleSQLStatementParser.DBTIMEZONE, 0); }
		public TerminalNode SESSIONTIMEZONE() { return getToken(OracleSQLStatementParser.SESSIONTIMEZONE, 0); }
		public TerminalNode MINVALUE() { return getToken(OracleSQLStatementParser.MINVALUE, 0); }
		public TerminalNode MAXVALUE() { return getToken(OracleSQLStatementParser.MAXVALUE, 0); }
		public TerminalNode DEFAULT() { return getToken(OracleSQLStatementParser.DEFAULT, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constant; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterConstant(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitConstant(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitConstant(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstantContext constant() throws RecognitionException {
		ConstantContext _localctx = new ConstantContext(_ctx, getState());
		enterRule(_localctx, 782, RULE_constant);
		int _la;
		try {
			setState(5779);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TIMESTAMP:
				enterOuterAlt(_localctx, 1);
				{
				setState(5717);
				match(TIMESTAMP);
				setState(5720);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NATIONAL_CHAR_STRING_LIT:
				case CHAR_STRING:
					{
					setState(5718);
					quoted_string();
					}
					break;
				case BINDVAR:
				case COLON:
					{
					setState(5719);
					bind_variable();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5726);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,743,_ctx) ) {
				case 1:
					{
					setState(5722);
					match(AT);
					setState(5723);
					match(TIME);
					setState(5724);
					match(ZONE);
					setState(5725);
					quoted_string();
					}
					break;
				}
				}
				break;
			case INTERVAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(5728);
				match(INTERVAL);
				setState(5732);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NATIONAL_CHAR_STRING_LIT:
				case CHAR_STRING:
					{
					setState(5729);
					quoted_string();
					}
					break;
				case BINDVAR:
				case COLON:
					{
					setState(5730);
					bind_variable();
					}
					break;
				case ABS:
				case ACOS:
				case ADD:
				case ADD_MONTHS:
				case AFTER:
				case AGENT:
				case AGGREGATE:
				case A_LETTER:
				case ANALYZE:
				case ARRAY:
				case ASCII:
				case ASCIISTR:
				case ASIN:
				case ASSOCIATE:
				case ATAN2:
				case ATAN:
				case AT:
				case ATTRIBUTE:
				case AUDIT:
				case AUTHID:
				case AUTO:
				case AUTOMATIC:
				case AUTONOMOUS_TRANSACTION:
				case BATCH:
				case BEFORE:
				case BFILE:
				case BFILENAME:
				case BINARY_DOUBLE:
				case BINARY_FLOAT:
				case BINARY_INTEGER:
				case BIN_TO_NUM:
				case BITAND:
				case BLOB:
				case BLOCK:
				case BODY:
				case BOOLEAN:
				case BOTH:
				case BULK:
				case BYTE:
				case CALL:
				case CANONICAL:
				case CARDINALITY:
				case CASCADE:
				case CASE:
				case CAST:
				case CEIL:
				case CHARACTER:
				case CHAR:
				case CHAR_CS:
				case CHARTOROWID:
				case CHR:
				case C_LETTER:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COALESCE:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPATIBILITY:
				case COMPILE:
				case COMPOSE:
				case COMPOUND:
				case CONCAT:
				case CONSTANT:
				case CONSTRAINT:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTENT:
				case CONTEXT:
				case CONTINUE:
				case CONVERT:
				case CORRUPT_XID_ALL:
				case CORRUPT_XID:
				case COS:
				case COSH:
				case COST:
				case COUNT:
				case CROSS:
				case CUBE:
				case CURRENT_DATE:
				case CURRENT_TIMESTAMP:
				case CURRENT_USER:
				case CURSOR:
				case CUSTOMDATUM:
				case CYCLE:
				case DATABASE:
				case DATA:
				case DAY:
				case DB_ROLE_CHANGE:
				case DBTIMEZONE:
				case DDL:
				case DEBUG:
				case DEC:
				case DECIMAL:
				case DECOMPOSE:
				case DECREMENT:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE:
				case DETERMINISTIC:
				case DIMENSION:
				case DISABLE:
				case DISASSOCIATE:
				case DOCUMENT:
				case DOUBLE:
				case DSINTERVAL_UNCONSTRAINED:
				case DUMP:
				case EACH:
				case ELEMENT:
				case EMPTY_BLOB:
				case EMPTY_CLOB:
				case EMPTY:
				case ENABLE:
				case ENCODING:
				case ENTITYESCAPING:
				case ERR:
				case ERRORS:
				case ESCAPE:
				case EVALNAME:
				case EXCEPTION:
				case EXCEPTION_INIT:
				case EXCEPTIONS:
				case EXCLUDE:
				case EXECUTE:
				case EXIT:
				case EXP:
				case EXPLAIN:
				case EXTERNAL:
				case EXTRACT:
				case FAILURE:
				case FINAL:
				case FIRST:
				case FIRST_VALUE:
				case FLOAT:
				case FLOOR:
				case FOLLOWING:
				case FOLLOWS:
				case FORALL:
				case FORCE:
				case FROM_TZ:
				case FULL:
				case FUNCTION:
				case GROUP_ID:
				case GROUPING:
				case HASH:
				case HEXTORAW:
				case HIDE:
				case HOUR:
				case IGNORE:
				case IMMEDIATE:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDENT:
				case INDEXED:
				case INDICATOR:
				case INDICES:
				case INFINITE:
				case INITCAP:
				case INLINE:
				case INNER:
				case INOUT:
				case INSTANTIABLE:
				case INSTEAD:
				case INSTR2:
				case INSTR4:
				case INSTRB:
				case INSTRC:
				case INSTR:
				case INTERFACE:
				case INTEGER:
				case INTERVAL:
				case INT:
				case INVALIDATE:
				case ISOLATION:
				case ITERATE:
				case JAVA:
				case JOIN:
				case KEEP:
				case KEY:
				case LANGUAGE:
				case LAST_DAY:
				case LAST:
				case LAST_VALUE:
				case LEADING:
				case LEFT:
				case LENGTH2:
				case LENGTH4:
				case LENGTHB:
				case LENGTHC:
				case LENGTH:
				case LEVEL:
				case LIBRARY:
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIMIT:
				case LN:
				case LNNVL:
				case LOCAL:
				case LOCALTIMESTAMP:
				case LOCKED:
				case LOG:
				case LOGOFF:
				case LOGON:
				case LONG:
				case LOOP:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAIN:
				case MAP:
				case MATCHED:
				case MAXVALUE:
				case MEASURES:
				case MEMBER:
				case MERGE:
				case MINUTE:
				case MINVALUE:
				case MLSLABEL:
				case MODEL:
				case MODIFY:
				case MOD:
				case MONTH:
				case MONTHS_BETWEEN:
				case MULTISET:
				case NAME:
				case NAN:
				case NANVL:
				case NATURAL:
				case NATURALN:
				case NAV:
				case NCHAR_CS:
				case NCHAR:
				case NCHR:
				case NCLOB:
				case NESTED:
				case NEW:
				case NEW_TIME:
				case NEXT_DAY:
				case NOAUDIT:
				case NOCOPY:
				case NOCYCLE:
				case NOENTITYESCAPING:
				case NONE:
				case NO:
				case NOSCHEMACHECK:
				case NULLIF:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case NUMTODSINTERVAL:
				case NUMTOYMINTERVAL:
				case NVARCHAR2:
				case NVL2:
				case OBJECT:
				case OFF:
				case OID:
				case OLD:
				case ONLY:
				case OPAQUE:
				case OPEN:
				case ORADATA:
				case ORDINALITY:
				case OSERROR:
				case OUTER:
				case OUT:
				case OVER:
				case OVERRIDING:
				case PACKAGE:
				case PARALLEL_ENABLE:
				case PARAMETERS:
				case PARENT:
				case PARTITION:
				case PASSING:
				case PATH:
				case PIPELINED:
				case PLAN:
				case PLS_INTEGER:
				case POSITIVEN:
				case POSITIVE:
				case POWER:
				case PRAGMA:
				case PRECEDING:
				case PRECISION:
				case PRESENT:
				case PRIOR:
				case PROCEDURE:
				case RAISE:
				case RANGE:
				case RAW:
				case RAWTOHEX:
				case READ:
				case REAL:
				case RECORD:
				case REFERENCE:
				case REFERENCING:
				case REF:
				case REGEXP_COUNT:
				case REGEXP_INSTR:
				case REGEXP_REPLACE:
				case REGEXP_SUBSTR:
				case REJECT:
				case RELIES_ON:
				case REMAINDER:
				case RENAME:
				case REPLACE:
				case RESPECT:
				case RESTRICT_REFERENCES:
				case RESULT_CACHE:
				case RESULT:
				case RETURNING:
				case RETURN:
				case REUSE:
				case REVERSE:
				case RIGHT:
				case ROLLBACK:
				case ROLLUP:
				case ROWID:
				case ROWNUM:
				case ROW:
				case ROWS:
				case RPAD:
				case RTRIM:
				case RULES:
				case SAMPLE:
				case SAVEPOINT:
				case SAVE:
				case SCHEMACHECK:
				case SCHEMA:
				case SCN:
				case SECOND:
				case SEED:
				case SEGMENT:
				case SELF:
				case SEQUENTIAL:
				case SERIALIZABLE:
				case SERIALLY_REUSABLE:
				case SERVERERROR:
				case SESSIONTIMEZONE:
				case SET:
				case SETS:
				case SETTINGS:
				case SHOW:
				case SHUTDOWN:
				case SIBLINGS:
				case SIGN:
				case SIGNTYPE:
				case SIMPLE_INTEGER:
				case SINGLE:
				case SINH:
				case SIN:
				case SKIP_:
				case SMALLINT:
				case SNAPSHOT:
				case SOME:
				case SOUNDEX:
				case SPECIFICATION:
				case SQLDATA:
				case SQLERROR:
				case SQRT:
				case STANDALONE:
				case STARTUP:
				case STATEMENT_ID:
				case STATEMENT:
				case STATIC:
				case STATISTICS:
				case STRING:
				case SUBMULTISET:
				case SUBPARTITION:
				case SUBSTITUTABLE:
				case SUBTYPE:
				case SUCCESS:
				case SUSPEND:
				case SYS_CONTEXT:
				case SYSDATE:
				case SYSTIMESTAMP:
				case TANH:
				case TAN:
				case TIMESTAMP_LTZ_UNCONSTRAINED:
				case TIMESTAMP:
				case TIMESTAMP_TZ_UNCONSTRAINED:
				case TIMESTAMP_UNCONSTRAINED:
				case TIME:
				case TIMEZONE_ABBR:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TIMEZONE_REGION:
				case TO_CLOB:
				case TO_DSINTERVAL:
				case TO_LOB:
				case TO_MULTI_BYTE:
				case TO_NCLOB:
				case TO_NUMBER:
				case TO_SINGLE_BYTE:
				case TO_TIMESTAMP:
				case TO_TIMESTAMP_TZ:
				case TO_YMINTERVAL:
				case TRAILING:
				case TRANSACTION:
				case TRANSLATE:
				case TREAT:
				case TRIGGER:
				case TRUNCATE:
				case TRUNC:
				case TYPE:
				case TZ_OFFSET:
				case UID:
				case UNBOUNDED:
				case UNDER:
				case UNLIMITED:
				case UNTIL:
				case UPDATED:
				case UPPER:
				case UPSERT:
				case UROWID:
				case USERENV:
				case USER:
				case USE:
				case VALIDATE:
				case VALUE:
				case VARCHAR2:
				case VARCHAR:
				case VARIABLE:
				case VARRAY:
				case VARYING:
				case VERSIONS:
				case VERSION:
				case VSIZE:
				case WAIT:
				case WARNING:
				case WELLFORMED:
				case WHENEVER:
				case WHILE:
				case WITHIN:
				case WORK:
				case WRITE:
				case XMLAGG:
				case XMLATTRIBUTES:
				case XMLCAST:
				case XMLCOLATTVAL:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case XML:
				case YEAR:
				case YES:
				case YMINTERVAL_UNCONSTRAINED:
				case ZONE:
				case PREDICTION:
				case PREDICTION_BOUNDS:
				case PREDICTION_COST:
				case PREDICTION_DETAILS:
				case PREDICTION_PROBABILITY:
				case PREDICTION_SET:
				case CUME_DIST:
				case DENSE_RANK:
				case LISTAGG:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case RANK:
				case AVG:
				case CORR:
				case COVAR_:
				case DECODE:
				case LAG:
				case LEAD:
				case MAX:
				case MEDIAN:
				case MIN:
				case NTILE:
				case NVL:
				case RATIO_TO_REPORT:
				case REGR_:
				case ROUND:
				case ROW_NUMBER:
				case SUBSTR:
				case TO_CHAR:
				case TRIM:
				case SUM:
				case STDDEV:
				case VAR_:
				case VARIANCE:
				case LEAST:
				case GREATEST:
				case TO_DATE:
				case DELIMITED_ID:
				case ASTERISK:
				case INTRODUCER:
				case REGULAR_ID:
					{
					setState(5731);
					general_element_part();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5734);
				_la = _input.LA(1);
				if ( !(_la==DAY || _la==HOUR || _la==MINUTE || _la==MONTH || _la==SECOND || _la==YEAR) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5748);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,748,_ctx) ) {
				case 1:
					{
					setState(5735);
					match(LEFT_PAREN);
					setState(5738);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case UNSIGNED_INTEGER:
						{
						setState(5736);
						match(UNSIGNED_INTEGER);
						}
						break;
					case BINDVAR:
					case COLON:
						{
						setState(5737);
						bind_variable();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(5745);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(5740);
						match(COMMA);
						setState(5743);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case UNSIGNED_INTEGER:
							{
							setState(5741);
							match(UNSIGNED_INTEGER);
							}
							break;
						case BINDVAR:
						case COLON:
							{
							setState(5742);
							bind_variable();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
					}

					setState(5747);
					match(RIGHT_PAREN);
					}
					break;
				}
				setState(5765);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,752,_ctx) ) {
				case 1:
					{
					setState(5750);
					match(TO);
					setState(5763);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case DAY:
						{
						setState(5751);
						match(DAY);
						}
						break;
					case HOUR:
						{
						setState(5752);
						match(HOUR);
						}
						break;
					case MINUTE:
						{
						setState(5753);
						match(MINUTE);
						}
						break;
					case SECOND:
						{
						setState(5754);
						match(SECOND);
						setState(5761);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,750,_ctx) ) {
						case 1:
							{
							setState(5755);
							match(LEFT_PAREN);
							setState(5758);
							_errHandler.sync(this);
							switch (_input.LA(1)) {
							case UNSIGNED_INTEGER:
								{
								setState(5756);
								match(UNSIGNED_INTEGER);
								}
								break;
							case BINDVAR:
							case COLON:
								{
								setState(5757);
								bind_variable();
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							setState(5760);
							match(RIGHT_PAREN);
							}
							break;
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				}
				}
				break;
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
				enterOuterAlt(_localctx, 3);
				{
				setState(5767);
				numeric();
				}
				break;
			case DATE:
				enterOuterAlt(_localctx, 4);
				{
				setState(5768);
				match(DATE);
				setState(5769);
				quoted_string();
				}
				break;
			case NATIONAL_CHAR_STRING_LIT:
			case CHAR_STRING:
				enterOuterAlt(_localctx, 5);
				{
				setState(5770);
				quoted_string();
				}
				break;
			case NULL:
				enterOuterAlt(_localctx, 6);
				{
				setState(5771);
				match(NULL);
				}
				break;
			case TRUE:
				enterOuterAlt(_localctx, 7);
				{
				setState(5772);
				match(TRUE);
				}
				break;
			case FALSE:
				enterOuterAlt(_localctx, 8);
				{
				setState(5773);
				match(FALSE);
				}
				break;
			case DBTIMEZONE:
				enterOuterAlt(_localctx, 9);
				{
				setState(5774);
				match(DBTIMEZONE);
				}
				break;
			case SESSIONTIMEZONE:
				enterOuterAlt(_localctx, 10);
				{
				setState(5775);
				match(SESSIONTIMEZONE);
				}
				break;
			case MINVALUE:
				enterOuterAlt(_localctx, 11);
				{
				setState(5776);
				match(MINVALUE);
				}
				break;
			case MAXVALUE:
				enterOuterAlt(_localctx, 12);
				{
				setState(5777);
				match(MAXVALUE);
				}
				break;
			case DEFAULT:
				enterOuterAlt(_localctx, 13);
				{
				setState(5778);
				match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NumericContext extends ParserRuleContext {
		public Int_valueContext int_value() {
			return getRuleContext(Int_valueContext.class,0);
		}
		public Float_valueContext float_value() {
			return getRuleContext(Float_valueContext.class,0);
		}
		public NumericContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numeric; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterNumeric(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitNumeric(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitNumeric(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NumericContext numeric() throws RecognitionException {
		NumericContext _localctx = new NumericContext(_ctx, getState());
		enterRule(_localctx, 784, RULE_numeric);
		try {
			setState(5783);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UNSIGNED_INTEGER:
				enterOuterAlt(_localctx, 1);
				{
				setState(5781);
				int_value();
				}
				break;
			case APPROXIMATE_NUM_LIT:
				enterOuterAlt(_localctx, 2);
				{
				setState(5782);
				float_value();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Int_valueContext extends ParserRuleContext {
		public TerminalNode UNSIGNED_INTEGER() { return getToken(OracleSQLStatementParser.UNSIGNED_INTEGER, 0); }
		public Int_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_int_value; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterInt_value(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitInt_value(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitInt_value(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Int_valueContext int_value() throws RecognitionException {
		Int_valueContext _localctx = new Int_valueContext(_ctx, getState());
		enterRule(_localctx, 786, RULE_int_value);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5785);
			match(UNSIGNED_INTEGER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Float_valueContext extends ParserRuleContext {
		public TerminalNode APPROXIMATE_NUM_LIT() { return getToken(OracleSQLStatementParser.APPROXIMATE_NUM_LIT, 0); }
		public Float_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_float_value; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterFloat_value(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitFloat_value(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitFloat_value(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Float_valueContext float_value() throws RecognitionException {
		Float_valueContext _localctx = new Float_valueContext(_ctx, getState());
		enterRule(_localctx, 788, RULE_float_value);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5787);
			match(APPROXIMATE_NUM_LIT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Numeric_negativeContext extends ParserRuleContext {
		public TerminalNode MINUS_SIGN() { return getToken(OracleSQLStatementParser.MINUS_SIGN, 0); }
		public NumericContext numeric() {
			return getRuleContext(NumericContext.class,0);
		}
		public Numeric_negativeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numeric_negative; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterNumeric_negative(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitNumeric_negative(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitNumeric_negative(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Numeric_negativeContext numeric_negative() throws RecognitionException {
		Numeric_negativeContext _localctx = new Numeric_negativeContext(_ctx, getState());
		enterRule(_localctx, 790, RULE_numeric_negative);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5789);
			match(MINUS_SIGN);
			setState(5790);
			numeric();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Quoted_stringContext extends ParserRuleContext {
		public TerminalNode CHAR_STRING() { return getToken(OracleSQLStatementParser.CHAR_STRING, 0); }
		public TerminalNode NATIONAL_CHAR_STRING_LIT() { return getToken(OracleSQLStatementParser.NATIONAL_CHAR_STRING_LIT, 0); }
		public Quoted_stringContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_quoted_string; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterQuoted_string(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitQuoted_string(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitQuoted_string(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Quoted_stringContext quoted_string() throws RecognitionException {
		Quoted_stringContext _localctx = new Quoted_stringContext(_ctx, getState());
		enterRule(_localctx, 792, RULE_quoted_string);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5792);
			_la = _input.LA(1);
			if ( !(_la==NATIONAL_CHAR_STRING_LIT || _la==CHAR_STRING) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IdentifierContext extends ParserRuleContext {
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public TerminalNode INTRODUCER() { return getToken(OracleSQLStatementParser.INTRODUCER, 0); }
		public Char_set_nameContext char_set_name() {
			return getRuleContext(Char_set_nameContext.class,0);
		}
		public IdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterIdentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitIdentifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitIdentifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IdentifierContext identifier() throws RecognitionException {
		IdentifierContext _localctx = new IdentifierContext(_ctx, getState());
		enterRule(_localctx, 794, RULE_identifier);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5796);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTRODUCER) {
				{
				setState(5794);
				match(INTRODUCER);
				setState(5795);
				char_set_name();
				}
			}

			setState(5798);
			id_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Id_expressionContext extends ParserRuleContext {
		public Regular_idContext regular_id() {
			return getRuleContext(Regular_idContext.class,0);
		}
		public TerminalNode DELIMITED_ID() { return getToken(OracleSQLStatementParser.DELIMITED_ID, 0); }
		public Id_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_id_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterId_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitId_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitId_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Id_expressionContext id_expression() throws RecognitionException {
		Id_expressionContext _localctx = new Id_expressionContext(_ctx, getState());
		enterRule(_localctx, 796, RULE_id_expression);
		try {
			setState(5802);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ABS:
			case ACOS:
			case ADD:
			case ADD_MONTHS:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASCII:
			case ASCIISTR:
			case ASIN:
			case ASSOCIATE:
			case ATAN2:
			case ATAN:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BFILENAME:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BIN_TO_NUM:
			case BITAND:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CARDINALITY:
			case CASCADE:
			case CASE:
			case CAST:
			case CEIL:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHARTOROWID:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOSE:
			case COMPOUND:
			case CONCAT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COS:
			case COSH:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_DATE:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case DUMP:
			case EACH:
			case ELEMENT:
			case EMPTY_BLOB:
			case EMPTY_CLOB:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXP:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FLOOR:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FROM_TZ:
			case FULL:
			case FUNCTION:
			case GROUP_ID:
			case GROUPING:
			case HASH:
			case HEXTORAW:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INITCAP:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INSTR2:
			case INSTR4:
			case INSTRB:
			case INSTRC:
			case INSTR:
			case INTERFACE:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST_DAY:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LENGTH2:
			case LENGTH4:
			case LENGTHB:
			case LENGTHC:
			case LENGTH:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LN:
			case LNNVL:
			case LOCAL:
			case LOCALTIMESTAMP:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MOD:
			case MONTH:
			case MONTHS_BETWEEN:
			case MULTISET:
			case NAME:
			case NAN:
			case NANVL:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCHR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NEW_TIME:
			case NEXT_DAY:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLIF:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NUMTODSINTERVAL:
			case NUMTOYMINTERVAL:
			case NVARCHAR2:
			case NVL2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPAQUE:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case POWER:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case PROCEDURE:
			case RAISE:
			case RANGE:
			case RAW:
			case RAWTOHEX:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_REPLACE:
			case REGEXP_SUBSTR:
			case REJECT:
			case RELIES_ON:
			case REMAINDER:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROWNUM:
			case ROW:
			case ROWS:
			case RPAD:
			case RTRIM:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGN:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SINH:
			case SIN:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SOUNDEX:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case SQRT:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYS_CONTEXT:
			case SYSDATE:
			case SYSTIMESTAMP:
			case TANH:
			case TAN:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TO_CLOB:
			case TO_DSINTERVAL:
			case TO_LOB:
			case TO_MULTI_BYTE:
			case TO_NCLOB:
			case TO_NUMBER:
			case TO_SINGLE_BYTE:
			case TO_TIMESTAMP:
			case TO_TIMESTAMP_TZ:
			case TO_YMINTERVAL:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TRUNC:
			case TYPE:
			case TZ_OFFSET:
			case UID:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPPER:
			case UPSERT:
			case UROWID:
			case USERENV:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case VSIZE:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case DECODE:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case NVL:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROUND:
			case ROW_NUMBER:
			case SUBSTR:
			case TO_CHAR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case LEAST:
			case GREATEST:
			case TO_DATE:
			case ASTERISK:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(5800);
				regular_id();
				}
				break;
			case DELIMITED_ID:
				enterOuterAlt(_localctx, 2);
				{
				setState(5801);
				match(DELIMITED_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Not_equal_opContext extends ParserRuleContext {
		public TerminalNode NOT_EQUAL_OP() { return getToken(OracleSQLStatementParser.NOT_EQUAL_OP, 0); }
		public Not_equal_opContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_not_equal_op; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterNot_equal_op(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitNot_equal_op(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitNot_equal_op(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Not_equal_opContext not_equal_op() throws RecognitionException {
		Not_equal_opContext _localctx = new Not_equal_opContext(_ctx, getState());
		enterRule(_localctx, 798, RULE_not_equal_op);
		try {
			setState(5811);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NOT_EQUAL_OP:
				enterOuterAlt(_localctx, 1);
				{
				setState(5804);
				match(NOT_EQUAL_OP);
				}
				break;
			case LESS_THAN_OP:
				enterOuterAlt(_localctx, 2);
				{
				setState(5805);
				match(LESS_THAN_OP);
				setState(5806);
				match(GREATER_THAN_OP);
				}
				break;
			case EXCLAMATION_OPERATOR_PART:
				enterOuterAlt(_localctx, 3);
				{
				setState(5807);
				match(EXCLAMATION_OPERATOR_PART);
				setState(5808);
				match(EQUALS_OP);
				}
				break;
			case CARRET_OPERATOR_PART:
				enterOuterAlt(_localctx, 4);
				{
				setState(5809);
				match(CARRET_OPERATOR_PART);
				setState(5810);
				match(EQUALS_OP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Greater_than_or_equals_opContext extends ParserRuleContext {
		public Greater_than_or_equals_opContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_greater_than_or_equals_op; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterGreater_than_or_equals_op(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitGreater_than_or_equals_op(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitGreater_than_or_equals_op(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Greater_than_or_equals_opContext greater_than_or_equals_op() throws RecognitionException {
		Greater_than_or_equals_opContext _localctx = new Greater_than_or_equals_opContext(_ctx, getState());
		enterRule(_localctx, 800, RULE_greater_than_or_equals_op);
		try {
			setState(5816);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case GREATER_THAN_OR_EQUALS_OP:
				enterOuterAlt(_localctx, 1);
				{
				setState(5813);
				match(GREATER_THAN_OR_EQUALS_OP);
				}
				break;
			case GREATER_THAN_OP:
				enterOuterAlt(_localctx, 2);
				{
				setState(5814);
				match(GREATER_THAN_OP);
				setState(5815);
				match(EQUALS_OP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Less_than_or_equals_opContext extends ParserRuleContext {
		public Less_than_or_equals_opContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_less_than_or_equals_op; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterLess_than_or_equals_op(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitLess_than_or_equals_op(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitLess_than_or_equals_op(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Less_than_or_equals_opContext less_than_or_equals_op() throws RecognitionException {
		Less_than_or_equals_opContext _localctx = new Less_than_or_equals_opContext(_ctx, getState());
		enterRule(_localctx, 802, RULE_less_than_or_equals_op);
		try {
			setState(5821);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LESS_THAN_OR_EQUALS_OP:
				enterOuterAlt(_localctx, 1);
				{
				setState(5818);
				match(LESS_THAN_OR_EQUALS_OP);
				}
				break;
			case LESS_THAN_OP:
				enterOuterAlt(_localctx, 2);
				{
				setState(5819);
				match(LESS_THAN_OP);
				setState(5820);
				match(EQUALS_OP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Concatenation_opContext extends ParserRuleContext {
		public Concatenation_opContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_concatenation_op; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterConcatenation_op(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitConcatenation_op(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitConcatenation_op(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Concatenation_opContext concatenation_op() throws RecognitionException {
		Concatenation_opContext _localctx = new Concatenation_opContext(_ctx, getState());
		enterRule(_localctx, 804, RULE_concatenation_op);
		try {
			setState(5826);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CONCATENATION_OP:
				enterOuterAlt(_localctx, 1);
				{
				setState(5823);
				match(CONCATENATION_OP);
				}
				break;
			case VERTICAL_BAR:
				enterOuterAlt(_localctx, 2);
				{
				setState(5824);
				match(VERTICAL_BAR);
				setState(5825);
				match(VERTICAL_BAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Outer_join_signContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(OracleSQLStatementParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(OracleSQLStatementParser.RIGHT_PAREN, 0); }
		public Outer_join_signContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_outer_join_sign; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterOuter_join_sign(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitOuter_join_sign(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitOuter_join_sign(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Outer_join_signContext outer_join_sign() throws RecognitionException {
		Outer_join_signContext _localctx = new Outer_join_signContext(_ctx, getState());
		enterRule(_localctx, 806, RULE_outer_join_sign);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5828);
			match(LEFT_PAREN);
			setState(5829);
			match(PLUS_SIGN);
			setState(5830);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Regular_idContext extends ParserRuleContext {
		public TerminalNode REGULAR_ID() { return getToken(OracleSQLStatementParser.REGULAR_ID, 0); }
		public TerminalNode A_LETTER() { return getToken(OracleSQLStatementParser.A_LETTER, 0); }
		public TerminalNode ASTERISK() { return getToken(OracleSQLStatementParser.ASTERISK, 0); }
		public String_function_nameContext string_function_name() {
			return getRuleContext(String_function_nameContext.class,0);
		}
		public Numeric_function_nameContext numeric_function_name() {
			return getRuleContext(Numeric_function_nameContext.class,0);
		}
		public Date_time_function_nameContext date_time_function_name() {
			return getRuleContext(Date_time_function_nameContext.class,0);
		}
		public Conversion_function_nameContext conversion_function_name() {
			return getRuleContext(Conversion_function_nameContext.class,0);
		}
		public Advanced_function_nameContext advanced_function_name() {
			return getRuleContext(Advanced_function_nameContext.class,0);
		}
		public TerminalNode ADD() { return getToken(OracleSQLStatementParser.ADD, 0); }
		public TerminalNode AFTER() { return getToken(OracleSQLStatementParser.AFTER, 0); }
		public TerminalNode AGENT() { return getToken(OracleSQLStatementParser.AGENT, 0); }
		public TerminalNode AGGREGATE() { return getToken(OracleSQLStatementParser.AGGREGATE, 0); }
		public TerminalNode ANALYZE() { return getToken(OracleSQLStatementParser.ANALYZE, 0); }
		public TerminalNode ARRAY() { return getToken(OracleSQLStatementParser.ARRAY, 0); }
		public TerminalNode ASSOCIATE() { return getToken(OracleSQLStatementParser.ASSOCIATE, 0); }
		public TerminalNode AT() { return getToken(OracleSQLStatementParser.AT, 0); }
		public TerminalNode ATTRIBUTE() { return getToken(OracleSQLStatementParser.ATTRIBUTE, 0); }
		public TerminalNode AUDIT() { return getToken(OracleSQLStatementParser.AUDIT, 0); }
		public TerminalNode AUTHID() { return getToken(OracleSQLStatementParser.AUTHID, 0); }
		public TerminalNode AUTO() { return getToken(OracleSQLStatementParser.AUTO, 0); }
		public TerminalNode AUTOMATIC() { return getToken(OracleSQLStatementParser.AUTOMATIC, 0); }
		public TerminalNode AUTONOMOUS_TRANSACTION() { return getToken(OracleSQLStatementParser.AUTONOMOUS_TRANSACTION, 0); }
		public TerminalNode BATCH() { return getToken(OracleSQLStatementParser.BATCH, 0); }
		public TerminalNode BEFORE() { return getToken(OracleSQLStatementParser.BEFORE, 0); }
		public TerminalNode BFILE() { return getToken(OracleSQLStatementParser.BFILE, 0); }
		public TerminalNode BINARY_DOUBLE() { return getToken(OracleSQLStatementParser.BINARY_DOUBLE, 0); }
		public TerminalNode BINARY_FLOAT() { return getToken(OracleSQLStatementParser.BINARY_FLOAT, 0); }
		public TerminalNode BINARY_INTEGER() { return getToken(OracleSQLStatementParser.BINARY_INTEGER, 0); }
		public TerminalNode BLOB() { return getToken(OracleSQLStatementParser.BLOB, 0); }
		public TerminalNode BLOCK() { return getToken(OracleSQLStatementParser.BLOCK, 0); }
		public TerminalNode BODY() { return getToken(OracleSQLStatementParser.BODY, 0); }
		public TerminalNode BOOLEAN() { return getToken(OracleSQLStatementParser.BOOLEAN, 0); }
		public TerminalNode BOTH() { return getToken(OracleSQLStatementParser.BOTH, 0); }
		public TerminalNode BULK() { return getToken(OracleSQLStatementParser.BULK, 0); }
		public TerminalNode BYTE() { return getToken(OracleSQLStatementParser.BYTE, 0); }
		public TerminalNode C_LETTER() { return getToken(OracleSQLStatementParser.C_LETTER, 0); }
		public TerminalNode CALL() { return getToken(OracleSQLStatementParser.CALL, 0); }
		public TerminalNode CANONICAL() { return getToken(OracleSQLStatementParser.CANONICAL, 0); }
		public TerminalNode CASCADE() { return getToken(OracleSQLStatementParser.CASCADE, 0); }
		public TerminalNode CAST() { return getToken(OracleSQLStatementParser.CAST, 0); }
		public TerminalNode CHAR() { return getToken(OracleSQLStatementParser.CHAR, 0); }
		public TerminalNode CHAR_CS() { return getToken(OracleSQLStatementParser.CHAR_CS, 0); }
		public TerminalNode CHARACTER() { return getToken(OracleSQLStatementParser.CHARACTER, 0); }
		public TerminalNode CHR() { return getToken(OracleSQLStatementParser.CHR, 0); }
		public TerminalNode CLOB() { return getToken(OracleSQLStatementParser.CLOB, 0); }
		public TerminalNode CLOSE() { return getToken(OracleSQLStatementParser.CLOSE, 0); }
		public TerminalNode CLUSTER() { return getToken(OracleSQLStatementParser.CLUSTER, 0); }
		public TerminalNode COLLECT() { return getToken(OracleSQLStatementParser.COLLECT, 0); }
		public TerminalNode COLUMNS() { return getToken(OracleSQLStatementParser.COLUMNS, 0); }
		public TerminalNode COMMENT() { return getToken(OracleSQLStatementParser.COMMENT, 0); }
		public TerminalNode COMMIT() { return getToken(OracleSQLStatementParser.COMMIT, 0); }
		public TerminalNode COMMITTED() { return getToken(OracleSQLStatementParser.COMMITTED, 0); }
		public TerminalNode COMPATIBILITY() { return getToken(OracleSQLStatementParser.COMPATIBILITY, 0); }
		public TerminalNode COMPILE() { return getToken(OracleSQLStatementParser.COMPILE, 0); }
		public TerminalNode COMPOUND() { return getToken(OracleSQLStatementParser.COMPOUND, 0); }
		public TerminalNode CONSTANT() { return getToken(OracleSQLStatementParser.CONSTANT, 0); }
		public TerminalNode CONSTRAINT() { return getToken(OracleSQLStatementParser.CONSTRAINT, 0); }
		public TerminalNode CONSTRAINTS() { return getToken(OracleSQLStatementParser.CONSTRAINTS, 0); }
		public TerminalNode CONSTRUCTOR() { return getToken(OracleSQLStatementParser.CONSTRUCTOR, 0); }
		public TerminalNode CONTENT() { return getToken(OracleSQLStatementParser.CONTENT, 0); }
		public TerminalNode CONTEXT() { return getToken(OracleSQLStatementParser.CONTEXT, 0); }
		public TerminalNode CONTINUE() { return getToken(OracleSQLStatementParser.CONTINUE, 0); }
		public TerminalNode CONVERT() { return getToken(OracleSQLStatementParser.CONVERT, 0); }
		public TerminalNode CORRUPT_XID() { return getToken(OracleSQLStatementParser.CORRUPT_XID, 0); }
		public TerminalNode CORRUPT_XID_ALL() { return getToken(OracleSQLStatementParser.CORRUPT_XID_ALL, 0); }
		public TerminalNode COST() { return getToken(OracleSQLStatementParser.COST, 0); }
		public TerminalNode COUNT() { return getToken(OracleSQLStatementParser.COUNT, 0); }
		public TerminalNode CROSS() { return getToken(OracleSQLStatementParser.CROSS, 0); }
		public TerminalNode CUBE() { return getToken(OracleSQLStatementParser.CUBE, 0); }
		public TerminalNode CURRENT_USER() { return getToken(OracleSQLStatementParser.CURRENT_USER, 0); }
		public TerminalNode CURSOR() { return getToken(OracleSQLStatementParser.CURSOR, 0); }
		public TerminalNode CUSTOMDATUM() { return getToken(OracleSQLStatementParser.CUSTOMDATUM, 0); }
		public TerminalNode CYCLE() { return getToken(OracleSQLStatementParser.CYCLE, 0); }
		public TerminalNode DATA() { return getToken(OracleSQLStatementParser.DATA, 0); }
		public TerminalNode DATABASE() { return getToken(OracleSQLStatementParser.DATABASE, 0); }
		public TerminalNode DAY() { return getToken(OracleSQLStatementParser.DAY, 0); }
		public TerminalNode DB_ROLE_CHANGE() { return getToken(OracleSQLStatementParser.DB_ROLE_CHANGE, 0); }
		public TerminalNode DBTIMEZONE() { return getToken(OracleSQLStatementParser.DBTIMEZONE, 0); }
		public TerminalNode DDL() { return getToken(OracleSQLStatementParser.DDL, 0); }
		public TerminalNode DEBUG() { return getToken(OracleSQLStatementParser.DEBUG, 0); }
		public TerminalNode DEC() { return getToken(OracleSQLStatementParser.DEC, 0); }
		public TerminalNode DECIMAL() { return getToken(OracleSQLStatementParser.DECIMAL, 0); }
		public TerminalNode DECOMPOSE() { return getToken(OracleSQLStatementParser.DECOMPOSE, 0); }
		public TerminalNode DECREMENT() { return getToken(OracleSQLStatementParser.DECREMENT, 0); }
		public TerminalNode DEFAULTS() { return getToken(OracleSQLStatementParser.DEFAULTS, 0); }
		public TerminalNode DEFERRED() { return getToken(OracleSQLStatementParser.DEFERRED, 0); }
		public TerminalNode DEFINER() { return getToken(OracleSQLStatementParser.DEFINER, 0); }
		public TerminalNode DELETE() { return getToken(OracleSQLStatementParser.DELETE, 0); }
		public TerminalNode DETERMINISTIC() { return getToken(OracleSQLStatementParser.DETERMINISTIC, 0); }
		public TerminalNode DIMENSION() { return getToken(OracleSQLStatementParser.DIMENSION, 0); }
		public TerminalNode DISABLE() { return getToken(OracleSQLStatementParser.DISABLE, 0); }
		public TerminalNode DISASSOCIATE() { return getToken(OracleSQLStatementParser.DISASSOCIATE, 0); }
		public TerminalNode DOCUMENT() { return getToken(OracleSQLStatementParser.DOCUMENT, 0); }
		public TerminalNode DOUBLE() { return getToken(OracleSQLStatementParser.DOUBLE, 0); }
		public TerminalNode DSINTERVAL_UNCONSTRAINED() { return getToken(OracleSQLStatementParser.DSINTERVAL_UNCONSTRAINED, 0); }
		public TerminalNode EACH() { return getToken(OracleSQLStatementParser.EACH, 0); }
		public TerminalNode ELEMENT() { return getToken(OracleSQLStatementParser.ELEMENT, 0); }
		public TerminalNode EMPTY() { return getToken(OracleSQLStatementParser.EMPTY, 0); }
		public TerminalNode ENABLE() { return getToken(OracleSQLStatementParser.ENABLE, 0); }
		public TerminalNode ENCODING() { return getToken(OracleSQLStatementParser.ENCODING, 0); }
		public TerminalNode ENTITYESCAPING() { return getToken(OracleSQLStatementParser.ENTITYESCAPING, 0); }
		public TerminalNode ERR() { return getToken(OracleSQLStatementParser.ERR, 0); }
		public TerminalNode ERRORS() { return getToken(OracleSQLStatementParser.ERRORS, 0); }
		public TerminalNode ESCAPE() { return getToken(OracleSQLStatementParser.ESCAPE, 0); }
		public TerminalNode EVALNAME() { return getToken(OracleSQLStatementParser.EVALNAME, 0); }
		public TerminalNode EXCEPTION() { return getToken(OracleSQLStatementParser.EXCEPTION, 0); }
		public TerminalNode EXCEPTION_INIT() { return getToken(OracleSQLStatementParser.EXCEPTION_INIT, 0); }
		public TerminalNode EXCEPTIONS() { return getToken(OracleSQLStatementParser.EXCEPTIONS, 0); }
		public TerminalNode EXCLUDE() { return getToken(OracleSQLStatementParser.EXCLUDE, 0); }
		public TerminalNode EXECUTE() { return getToken(OracleSQLStatementParser.EXECUTE, 0); }
		public TerminalNode EXIT() { return getToken(OracleSQLStatementParser.EXIT, 0); }
		public TerminalNode EXPLAIN() { return getToken(OracleSQLStatementParser.EXPLAIN, 0); }
		public TerminalNode EXTERNAL() { return getToken(OracleSQLStatementParser.EXTERNAL, 0); }
		public TerminalNode EXTRACT() { return getToken(OracleSQLStatementParser.EXTRACT, 0); }
		public TerminalNode FAILURE() { return getToken(OracleSQLStatementParser.FAILURE, 0); }
		public TerminalNode FINAL() { return getToken(OracleSQLStatementParser.FINAL, 0); }
		public TerminalNode FIRST() { return getToken(OracleSQLStatementParser.FIRST, 0); }
		public TerminalNode FIRST_VALUE() { return getToken(OracleSQLStatementParser.FIRST_VALUE, 0); }
		public TerminalNode FLOAT() { return getToken(OracleSQLStatementParser.FLOAT, 0); }
		public TerminalNode FOLLOWING() { return getToken(OracleSQLStatementParser.FOLLOWING, 0); }
		public TerminalNode FOLLOWS() { return getToken(OracleSQLStatementParser.FOLLOWS, 0); }
		public TerminalNode FORALL() { return getToken(OracleSQLStatementParser.FORALL, 0); }
		public TerminalNode FORCE() { return getToken(OracleSQLStatementParser.FORCE, 0); }
		public TerminalNode FULL() { return getToken(OracleSQLStatementParser.FULL, 0); }
		public TerminalNode FUNCTION() { return getToken(OracleSQLStatementParser.FUNCTION, 0); }
		public TerminalNode GROUPING() { return getToken(OracleSQLStatementParser.GROUPING, 0); }
		public TerminalNode HASH() { return getToken(OracleSQLStatementParser.HASH, 0); }
		public TerminalNode HIDE() { return getToken(OracleSQLStatementParser.HIDE, 0); }
		public TerminalNode HOUR() { return getToken(OracleSQLStatementParser.HOUR, 0); }
		public TerminalNode IGNORE() { return getToken(OracleSQLStatementParser.IGNORE, 0); }
		public TerminalNode IMMEDIATE() { return getToken(OracleSQLStatementParser.IMMEDIATE, 0); }
		public TerminalNode INCLUDE() { return getToken(OracleSQLStatementParser.INCLUDE, 0); }
		public TerminalNode INCLUDING() { return getToken(OracleSQLStatementParser.INCLUDING, 0); }
		public TerminalNode INCREMENT() { return getToken(OracleSQLStatementParser.INCREMENT, 0); }
		public TerminalNode INDENT() { return getToken(OracleSQLStatementParser.INDENT, 0); }
		public TerminalNode INDEXED() { return getToken(OracleSQLStatementParser.INDEXED, 0); }
		public TerminalNode INDICATOR() { return getToken(OracleSQLStatementParser.INDICATOR, 0); }
		public TerminalNode INDICES() { return getToken(OracleSQLStatementParser.INDICES, 0); }
		public TerminalNode INFINITE() { return getToken(OracleSQLStatementParser.INFINITE, 0); }
		public TerminalNode INLINE() { return getToken(OracleSQLStatementParser.INLINE, 0); }
		public TerminalNode INNER() { return getToken(OracleSQLStatementParser.INNER, 0); }
		public TerminalNode INOUT() { return getToken(OracleSQLStatementParser.INOUT, 0); }
		public TerminalNode INSTANTIABLE() { return getToken(OracleSQLStatementParser.INSTANTIABLE, 0); }
		public TerminalNode INSTEAD() { return getToken(OracleSQLStatementParser.INSTEAD, 0); }
		public TerminalNode INT() { return getToken(OracleSQLStatementParser.INT, 0); }
		public TerminalNode INTEGER() { return getToken(OracleSQLStatementParser.INTEGER, 0); }
		public TerminalNode INTERVAL() { return getToken(OracleSQLStatementParser.INTERVAL, 0); }
		public TerminalNode INVALIDATE() { return getToken(OracleSQLStatementParser.INVALIDATE, 0); }
		public TerminalNode ISOLATION() { return getToken(OracleSQLStatementParser.ISOLATION, 0); }
		public TerminalNode ITERATE() { return getToken(OracleSQLStatementParser.ITERATE, 0); }
		public TerminalNode JAVA() { return getToken(OracleSQLStatementParser.JAVA, 0); }
		public TerminalNode JOIN() { return getToken(OracleSQLStatementParser.JOIN, 0); }
		public TerminalNode KEEP() { return getToken(OracleSQLStatementParser.KEEP, 0); }
		public TerminalNode KEY() { return getToken(OracleSQLStatementParser.KEY, 0); }
		public TerminalNode LANGUAGE() { return getToken(OracleSQLStatementParser.LANGUAGE, 0); }
		public TerminalNode LAST() { return getToken(OracleSQLStatementParser.LAST, 0); }
		public TerminalNode LAST_VALUE() { return getToken(OracleSQLStatementParser.LAST_VALUE, 0); }
		public TerminalNode LEADING() { return getToken(OracleSQLStatementParser.LEADING, 0); }
		public TerminalNode LEFT() { return getToken(OracleSQLStatementParser.LEFT, 0); }
		public TerminalNode LEVEL() { return getToken(OracleSQLStatementParser.LEVEL, 0); }
		public TerminalNode LIBRARY() { return getToken(OracleSQLStatementParser.LIBRARY, 0); }
		public TerminalNode LIKE2() { return getToken(OracleSQLStatementParser.LIKE2, 0); }
		public TerminalNode LIKE4() { return getToken(OracleSQLStatementParser.LIKE4, 0); }
		public TerminalNode LIKEC() { return getToken(OracleSQLStatementParser.LIKEC, 0); }
		public TerminalNode LIMIT() { return getToken(OracleSQLStatementParser.LIMIT, 0); }
		public TerminalNode LOCAL() { return getToken(OracleSQLStatementParser.LOCAL, 0); }
		public TerminalNode LOCKED() { return getToken(OracleSQLStatementParser.LOCKED, 0); }
		public TerminalNode LOG() { return getToken(OracleSQLStatementParser.LOG, 0); }
		public TerminalNode LOGOFF() { return getToken(OracleSQLStatementParser.LOGOFF, 0); }
		public TerminalNode LOGON() { return getToken(OracleSQLStatementParser.LOGON, 0); }
		public TerminalNode LONG() { return getToken(OracleSQLStatementParser.LONG, 0); }
		public TerminalNode LOOP() { return getToken(OracleSQLStatementParser.LOOP, 0); }
		public TerminalNode MAIN() { return getToken(OracleSQLStatementParser.MAIN, 0); }
		public TerminalNode MAP() { return getToken(OracleSQLStatementParser.MAP, 0); }
		public TerminalNode MATCHED() { return getToken(OracleSQLStatementParser.MATCHED, 0); }
		public TerminalNode MAXVALUE() { return getToken(OracleSQLStatementParser.MAXVALUE, 0); }
		public TerminalNode MEASURES() { return getToken(OracleSQLStatementParser.MEASURES, 0); }
		public TerminalNode MEMBER() { return getToken(OracleSQLStatementParser.MEMBER, 0); }
		public TerminalNode MERGE() { return getToken(OracleSQLStatementParser.MERGE, 0); }
		public TerminalNode MINUTE() { return getToken(OracleSQLStatementParser.MINUTE, 0); }
		public TerminalNode MINVALUE() { return getToken(OracleSQLStatementParser.MINVALUE, 0); }
		public TerminalNode MLSLABEL() { return getToken(OracleSQLStatementParser.MLSLABEL, 0); }
		public TerminalNode MODEL() { return getToken(OracleSQLStatementParser.MODEL, 0); }
		public TerminalNode MODIFY() { return getToken(OracleSQLStatementParser.MODIFY, 0); }
		public TerminalNode MONTH() { return getToken(OracleSQLStatementParser.MONTH, 0); }
		public TerminalNode MULTISET() { return getToken(OracleSQLStatementParser.MULTISET, 0); }
		public TerminalNode NAME() { return getToken(OracleSQLStatementParser.NAME, 0); }
		public TerminalNode NAN() { return getToken(OracleSQLStatementParser.NAN, 0); }
		public TerminalNode NATURAL() { return getToken(OracleSQLStatementParser.NATURAL, 0); }
		public TerminalNode NATURALN() { return getToken(OracleSQLStatementParser.NATURALN, 0); }
		public TerminalNode NAV() { return getToken(OracleSQLStatementParser.NAV, 0); }
		public TerminalNode NCHAR() { return getToken(OracleSQLStatementParser.NCHAR, 0); }
		public TerminalNode NCHAR_CS() { return getToken(OracleSQLStatementParser.NCHAR_CS, 0); }
		public TerminalNode NCLOB() { return getToken(OracleSQLStatementParser.NCLOB, 0); }
		public TerminalNode NESTED() { return getToken(OracleSQLStatementParser.NESTED, 0); }
		public TerminalNode NEW() { return getToken(OracleSQLStatementParser.NEW, 0); }
		public TerminalNode NO() { return getToken(OracleSQLStatementParser.NO, 0); }
		public TerminalNode NOAUDIT() { return getToken(OracleSQLStatementParser.NOAUDIT, 0); }
		public TerminalNode NOCOPY() { return getToken(OracleSQLStatementParser.NOCOPY, 0); }
		public TerminalNode NOCYCLE() { return getToken(OracleSQLStatementParser.NOCYCLE, 0); }
		public TerminalNode NOENTITYESCAPING() { return getToken(OracleSQLStatementParser.NOENTITYESCAPING, 0); }
		public TerminalNode NONE() { return getToken(OracleSQLStatementParser.NONE, 0); }
		public TerminalNode NOSCHEMACHECK() { return getToken(OracleSQLStatementParser.NOSCHEMACHECK, 0); }
		public TerminalNode NULLS() { return getToken(OracleSQLStatementParser.NULLS, 0); }
		public TerminalNode NUMBER() { return getToken(OracleSQLStatementParser.NUMBER, 0); }
		public TerminalNode NUMERIC() { return getToken(OracleSQLStatementParser.NUMERIC, 0); }
		public TerminalNode NVARCHAR2() { return getToken(OracleSQLStatementParser.NVARCHAR2, 0); }
		public TerminalNode OBJECT() { return getToken(OracleSQLStatementParser.OBJECT, 0); }
		public TerminalNode OFF() { return getToken(OracleSQLStatementParser.OFF, 0); }
		public TerminalNode OID() { return getToken(OracleSQLStatementParser.OID, 0); }
		public TerminalNode OLD() { return getToken(OracleSQLStatementParser.OLD, 0); }
		public TerminalNode ONLY() { return getToken(OracleSQLStatementParser.ONLY, 0); }
		public TerminalNode OPAQUE() { return getToken(OracleSQLStatementParser.OPAQUE, 0); }
		public TerminalNode OPEN() { return getToken(OracleSQLStatementParser.OPEN, 0); }
		public TerminalNode ORADATA() { return getToken(OracleSQLStatementParser.ORADATA, 0); }
		public TerminalNode ORDINALITY() { return getToken(OracleSQLStatementParser.ORDINALITY, 0); }
		public TerminalNode OSERROR() { return getToken(OracleSQLStatementParser.OSERROR, 0); }
		public TerminalNode OUT() { return getToken(OracleSQLStatementParser.OUT, 0); }
		public TerminalNode OUTER() { return getToken(OracleSQLStatementParser.OUTER, 0); }
		public TerminalNode OVER() { return getToken(OracleSQLStatementParser.OVER, 0); }
		public TerminalNode OVERRIDING() { return getToken(OracleSQLStatementParser.OVERRIDING, 0); }
		public TerminalNode PACKAGE() { return getToken(OracleSQLStatementParser.PACKAGE, 0); }
		public TerminalNode PARALLEL_ENABLE() { return getToken(OracleSQLStatementParser.PARALLEL_ENABLE, 0); }
		public TerminalNode PARAMETERS() { return getToken(OracleSQLStatementParser.PARAMETERS, 0); }
		public TerminalNode PARENT() { return getToken(OracleSQLStatementParser.PARENT, 0); }
		public TerminalNode PARTITION() { return getToken(OracleSQLStatementParser.PARTITION, 0); }
		public TerminalNode PASSING() { return getToken(OracleSQLStatementParser.PASSING, 0); }
		public TerminalNode PATH() { return getToken(OracleSQLStatementParser.PATH, 0); }
		public TerminalNode PIPELINED() { return getToken(OracleSQLStatementParser.PIPELINED, 0); }
		public TerminalNode PLAN() { return getToken(OracleSQLStatementParser.PLAN, 0); }
		public TerminalNode PLS_INTEGER() { return getToken(OracleSQLStatementParser.PLS_INTEGER, 0); }
		public TerminalNode POSITIVE() { return getToken(OracleSQLStatementParser.POSITIVE, 0); }
		public TerminalNode POSITIVEN() { return getToken(OracleSQLStatementParser.POSITIVEN, 0); }
		public TerminalNode PRAGMA() { return getToken(OracleSQLStatementParser.PRAGMA, 0); }
		public TerminalNode PRECEDING() { return getToken(OracleSQLStatementParser.PRECEDING, 0); }
		public TerminalNode PRECISION() { return getToken(OracleSQLStatementParser.PRECISION, 0); }
		public TerminalNode PRESENT() { return getToken(OracleSQLStatementParser.PRESENT, 0); }
		public TerminalNode RAISE() { return getToken(OracleSQLStatementParser.RAISE, 0); }
		public TerminalNode RANGE() { return getToken(OracleSQLStatementParser.RANGE, 0); }
		public TerminalNode RAW() { return getToken(OracleSQLStatementParser.RAW, 0); }
		public TerminalNode READ() { return getToken(OracleSQLStatementParser.READ, 0); }
		public TerminalNode REAL() { return getToken(OracleSQLStatementParser.REAL, 0); }
		public TerminalNode RECORD() { return getToken(OracleSQLStatementParser.RECORD, 0); }
		public TerminalNode REF() { return getToken(OracleSQLStatementParser.REF, 0); }
		public TerminalNode REFERENCE() { return getToken(OracleSQLStatementParser.REFERENCE, 0); }
		public TerminalNode REFERENCING() { return getToken(OracleSQLStatementParser.REFERENCING, 0); }
		public TerminalNode REJECT() { return getToken(OracleSQLStatementParser.REJECT, 0); }
		public TerminalNode RELIES_ON() { return getToken(OracleSQLStatementParser.RELIES_ON, 0); }
		public TerminalNode RENAME() { return getToken(OracleSQLStatementParser.RENAME, 0); }
		public TerminalNode REPLACE() { return getToken(OracleSQLStatementParser.REPLACE, 0); }
		public TerminalNode RESPECT() { return getToken(OracleSQLStatementParser.RESPECT, 0); }
		public TerminalNode RESTRICT_REFERENCES() { return getToken(OracleSQLStatementParser.RESTRICT_REFERENCES, 0); }
		public TerminalNode RESULT() { return getToken(OracleSQLStatementParser.RESULT, 0); }
		public TerminalNode RESULT_CACHE() { return getToken(OracleSQLStatementParser.RESULT_CACHE, 0); }
		public TerminalNode RETURN() { return getToken(OracleSQLStatementParser.RETURN, 0); }
		public TerminalNode RETURNING() { return getToken(OracleSQLStatementParser.RETURNING, 0); }
		public TerminalNode REUSE() { return getToken(OracleSQLStatementParser.REUSE, 0); }
		public TerminalNode REVERSE() { return getToken(OracleSQLStatementParser.REVERSE, 0); }
		public TerminalNode RIGHT() { return getToken(OracleSQLStatementParser.RIGHT, 0); }
		public TerminalNode ROLLBACK() { return getToken(OracleSQLStatementParser.ROLLBACK, 0); }
		public TerminalNode ROLLUP() { return getToken(OracleSQLStatementParser.ROLLUP, 0); }
		public TerminalNode ROW() { return getToken(OracleSQLStatementParser.ROW, 0); }
		public TerminalNode ROWID() { return getToken(OracleSQLStatementParser.ROWID, 0); }
		public TerminalNode ROWS() { return getToken(OracleSQLStatementParser.ROWS, 0); }
		public TerminalNode RULES() { return getToken(OracleSQLStatementParser.RULES, 0); }
		public TerminalNode SAMPLE() { return getToken(OracleSQLStatementParser.SAMPLE, 0); }
		public TerminalNode SAVE() { return getToken(OracleSQLStatementParser.SAVE, 0); }
		public TerminalNode SAVEPOINT() { return getToken(OracleSQLStatementParser.SAVEPOINT, 0); }
		public TerminalNode SCHEMA() { return getToken(OracleSQLStatementParser.SCHEMA, 0); }
		public TerminalNode SCHEMACHECK() { return getToken(OracleSQLStatementParser.SCHEMACHECK, 0); }
		public TerminalNode SCN() { return getToken(OracleSQLStatementParser.SCN, 0); }
		public TerminalNode SECOND() { return getToken(OracleSQLStatementParser.SECOND, 0); }
		public TerminalNode SEED() { return getToken(OracleSQLStatementParser.SEED, 0); }
		public TerminalNode SEGMENT() { return getToken(OracleSQLStatementParser.SEGMENT, 0); }
		public TerminalNode SELF() { return getToken(OracleSQLStatementParser.SELF, 0); }
		public TerminalNode SEQUENTIAL() { return getToken(OracleSQLStatementParser.SEQUENTIAL, 0); }
		public TerminalNode SERIALIZABLE() { return getToken(OracleSQLStatementParser.SERIALIZABLE, 0); }
		public TerminalNode SERIALLY_REUSABLE() { return getToken(OracleSQLStatementParser.SERIALLY_REUSABLE, 0); }
		public TerminalNode SERVERERROR() { return getToken(OracleSQLStatementParser.SERVERERROR, 0); }
		public TerminalNode SESSIONTIMEZONE() { return getToken(OracleSQLStatementParser.SESSIONTIMEZONE, 0); }
		public TerminalNode SET() { return getToken(OracleSQLStatementParser.SET, 0); }
		public TerminalNode SETS() { return getToken(OracleSQLStatementParser.SETS, 0); }
		public TerminalNode SETTINGS() { return getToken(OracleSQLStatementParser.SETTINGS, 0); }
		public TerminalNode SHOW() { return getToken(OracleSQLStatementParser.SHOW, 0); }
		public TerminalNode SHUTDOWN() { return getToken(OracleSQLStatementParser.SHUTDOWN, 0); }
		public TerminalNode SIBLINGS() { return getToken(OracleSQLStatementParser.SIBLINGS, 0); }
		public TerminalNode SIGNTYPE() { return getToken(OracleSQLStatementParser.SIGNTYPE, 0); }
		public TerminalNode SIMPLE_INTEGER() { return getToken(OracleSQLStatementParser.SIMPLE_INTEGER, 0); }
		public TerminalNode SINGLE() { return getToken(OracleSQLStatementParser.SINGLE, 0); }
		public TerminalNode SKIP_() { return getToken(OracleSQLStatementParser.SKIP_, 0); }
		public TerminalNode SMALLINT() { return getToken(OracleSQLStatementParser.SMALLINT, 0); }
		public TerminalNode SNAPSHOT() { return getToken(OracleSQLStatementParser.SNAPSHOT, 0); }
		public TerminalNode SOME() { return getToken(OracleSQLStatementParser.SOME, 0); }
		public TerminalNode SPECIFICATION() { return getToken(OracleSQLStatementParser.SPECIFICATION, 0); }
		public TerminalNode SQLDATA() { return getToken(OracleSQLStatementParser.SQLDATA, 0); }
		public TerminalNode SQLERROR() { return getToken(OracleSQLStatementParser.SQLERROR, 0); }
		public TerminalNode STANDALONE() { return getToken(OracleSQLStatementParser.STANDALONE, 0); }
		public TerminalNode STARTUP() { return getToken(OracleSQLStatementParser.STARTUP, 0); }
		public TerminalNode STATEMENT() { return getToken(OracleSQLStatementParser.STATEMENT, 0); }
		public TerminalNode STATEMENT_ID() { return getToken(OracleSQLStatementParser.STATEMENT_ID, 0); }
		public TerminalNode STATIC() { return getToken(OracleSQLStatementParser.STATIC, 0); }
		public TerminalNode STATISTICS() { return getToken(OracleSQLStatementParser.STATISTICS, 0); }
		public TerminalNode STRING() { return getToken(OracleSQLStatementParser.STRING, 0); }
		public TerminalNode SUBSTR() { return getToken(OracleSQLStatementParser.SUBSTR, 0); }
		public TerminalNode SUBMULTISET() { return getToken(OracleSQLStatementParser.SUBMULTISET, 0); }
		public TerminalNode SUBPARTITION() { return getToken(OracleSQLStatementParser.SUBPARTITION, 0); }
		public TerminalNode SUBSTITUTABLE() { return getToken(OracleSQLStatementParser.SUBSTITUTABLE, 0); }
		public TerminalNode SUBTYPE() { return getToken(OracleSQLStatementParser.SUBTYPE, 0); }
		public TerminalNode SUCCESS() { return getToken(OracleSQLStatementParser.SUCCESS, 0); }
		public TerminalNode SUSPEND() { return getToken(OracleSQLStatementParser.SUSPEND, 0); }
		public TerminalNode TIME() { return getToken(OracleSQLStatementParser.TIME, 0); }
		public TerminalNode TIMESTAMP() { return getToken(OracleSQLStatementParser.TIMESTAMP, 0); }
		public TerminalNode TIMESTAMP_LTZ_UNCONSTRAINED() { return getToken(OracleSQLStatementParser.TIMESTAMP_LTZ_UNCONSTRAINED, 0); }
		public TerminalNode TIMESTAMP_TZ_UNCONSTRAINED() { return getToken(OracleSQLStatementParser.TIMESTAMP_TZ_UNCONSTRAINED, 0); }
		public TerminalNode TIMESTAMP_UNCONSTRAINED() { return getToken(OracleSQLStatementParser.TIMESTAMP_UNCONSTRAINED, 0); }
		public TerminalNode TIMEZONE_ABBR() { return getToken(OracleSQLStatementParser.TIMEZONE_ABBR, 0); }
		public TerminalNode TIMEZONE_HOUR() { return getToken(OracleSQLStatementParser.TIMEZONE_HOUR, 0); }
		public TerminalNode TIMEZONE_MINUTE() { return getToken(OracleSQLStatementParser.TIMEZONE_MINUTE, 0); }
		public TerminalNode TIMEZONE_REGION() { return getToken(OracleSQLStatementParser.TIMEZONE_REGION, 0); }
		public TerminalNode TRAILING() { return getToken(OracleSQLStatementParser.TRAILING, 0); }
		public TerminalNode TRANSACTION() { return getToken(OracleSQLStatementParser.TRANSACTION, 0); }
		public TerminalNode TRANSLATE() { return getToken(OracleSQLStatementParser.TRANSLATE, 0); }
		public TerminalNode TREAT() { return getToken(OracleSQLStatementParser.TREAT, 0); }
		public TerminalNode TRIGGER() { return getToken(OracleSQLStatementParser.TRIGGER, 0); }
		public TerminalNode TRIM() { return getToken(OracleSQLStatementParser.TRIM, 0); }
		public TerminalNode TRUNCATE() { return getToken(OracleSQLStatementParser.TRUNCATE, 0); }
		public TerminalNode TYPE() { return getToken(OracleSQLStatementParser.TYPE, 0); }
		public TerminalNode UNBOUNDED() { return getToken(OracleSQLStatementParser.UNBOUNDED, 0); }
		public TerminalNode UNDER() { return getToken(OracleSQLStatementParser.UNDER, 0); }
		public TerminalNode UNLIMITED() { return getToken(OracleSQLStatementParser.UNLIMITED, 0); }
		public TerminalNode UNTIL() { return getToken(OracleSQLStatementParser.UNTIL, 0); }
		public TerminalNode UPDATED() { return getToken(OracleSQLStatementParser.UPDATED, 0); }
		public TerminalNode UPSERT() { return getToken(OracleSQLStatementParser.UPSERT, 0); }
		public TerminalNode UROWID() { return getToken(OracleSQLStatementParser.UROWID, 0); }
		public TerminalNode USE() { return getToken(OracleSQLStatementParser.USE, 0); }
		public TerminalNode VALIDATE() { return getToken(OracleSQLStatementParser.VALIDATE, 0); }
		public TerminalNode VALUE() { return getToken(OracleSQLStatementParser.VALUE, 0); }
		public TerminalNode VARCHAR() { return getToken(OracleSQLStatementParser.VARCHAR, 0); }
		public TerminalNode VARCHAR2() { return getToken(OracleSQLStatementParser.VARCHAR2, 0); }
		public TerminalNode VARIABLE() { return getToken(OracleSQLStatementParser.VARIABLE, 0); }
		public TerminalNode VARRAY() { return getToken(OracleSQLStatementParser.VARRAY, 0); }
		public TerminalNode VARYING() { return getToken(OracleSQLStatementParser.VARYING, 0); }
		public TerminalNode VERSION() { return getToken(OracleSQLStatementParser.VERSION, 0); }
		public TerminalNode VERSIONS() { return getToken(OracleSQLStatementParser.VERSIONS, 0); }
		public TerminalNode WAIT() { return getToken(OracleSQLStatementParser.WAIT, 0); }
		public TerminalNode WARNING() { return getToken(OracleSQLStatementParser.WARNING, 0); }
		public TerminalNode WELLFORMED() { return getToken(OracleSQLStatementParser.WELLFORMED, 0); }
		public TerminalNode WHENEVER() { return getToken(OracleSQLStatementParser.WHENEVER, 0); }
		public TerminalNode WHILE() { return getToken(OracleSQLStatementParser.WHILE, 0); }
		public TerminalNode WITHIN() { return getToken(OracleSQLStatementParser.WITHIN, 0); }
		public TerminalNode WORK() { return getToken(OracleSQLStatementParser.WORK, 0); }
		public TerminalNode WRITE() { return getToken(OracleSQLStatementParser.WRITE, 0); }
		public TerminalNode XML() { return getToken(OracleSQLStatementParser.XML, 0); }
		public TerminalNode XMLAGG() { return getToken(OracleSQLStatementParser.XMLAGG, 0); }
		public TerminalNode XMLATTRIBUTES() { return getToken(OracleSQLStatementParser.XMLATTRIBUTES, 0); }
		public TerminalNode XMLCAST() { return getToken(OracleSQLStatementParser.XMLCAST, 0); }
		public TerminalNode XMLCOLATTVAL() { return getToken(OracleSQLStatementParser.XMLCOLATTVAL, 0); }
		public TerminalNode XMLELEMENT() { return getToken(OracleSQLStatementParser.XMLELEMENT, 0); }
		public TerminalNode XMLEXISTS() { return getToken(OracleSQLStatementParser.XMLEXISTS, 0); }
		public TerminalNode XMLFOREST() { return getToken(OracleSQLStatementParser.XMLFOREST, 0); }
		public TerminalNode XMLNAMESPACES() { return getToken(OracleSQLStatementParser.XMLNAMESPACES, 0); }
		public TerminalNode XMLPARSE() { return getToken(OracleSQLStatementParser.XMLPARSE, 0); }
		public TerminalNode XMLPI() { return getToken(OracleSQLStatementParser.XMLPI, 0); }
		public TerminalNode XMLQUERY() { return getToken(OracleSQLStatementParser.XMLQUERY, 0); }
		public TerminalNode XMLROOT() { return getToken(OracleSQLStatementParser.XMLROOT, 0); }
		public TerminalNode XMLSERIALIZE() { return getToken(OracleSQLStatementParser.XMLSERIALIZE, 0); }
		public TerminalNode XMLTABLE() { return getToken(OracleSQLStatementParser.XMLTABLE, 0); }
		public TerminalNode YEAR() { return getToken(OracleSQLStatementParser.YEAR, 0); }
		public TerminalNode YES() { return getToken(OracleSQLStatementParser.YES, 0); }
		public TerminalNode YMINTERVAL_UNCONSTRAINED() { return getToken(OracleSQLStatementParser.YMINTERVAL_UNCONSTRAINED, 0); }
		public TerminalNode ZONE() { return getToken(OracleSQLStatementParser.ZONE, 0); }
		public TerminalNode PREDICTION() { return getToken(OracleSQLStatementParser.PREDICTION, 0); }
		public TerminalNode PREDICTION_BOUNDS() { return getToken(OracleSQLStatementParser.PREDICTION_BOUNDS, 0); }
		public TerminalNode PREDICTION_COST() { return getToken(OracleSQLStatementParser.PREDICTION_COST, 0); }
		public TerminalNode PREDICTION_DETAILS() { return getToken(OracleSQLStatementParser.PREDICTION_DETAILS, 0); }
		public TerminalNode PREDICTION_PROBABILITY() { return getToken(OracleSQLStatementParser.PREDICTION_PROBABILITY, 0); }
		public TerminalNode PREDICTION_SET() { return getToken(OracleSQLStatementParser.PREDICTION_SET, 0); }
		public TerminalNode CUME_DIST() { return getToken(OracleSQLStatementParser.CUME_DIST, 0); }
		public TerminalNode DENSE_RANK() { return getToken(OracleSQLStatementParser.DENSE_RANK, 0); }
		public TerminalNode LISTAGG() { return getToken(OracleSQLStatementParser.LISTAGG, 0); }
		public TerminalNode PERCENT_RANK() { return getToken(OracleSQLStatementParser.PERCENT_RANK, 0); }
		public TerminalNode PERCENTILE_CONT() { return getToken(OracleSQLStatementParser.PERCENTILE_CONT, 0); }
		public TerminalNode PERCENTILE_DISC() { return getToken(OracleSQLStatementParser.PERCENTILE_DISC, 0); }
		public TerminalNode RANK() { return getToken(OracleSQLStatementParser.RANK, 0); }
		public TerminalNode AVG() { return getToken(OracleSQLStatementParser.AVG, 0); }
		public TerminalNode CORR() { return getToken(OracleSQLStatementParser.CORR, 0); }
		public TerminalNode LAG() { return getToken(OracleSQLStatementParser.LAG, 0); }
		public TerminalNode LEAD() { return getToken(OracleSQLStatementParser.LEAD, 0); }
		public TerminalNode MAX() { return getToken(OracleSQLStatementParser.MAX, 0); }
		public TerminalNode MEDIAN() { return getToken(OracleSQLStatementParser.MEDIAN, 0); }
		public TerminalNode MIN() { return getToken(OracleSQLStatementParser.MIN, 0); }
		public TerminalNode NTILE() { return getToken(OracleSQLStatementParser.NTILE, 0); }
		public TerminalNode RATIO_TO_REPORT() { return getToken(OracleSQLStatementParser.RATIO_TO_REPORT, 0); }
		public TerminalNode ROW_NUMBER() { return getToken(OracleSQLStatementParser.ROW_NUMBER, 0); }
		public TerminalNode SUM() { return getToken(OracleSQLStatementParser.SUM, 0); }
		public TerminalNode VARIANCE() { return getToken(OracleSQLStatementParser.VARIANCE, 0); }
		public TerminalNode REGR_() { return getToken(OracleSQLStatementParser.REGR_, 0); }
		public TerminalNode STDDEV() { return getToken(OracleSQLStatementParser.STDDEV, 0); }
		public TerminalNode VAR_() { return getToken(OracleSQLStatementParser.VAR_, 0); }
		public TerminalNode COVAR_() { return getToken(OracleSQLStatementParser.COVAR_, 0); }
		public TerminalNode INTERFACE() { return getToken(OracleSQLStatementParser.INTERFACE, 0); }
		public TerminalNode PROCEDURE() { return getToken(OracleSQLStatementParser.PROCEDURE, 0); }
		public TerminalNode MOD() { return getToken(OracleSQLStatementParser.MOD, 0); }
		public TerminalNode PRIOR() { return getToken(OracleSQLStatementParser.PRIOR, 0); }
		public Regular_idContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_regular_id; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterRegular_id(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitRegular_id(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitRegular_id(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Regular_idContext regular_id() throws RecognitionException {
		Regular_idContext _localctx = new Regular_idContext(_ctx, getState());
		enterRule(_localctx, 808, RULE_regular_id);
		try {
			setState(6236);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,761,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5832);
				match(REGULAR_ID);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5833);
				match(A_LETTER);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5834);
				match(ASTERISK);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5835);
				string_function_name();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5836);
				numeric_function_name();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(5837);
				date_time_function_name();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(5838);
				conversion_function_name();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(5839);
				advanced_function_name();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(5840);
				match(ADD);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(5841);
				match(AFTER);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(5842);
				match(AGENT);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(5843);
				match(AGGREGATE);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(5844);
				match(ANALYZE);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(5845);
				match(ARRAY);
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(5846);
				match(ASSOCIATE);
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(5847);
				match(AT);
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(5848);
				match(ATTRIBUTE);
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(5849);
				match(AUDIT);
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(5850);
				match(AUTHID);
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(5851);
				match(AUTO);
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(5852);
				match(AUTOMATIC);
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(5853);
				match(AUTONOMOUS_TRANSACTION);
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(5854);
				match(BATCH);
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(5855);
				match(BEFORE);
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(5856);
				match(BFILE);
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(5857);
				match(BINARY_DOUBLE);
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(5858);
				match(BINARY_FLOAT);
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(5859);
				match(BINARY_INTEGER);
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(5860);
				match(BLOB);
				}
				break;
			case 30:
				enterOuterAlt(_localctx, 30);
				{
				setState(5861);
				match(BLOCK);
				}
				break;
			case 31:
				enterOuterAlt(_localctx, 31);
				{
				setState(5862);
				match(BODY);
				}
				break;
			case 32:
				enterOuterAlt(_localctx, 32);
				{
				setState(5863);
				match(BOOLEAN);
				}
				break;
			case 33:
				enterOuterAlt(_localctx, 33);
				{
				setState(5864);
				match(BOTH);
				}
				break;
			case 34:
				enterOuterAlt(_localctx, 34);
				{
				setState(5865);
				match(BULK);
				}
				break;
			case 35:
				enterOuterAlt(_localctx, 35);
				{
				setState(5866);
				match(BYTE);
				}
				break;
			case 36:
				enterOuterAlt(_localctx, 36);
				{
				setState(5867);
				match(C_LETTER);
				}
				break;
			case 37:
				enterOuterAlt(_localctx, 37);
				{
				setState(5868);
				match(CALL);
				}
				break;
			case 38:
				enterOuterAlt(_localctx, 38);
				{
				setState(5869);
				match(CANONICAL);
				}
				break;
			case 39:
				enterOuterAlt(_localctx, 39);
				{
				setState(5870);
				match(CASCADE);
				}
				break;
			case 40:
				enterOuterAlt(_localctx, 40);
				{
				setState(5871);
				match(CAST);
				}
				break;
			case 41:
				enterOuterAlt(_localctx, 41);
				{
				setState(5872);
				match(CHAR);
				}
				break;
			case 42:
				enterOuterAlt(_localctx, 42);
				{
				setState(5873);
				match(CHAR_CS);
				}
				break;
			case 43:
				enterOuterAlt(_localctx, 43);
				{
				setState(5874);
				match(CHARACTER);
				}
				break;
			case 44:
				enterOuterAlt(_localctx, 44);
				{
				setState(5875);
				match(CHR);
				}
				break;
			case 45:
				enterOuterAlt(_localctx, 45);
				{
				setState(5876);
				match(CLOB);
				}
				break;
			case 46:
				enterOuterAlt(_localctx, 46);
				{
				setState(5877);
				match(CLOSE);
				}
				break;
			case 47:
				enterOuterAlt(_localctx, 47);
				{
				setState(5878);
				match(CLUSTER);
				}
				break;
			case 48:
				enterOuterAlt(_localctx, 48);
				{
				setState(5879);
				match(COLLECT);
				}
				break;
			case 49:
				enterOuterAlt(_localctx, 49);
				{
				setState(5880);
				match(COLUMNS);
				}
				break;
			case 50:
				enterOuterAlt(_localctx, 50);
				{
				setState(5881);
				match(COMMENT);
				}
				break;
			case 51:
				enterOuterAlt(_localctx, 51);
				{
				setState(5882);
				match(COMMIT);
				}
				break;
			case 52:
				enterOuterAlt(_localctx, 52);
				{
				setState(5883);
				match(COMMITTED);
				}
				break;
			case 53:
				enterOuterAlt(_localctx, 53);
				{
				setState(5884);
				match(COMPATIBILITY);
				}
				break;
			case 54:
				enterOuterAlt(_localctx, 54);
				{
				setState(5885);
				match(COMPILE);
				}
				break;
			case 55:
				enterOuterAlt(_localctx, 55);
				{
				setState(5886);
				match(COMPOUND);
				}
				break;
			case 56:
				enterOuterAlt(_localctx, 56);
				{
				setState(5887);
				match(CONSTANT);
				}
				break;
			case 57:
				enterOuterAlt(_localctx, 57);
				{
				setState(5888);
				match(CONSTRAINT);
				}
				break;
			case 58:
				enterOuterAlt(_localctx, 58);
				{
				setState(5889);
				match(CONSTRAINTS);
				}
				break;
			case 59:
				enterOuterAlt(_localctx, 59);
				{
				setState(5890);
				match(CONSTRUCTOR);
				}
				break;
			case 60:
				enterOuterAlt(_localctx, 60);
				{
				setState(5891);
				match(CONTENT);
				}
				break;
			case 61:
				enterOuterAlt(_localctx, 61);
				{
				setState(5892);
				match(CONTEXT);
				}
				break;
			case 62:
				enterOuterAlt(_localctx, 62);
				{
				setState(5893);
				match(CONTINUE);
				}
				break;
			case 63:
				enterOuterAlt(_localctx, 63);
				{
				setState(5894);
				match(CONVERT);
				}
				break;
			case 64:
				enterOuterAlt(_localctx, 64);
				{
				setState(5895);
				match(CORRUPT_XID);
				}
				break;
			case 65:
				enterOuterAlt(_localctx, 65);
				{
				setState(5896);
				match(CORRUPT_XID_ALL);
				}
				break;
			case 66:
				enterOuterAlt(_localctx, 66);
				{
				setState(5897);
				match(COST);
				}
				break;
			case 67:
				enterOuterAlt(_localctx, 67);
				{
				setState(5898);
				match(COUNT);
				}
				break;
			case 68:
				enterOuterAlt(_localctx, 68);
				{
				setState(5899);
				match(CROSS);
				}
				break;
			case 69:
				enterOuterAlt(_localctx, 69);
				{
				setState(5900);
				match(CUBE);
				}
				break;
			case 70:
				enterOuterAlt(_localctx, 70);
				{
				setState(5901);
				match(CURRENT_USER);
				}
				break;
			case 71:
				enterOuterAlt(_localctx, 71);
				{
				setState(5902);
				match(CURSOR);
				}
				break;
			case 72:
				enterOuterAlt(_localctx, 72);
				{
				setState(5903);
				match(CUSTOMDATUM);
				}
				break;
			case 73:
				enterOuterAlt(_localctx, 73);
				{
				setState(5904);
				match(CYCLE);
				}
				break;
			case 74:
				enterOuterAlt(_localctx, 74);
				{
				setState(5905);
				match(DATA);
				}
				break;
			case 75:
				enterOuterAlt(_localctx, 75);
				{
				setState(5906);
				match(DATABASE);
				}
				break;
			case 76:
				enterOuterAlt(_localctx, 76);
				{
				setState(5907);
				match(DAY);
				}
				break;
			case 77:
				enterOuterAlt(_localctx, 77);
				{
				setState(5908);
				match(DB_ROLE_CHANGE);
				}
				break;
			case 78:
				enterOuterAlt(_localctx, 78);
				{
				setState(5909);
				match(DBTIMEZONE);
				}
				break;
			case 79:
				enterOuterAlt(_localctx, 79);
				{
				setState(5910);
				match(DDL);
				}
				break;
			case 80:
				enterOuterAlt(_localctx, 80);
				{
				setState(5911);
				match(DEBUG);
				}
				break;
			case 81:
				enterOuterAlt(_localctx, 81);
				{
				setState(5912);
				match(DEC);
				}
				break;
			case 82:
				enterOuterAlt(_localctx, 82);
				{
				setState(5913);
				match(DECIMAL);
				}
				break;
			case 83:
				enterOuterAlt(_localctx, 83);
				{
				setState(5914);
				match(DECOMPOSE);
				}
				break;
			case 84:
				enterOuterAlt(_localctx, 84);
				{
				setState(5915);
				match(DECREMENT);
				}
				break;
			case 85:
				enterOuterAlt(_localctx, 85);
				{
				setState(5916);
				match(DEFAULTS);
				}
				break;
			case 86:
				enterOuterAlt(_localctx, 86);
				{
				setState(5917);
				match(DEFERRED);
				}
				break;
			case 87:
				enterOuterAlt(_localctx, 87);
				{
				setState(5918);
				match(DEFINER);
				}
				break;
			case 88:
				enterOuterAlt(_localctx, 88);
				{
				setState(5919);
				match(DELETE);
				}
				break;
			case 89:
				enterOuterAlt(_localctx, 89);
				{
				setState(5920);
				match(DETERMINISTIC);
				}
				break;
			case 90:
				enterOuterAlt(_localctx, 90);
				{
				setState(5921);
				match(DIMENSION);
				}
				break;
			case 91:
				enterOuterAlt(_localctx, 91);
				{
				setState(5922);
				match(DISABLE);
				}
				break;
			case 92:
				enterOuterAlt(_localctx, 92);
				{
				setState(5923);
				match(DISASSOCIATE);
				}
				break;
			case 93:
				enterOuterAlt(_localctx, 93);
				{
				setState(5924);
				match(DOCUMENT);
				}
				break;
			case 94:
				enterOuterAlt(_localctx, 94);
				{
				setState(5925);
				match(DOUBLE);
				}
				break;
			case 95:
				enterOuterAlt(_localctx, 95);
				{
				setState(5926);
				match(DSINTERVAL_UNCONSTRAINED);
				}
				break;
			case 96:
				enterOuterAlt(_localctx, 96);
				{
				setState(5927);
				match(EACH);
				}
				break;
			case 97:
				enterOuterAlt(_localctx, 97);
				{
				setState(5928);
				match(ELEMENT);
				}
				break;
			case 98:
				enterOuterAlt(_localctx, 98);
				{
				setState(5929);
				match(EMPTY);
				}
				break;
			case 99:
				enterOuterAlt(_localctx, 99);
				{
				setState(5930);
				match(ENABLE);
				}
				break;
			case 100:
				enterOuterAlt(_localctx, 100);
				{
				setState(5931);
				match(ENCODING);
				}
				break;
			case 101:
				enterOuterAlt(_localctx, 101);
				{
				setState(5932);
				match(ENTITYESCAPING);
				}
				break;
			case 102:
				enterOuterAlt(_localctx, 102);
				{
				setState(5933);
				match(ERR);
				}
				break;
			case 103:
				enterOuterAlt(_localctx, 103);
				{
				setState(5934);
				match(ERRORS);
				}
				break;
			case 104:
				enterOuterAlt(_localctx, 104);
				{
				setState(5935);
				match(ESCAPE);
				}
				break;
			case 105:
				enterOuterAlt(_localctx, 105);
				{
				setState(5936);
				match(EVALNAME);
				}
				break;
			case 106:
				enterOuterAlt(_localctx, 106);
				{
				setState(5937);
				match(EXCEPTION);
				}
				break;
			case 107:
				enterOuterAlt(_localctx, 107);
				{
				setState(5938);
				match(EXCEPTION_INIT);
				}
				break;
			case 108:
				enterOuterAlt(_localctx, 108);
				{
				setState(5939);
				match(EXCEPTIONS);
				}
				break;
			case 109:
				enterOuterAlt(_localctx, 109);
				{
				setState(5940);
				match(EXCLUDE);
				}
				break;
			case 110:
				enterOuterAlt(_localctx, 110);
				{
				setState(5941);
				match(EXECUTE);
				}
				break;
			case 111:
				enterOuterAlt(_localctx, 111);
				{
				setState(5942);
				match(EXIT);
				}
				break;
			case 112:
				enterOuterAlt(_localctx, 112);
				{
				setState(5943);
				match(EXPLAIN);
				}
				break;
			case 113:
				enterOuterAlt(_localctx, 113);
				{
				setState(5944);
				match(EXTERNAL);
				}
				break;
			case 114:
				enterOuterAlt(_localctx, 114);
				{
				setState(5945);
				match(EXTRACT);
				}
				break;
			case 115:
				enterOuterAlt(_localctx, 115);
				{
				setState(5946);
				match(FAILURE);
				}
				break;
			case 116:
				enterOuterAlt(_localctx, 116);
				{
				setState(5947);
				match(FINAL);
				}
				break;
			case 117:
				enterOuterAlt(_localctx, 117);
				{
				setState(5948);
				match(FIRST);
				}
				break;
			case 118:
				enterOuterAlt(_localctx, 118);
				{
				setState(5949);
				match(FIRST_VALUE);
				}
				break;
			case 119:
				enterOuterAlt(_localctx, 119);
				{
				setState(5950);
				match(FLOAT);
				}
				break;
			case 120:
				enterOuterAlt(_localctx, 120);
				{
				setState(5951);
				match(FOLLOWING);
				}
				break;
			case 121:
				enterOuterAlt(_localctx, 121);
				{
				setState(5952);
				match(FOLLOWS);
				}
				break;
			case 122:
				enterOuterAlt(_localctx, 122);
				{
				setState(5953);
				match(FORALL);
				}
				break;
			case 123:
				enterOuterAlt(_localctx, 123);
				{
				setState(5954);
				match(FORCE);
				}
				break;
			case 124:
				enterOuterAlt(_localctx, 124);
				{
				setState(5955);
				match(FULL);
				}
				break;
			case 125:
				enterOuterAlt(_localctx, 125);
				{
				setState(5956);
				match(FUNCTION);
				}
				break;
			case 126:
				enterOuterAlt(_localctx, 126);
				{
				setState(5957);
				match(GROUPING);
				}
				break;
			case 127:
				enterOuterAlt(_localctx, 127);
				{
				setState(5958);
				match(HASH);
				}
				break;
			case 128:
				enterOuterAlt(_localctx, 128);
				{
				setState(5959);
				match(HIDE);
				}
				break;
			case 129:
				enterOuterAlt(_localctx, 129);
				{
				setState(5960);
				match(HOUR);
				}
				break;
			case 130:
				enterOuterAlt(_localctx, 130);
				{
				setState(5961);
				match(IGNORE);
				}
				break;
			case 131:
				enterOuterAlt(_localctx, 131);
				{
				setState(5962);
				match(IMMEDIATE);
				}
				break;
			case 132:
				enterOuterAlt(_localctx, 132);
				{
				setState(5963);
				match(INCLUDE);
				}
				break;
			case 133:
				enterOuterAlt(_localctx, 133);
				{
				setState(5964);
				match(INCLUDING);
				}
				break;
			case 134:
				enterOuterAlt(_localctx, 134);
				{
				setState(5965);
				match(INCREMENT);
				}
				break;
			case 135:
				enterOuterAlt(_localctx, 135);
				{
				setState(5966);
				match(INDENT);
				}
				break;
			case 136:
				enterOuterAlt(_localctx, 136);
				{
				setState(5967);
				match(INDEXED);
				}
				break;
			case 137:
				enterOuterAlt(_localctx, 137);
				{
				setState(5968);
				match(INDICATOR);
				}
				break;
			case 138:
				enterOuterAlt(_localctx, 138);
				{
				setState(5969);
				match(INDICES);
				}
				break;
			case 139:
				enterOuterAlt(_localctx, 139);
				{
				setState(5970);
				match(INFINITE);
				}
				break;
			case 140:
				enterOuterAlt(_localctx, 140);
				{
				setState(5971);
				match(INLINE);
				}
				break;
			case 141:
				enterOuterAlt(_localctx, 141);
				{
				setState(5972);
				match(INNER);
				}
				break;
			case 142:
				enterOuterAlt(_localctx, 142);
				{
				setState(5973);
				match(INOUT);
				}
				break;
			case 143:
				enterOuterAlt(_localctx, 143);
				{
				setState(5974);
				match(INSTANTIABLE);
				}
				break;
			case 144:
				enterOuterAlt(_localctx, 144);
				{
				setState(5975);
				match(INSTEAD);
				}
				break;
			case 145:
				enterOuterAlt(_localctx, 145);
				{
				setState(5976);
				match(INT);
				}
				break;
			case 146:
				enterOuterAlt(_localctx, 146);
				{
				setState(5977);
				match(INTEGER);
				}
				break;
			case 147:
				enterOuterAlt(_localctx, 147);
				{
				setState(5978);
				match(INTERVAL);
				}
				break;
			case 148:
				enterOuterAlt(_localctx, 148);
				{
				setState(5979);
				match(INVALIDATE);
				}
				break;
			case 149:
				enterOuterAlt(_localctx, 149);
				{
				setState(5980);
				match(ISOLATION);
				}
				break;
			case 150:
				enterOuterAlt(_localctx, 150);
				{
				setState(5981);
				match(ITERATE);
				}
				break;
			case 151:
				enterOuterAlt(_localctx, 151);
				{
				setState(5982);
				match(JAVA);
				}
				break;
			case 152:
				enterOuterAlt(_localctx, 152);
				{
				setState(5983);
				match(JOIN);
				}
				break;
			case 153:
				enterOuterAlt(_localctx, 153);
				{
				setState(5984);
				match(KEEP);
				}
				break;
			case 154:
				enterOuterAlt(_localctx, 154);
				{
				setState(5985);
				match(KEY);
				}
				break;
			case 155:
				enterOuterAlt(_localctx, 155);
				{
				setState(5986);
				match(LANGUAGE);
				}
				break;
			case 156:
				enterOuterAlt(_localctx, 156);
				{
				setState(5987);
				match(LAST);
				}
				break;
			case 157:
				enterOuterAlt(_localctx, 157);
				{
				setState(5988);
				match(LAST_VALUE);
				}
				break;
			case 158:
				enterOuterAlt(_localctx, 158);
				{
				setState(5989);
				match(LEADING);
				}
				break;
			case 159:
				enterOuterAlt(_localctx, 159);
				{
				setState(5990);
				match(LEFT);
				}
				break;
			case 160:
				enterOuterAlt(_localctx, 160);
				{
				setState(5991);
				match(LEVEL);
				}
				break;
			case 161:
				enterOuterAlt(_localctx, 161);
				{
				setState(5992);
				match(LIBRARY);
				}
				break;
			case 162:
				enterOuterAlt(_localctx, 162);
				{
				setState(5993);
				match(LIKE2);
				}
				break;
			case 163:
				enterOuterAlt(_localctx, 163);
				{
				setState(5994);
				match(LIKE4);
				}
				break;
			case 164:
				enterOuterAlt(_localctx, 164);
				{
				setState(5995);
				match(LIKEC);
				}
				break;
			case 165:
				enterOuterAlt(_localctx, 165);
				{
				setState(5996);
				match(LIMIT);
				}
				break;
			case 166:
				enterOuterAlt(_localctx, 166);
				{
				setState(5997);
				match(LOCAL);
				}
				break;
			case 167:
				enterOuterAlt(_localctx, 167);
				{
				setState(5998);
				match(LOCKED);
				}
				break;
			case 168:
				enterOuterAlt(_localctx, 168);
				{
				setState(5999);
				match(LOG);
				}
				break;
			case 169:
				enterOuterAlt(_localctx, 169);
				{
				setState(6000);
				match(LOGOFF);
				}
				break;
			case 170:
				enterOuterAlt(_localctx, 170);
				{
				setState(6001);
				match(LOGON);
				}
				break;
			case 171:
				enterOuterAlt(_localctx, 171);
				{
				setState(6002);
				match(LONG);
				}
				break;
			case 172:
				enterOuterAlt(_localctx, 172);
				{
				setState(6003);
				match(LOOP);
				}
				break;
			case 173:
				enterOuterAlt(_localctx, 173);
				{
				setState(6004);
				match(MAIN);
				}
				break;
			case 174:
				enterOuterAlt(_localctx, 174);
				{
				setState(6005);
				match(MAP);
				}
				break;
			case 175:
				enterOuterAlt(_localctx, 175);
				{
				setState(6006);
				match(MATCHED);
				}
				break;
			case 176:
				enterOuterAlt(_localctx, 176);
				{
				setState(6007);
				match(MAXVALUE);
				}
				break;
			case 177:
				enterOuterAlt(_localctx, 177);
				{
				setState(6008);
				match(MEASURES);
				}
				break;
			case 178:
				enterOuterAlt(_localctx, 178);
				{
				setState(6009);
				match(MEMBER);
				}
				break;
			case 179:
				enterOuterAlt(_localctx, 179);
				{
				setState(6010);
				match(MERGE);
				}
				break;
			case 180:
				enterOuterAlt(_localctx, 180);
				{
				setState(6011);
				match(MINUTE);
				}
				break;
			case 181:
				enterOuterAlt(_localctx, 181);
				{
				setState(6012);
				match(MINVALUE);
				}
				break;
			case 182:
				enterOuterAlt(_localctx, 182);
				{
				setState(6013);
				match(MLSLABEL);
				}
				break;
			case 183:
				enterOuterAlt(_localctx, 183);
				{
				setState(6014);
				match(MODEL);
				}
				break;
			case 184:
				enterOuterAlt(_localctx, 184);
				{
				setState(6015);
				match(MODIFY);
				}
				break;
			case 185:
				enterOuterAlt(_localctx, 185);
				{
				setState(6016);
				match(MONTH);
				}
				break;
			case 186:
				enterOuterAlt(_localctx, 186);
				{
				setState(6017);
				match(MULTISET);
				}
				break;
			case 187:
				enterOuterAlt(_localctx, 187);
				{
				setState(6018);
				match(NAME);
				}
				break;
			case 188:
				enterOuterAlt(_localctx, 188);
				{
				setState(6019);
				match(NAN);
				}
				break;
			case 189:
				enterOuterAlt(_localctx, 189);
				{
				setState(6020);
				match(NATURAL);
				}
				break;
			case 190:
				enterOuterAlt(_localctx, 190);
				{
				setState(6021);
				match(NATURALN);
				}
				break;
			case 191:
				enterOuterAlt(_localctx, 191);
				{
				setState(6022);
				match(NAV);
				}
				break;
			case 192:
				enterOuterAlt(_localctx, 192);
				{
				setState(6023);
				match(NCHAR);
				}
				break;
			case 193:
				enterOuterAlt(_localctx, 193);
				{
				setState(6024);
				match(NCHAR_CS);
				}
				break;
			case 194:
				enterOuterAlt(_localctx, 194);
				{
				setState(6025);
				match(NCLOB);
				}
				break;
			case 195:
				enterOuterAlt(_localctx, 195);
				{
				setState(6026);
				match(NESTED);
				}
				break;
			case 196:
				enterOuterAlt(_localctx, 196);
				{
				setState(6027);
				match(NEW);
				}
				break;
			case 197:
				enterOuterAlt(_localctx, 197);
				{
				setState(6028);
				match(NO);
				}
				break;
			case 198:
				enterOuterAlt(_localctx, 198);
				{
				setState(6029);
				match(NOAUDIT);
				}
				break;
			case 199:
				enterOuterAlt(_localctx, 199);
				{
				setState(6030);
				match(NOCOPY);
				}
				break;
			case 200:
				enterOuterAlt(_localctx, 200);
				{
				setState(6031);
				match(NOCYCLE);
				}
				break;
			case 201:
				enterOuterAlt(_localctx, 201);
				{
				setState(6032);
				match(NOENTITYESCAPING);
				}
				break;
			case 202:
				enterOuterAlt(_localctx, 202);
				{
				setState(6033);
				match(NONE);
				}
				break;
			case 203:
				enterOuterAlt(_localctx, 203);
				{
				setState(6034);
				match(NOSCHEMACHECK);
				}
				break;
			case 204:
				enterOuterAlt(_localctx, 204);
				{
				setState(6035);
				match(NULLS);
				}
				break;
			case 205:
				enterOuterAlt(_localctx, 205);
				{
				setState(6036);
				match(NUMBER);
				}
				break;
			case 206:
				enterOuterAlt(_localctx, 206);
				{
				setState(6037);
				match(NUMERIC);
				}
				break;
			case 207:
				enterOuterAlt(_localctx, 207);
				{
				setState(6038);
				match(NVARCHAR2);
				}
				break;
			case 208:
				enterOuterAlt(_localctx, 208);
				{
				setState(6039);
				match(OBJECT);
				}
				break;
			case 209:
				enterOuterAlt(_localctx, 209);
				{
				setState(6040);
				match(OFF);
				}
				break;
			case 210:
				enterOuterAlt(_localctx, 210);
				{
				setState(6041);
				match(OID);
				}
				break;
			case 211:
				enterOuterAlt(_localctx, 211);
				{
				setState(6042);
				match(OLD);
				}
				break;
			case 212:
				enterOuterAlt(_localctx, 212);
				{
				setState(6043);
				match(ONLY);
				}
				break;
			case 213:
				enterOuterAlt(_localctx, 213);
				{
				setState(6044);
				match(OPAQUE);
				}
				break;
			case 214:
				enterOuterAlt(_localctx, 214);
				{
				setState(6045);
				match(OPEN);
				}
				break;
			case 215:
				enterOuterAlt(_localctx, 215);
				{
				setState(6046);
				match(ORADATA);
				}
				break;
			case 216:
				enterOuterAlt(_localctx, 216);
				{
				setState(6047);
				match(ORDINALITY);
				}
				break;
			case 217:
				enterOuterAlt(_localctx, 217);
				{
				setState(6048);
				match(OSERROR);
				}
				break;
			case 218:
				enterOuterAlt(_localctx, 218);
				{
				setState(6049);
				match(OUT);
				}
				break;
			case 219:
				enterOuterAlt(_localctx, 219);
				{
				setState(6050);
				match(OUTER);
				}
				break;
			case 220:
				enterOuterAlt(_localctx, 220);
				{
				setState(6051);
				match(OVER);
				}
				break;
			case 221:
				enterOuterAlt(_localctx, 221);
				{
				setState(6052);
				match(OVERRIDING);
				}
				break;
			case 222:
				enterOuterAlt(_localctx, 222);
				{
				setState(6053);
				match(PACKAGE);
				}
				break;
			case 223:
				enterOuterAlt(_localctx, 223);
				{
				setState(6054);
				match(PARALLEL_ENABLE);
				}
				break;
			case 224:
				enterOuterAlt(_localctx, 224);
				{
				setState(6055);
				match(PARAMETERS);
				}
				break;
			case 225:
				enterOuterAlt(_localctx, 225);
				{
				setState(6056);
				match(PARENT);
				}
				break;
			case 226:
				enterOuterAlt(_localctx, 226);
				{
				setState(6057);
				match(PARTITION);
				}
				break;
			case 227:
				enterOuterAlt(_localctx, 227);
				{
				setState(6058);
				match(PASSING);
				}
				break;
			case 228:
				enterOuterAlt(_localctx, 228);
				{
				setState(6059);
				match(PATH);
				}
				break;
			case 229:
				enterOuterAlt(_localctx, 229);
				{
				setState(6060);
				match(PIPELINED);
				}
				break;
			case 230:
				enterOuterAlt(_localctx, 230);
				{
				setState(6061);
				match(PLAN);
				}
				break;
			case 231:
				enterOuterAlt(_localctx, 231);
				{
				setState(6062);
				match(PLS_INTEGER);
				}
				break;
			case 232:
				enterOuterAlt(_localctx, 232);
				{
				setState(6063);
				match(POSITIVE);
				}
				break;
			case 233:
				enterOuterAlt(_localctx, 233);
				{
				setState(6064);
				match(POSITIVEN);
				}
				break;
			case 234:
				enterOuterAlt(_localctx, 234);
				{
				setState(6065);
				match(PRAGMA);
				}
				break;
			case 235:
				enterOuterAlt(_localctx, 235);
				{
				setState(6066);
				match(PRECEDING);
				}
				break;
			case 236:
				enterOuterAlt(_localctx, 236);
				{
				setState(6067);
				match(PRECISION);
				}
				break;
			case 237:
				enterOuterAlt(_localctx, 237);
				{
				setState(6068);
				match(PRESENT);
				}
				break;
			case 238:
				enterOuterAlt(_localctx, 238);
				{
				setState(6069);
				match(RAISE);
				}
				break;
			case 239:
				enterOuterAlt(_localctx, 239);
				{
				setState(6070);
				match(RANGE);
				}
				break;
			case 240:
				enterOuterAlt(_localctx, 240);
				{
				setState(6071);
				match(RAW);
				}
				break;
			case 241:
				enterOuterAlt(_localctx, 241);
				{
				setState(6072);
				match(READ);
				}
				break;
			case 242:
				enterOuterAlt(_localctx, 242);
				{
				setState(6073);
				match(REAL);
				}
				break;
			case 243:
				enterOuterAlt(_localctx, 243);
				{
				setState(6074);
				match(RECORD);
				}
				break;
			case 244:
				enterOuterAlt(_localctx, 244);
				{
				setState(6075);
				match(REF);
				}
				break;
			case 245:
				enterOuterAlt(_localctx, 245);
				{
				setState(6076);
				match(REFERENCE);
				}
				break;
			case 246:
				enterOuterAlt(_localctx, 246);
				{
				setState(6077);
				match(REFERENCING);
				}
				break;
			case 247:
				enterOuterAlt(_localctx, 247);
				{
				setState(6078);
				match(REJECT);
				}
				break;
			case 248:
				enterOuterAlt(_localctx, 248);
				{
				setState(6079);
				match(RELIES_ON);
				}
				break;
			case 249:
				enterOuterAlt(_localctx, 249);
				{
				setState(6080);
				match(RENAME);
				}
				break;
			case 250:
				enterOuterAlt(_localctx, 250);
				{
				setState(6081);
				match(REPLACE);
				}
				break;
			case 251:
				enterOuterAlt(_localctx, 251);
				{
				setState(6082);
				match(RESPECT);
				}
				break;
			case 252:
				enterOuterAlt(_localctx, 252);
				{
				setState(6083);
				match(RESTRICT_REFERENCES);
				}
				break;
			case 253:
				enterOuterAlt(_localctx, 253);
				{
				setState(6084);
				match(RESULT);
				}
				break;
			case 254:
				enterOuterAlt(_localctx, 254);
				{
				setState(6085);
				match(RESULT_CACHE);
				}
				break;
			case 255:
				enterOuterAlt(_localctx, 255);
				{
				setState(6086);
				match(RETURN);
				}
				break;
			case 256:
				enterOuterAlt(_localctx, 256);
				{
				setState(6087);
				match(RETURNING);
				}
				break;
			case 257:
				enterOuterAlt(_localctx, 257);
				{
				setState(6088);
				match(REUSE);
				}
				break;
			case 258:
				enterOuterAlt(_localctx, 258);
				{
				setState(6089);
				match(REVERSE);
				}
				break;
			case 259:
				enterOuterAlt(_localctx, 259);
				{
				setState(6090);
				match(RIGHT);
				}
				break;
			case 260:
				enterOuterAlt(_localctx, 260);
				{
				setState(6091);
				match(ROLLBACK);
				}
				break;
			case 261:
				enterOuterAlt(_localctx, 261);
				{
				setState(6092);
				match(ROLLUP);
				}
				break;
			case 262:
				enterOuterAlt(_localctx, 262);
				{
				setState(6093);
				match(ROW);
				}
				break;
			case 263:
				enterOuterAlt(_localctx, 263);
				{
				setState(6094);
				match(ROWID);
				}
				break;
			case 264:
				enterOuterAlt(_localctx, 264);
				{
				setState(6095);
				match(ROWS);
				}
				break;
			case 265:
				enterOuterAlt(_localctx, 265);
				{
				setState(6096);
				match(RULES);
				}
				break;
			case 266:
				enterOuterAlt(_localctx, 266);
				{
				setState(6097);
				match(SAMPLE);
				}
				break;
			case 267:
				enterOuterAlt(_localctx, 267);
				{
				setState(6098);
				match(SAVE);
				}
				break;
			case 268:
				enterOuterAlt(_localctx, 268);
				{
				setState(6099);
				match(SAVEPOINT);
				}
				break;
			case 269:
				enterOuterAlt(_localctx, 269);
				{
				setState(6100);
				match(SCHEMA);
				}
				break;
			case 270:
				enterOuterAlt(_localctx, 270);
				{
				setState(6101);
				match(SCHEMACHECK);
				}
				break;
			case 271:
				enterOuterAlt(_localctx, 271);
				{
				setState(6102);
				match(SCN);
				}
				break;
			case 272:
				enterOuterAlt(_localctx, 272);
				{
				setState(6103);
				match(SECOND);
				}
				break;
			case 273:
				enterOuterAlt(_localctx, 273);
				{
				setState(6104);
				match(SEED);
				}
				break;
			case 274:
				enterOuterAlt(_localctx, 274);
				{
				setState(6105);
				match(SEGMENT);
				}
				break;
			case 275:
				enterOuterAlt(_localctx, 275);
				{
				setState(6106);
				match(SELF);
				}
				break;
			case 276:
				enterOuterAlt(_localctx, 276);
				{
				setState(6107);
				match(SEQUENTIAL);
				}
				break;
			case 277:
				enterOuterAlt(_localctx, 277);
				{
				setState(6108);
				match(SERIALIZABLE);
				}
				break;
			case 278:
				enterOuterAlt(_localctx, 278);
				{
				setState(6109);
				match(SERIALLY_REUSABLE);
				}
				break;
			case 279:
				enterOuterAlt(_localctx, 279);
				{
				setState(6110);
				match(SERVERERROR);
				}
				break;
			case 280:
				enterOuterAlt(_localctx, 280);
				{
				setState(6111);
				match(SESSIONTIMEZONE);
				}
				break;
			case 281:
				enterOuterAlt(_localctx, 281);
				{
				setState(6112);
				match(SET);
				}
				break;
			case 282:
				enterOuterAlt(_localctx, 282);
				{
				setState(6113);
				match(SETS);
				}
				break;
			case 283:
				enterOuterAlt(_localctx, 283);
				{
				setState(6114);
				match(SETTINGS);
				}
				break;
			case 284:
				enterOuterAlt(_localctx, 284);
				{
				setState(6115);
				match(SHOW);
				}
				break;
			case 285:
				enterOuterAlt(_localctx, 285);
				{
				setState(6116);
				match(SHUTDOWN);
				}
				break;
			case 286:
				enterOuterAlt(_localctx, 286);
				{
				setState(6117);
				match(SIBLINGS);
				}
				break;
			case 287:
				enterOuterAlt(_localctx, 287);
				{
				setState(6118);
				match(SIGNTYPE);
				}
				break;
			case 288:
				enterOuterAlt(_localctx, 288);
				{
				setState(6119);
				match(SIMPLE_INTEGER);
				}
				break;
			case 289:
				enterOuterAlt(_localctx, 289);
				{
				setState(6120);
				match(SINGLE);
				}
				break;
			case 290:
				enterOuterAlt(_localctx, 290);
				{
				setState(6121);
				match(SKIP_);
				}
				break;
			case 291:
				enterOuterAlt(_localctx, 291);
				{
				setState(6122);
				match(SMALLINT);
				}
				break;
			case 292:
				enterOuterAlt(_localctx, 292);
				{
				setState(6123);
				match(SNAPSHOT);
				}
				break;
			case 293:
				enterOuterAlt(_localctx, 293);
				{
				setState(6124);
				match(SOME);
				}
				break;
			case 294:
				enterOuterAlt(_localctx, 294);
				{
				setState(6125);
				match(SPECIFICATION);
				}
				break;
			case 295:
				enterOuterAlt(_localctx, 295);
				{
				setState(6126);
				match(SQLDATA);
				}
				break;
			case 296:
				enterOuterAlt(_localctx, 296);
				{
				setState(6127);
				match(SQLERROR);
				}
				break;
			case 297:
				enterOuterAlt(_localctx, 297);
				{
				setState(6128);
				match(STANDALONE);
				}
				break;
			case 298:
				enterOuterAlt(_localctx, 298);
				{
				setState(6129);
				match(STARTUP);
				}
				break;
			case 299:
				enterOuterAlt(_localctx, 299);
				{
				setState(6130);
				match(STATEMENT);
				}
				break;
			case 300:
				enterOuterAlt(_localctx, 300);
				{
				setState(6131);
				match(STATEMENT_ID);
				}
				break;
			case 301:
				enterOuterAlt(_localctx, 301);
				{
				setState(6132);
				match(STATIC);
				}
				break;
			case 302:
				enterOuterAlt(_localctx, 302);
				{
				setState(6133);
				match(STATISTICS);
				}
				break;
			case 303:
				enterOuterAlt(_localctx, 303);
				{
				setState(6134);
				match(STRING);
				}
				break;
			case 304:
				enterOuterAlt(_localctx, 304);
				{
				setState(6135);
				match(SUBSTR);
				}
				break;
			case 305:
				enterOuterAlt(_localctx, 305);
				{
				setState(6136);
				match(SUBMULTISET);
				}
				break;
			case 306:
				enterOuterAlt(_localctx, 306);
				{
				setState(6137);
				match(SUBPARTITION);
				}
				break;
			case 307:
				enterOuterAlt(_localctx, 307);
				{
				setState(6138);
				match(SUBSTITUTABLE);
				}
				break;
			case 308:
				enterOuterAlt(_localctx, 308);
				{
				setState(6139);
				match(SUBTYPE);
				}
				break;
			case 309:
				enterOuterAlt(_localctx, 309);
				{
				setState(6140);
				match(SUCCESS);
				}
				break;
			case 310:
				enterOuterAlt(_localctx, 310);
				{
				setState(6141);
				match(SUSPEND);
				}
				break;
			case 311:
				enterOuterAlt(_localctx, 311);
				{
				setState(6142);
				match(TIME);
				}
				break;
			case 312:
				enterOuterAlt(_localctx, 312);
				{
				setState(6143);
				match(TIMESTAMP);
				}
				break;
			case 313:
				enterOuterAlt(_localctx, 313);
				{
				setState(6144);
				match(TIMESTAMP_LTZ_UNCONSTRAINED);
				}
				break;
			case 314:
				enterOuterAlt(_localctx, 314);
				{
				setState(6145);
				match(TIMESTAMP_TZ_UNCONSTRAINED);
				}
				break;
			case 315:
				enterOuterAlt(_localctx, 315);
				{
				setState(6146);
				match(TIMESTAMP_UNCONSTRAINED);
				}
				break;
			case 316:
				enterOuterAlt(_localctx, 316);
				{
				setState(6147);
				match(TIMEZONE_ABBR);
				}
				break;
			case 317:
				enterOuterAlt(_localctx, 317);
				{
				setState(6148);
				match(TIMEZONE_HOUR);
				}
				break;
			case 318:
				enterOuterAlt(_localctx, 318);
				{
				setState(6149);
				match(TIMEZONE_MINUTE);
				}
				break;
			case 319:
				enterOuterAlt(_localctx, 319);
				{
				setState(6150);
				match(TIMEZONE_REGION);
				}
				break;
			case 320:
				enterOuterAlt(_localctx, 320);
				{
				setState(6151);
				match(TRAILING);
				}
				break;
			case 321:
				enterOuterAlt(_localctx, 321);
				{
				setState(6152);
				match(TRANSACTION);
				}
				break;
			case 322:
				enterOuterAlt(_localctx, 322);
				{
				setState(6153);
				match(TRANSLATE);
				}
				break;
			case 323:
				enterOuterAlt(_localctx, 323);
				{
				setState(6154);
				match(TREAT);
				}
				break;
			case 324:
				enterOuterAlt(_localctx, 324);
				{
				setState(6155);
				match(TRIGGER);
				}
				break;
			case 325:
				enterOuterAlt(_localctx, 325);
				{
				setState(6156);
				match(TRIM);
				}
				break;
			case 326:
				enterOuterAlt(_localctx, 326);
				{
				setState(6157);
				match(TRUNCATE);
				}
				break;
			case 327:
				enterOuterAlt(_localctx, 327);
				{
				setState(6158);
				match(TYPE);
				}
				break;
			case 328:
				enterOuterAlt(_localctx, 328);
				{
				setState(6159);
				match(UNBOUNDED);
				}
				break;
			case 329:
				enterOuterAlt(_localctx, 329);
				{
				setState(6160);
				match(UNDER);
				}
				break;
			case 330:
				enterOuterAlt(_localctx, 330);
				{
				setState(6161);
				match(UNLIMITED);
				}
				break;
			case 331:
				enterOuterAlt(_localctx, 331);
				{
				setState(6162);
				match(UNTIL);
				}
				break;
			case 332:
				enterOuterAlt(_localctx, 332);
				{
				setState(6163);
				match(UPDATED);
				}
				break;
			case 333:
				enterOuterAlt(_localctx, 333);
				{
				setState(6164);
				match(UPSERT);
				}
				break;
			case 334:
				enterOuterAlt(_localctx, 334);
				{
				setState(6165);
				match(UROWID);
				}
				break;
			case 335:
				enterOuterAlt(_localctx, 335);
				{
				setState(6166);
				match(USE);
				}
				break;
			case 336:
				enterOuterAlt(_localctx, 336);
				{
				setState(6167);
				match(VALIDATE);
				}
				break;
			case 337:
				enterOuterAlt(_localctx, 337);
				{
				setState(6168);
				match(VALUE);
				}
				break;
			case 338:
				enterOuterAlt(_localctx, 338);
				{
				setState(6169);
				match(VARCHAR);
				}
				break;
			case 339:
				enterOuterAlt(_localctx, 339);
				{
				setState(6170);
				match(VARCHAR2);
				}
				break;
			case 340:
				enterOuterAlt(_localctx, 340);
				{
				setState(6171);
				match(VARIABLE);
				}
				break;
			case 341:
				enterOuterAlt(_localctx, 341);
				{
				setState(6172);
				match(VARRAY);
				}
				break;
			case 342:
				enterOuterAlt(_localctx, 342);
				{
				setState(6173);
				match(VARYING);
				}
				break;
			case 343:
				enterOuterAlt(_localctx, 343);
				{
				setState(6174);
				match(VERSION);
				}
				break;
			case 344:
				enterOuterAlt(_localctx, 344);
				{
				setState(6175);
				match(VERSIONS);
				}
				break;
			case 345:
				enterOuterAlt(_localctx, 345);
				{
				setState(6176);
				match(WAIT);
				}
				break;
			case 346:
				enterOuterAlt(_localctx, 346);
				{
				setState(6177);
				match(WARNING);
				}
				break;
			case 347:
				enterOuterAlt(_localctx, 347);
				{
				setState(6178);
				match(WELLFORMED);
				}
				break;
			case 348:
				enterOuterAlt(_localctx, 348);
				{
				setState(6179);
				match(WHENEVER);
				}
				break;
			case 349:
				enterOuterAlt(_localctx, 349);
				{
				setState(6180);
				match(WHILE);
				}
				break;
			case 350:
				enterOuterAlt(_localctx, 350);
				{
				setState(6181);
				match(WITHIN);
				}
				break;
			case 351:
				enterOuterAlt(_localctx, 351);
				{
				setState(6182);
				match(WORK);
				}
				break;
			case 352:
				enterOuterAlt(_localctx, 352);
				{
				setState(6183);
				match(WRITE);
				}
				break;
			case 353:
				enterOuterAlt(_localctx, 353);
				{
				setState(6184);
				match(XML);
				}
				break;
			case 354:
				enterOuterAlt(_localctx, 354);
				{
				setState(6185);
				match(XMLAGG);
				}
				break;
			case 355:
				enterOuterAlt(_localctx, 355);
				{
				setState(6186);
				match(XMLATTRIBUTES);
				}
				break;
			case 356:
				enterOuterAlt(_localctx, 356);
				{
				setState(6187);
				match(XMLCAST);
				}
				break;
			case 357:
				enterOuterAlt(_localctx, 357);
				{
				setState(6188);
				match(XMLCOLATTVAL);
				}
				break;
			case 358:
				enterOuterAlt(_localctx, 358);
				{
				setState(6189);
				match(XMLELEMENT);
				}
				break;
			case 359:
				enterOuterAlt(_localctx, 359);
				{
				setState(6190);
				match(XMLEXISTS);
				}
				break;
			case 360:
				enterOuterAlt(_localctx, 360);
				{
				setState(6191);
				match(XMLFOREST);
				}
				break;
			case 361:
				enterOuterAlt(_localctx, 361);
				{
				setState(6192);
				match(XMLNAMESPACES);
				}
				break;
			case 362:
				enterOuterAlt(_localctx, 362);
				{
				setState(6193);
				match(XMLPARSE);
				}
				break;
			case 363:
				enterOuterAlt(_localctx, 363);
				{
				setState(6194);
				match(XMLPI);
				}
				break;
			case 364:
				enterOuterAlt(_localctx, 364);
				{
				setState(6195);
				match(XMLQUERY);
				}
				break;
			case 365:
				enterOuterAlt(_localctx, 365);
				{
				setState(6196);
				match(XMLROOT);
				}
				break;
			case 366:
				enterOuterAlt(_localctx, 366);
				{
				setState(6197);
				match(XMLSERIALIZE);
				}
				break;
			case 367:
				enterOuterAlt(_localctx, 367);
				{
				setState(6198);
				match(XMLTABLE);
				}
				break;
			case 368:
				enterOuterAlt(_localctx, 368);
				{
				setState(6199);
				match(YEAR);
				}
				break;
			case 369:
				enterOuterAlt(_localctx, 369);
				{
				setState(6200);
				match(YES);
				}
				break;
			case 370:
				enterOuterAlt(_localctx, 370);
				{
				setState(6201);
				match(YMINTERVAL_UNCONSTRAINED);
				}
				break;
			case 371:
				enterOuterAlt(_localctx, 371);
				{
				setState(6202);
				match(ZONE);
				}
				break;
			case 372:
				enterOuterAlt(_localctx, 372);
				{
				setState(6203);
				match(PREDICTION);
				}
				break;
			case 373:
				enterOuterAlt(_localctx, 373);
				{
				setState(6204);
				match(PREDICTION_BOUNDS);
				}
				break;
			case 374:
				enterOuterAlt(_localctx, 374);
				{
				setState(6205);
				match(PREDICTION_COST);
				}
				break;
			case 375:
				enterOuterAlt(_localctx, 375);
				{
				setState(6206);
				match(PREDICTION_DETAILS);
				}
				break;
			case 376:
				enterOuterAlt(_localctx, 376);
				{
				setState(6207);
				match(PREDICTION_PROBABILITY);
				}
				break;
			case 377:
				enterOuterAlt(_localctx, 377);
				{
				setState(6208);
				match(PREDICTION_SET);
				}
				break;
			case 378:
				enterOuterAlt(_localctx, 378);
				{
				setState(6209);
				match(CUME_DIST);
				}
				break;
			case 379:
				enterOuterAlt(_localctx, 379);
				{
				setState(6210);
				match(DENSE_RANK);
				}
				break;
			case 380:
				enterOuterAlt(_localctx, 380);
				{
				setState(6211);
				match(LISTAGG);
				}
				break;
			case 381:
				enterOuterAlt(_localctx, 381);
				{
				setState(6212);
				match(PERCENT_RANK);
				}
				break;
			case 382:
				enterOuterAlt(_localctx, 382);
				{
				setState(6213);
				match(PERCENTILE_CONT);
				}
				break;
			case 383:
				enterOuterAlt(_localctx, 383);
				{
				setState(6214);
				match(PERCENTILE_DISC);
				}
				break;
			case 384:
				enterOuterAlt(_localctx, 384);
				{
				setState(6215);
				match(RANK);
				}
				break;
			case 385:
				enterOuterAlt(_localctx, 385);
				{
				setState(6216);
				match(AVG);
				}
				break;
			case 386:
				enterOuterAlt(_localctx, 386);
				{
				setState(6217);
				match(CORR);
				}
				break;
			case 387:
				enterOuterAlt(_localctx, 387);
				{
				setState(6218);
				match(LAG);
				}
				break;
			case 388:
				enterOuterAlt(_localctx, 388);
				{
				setState(6219);
				match(LEAD);
				}
				break;
			case 389:
				enterOuterAlt(_localctx, 389);
				{
				setState(6220);
				match(MAX);
				}
				break;
			case 390:
				enterOuterAlt(_localctx, 390);
				{
				setState(6221);
				match(MEDIAN);
				}
				break;
			case 391:
				enterOuterAlt(_localctx, 391);
				{
				setState(6222);
				match(MIN);
				}
				break;
			case 392:
				enterOuterAlt(_localctx, 392);
				{
				setState(6223);
				match(NTILE);
				}
				break;
			case 393:
				enterOuterAlt(_localctx, 393);
				{
				setState(6224);
				match(RATIO_TO_REPORT);
				}
				break;
			case 394:
				enterOuterAlt(_localctx, 394);
				{
				setState(6225);
				match(ROW_NUMBER);
				}
				break;
			case 395:
				enterOuterAlt(_localctx, 395);
				{
				setState(6226);
				match(SUM);
				}
				break;
			case 396:
				enterOuterAlt(_localctx, 396);
				{
				setState(6227);
				match(VARIANCE);
				}
				break;
			case 397:
				enterOuterAlt(_localctx, 397);
				{
				setState(6228);
				match(REGR_);
				}
				break;
			case 398:
				enterOuterAlt(_localctx, 398);
				{
				setState(6229);
				match(STDDEV);
				}
				break;
			case 399:
				enterOuterAlt(_localctx, 399);
				{
				setState(6230);
				match(VAR_);
				}
				break;
			case 400:
				enterOuterAlt(_localctx, 400);
				{
				setState(6231);
				match(COVAR_);
				}
				break;
			case 401:
				enterOuterAlt(_localctx, 401);
				{
				setState(6232);
				match(INTERFACE);
				}
				break;
			case 402:
				enterOuterAlt(_localctx, 402);
				{
				setState(6233);
				match(PROCEDURE);
				}
				break;
			case 403:
				enterOuterAlt(_localctx, 403);
				{
				setState(6234);
				match(MOD);
				}
				break;
			case 404:
				enterOuterAlt(_localctx, 404);
				{
				setState(6235);
				match(PRIOR);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class String_function_nameContext extends ParserRuleContext {
		public TerminalNode ASCII() { return getToken(OracleSQLStatementParser.ASCII, 0); }
		public TerminalNode ASCIISTR() { return getToken(OracleSQLStatementParser.ASCIISTR, 0); }
		public TerminalNode CHR() { return getToken(OracleSQLStatementParser.CHR, 0); }
		public TerminalNode COMPOSE() { return getToken(OracleSQLStatementParser.COMPOSE, 0); }
		public TerminalNode CONCAT() { return getToken(OracleSQLStatementParser.CONCAT, 0); }
		public TerminalNode CONVERT() { return getToken(OracleSQLStatementParser.CONVERT, 0); }
		public TerminalNode DECOMPOSE() { return getToken(OracleSQLStatementParser.DECOMPOSE, 0); }
		public TerminalNode DUMP() { return getToken(OracleSQLStatementParser.DUMP, 0); }
		public TerminalNode INITCAP() { return getToken(OracleSQLStatementParser.INITCAP, 0); }
		public TerminalNode INSTR() { return getToken(OracleSQLStatementParser.INSTR, 0); }
		public TerminalNode INSTR2() { return getToken(OracleSQLStatementParser.INSTR2, 0); }
		public TerminalNode INSTR4() { return getToken(OracleSQLStatementParser.INSTR4, 0); }
		public TerminalNode INSTRB() { return getToken(OracleSQLStatementParser.INSTRB, 0); }
		public TerminalNode INSTRC() { return getToken(OracleSQLStatementParser.INSTRC, 0); }
		public TerminalNode LENGTH() { return getToken(OracleSQLStatementParser.LENGTH, 0); }
		public TerminalNode LENGTH2() { return getToken(OracleSQLStatementParser.LENGTH2, 0); }
		public TerminalNode LENGTH4() { return getToken(OracleSQLStatementParser.LENGTH4, 0); }
		public TerminalNode LENGTHB() { return getToken(OracleSQLStatementParser.LENGTHB, 0); }
		public TerminalNode LENGTHC() { return getToken(OracleSQLStatementParser.LENGTHC, 0); }
		public TerminalNode LOWER() { return getToken(OracleSQLStatementParser.LOWER, 0); }
		public TerminalNode LPAD() { return getToken(OracleSQLStatementParser.LPAD, 0); }
		public TerminalNode LTRIM() { return getToken(OracleSQLStatementParser.LTRIM, 0); }
		public TerminalNode NCHR() { return getToken(OracleSQLStatementParser.NCHR, 0); }
		public TerminalNode REGEXP_INSTR() { return getToken(OracleSQLStatementParser.REGEXP_INSTR, 0); }
		public TerminalNode REGEXP_REPLACE() { return getToken(OracleSQLStatementParser.REGEXP_REPLACE, 0); }
		public TerminalNode REGEXP_SUBSTR() { return getToken(OracleSQLStatementParser.REGEXP_SUBSTR, 0); }
		public TerminalNode REPLACE() { return getToken(OracleSQLStatementParser.REPLACE, 0); }
		public TerminalNode RPAD() { return getToken(OracleSQLStatementParser.RPAD, 0); }
		public TerminalNode RTRIM() { return getToken(OracleSQLStatementParser.RTRIM, 0); }
		public TerminalNode SOUNDEX() { return getToken(OracleSQLStatementParser.SOUNDEX, 0); }
		public TerminalNode SUBSTR() { return getToken(OracleSQLStatementParser.SUBSTR, 0); }
		public TerminalNode TRANSLATE() { return getToken(OracleSQLStatementParser.TRANSLATE, 0); }
		public TerminalNode TRIM() { return getToken(OracleSQLStatementParser.TRIM, 0); }
		public TerminalNode UPPER() { return getToken(OracleSQLStatementParser.UPPER, 0); }
		public TerminalNode VSIZE() { return getToken(OracleSQLStatementParser.VSIZE, 0); }
		public String_function_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_string_function_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterString_function_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitString_function_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitString_function_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final String_function_nameContext string_function_name() throws RecognitionException {
		String_function_nameContext _localctx = new String_function_nameContext(_ctx, getState());
		enterRule(_localctx, 810, RULE_string_function_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6238);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ASCII) | (1L << ASCIISTR) | (1L << CHR))) != 0) || ((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (COMPOSE - 76)) | (1L << (CONCAT - 76)) | (1L << (CONVERT - 76)) | (1L << (DECOMPOSE - 76)) | (1L << (DUMP - 76)))) != 0) || ((((_la - 205)) & ~0x3f) == 0 && ((1L << (_la - 205)) & ((1L << (INITCAP - 205)) | (1L << (INSTR2 - 205)) | (1L << (INSTR4 - 205)) | (1L << (INSTRB - 205)) | (1L << (INSTRC - 205)) | (1L << (INSTR - 205)) | (1L << (LENGTH2 - 205)) | (1L << (LENGTH4 - 205)) | (1L << (LENGTHB - 205)) | (1L << (LENGTHC - 205)) | (1L << (LENGTH - 205)) | (1L << (LOWER - 205)) | (1L << (LPAD - 205)) | (1L << (LTRIM - 205)))) != 0) || _la==NCHR || ((((_la - 379)) & ~0x3f) == 0 && ((1L << (_la - 379)) & ((1L << (REGEXP_INSTR - 379)) | (1L << (REGEXP_REPLACE - 379)) | (1L << (REGEXP_SUBSTR - 379)) | (1L << (REPLACE - 379)) | (1L << (RPAD - 379)) | (1L << (RTRIM - 379)) | (1L << (SOUNDEX - 379)))) != 0) || ((((_la - 495)) & ~0x3f) == 0 && ((1L << (_la - 495)) & ((1L << (TRANSLATE - 495)) | (1L << (UPPER - 495)) | (1L << (VSIZE - 495)))) != 0) || _la==SUBSTR || _la==TRIM) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Numeric_function_nameContext extends ParserRuleContext {
		public TerminalNode ABS() { return getToken(OracleSQLStatementParser.ABS, 0); }
		public TerminalNode ACOS() { return getToken(OracleSQLStatementParser.ACOS, 0); }
		public TerminalNode ASIN() { return getToken(OracleSQLStatementParser.ASIN, 0); }
		public TerminalNode ATAN() { return getToken(OracleSQLStatementParser.ATAN, 0); }
		public TerminalNode ATAN2() { return getToken(OracleSQLStatementParser.ATAN2, 0); }
		public TerminalNode AVG() { return getToken(OracleSQLStatementParser.AVG, 0); }
		public TerminalNode BITAND() { return getToken(OracleSQLStatementParser.BITAND, 0); }
		public TerminalNode CEIL() { return getToken(OracleSQLStatementParser.CEIL, 0); }
		public TerminalNode COS() { return getToken(OracleSQLStatementParser.COS, 0); }
		public TerminalNode COSH() { return getToken(OracleSQLStatementParser.COSH, 0); }
		public TerminalNode COUNT() { return getToken(OracleSQLStatementParser.COUNT, 0); }
		public TerminalNode EXP() { return getToken(OracleSQLStatementParser.EXP, 0); }
		public TerminalNode FLOOR() { return getToken(OracleSQLStatementParser.FLOOR, 0); }
		public TerminalNode GREATEST() { return getToken(OracleSQLStatementParser.GREATEST, 0); }
		public TerminalNode LEAST() { return getToken(OracleSQLStatementParser.LEAST, 0); }
		public TerminalNode LN() { return getToken(OracleSQLStatementParser.LN, 0); }
		public TerminalNode LOG() { return getToken(OracleSQLStatementParser.LOG, 0); }
		public TerminalNode MAX() { return getToken(OracleSQLStatementParser.MAX, 0); }
		public TerminalNode MEDIAN() { return getToken(OracleSQLStatementParser.MEDIAN, 0); }
		public TerminalNode MIN() { return getToken(OracleSQLStatementParser.MIN, 0); }
		public TerminalNode MOD() { return getToken(OracleSQLStatementParser.MOD, 0); }
		public TerminalNode POWER() { return getToken(OracleSQLStatementParser.POWER, 0); }
		public TerminalNode REGEXP_COUNT() { return getToken(OracleSQLStatementParser.REGEXP_COUNT, 0); }
		public TerminalNode REMAINDER() { return getToken(OracleSQLStatementParser.REMAINDER, 0); }
		public TerminalNode ROUND() { return getToken(OracleSQLStatementParser.ROUND, 0); }
		public TerminalNode ROWNUM() { return getToken(OracleSQLStatementParser.ROWNUM, 0); }
		public TerminalNode SIGN() { return getToken(OracleSQLStatementParser.SIGN, 0); }
		public TerminalNode SIN() { return getToken(OracleSQLStatementParser.SIN, 0); }
		public TerminalNode SINH() { return getToken(OracleSQLStatementParser.SINH, 0); }
		public TerminalNode SQRT() { return getToken(OracleSQLStatementParser.SQRT, 0); }
		public TerminalNode SUM() { return getToken(OracleSQLStatementParser.SUM, 0); }
		public TerminalNode TAN() { return getToken(OracleSQLStatementParser.TAN, 0); }
		public TerminalNode TANH() { return getToken(OracleSQLStatementParser.TANH, 0); }
		public TerminalNode TRUNC() { return getToken(OracleSQLStatementParser.TRUNC, 0); }
		public Numeric_function_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numeric_function_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterNumeric_function_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitNumeric_function_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitNumeric_function_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Numeric_function_nameContext numeric_function_name() throws RecognitionException {
		Numeric_function_nameContext _localctx = new Numeric_function_nameContext(_ctx, getState());
		enterRule(_localctx, 812, RULE_numeric_function_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6240);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABS) | (1L << ACOS) | (1L << ASIN) | (1L << ATAN2) | (1L << ATAN) | (1L << BITAND) | (1L << CEIL))) != 0) || ((((_la - 91)) & ~0x3f) == 0 && ((1L << (_la - 91)) & ((1L << (COS - 91)) | (1L << (COSH - 91)) | (1L << (COUNT - 91)))) != 0) || _la==EXP || _la==FLOOR || ((((_la - 249)) & ~0x3f) == 0 && ((1L << (_la - 249)) & ((1L << (LN - 249)) | (1L << (LOG - 249)) | (1L << (MOD - 249)))) != 0) || ((((_la - 358)) & ~0x3f) == 0 && ((1L << (_la - 358)) & ((1L << (POWER - 358)) | (1L << (REGEXP_COUNT - 358)) | (1L << (REMAINDER - 358)) | (1L << (ROWNUM - 358)))) != 0) || ((((_la - 431)) & ~0x3f) == 0 && ((1L << (_la - 431)) & ((1L << (SIGN - 431)) | (1L << (SINH - 431)) | (1L << (SIN - 431)) | (1L << (SQRT - 431)) | (1L << (TANH - 431)) | (1L << (TAN - 431)))) != 0) || _la==TRUNC || ((((_la - 577)) & ~0x3f) == 0 && ((1L << (_la - 577)) & ((1L << (AVG - 577)) | (1L << (MAX - 577)) | (1L << (MEDIAN - 577)) | (1L << (MIN - 577)) | (1L << (ROUND - 577)) | (1L << (SUM - 577)) | (1L << (LEAST - 577)) | (1L << (GREATEST - 577)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Date_time_function_nameContext extends ParserRuleContext {
		public TerminalNode ADD_MONTHS() { return getToken(OracleSQLStatementParser.ADD_MONTHS, 0); }
		public TerminalNode CURRENT_DATE() { return getToken(OracleSQLStatementParser.CURRENT_DATE, 0); }
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(OracleSQLStatementParser.CURRENT_TIMESTAMP, 0); }
		public TerminalNode DBTIMEZONE() { return getToken(OracleSQLStatementParser.DBTIMEZONE, 0); }
		public TerminalNode EXTRACT() { return getToken(OracleSQLStatementParser.EXTRACT, 0); }
		public TerminalNode LAST_DAY() { return getToken(OracleSQLStatementParser.LAST_DAY, 0); }
		public TerminalNode LOCALTIMESTAMP() { return getToken(OracleSQLStatementParser.LOCALTIMESTAMP, 0); }
		public TerminalNode MONTHS_BETWEEN() { return getToken(OracleSQLStatementParser.MONTHS_BETWEEN, 0); }
		public TerminalNode NEW_TIME() { return getToken(OracleSQLStatementParser.NEW_TIME, 0); }
		public TerminalNode NEXT_DAY() { return getToken(OracleSQLStatementParser.NEXT_DAY, 0); }
		public TerminalNode ROUND() { return getToken(OracleSQLStatementParser.ROUND, 0); }
		public TerminalNode SESSIONTIMEZONE() { return getToken(OracleSQLStatementParser.SESSIONTIMEZONE, 0); }
		public TerminalNode SYSDATE() { return getToken(OracleSQLStatementParser.SYSDATE, 0); }
		public TerminalNode SYSTIMESTAMP() { return getToken(OracleSQLStatementParser.SYSTIMESTAMP, 0); }
		public TerminalNode TRUNC() { return getToken(OracleSQLStatementParser.TRUNC, 0); }
		public TerminalNode TZ_OFFSET() { return getToken(OracleSQLStatementParser.TZ_OFFSET, 0); }
		public Date_time_function_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_date_time_function_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterDate_time_function_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitDate_time_function_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitDate_time_function_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Date_time_function_nameContext date_time_function_name() throws RecognitionException {
		Date_time_function_nameContext _localctx = new Date_time_function_nameContext(_ctx, getState());
		enterRule(_localctx, 814, RULE_date_time_function_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6242);
			_la = _input.LA(1);
			if ( !(_la==ADD_MONTHS || ((((_la - 101)) & ~0x3f) == 0 && ((1L << (_la - 101)) & ((1L << (CURRENT_DATE - 101)) | (1L << (CURRENT_TIMESTAMP - 101)) | (1L << (DBTIMEZONE - 101)) | (1L << (EXTRACT - 101)))) != 0) || ((((_la - 232)) & ~0x3f) == 0 && ((1L << (_la - 232)) & ((1L << (LAST_DAY - 232)) | (1L << (LOCALTIMESTAMP - 232)) | (1L << (MONTHS_BETWEEN - 232)) | (1L << (NEW_TIME - 232)) | (1L << (NEXT_DAY - 232)))) != 0) || ((((_la - 423)) & ~0x3f) == 0 && ((1L << (_la - 423)) & ((1L << (SESSIONTIMEZONE - 423)) | (1L << (SYSDATE - 423)) | (1L << (SYSTIMESTAMP - 423)))) != 0) || _la==TRUNC || _la==TZ_OFFSET || _la==ROUND) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Conversion_function_nameContext extends ParserRuleContext {
		public TerminalNode BIN_TO_NUM() { return getToken(OracleSQLStatementParser.BIN_TO_NUM, 0); }
		public TerminalNode CAST() { return getToken(OracleSQLStatementParser.CAST, 0); }
		public TerminalNode CHARTOROWID() { return getToken(OracleSQLStatementParser.CHARTOROWID, 0); }
		public TerminalNode FROM_TZ() { return getToken(OracleSQLStatementParser.FROM_TZ, 0); }
		public TerminalNode HEXTORAW() { return getToken(OracleSQLStatementParser.HEXTORAW, 0); }
		public TerminalNode NUMTODSINTERVAL() { return getToken(OracleSQLStatementParser.NUMTODSINTERVAL, 0); }
		public TerminalNode NUMTOYMINTERVAL() { return getToken(OracleSQLStatementParser.NUMTOYMINTERVAL, 0); }
		public TerminalNode RAWTOHEX() { return getToken(OracleSQLStatementParser.RAWTOHEX, 0); }
		public TerminalNode TO_CHAR() { return getToken(OracleSQLStatementParser.TO_CHAR, 0); }
		public TerminalNode TO_CLOB() { return getToken(OracleSQLStatementParser.TO_CLOB, 0); }
		public TerminalNode TO_DATE() { return getToken(OracleSQLStatementParser.TO_DATE, 0); }
		public TerminalNode TO_DSINTERVAL() { return getToken(OracleSQLStatementParser.TO_DSINTERVAL, 0); }
		public TerminalNode TO_LOB() { return getToken(OracleSQLStatementParser.TO_LOB, 0); }
		public TerminalNode TO_MULTI_BYTE() { return getToken(OracleSQLStatementParser.TO_MULTI_BYTE, 0); }
		public TerminalNode TO_NCLOB() { return getToken(OracleSQLStatementParser.TO_NCLOB, 0); }
		public TerminalNode TO_NUMBER() { return getToken(OracleSQLStatementParser.TO_NUMBER, 0); }
		public TerminalNode TO_SINGLE_BYTE() { return getToken(OracleSQLStatementParser.TO_SINGLE_BYTE, 0); }
		public TerminalNode TO_TIMESTAMP() { return getToken(OracleSQLStatementParser.TO_TIMESTAMP, 0); }
		public TerminalNode TO_TIMESTAMP_TZ() { return getToken(OracleSQLStatementParser.TO_TIMESTAMP_TZ, 0); }
		public TerminalNode TO_YMINTERVAL() { return getToken(OracleSQLStatementParser.TO_YMINTERVAL, 0); }
		public Conversion_function_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_conversion_function_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterConversion_function_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitConversion_function_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitConversion_function_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Conversion_function_nameContext conversion_function_name() throws RecognitionException {
		Conversion_function_nameContext _localctx = new Conversion_function_nameContext(_ctx, getState());
		enterRule(_localctx, 816, RULE_conversion_function_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6244);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BIN_TO_NUM) | (1L << CAST) | (1L << CHARTOROWID))) != 0) || _la==FROM_TZ || _la==HEXTORAW || ((((_la - 314)) & ~0x3f) == 0 && ((1L << (_la - 314)) & ((1L << (NUMTODSINTERVAL - 314)) | (1L << (NUMTOYMINTERVAL - 314)) | (1L << (RAWTOHEX - 314)))) != 0) || ((((_la - 482)) & ~0x3f) == 0 && ((1L << (_la - 482)) & ((1L << (TO_CLOB - 482)) | (1L << (TO_DSINTERVAL - 482)) | (1L << (TO_LOB - 482)) | (1L << (TO_MULTI_BYTE - 482)) | (1L << (TO_NCLOB - 482)) | (1L << (TO_NUMBER - 482)) | (1L << (TO_SINGLE_BYTE - 482)) | (1L << (TO_TIMESTAMP - 482)) | (1L << (TO_TIMESTAMP_TZ - 482)) | (1L << (TO_YMINTERVAL - 482)))) != 0) || _la==TO_CHAR || _la==TO_DATE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Analytic_function_nameContext extends ParserRuleContext {
		public TerminalNode CORR() { return getToken(OracleSQLStatementParser.CORR, 0); }
		public TerminalNode COVAR_POP() { return getToken(OracleSQLStatementParser.COVAR_POP, 0); }
		public TerminalNode COVAR_SAMP() { return getToken(OracleSQLStatementParser.COVAR_SAMP, 0); }
		public TerminalNode CUME_DIST() { return getToken(OracleSQLStatementParser.CUME_DIST, 0); }
		public TerminalNode DENSE_RANK() { return getToken(OracleSQLStatementParser.DENSE_RANK, 0); }
		public TerminalNode FIRST_VALUE() { return getToken(OracleSQLStatementParser.FIRST_VALUE, 0); }
		public TerminalNode LAG() { return getToken(OracleSQLStatementParser.LAG, 0); }
		public TerminalNode LAST_VALUE() { return getToken(OracleSQLStatementParser.LAST_VALUE, 0); }
		public TerminalNode LEAD() { return getToken(OracleSQLStatementParser.LEAD, 0); }
		public TerminalNode LISTAGG() { return getToken(OracleSQLStatementParser.LISTAGG, 0); }
		public TerminalNode NTH_VALUE() { return getToken(OracleSQLStatementParser.NTH_VALUE, 0); }
		public TerminalNode RANK() { return getToken(OracleSQLStatementParser.RANK, 0); }
		public TerminalNode STDDEV() { return getToken(OracleSQLStatementParser.STDDEV, 0); }
		public TerminalNode VAR_POP() { return getToken(OracleSQLStatementParser.VAR_POP, 0); }
		public TerminalNode VAR_SAMP() { return getToken(OracleSQLStatementParser.VAR_SAMP, 0); }
		public TerminalNode VARIANCE() { return getToken(OracleSQLStatementParser.VARIANCE, 0); }
		public Analytic_function_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_analytic_function_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterAnalytic_function_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitAnalytic_function_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitAnalytic_function_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Analytic_function_nameContext analytic_function_name() throws RecognitionException {
		Analytic_function_nameContext _localctx = new Analytic_function_nameContext(_ctx, getState());
		enterRule(_localctx, 818, RULE_analytic_function_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6246);
			_la = _input.LA(1);
			if ( !(_la==COVAR_POP || _la==COVAR_SAMP || _la==FIRST_VALUE || _la==LAST_VALUE || _la==NTH_VALUE || ((((_la - 526)) & ~0x3f) == 0 && ((1L << (_la - 526)) & ((1L << (VAR_POP - 526)) | (1L << (VAR_SAMP - 526)) | (1L << (CUME_DIST - 526)) | (1L << (DENSE_RANK - 526)) | (1L << (LISTAGG - 526)) | (1L << (RANK - 526)) | (1L << (CORR - 526)) | (1L << (LAG - 526)) | (1L << (LEAD - 526)))) != 0) || _la==STDDEV || _la==VARIANCE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Advanced_function_nameContext extends ParserRuleContext {
		public TerminalNode BFILENAME() { return getToken(OracleSQLStatementParser.BFILENAME, 0); }
		public TerminalNode CARDINALITY() { return getToken(OracleSQLStatementParser.CARDINALITY, 0); }
		public TerminalNode CASE() { return getToken(OracleSQLStatementParser.CASE, 0); }
		public TerminalNode COALESCE() { return getToken(OracleSQLStatementParser.COALESCE, 0); }
		public TerminalNode DECODE() { return getToken(OracleSQLStatementParser.DECODE, 0); }
		public TerminalNode EMPTY_BLOB() { return getToken(OracleSQLStatementParser.EMPTY_BLOB, 0); }
		public TerminalNode EMPTY_CLOB() { return getToken(OracleSQLStatementParser.EMPTY_CLOB, 0); }
		public TerminalNode GROUP_ID() { return getToken(OracleSQLStatementParser.GROUP_ID, 0); }
		public TerminalNode LNNVL() { return getToken(OracleSQLStatementParser.LNNVL, 0); }
		public TerminalNode NANVL() { return getToken(OracleSQLStatementParser.NANVL, 0); }
		public TerminalNode NULLIF() { return getToken(OracleSQLStatementParser.NULLIF, 0); }
		public TerminalNode NVL() { return getToken(OracleSQLStatementParser.NVL, 0); }
		public TerminalNode NVL2() { return getToken(OracleSQLStatementParser.NVL2, 0); }
		public TerminalNode SYS_CONTEXT() { return getToken(OracleSQLStatementParser.SYS_CONTEXT, 0); }
		public TerminalNode UID() { return getToken(OracleSQLStatementParser.UID, 0); }
		public TerminalNode USER() { return getToken(OracleSQLStatementParser.USER, 0); }
		public TerminalNode USERENV() { return getToken(OracleSQLStatementParser.USERENV, 0); }
		public Advanced_function_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_advanced_function_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).enterAdvanced_function_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleSQLStatementParserListener ) ((OracleSQLStatementParserListener)listener).exitAdvanced_function_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleSQLStatementParserVisitor ) return ((OracleSQLStatementParserVisitor<? extends T>)visitor).visitAdvanced_function_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Advanced_function_nameContext advanced_function_name() throws RecognitionException {
		Advanced_function_nameContext _localctx = new Advanced_function_nameContext(_ctx, getState());
		enterRule(_localctx, 820, RULE_advanced_function_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6248);
			_la = _input.LA(1);
			if ( !(((((_la - 35)) & ~0x3f) == 0 && ((1L << (_la - 35)) & ((1L << (BFILENAME - 35)) | (1L << (CARDINALITY - 35)) | (1L << (CASE - 35)) | (1L << (COALESCE - 35)))) != 0) || ((((_la - 141)) & ~0x3f) == 0 && ((1L << (_la - 141)) & ((1L << (EMPTY_BLOB - 141)) | (1L << (EMPTY_CLOB - 141)) | (1L << (GROUP_ID - 141)))) != 0) || ((((_la - 250)) & ~0x3f) == 0 && ((1L << (_la - 250)) & ((1L << (LNNVL - 250)) | (1L << (NANVL - 250)) | (1L << (NULLIF - 250)))) != 0) || _la==NVL2 || ((((_la - 463)) & ~0x3f) == 0 && ((1L << (_la - 463)) & ((1L << (SYS_CONTEXT - 463)) | (1L << (UID - 463)) | (1L << (USERENV - 463)) | (1L << (USER - 463)))) != 0) || _la==DECODE || _la==NVL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public boolean sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 262:
			return logical_or_expression_sempred((Logical_or_expressionContext)_localctx, predIndex);
		case 263:
			return logical_and_expression_sempred((Logical_and_expressionContext)_localctx, predIndex);
		case 268:
			return relational_expression_sempred((Relational_expressionContext)_localctx, predIndex);
		}
		return true;
	}
	private boolean logical_or_expression_sempred(Logical_or_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean logical_and_expression_sempred(Logical_and_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean relational_expression_sempred(Relational_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2:
			return precpred(_ctx, 2);
		}
		return true;
	}

	private static final int _serializedATNSegments = 3;
	private static final String _serializedATNSegment0 =
		"\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u028d\u186d\4\2\t"+
		"\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13"+
		"\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"+
		"\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!"+
		"\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4"+
		",\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t"+
		"\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t;\4<\t<\4=\t="+
		"\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\tD\4E\tE\4F\tF\4G\tG\4H\tH\4I"+
		"\tI\4J\tJ\4K\tK\4L\tL\4M\tM\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT"+
		"\4U\tU\4V\tV\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4_\t_\4"+
		"`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4h\th\4i\ti\4j\tj\4k\t"+
		"k\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4"+
		"w\tw\4x\tx\4y\ty\4z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080"+
		"\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084\t\u0084\4\u0085"+
		"\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087\4\u0088\t\u0088\4\u0089\t\u0089"+
		"\4\u008a\t\u008a\4\u008b\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e"+
		"\t\u008e\4\u008f\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092\t\u0092"+
		"\4\u0093\t\u0093\4\u0094\t\u0094\4\u0095\t\u0095\4\u0096\t\u0096\4\u0097"+
		"\t\u0097\4\u0098\t\u0098\4\u0099\t\u0099\4\u009a\t\u009a\4\u009b\t\u009b"+
		"\4\u009c\t\u009c\4\u009d\t\u009d\4\u009e\t\u009e\4\u009f\t\u009f\4\u00a0"+
		"\t\u00a0\4\u00a1\t\u00a1\4\u00a2\t\u00a2\4\u00a3\t\u00a3\4\u00a4\t\u00a4"+
		"\4\u00a5\t\u00a5\4\u00a6\t\u00a6\4\u00a7\t\u00a7\4\u00a8\t\u00a8\4\u00a9"+
		"\t\u00a9\4\u00aa\t\u00aa\4\u00ab\t\u00ab\4\u00ac\t\u00ac\4\u00ad\t\u00ad"+
		"\4\u00ae\t\u00ae\4\u00af\t\u00af\4\u00b0\t\u00b0\4\u00b1\t\u00b1\4\u00b2"+
		"\t\u00b2\4\u00b3\t\u00b3\4\u00b4\t\u00b4\4\u00b5\t\u00b5\4\u00b6\t\u00b6"+
		"\4\u00b7\t\u00b7\4\u00b8\t\u00b8\4\u00b9\t\u00b9\4\u00ba\t\u00ba\4\u00bb"+
		"\t\u00bb\4\u00bc\t\u00bc\4\u00bd\t\u00bd\4\u00be\t\u00be\4\u00bf\t\u00bf"+
		"\4\u00c0\t\u00c0\4\u00c1\t\u00c1\4\u00c2\t\u00c2\4\u00c3\t\u00c3\4\u00c4"+
		"\t\u00c4\4\u00c5\t\u00c5\4\u00c6\t\u00c6\4\u00c7\t\u00c7\4\u00c8\t\u00c8"+
		"\4\u00c9\t\u00c9\4\u00ca\t\u00ca\4\u00cb\t\u00cb\4\u00cc\t\u00cc\4\u00cd"+
		"\t\u00cd\4\u00ce\t\u00ce\4\u00cf\t\u00cf\4\u00d0\t\u00d0\4\u00d1\t\u00d1"+
		"\4\u00d2\t\u00d2\4\u00d3\t\u00d3\4\u00d4\t\u00d4\4\u00d5\t\u00d5\4\u00d6"+
		"\t\u00d6\4\u00d7\t\u00d7\4\u00d8\t\u00d8\4\u00d9\t\u00d9\4\u00da\t\u00da"+
		"\4\u00db\t\u00db\4\u00dc\t\u00dc\4\u00dd\t\u00dd\4\u00de\t\u00de\4\u00df"+
		"\t\u00df\4\u00e0\t\u00e0\4\u00e1\t\u00e1\4\u00e2\t\u00e2\4\u00e3\t\u00e3"+
		"\4\u00e4\t\u00e4\4\u00e5\t\u00e5\4\u00e6\t\u00e6\4\u00e7\t\u00e7\4\u00e8"+
		"\t\u00e8\4\u00e9\t\u00e9\4\u00ea\t\u00ea\4\u00eb\t\u00eb\4\u00ec\t\u00ec"+
		"\4\u00ed\t\u00ed\4\u00ee\t\u00ee\4\u00ef\t\u00ef\4\u00f0\t\u00f0\4\u00f1"+
		"\t\u00f1\4\u00f2\t\u00f2\4\u00f3\t\u00f3\4\u00f4\t\u00f4\4\u00f5\t\u00f5"+
		"\4\u00f6\t\u00f6\4\u00f7\t\u00f7\4\u00f8\t\u00f8\4\u00f9\t\u00f9\4\u00fa"+
		"\t\u00fa\4\u00fb\t\u00fb\4\u00fc\t\u00fc\4\u00fd\t\u00fd\4\u00fe\t\u00fe"+
		"\4\u00ff\t\u00ff\4\u0100\t\u0100\4\u0101\t\u0101\4\u0102\t\u0102\4\u0103"+
		"\t\u0103\4\u0104\t\u0104\4\u0105\t\u0105\4\u0106\t\u0106\4\u0107\t\u0107"+
		"\4\u0108\t\u0108\4\u0109\t\u0109\4\u010a\t\u010a\4\u010b\t\u010b\4\u010c"+
		"\t\u010c\4\u010d\t\u010d\4\u010e\t\u010e\4\u010f\t\u010f\4\u0110\t\u0110"+
		"\4\u0111\t\u0111\4\u0112\t\u0112\4\u0113\t\u0113\4\u0114\t\u0114\4\u0115"+
		"\t\u0115\4\u0116\t\u0116\4\u0117\t\u0117\4\u0118\t\u0118\4\u0119\t\u0119"+
		"\4\u011a\t\u011a\4\u011b\t\u011b\4\u011c\t\u011c\4\u011d\t\u011d\4\u011e"+
		"\t\u011e\4\u011f\t\u011f\4\u0120\t\u0120\4\u0121\t\u0121\4\u0122\t\u0122"+
		"\4\u0123\t\u0123\4\u0124\t\u0124\4\u0125\t\u0125\4\u0126\t\u0126\4\u0127"+
		"\t\u0127\4\u0128\t\u0128\4\u0129\t\u0129\4\u012a\t\u012a\4\u012b\t\u012b"+
		"\4\u012c\t\u012c\4\u012d\t\u012d\4\u012e\t\u012e\4\u012f\t\u012f\4\u0130"+
		"\t\u0130\4\u0131\t\u0131\4\u0132\t\u0132\4\u0133\t\u0133\4\u0134\t\u0134"+
		"\4\u0135\t\u0135\4\u0136\t\u0136\4\u0137\t\u0137\4\u0138\t\u0138\4\u0139"+
		"\t\u0139\4\u013a\t\u013a\4\u013b\t\u013b\4\u013c\t\u013c\4\u013d\t\u013d"+
		"\4\u013e\t\u013e\4\u013f\t\u013f\4\u0140\t\u0140\4\u0141\t\u0141\4\u0142"+
		"\t\u0142\4\u0143\t\u0143\4\u0144\t\u0144\4\u0145\t\u0145\4\u0146\t\u0146"+
		"\4\u0147\t\u0147\4\u0148\t\u0148\4\u0149\t\u0149\4\u014a\t\u014a\4\u014b"+
		"\t\u014b\4\u014c\t\u014c\4\u014d\t\u014d\4\u014e\t\u014e\4\u014f\t\u014f"+
		"\4\u0150\t\u0150\4\u0151\t\u0151\4\u0152\t\u0152\4\u0153\t\u0153\4\u0154"+
		"\t\u0154\4\u0155\t\u0155\4\u0156\t\u0156\4\u0157\t\u0157\4\u0158\t\u0158"+
		"\4\u0159\t\u0159\4\u015a\t\u015a\4\u015b\t\u015b\4\u015c\t\u015c\4\u015d"+
		"\t\u015d\4\u015e\t\u015e\4\u015f\t\u015f\4\u0160\t\u0160\4\u0161\t\u0161"+
		"\4\u0162\t\u0162\4\u0163\t\u0163\4\u0164\t\u0164\4\u0165\t\u0165\4\u0166"+
		"\t\u0166\4\u0167\t\u0167\4\u0168\t\u0168\4\u0169\t\u0169\4\u016a\t\u016a"+
		"\4\u016b\t\u016b\4\u016c\t\u016c\4\u016d\t\u016d\4\u016e\t\u016e\4\u016f"+
		"\t\u016f\4\u0170\t\u0170\4\u0171\t\u0171\4\u0172\t\u0172\4\u0173\t\u0173"+
		"\4\u0174\t\u0174\4\u0175\t\u0175\4\u0176\t\u0176\4\u0177\t\u0177\4\u0178"+
		"\t\u0178\4\u0179\t\u0179\4\u017a\t\u017a\4\u017b\t\u017b\4\u017c\t\u017c"+
		"\4\u017d\t\u017d\4\u017e\t\u017e\4\u017f\t\u017f\4\u0180\t\u0180\4\u0181"+
		"\t\u0181\4\u0182\t\u0182\4\u0183\t\u0183\4\u0184\t\u0184\4\u0185\t\u0185"+
		"\4\u0186\t\u0186\4\u0187\t\u0187\4\u0188\t\u0188\4\u0189\t\u0189\4\u018a"+
		"\t\u018a\4\u018b\t\u018b\4\u018c\t\u018c\4\u018d\t\u018d\4\u018e\t\u018e"+
		"\4\u018f\t\u018f\4\u0190\t\u0190\4\u0191\t\u0191\4\u0192\t\u0192\4\u0193"+
		"\t\u0193\4\u0194\t\u0194\4\u0195\t\u0195\4\u0196\t\u0196\4\u0197\t\u0197"+
		"\4\u0198\t\u0198\4\u0199\t\u0199\4\u019a\t\u019a\4\u019b\t\u019b\4\u019c"+
		"\t\u019c\3\2\3\2\5\2\u033b\n\2\3\2\5\2\u033e\n\2\7\2\u0340\n\2\f\2\16"+
		"\2\u0343\13\2\3\2\3\2\3\3\6\3\u0348\n\3\r\3\16\3\u0349\3\4\3\4\3\4\3\4"+
		"\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3"+
		"\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\5\4\u0369\n\4\3\5\3\5\3\5\3\5\3\5\3\6\3"+
		"\6\3\6\3\6\3\6\5\6\u0375\n\6\3\6\7\6\u0378\n\6\f\6\16\6\u037b\13\6\3\6"+
		"\3\6\5\6\u037f\n\6\3\6\3\6\3\7\3\7\3\7\5\7\u0386\n\7\3\7\3\7\3\7\3\7\3"+
		"\7\3\7\7\7\u038e\n\7\f\7\16\7\u0391\13\7\3\7\3\7\5\7\u0395\n\7\3\7\3\7"+
		"\3\7\3\7\3\7\3\7\7\7\u039d\n\7\f\7\16\7\u03a0\13\7\3\7\5\7\u03a3\n\7\3"+
		"\7\3\7\5\7\u03a7\n\7\3\7\7\7\u03aa\n\7\f\7\16\7\u03ad\13\7\3\7\3\7\5\7"+
		"\u03b1\n\7\3\7\3\7\3\7\5\7\u03b6\n\7\3\7\3\7\3\b\3\b\5\b\u03bc\n\b\3\t"+
		"\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\7\t\u03c8\n\t\f\t\16\t\u03cb\13\t"+
		"\3\t\3\t\5\t\u03cf\n\t\3\t\5\t\u03d2\n\t\3\t\3\t\3\n\3\n\5\n\u03d8\n\n"+
		"\3\13\3\13\3\13\3\13\3\13\7\13\u03df\n\13\f\13\16\13\u03e2\13\13\3\13"+
		"\3\13\3\f\3\f\3\f\3\f\3\f\3\f\3\f\7\f\u03ed\n\f\f\f\16\f\u03f0\13\f\3"+
		"\f\3\f\3\r\3\r\3\r\5\r\u03f7\n\r\3\r\3\r\3\r\5\r\u03fc\n\r\3\r\3\r\3\r"+
		"\3\16\3\16\3\16\3\16\3\16\5\16\u0406\n\16\3\16\5\16\u0409\n\16\3\16\7"+
		"\16\u040c\n\16\f\16\16\16\u040f\13\16\3\16\3\16\5\16\u0413\n\16\3\16\3"+
		"\16\3\17\3\17\3\17\5\17\u041a\n\17\3\17\3\17\3\17\3\17\5\17\u0420\n\17"+
		"\3\17\3\17\5\17\u0424\n\17\3\17\3\17\7\17\u0428\n\17\f\17\16\17\u042b"+
		"\13\17\3\17\3\17\5\17\u042f\n\17\3\17\3\17\3\20\3\20\3\20\5\20\u0436\n"+
		"\20\3\20\3\20\3\20\3\20\3\20\5\20\u043d\n\20\3\20\3\20\3\20\7\20\u0442"+
		"\n\20\f\20\16\20\u0445\13\20\3\20\3\20\5\20\u0449\n\20\3\20\3\20\5\20"+
		"\u044d\n\20\3\20\3\20\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\5\21\u0459"+
		"\n\21\3\22\3\22\3\22\3\22\3\22\3\22\7\22\u0461\n\22\f\22\16\22\u0464\13"+
		"\22\3\22\3\22\5\22\u0468\n\22\3\22\3\22\3\23\3\23\3\23\3\23\3\23\3\23"+
		"\7\23\u0472\n\23\f\23\16\23\u0475\13\23\3\23\3\23\5\23\u0479\n\23\3\23"+
		"\3\23\3\23\5\23\u047e\n\23\3\23\5\23\u0481\n\23\3\23\5\23\u0484\n\23\3"+
		"\23\5\23\u0487\n\23\3\23\3\23\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24"+
		"\3\24\3\24\5\24\u0495\n\24\3\25\3\25\3\25\3\25\3\25\3\26\3\26\3\26\3\26"+
		"\3\26\5\26\u04a1\n\26\3\26\7\26\u04a4\n\26\f\26\16\26\u04a7\13\26\3\26"+
		"\3\26\5\26\u04ab\n\26\3\26\3\26\3\27\3\27\3\27\3\27\3\27\3\27\7\27\u04b5"+
		"\n\27\f\27\16\27\u04b8\13\27\3\27\3\27\5\27\u04bc\n\27\3\27\3\27\3\27"+
		"\3\27\3\27\3\27\7\27\u04c4\n\27\f\27\16\27\u04c7\13\27\3\27\5\27\u04ca"+
		"\n\27\3\27\3\27\5\27\u04ce\n\27\3\27\7\27\u04d1\n\27\f\27\16\27\u04d4"+
		"\13\27\3\27\3\27\5\27\u04d8\n\27\3\27\3\27\3\27\5\27\u04dd\n\27\3\27\3"+
		"\27\3\30\3\30\3\30\3\30\3\30\3\30\7\30\u04e7\n\30\f\30\16\30\u04ea\13"+
		"\30\3\30\3\30\5\30\u04ee\n\30\3\30\3\30\5\30\u04f2\n\30\3\30\7\30\u04f5"+
		"\n\30\f\30\16\30\u04f8\13\30\3\30\3\30\3\30\5\30\u04fd\n\30\3\30\3\30"+
		"\3\31\3\31\3\31\5\31\u0504\n\31\3\31\3\31\3\31\3\31\3\31\3\31\7\31\u050c"+
		"\n\31\f\31\16\31\u050f\13\31\3\31\3\31\5\31\u0513\n\31\3\31\5\31\u0516"+
		"\n\31\3\31\3\31\5\31\u051a\n\31\3\31\7\31\u051d\n\31\f\31\16\31\u0520"+
		"\13\31\3\31\3\31\3\31\5\31\u0525\n\31\3\31\3\31\3\32\3\32\3\32\3\32\3"+
		"\32\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\5\33\u0537\n\33\3\33"+
		"\7\33\u053a\n\33\f\33\16\33\u053d\13\33\3\33\3\33\5\33\u0541\n\33\5\33"+
		"\u0543\n\33\3\33\3\33\3\34\3\34\3\34\5\34\u054a\n\34\3\34\3\34\3\34\3"+
		"\34\3\34\5\34\u0551\n\34\3\34\5\34\u0554\n\34\3\34\5\34\u0557\n\34\3\34"+
		"\5\34\u055a\n\34\3\34\3\34\3\34\3\35\3\35\3\35\3\35\7\35\u0563\n\35\f"+
		"\35\16\35\u0566\13\35\3\36\3\36\3\36\3\36\3\36\3\37\3\37\3\37\3\37\5\37"+
		"\u0571\n\37\3\37\3\37\5\37\u0575\n\37\3\37\5\37\u0578\n\37\3 \3 \3 \3"+
		" \3!\3!\3!\5!\u0581\n!\3\"\3\"\3\"\3\"\7\"\u0587\n\"\f\"\16\"\u058a\13"+
		"\"\3\"\3\"\3\"\3\"\3\"\5\"\u0591\n\"\3\"\5\"\u0594\n\"\3#\3#\3#\3#\3#"+
		"\5#\u059b\n#\3$\3$\3$\7$\u05a0\n$\f$\16$\u05a3\13$\3$\6$\u05a6\n$\r$\16"+
		"$\u05a7\3$\3$\3$\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3"+
		"%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\5%\u05d1\n%\3"+
		"&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3"+
		"&\3&\3&\5&\u05ed\n&\3\'\3\'\3\'\7\'\u05f2\n\'\f\'\16\'\u05f5\13\'\3\'"+
		"\3\'\5\'\u05f9\n\'\3\'\3\'\3(\3(\3(\3(\3(\7(\u0602\n(\f(\16(\u0605\13"+
		"(\5(\u0607\n(\3)\3)\3)\3)\3)\3*\3*\6*\u0610\n*\r*\16*\u0611\3+\3+\3+\3"+
		",\3,\3,\5,\u061a\n,\3,\3,\5,\u061e\n,\3,\3,\3-\3-\3-\3-\3-\3-\3-\3-\5"+
		"-\u062a\n-\3-\5-\u062d\n-\3-\3-\3.\3.\5.\u0633\n.\3.\5.\u0636\n.\3.\7"+
		".\u0639\n.\f.\16.\u063c\13.\3.\3.\5.\u0640\n.\3/\3/\5/\u0644\n/\3/\3/"+
		"\3/\3/\3/\3/\7/\u064c\n/\f/\16/\u064f\13/\3/\3/\3\60\3\60\3\60\7\60\u0656"+
		"\n\60\f\60\16\60\u0659\13\60\3\61\3\61\3\61\5\61\u065e\n\61\3\62\3\62"+
		"\3\62\3\62\3\62\3\62\3\62\7\62\u0667\n\62\f\62\16\62\u066a\13\62\3\62"+
		"\3\62\5\62\u066e\n\62\3\63\3\63\5\63\u0672\n\63\3\64\3\64\3\64\3\64\3"+
		"\64\3\64\5\64\u067a\n\64\3\65\3\65\3\65\3\65\3\65\3\65\5\65\u0682\n\65"+
		"\3\65\3\65\3\65\5\65\u0687\n\65\3\65\5\65\u068a\n\65\5\65\u068c\n\65\3"+
		"\66\5\66\u068f\n\66\3\66\3\66\3\66\3\66\3\67\3\67\3\67\5\67\u0698\n\67"+
		"\3\67\3\67\3\67\5\67\u069d\n\67\38\38\38\58\u06a2\n8\38\38\38\58\u06a7"+
		"\n8\39\39\39\59\u06ac\n9\39\59\u06af\n9\3:\5:\u06b2\n:\3:\3:\5:\u06b6"+
		"\n:\3:\5:\u06b9\n:\3:\3:\3:\3:\7:\u06bf\n:\f:\16:\u06c2\13:\3:\3:\5:\u06c6"+
		"\n:\3:\7:\u06c9\n:\f:\16:\u06cc\13:\3;\3;\3;\3;\5;\u06d2\n;\3<\3<\3<\3"+
		"=\3=\3=\3=\3=\5=\u06dc\n=\3>\3>\3>\3>\3>\3>\3>\3>\3?\3?\3?\3?\6?\u06ea"+
		"\n?\r?\16?\u06eb\3?\3?\3@\3@\5@\u06f2\n@\3A\3A\3A\3A\3B\5B\u06f9\nB\3"+
		"B\3B\3B\5B\u06fe\nB\3C\3C\3C\3C\3C\3C\7C\u0706\nC\fC\16C\u0709\13C\3C"+
		"\3C\3C\3C\5C\u070f\nC\3C\7C\u0712\nC\fC\16C\u0715\13C\3C\3C\3C\5C\u071a"+
		"\nC\3D\3D\3D\3D\3D\3D\7D\u0722\nD\fD\16D\u0725\13D\3D\3D\5D\u0729\nD\3"+
		"D\3D\3D\3D\3D\5D\u0730\nD\3D\7D\u0733\nD\fD\16D\u0736\13D\3D\3D\3D\5D"+
		"\u073b\nD\3E\5E\u073e\nE\3E\5E\u0741\nE\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E"+
		"\5E\u074d\nE\3E\3E\3E\7E\u0752\nE\fE\16E\u0755\13E\3E\3E\5E\u0759\nE\3"+
		"E\3E\3E\3E\3E\3E\3E\5E\u0762\nE\3E\7E\u0765\nE\fE\16E\u0768\13E\3E\3E"+
		"\3E\5E\u076d\nE\3F\5F\u0770\nF\3F\3F\3G\3G\3G\5G\u0777\nG\3G\5G\u077a"+
		"\nG\3H\3H\3H\3H\3I\5I\u0781\nI\3I\6I\u0784\nI\rI\16I\u0785\3I\3I\5I\u078a"+
		"\nI\3J\3J\3J\5J\u078f\nJ\3K\3K\3K\5K\u0794\nK\3L\3L\3L\3L\3L\3L\3L\3L"+
		"\3L\5L\u079f\nL\5L\u07a1\nL\3L\3L\3L\7L\u07a6\nL\fL\16L\u07a9\13L\5L\u07ab"+
		"\nL\3L\3L\3L\5L\u07b0\nL\3M\3M\5M\u07b4\nM\3M\3M\5M\u07b8\nM\5M\u07ba"+
		"\nM\3N\3N\3N\3N\3N\3N\3N\3N\3N\5N\u07c5\nN\5N\u07c7\nN\3N\3N\3N\7N\u07cc"+
		"\nN\fN\16N\u07cf\13N\5N\u07d1\nN\3N\5N\u07d4\nN\3N\3N\3N\3N\3N\5N\u07db"+
		"\nN\3N\3N\7N\u07df\nN\fN\16N\u07e2\13N\3N\3N\3N\3N\5N\u07e8\nN\3N\3N\5"+
		"N\u07ec\nN\3O\5O\u07ef\nO\3O\5O\u07f2\nO\3O\3O\3O\3O\3O\3O\3O\3O\3O\3"+
		"O\5O\u07fe\nO\5O\u0800\nO\3O\3O\3O\7O\u0805\nO\fO\16O\u0808\13O\5O\u080a"+
		"\nO\3O\5O\u080d\nO\3O\3O\3O\3O\3O\3O\7O\u0815\nO\fO\16O\u0818\13O\3O\3"+
		"O\5O\u081c\nO\3P\3P\3P\3P\3Q\3Q\3Q\3Q\3Q\3Q\7Q\u0828\nQ\fQ\16Q\u082b\13"+
		"Q\3Q\3Q\3R\3R\5R\u0831\nR\3S\3S\3S\3S\3S\3T\3T\3T\3T\6T\u083c\nT\rT\16"+
		"T\u083d\3T\3T\3U\3U\3U\3U\3U\7U\u0847\nU\fU\16U\u084a\13U\3U\3U\3V\3V"+
		"\3V\3V\3V\3V\3V\3V\3V\3V\3V\3V\3V\3V\3V\5V\u085d\nV\3W\3W\3W\3W\3X\3X"+
		"\3X\3X\3X\3X\3X\3X\3X\3X\7X\u086d\nX\fX\16X\u0870\13X\3X\3X\3Y\3Y\3Y\3"+
		"Y\3Y\3Z\3Z\3Z\3Z\3[\3[\3[\3[\3[\3[\3[\3\\\3\\\3\\\5\\\u0887\n\\\3\\\3"+
		"\\\3\\\3\\\3\\\3\\\3\\\5\\\u0890\n\\\3\\\3\\\3\\\5\\\u0895\n\\\3\\\3\\"+
		"\3\\\5\\\u089a\n\\\3\\\3\\\3\\\3\\\5\\\u08a0\n\\\3\\\3\\\3\\\3\\\3\\\5"+
		"\\\u08a7\n\\\3\\\3\\\3\\\5\\\u08ac\n\\\5\\\u08ae\n\\\3]\3]\3]\3]\3]\3"+
		"]\3]\3^\3^\3^\3^\3^\3_\3_\3_\5_\u08bf\n_\3_\3_\3_\5_\u08c4\n_\3`\3`\3"+
		"`\3`\3`\3`\7`\u08cc\n`\f`\16`\u08cf\13`\3`\3`\3`\5`\u08d4\n`\3a\3a\3a"+
		"\3a\3a\3a\7a\u08dc\na\fa\16a\u08df\13a\3a\3a\3b\3b\3b\3b\3b\5b\u08e8\n"+
		"b\3c\3c\3c\3c\3c\7c\u08ef\nc\fc\16c\u08f2\13c\3c\3c\3d\3d\3d\3d\3d\3d"+
		"\7d\u08fc\nd\fd\16d\u08ff\13d\3d\3d\3e\3e\3e\3e\3e\3f\3f\3f\3g\3g\3g\3"+
		"g\3h\3h\3h\5h\u0912\nh\3i\3i\3i\3i\3j\3j\3j\5j\u091b\nj\3j\3j\3j\5j\u0920"+
		"\nj\3j\3j\5j\u0924\nj\3j\5j\u0927\nj\3k\3k\3k\3k\3k\3k\7k\u092f\nk\fk"+
		"\16k\u0932\13k\3k\3k\3l\3l\3l\3l\3l\7l\u093b\nl\fl\16l\u093e\13l\3l\3"+
		"l\3l\5l\u0943\nl\3l\3l\3m\3m\7m\u0949\nm\fm\16m\u094c\13m\3m\5m\u094f"+
		"\nm\3m\5m\u0952\nm\3n\3n\3n\3o\3o\3o\3o\3o\3o\3o\3o\3o\3o\5o\u0961\no"+
		"\3p\3p\5p\u0965\np\3p\3p\3p\5p\u096a\np\3p\5p\u096d\np\3p\3p\3q\3q\3q"+
		"\3q\3q\3q\3q\3q\3q\5q\u097a\nq\3q\3q\5q\u097e\nq\3q\3q\3r\3r\3r\3r\3r"+
		"\5r\u0987\nr\3r\3r\5r\u098b\nr\3r\3r\3s\3s\3s\3s\7s\u0993\ns\fs\16s\u0996"+
		"\13s\3s\3s\5s\u099a\ns\3t\3t\5t\u099e\nt\3t\5t\u09a1\nt\3t\5t\u09a4\n"+
		"t\3u\3u\3u\3u\3v\3v\3v\3v\3v\3v\3v\3v\3v\3v\3v\3v\3v\3v\3v\3v\3v\3v\3"+
		"v\3v\3v\5v\u09bf\nv\3v\3v\6v\u09c3\nv\rv\16v\u09c4\3v\3v\3v\3v\3v\3v\3"+
		"v\3v\3v\3v\3v\5v\u09d2\nv\3v\3v\6v\u09d6\nv\rv\16v\u09d7\3v\3v\3v\3v\3"+
		"v\3v\3v\3v\3v\5v\u09e3\nv\3v\3v\3w\3w\3w\3w\3w\7w\u09ec\nw\fw\16w\u09ef"+
		"\13w\3w\3w\3x\3x\5x\u09f5\nx\3x\3x\5x\u09f9\nx\3x\5x\u09fc\nx\3y\3y\3"+
		"y\3y\5y\u0a02\ny\3z\3z\3z\3z\3z\3z\3z\5z\u0a0b\nz\3z\3z\3{\3{\3{\3{\5"+
		"{\u0a13\n{\3{\3{\5{\u0a17\n{\3|\3|\5|\u0a1b\n|\3|\3|\3|\3}\3}\3}\5}\u0a23"+
		"\n}\3}\3}\3}\3}\3}\3}\3}\5}\u0a2c\n}\3~\3~\3~\3~\6~\u0a32\n~\r~\16~\u0a33"+
		"\3\177\3\177\3\177\3\177\3\177\3\177\3\u0080\3\u0080\3\u0080\3\u0080\3"+
		"\u0080\3\u0080\5\u0080\u0a42\n\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3"+
		"\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080"+
		"\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\5\u0080\u0a57\n\u0080"+
		"\3\u0081\3\u0081\5\u0081\u0a5b\n\u0081\3\u0081\3\u0081\3\u0081\3\u0082"+
		"\3\u0082\5\u0082\u0a62\n\u0082\3\u0082\3\u0082\5\u0082\u0a66\n\u0082\3"+
		"\u0083\3\u0083\5\u0083\u0a6a\n\u0083\3\u0083\3\u0083\5\u0083\u0a6e\n\u0083"+
		"\3\u0084\3\u0084\3\u0084\3\u0085\3\u0085\3\u0085\3\u0085\3\u0085\7\u0085"+
		"\u0a78\n\u0085\f\u0085\16\u0085\u0a7b\13\u0085\3\u0085\5\u0085\u0a7e\n"+
		"\u0085\3\u0085\3\u0085\3\u0085\3\u0086\3\u0086\3\u0086\3\u0086\3\u0086"+
		"\3\u0087\3\u0087\3\u0087\3\u0088\5\u0088\u0a8c\n\u0088\3\u0088\3\u0088"+
		"\3\u0088\3\u0088\5\u0088\u0a92\n\u0088\3\u0088\3\u0088\3\u0088\3\u0088"+
		"\3\u0088\5\u0088\u0a99\n\u0088\3\u0089\3\u0089\3\u0089\5\u0089\u0a9e\n"+
		"\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089"+
		"\5\u0089\u0aa8\n\u0089\3\u0089\3\u0089\3\u0089\3\u0089\5\u0089\u0aae\n"+
		"\u0089\5\u0089\u0ab0\n\u0089\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\3"+
		"\u008a\3\u008a\5\u008a\u0ab9\n\u008a\3\u008b\3\u008b\3\u008b\3\u008b\3"+
		"\u008b\3\u008b\3\u008b\3\u008b\5\u008b\u0ac3\n\u008b\3\u008b\3\u008b\3"+
		"\u008b\5\u008b\u0ac8\n\u008b\3\u008c\3\u008c\3\u008c\3\u008c\3\u008c\3"+
		"\u008d\3\u008d\3\u008e\3\u008e\3\u008f\3\u008f\3\u0090\3\u0090\5\u0090"+
		"\u0ad7\n\u0090\3\u0091\3\u0091\5\u0091\u0adb\n\u0091\3\u0092\5\u0092\u0ade"+
		"\n\u0092\3\u0092\3\u0092\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093"+
		"\3\u0094\3\u0094\3\u0094\3\u0094\6\u0094\u0aec\n\u0094\r\u0094\16\u0094"+
		"\u0aed\5\u0094\u0af0\n\u0094\3\u0094\3\u0094\5\u0094\u0af4\n\u0094\3\u0095"+
		"\3\u0095\3\u0095\3\u0095\7\u0095\u0afa\n\u0095\f\u0095\16\u0095\u0afd"+
		"\13\u0095\3\u0095\3\u0095\3\u0095\3\u0096\5\u0096\u0b03\n\u0096\3\u0096"+
		"\6\u0096\u0b06\n\u0096\r\u0096\16\u0096\u0b07\5\u0096\u0b0a\n\u0096\3"+
		"\u0096\3\u0096\3\u0097\5\u0097\u0b0f\n\u0097\3\u0097\6\u0097\u0b12\n\u0097"+
		"\r\u0097\16\u0097\u0b13\3\u0097\3\u0097\3\u0098\3\u0098\3\u0098\3\u0098"+
		"\5\u0098\u0b1c\n\u0098\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099\5\u0099"+
		"\u0b23\n\u0099\3\u0099\3\u0099\5\u0099\u0b27\n\u0099\3\u0099\5\u0099\u0b2a"+
		"\n\u0099\3\u009a\3\u009a\3\u009a\3\u009b\3\u009b\3\u009b\3\u009b\3\u009b"+
		"\3\u009b\3\u009b\5\u009b\u0b36\n\u009b\3\u009c\3\u009c\3\u009c\3\u009c"+
		"\5\u009c\u0b3c\n\u009c\3\u009d\3\u009d\3\u009d\3\u009e\3\u009e\3\u009e"+
		"\5\u009e\u0b44\n\u009e\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f"+
		"\7\u009f\u0b4c\n\u009f\f\u009f\16\u009f\u0b4f\13\u009f\3\u009f\3\u009f"+
		"\3\u009f\3\u009f\3\u009f\3\u009f\7\u009f\u0b57\n\u009f\f\u009f\16\u009f"+
		"\u0b5a\13\u009f\5\u009f\u0b5c\n\u009f\3\u00a0\3\u00a0\3\u00a0\3\u00a0"+
		"\3\u00a0\5\u00a0\u0b63\n\u00a0\3\u00a0\5\u00a0\u0b66\n\u00a0\3\u00a1\3"+
		"\u00a1\3\u00a1\3\u00a1\3\u00a1\5\u00a1\u0b6d\n\u00a1\3\u00a2\3\u00a2\3"+
		"\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2\5\u00a2\u0b78\n"+
		"\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2\5\u00a2\u0b7e\n\u00a2\3\u00a2\3"+
		"\u00a2\5\u00a2\u0b82\n\u00a2\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3"+
		"\u00a3\7\u00a3\u0b8a\n\u00a3\f\u00a3\16\u00a3\u0b8d\13\u00a3\5\u00a3\u0b8f"+
		"\n\u00a3\3\u00a3\3\u00a3\3\u00a4\3\u00a4\5\u00a4\u0b95\n\u00a4\3\u00a4"+
		"\3\u00a4\5\u00a4\u0b99\n\u00a4\3\u00a4\3\u00a4\5\u00a4\u0b9d\n\u00a4\3"+
		"\u00a4\5\u00a4\u0ba0\n\u00a4\5\u00a4\u0ba2\n\u00a4\3\u00a5\3\u00a5\5\u00a5"+
		"\u0ba6\n\u00a5\3\u00a5\3\u00a5\5\u00a5\u0baa\n\u00a5\3\u00a5\3\u00a5\3"+
		"\u00a5\5\u00a5\u0baf\n\u00a5\3\u00a6\3\u00a6\3\u00a6\3\u00a7\3\u00a7\3"+
		"\u00a7\3\u00a7\3\u00a7\3\u00a7\5\u00a7\u0bba\n\u00a7\3\u00a7\3\u00a7\5"+
		"\u00a7\u0bbe\n\u00a7\3\u00a7\3\u00a7\3\u00a7\3\u00a7\3\u00a7\3\u00a7\5"+
		"\u00a7\u0bc6\n\u00a7\3\u00a8\5\u00a8\u0bc9\n\u00a8\3\u00a8\3\u00a8\3\u00a8"+
		"\7\u00a8\u0bce\n\u00a8\f\u00a8\16\u00a8\u0bd1\13\u00a8\3\u00a9\3\u00a9"+
		"\3\u00a9\3\u00a9\7\u00a9\u0bd7\n\u00a9\f\u00a9\16\u00a9\u0bda\13\u00a9"+
		"\3\u00aa\3\u00aa\3\u00aa\3\u00aa\3\u00aa\7\u00aa\u0be1\n\u00aa\f\u00aa"+
		"\16\u00aa\u0be4\13\u00aa\3\u00aa\3\u00aa\5\u00aa\u0be8\n\u00aa\3\u00aa"+
		"\3\u00aa\3\u00aa\3\u00aa\5\u00aa\u0bee\n\u00aa\3\u00aa\3\u00aa\5\u00aa"+
		"\u0bf2\n\u00aa\3\u00aa\5\u00aa\u0bf5\n\u00aa\3\u00ab\3\u00ab\3\u00ab\3"+
		"\u00ab\3\u00ab\3\u00ab\5\u00ab\u0bfd\n\u00ab\3\u00ab\5\u00ab\u0c00\n\u00ab"+
		"\3\u00ab\3\u00ab\5\u00ab\u0c04\n\u00ab\3\u00ab\3\u00ab\5\u00ab\u0c08\n"+
		"\u00ab\3\u00ab\3\u00ab\3\u00ab\5\u00ab\u0c0d\n\u00ab\3\u00ab\5\u00ab\u0c10"+
		"\n\u00ab\3\u00ab\3\u00ab\5\u00ab\u0c14\n\u00ab\3\u00ab\3\u00ab\5\u00ab"+
		"\u0c18\n\u00ab\7\u00ab\u0c1a\n\u00ab\f\u00ab\16\u00ab\u0c1d\13\u00ab\3"+
		"\u00ab\3\u00ab\3\u00ab\3\u00ac\3\u00ac\3\u00ac\3\u00ac\7\u00ac\u0c26\n"+
		"\u00ac\f\u00ac\16\u00ac\u0c29\13\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac"+
		"\3\u00ac\3\u00ac\3\u00ac\3\u00ad\3\u00ad\7\u00ad\u0c34\n\u00ad\f\u00ad"+
		"\16\u00ad\u0c37\13\u00ad\3\u00ae\3\u00ae\5\u00ae\u0c3b\n\u00ae\3\u00ae"+
		"\3\u00ae\5\u00ae\u0c3f\n\u00ae\3\u00ae\3\u00ae\3\u00af\3\u00af\3\u00af"+
		"\3\u00af\3\u00af\5\u00af\u0c48\n\u00af\3\u00b0\3\u00b0\5\u00b0\u0c4c\n"+
		"\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0\7\u00b0\u0c52\n\u00b0\f\u00b0\16"+
		"\u00b0\u0c55\13\u00b0\5\u00b0\u0c57\n\u00b0\3\u00b0\5\u00b0\u0c5a\n\u00b0"+
		"\3\u00b0\3\u00b0\5\u00b0\u0c5e\n\u00b0\3\u00b0\5\u00b0\u0c61\n\u00b0\3"+
		"\u00b0\5\u00b0\u0c64\n\u00b0\3\u00b0\5\u00b0\u0c67\n\u00b0\3\u00b1\3\u00b1"+
		"\5\u00b1\u0c6b\n\u00b1\3\u00b2\3\u00b2\3\u00b2\3\u00b3\3\u00b3\3\u00b3"+
		"\3\u00b3\3\u00b3\5\u00b3\u0c75\n\u00b3\3\u00b4\3\u00b4\3\u00b4\7\u00b4"+
		"\u0c7a\n\u00b4\f\u00b4\16\u00b4\u0c7d\13\u00b4\3\u00b5\3\u00b5\7\u00b5"+
		"\u0c81\n\u00b5\f\u00b5\16\u00b5\u0c84\13\u00b5\3\u00b5\3\u00b5\5\u00b5"+
		"\u0c88\n\u00b5\3\u00b6\3\u00b6\7\u00b6\u0c8c\n\u00b6\f\u00b6\16\u00b6"+
		"\u0c8f\13\u00b6\3\u00b6\5\u00b6\u0c92\n\u00b6\3\u00b7\3\u00b7\3\u00b7"+
		"\5\u00b7\u0c97\n\u00b7\3\u00b7\3\u00b7\3\u00b7\7\u00b7\u0c9c\n\u00b7\f"+
		"\u00b7\16\u00b7\u0c9f\13\u00b7\3\u00b7\3\u00b7\3\u00b7\5\u00b7\u0ca4\n"+
		"\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7\5\u00b7\u0cab\n\u00b7\3"+
		"\u00b8\5\u00b8\u0cae\n\u00b8\3\u00b8\5\u00b8\u0cb1\n\u00b8\3\u00b8\3\u00b8"+
		"\5\u00b8\u0cb5\n\u00b8\3\u00b8\3\u00b8\3\u00b8\5\u00b8\u0cba\n\u00b8\3"+
		"\u00b8\3\u00b8\7\u00b8\u0cbe\n\u00b8\f\u00b8\16\u00b8\u0cc1\13\u00b8\3"+
		"\u00b9\3\u00b9\3\u00b9\3\u00ba\3\u00ba\3\u00ba\3\u00ba\3\u00ba\7\u00ba"+
		"\u0ccb\n\u00ba\f\u00ba\16\u00ba\u0cce\13\u00ba\3\u00ba\3\u00ba\3\u00bb"+
		"\3\u00bb\5\u00bb\u0cd4\n\u00bb\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc"+
		"\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\7\u00bc\u0ce0\n\u00bc\f\u00bc"+
		"\16\u00bc\u0ce3\13\u00bc\5\u00bc\u0ce5\n\u00bc\3\u00bd\3\u00bd\3\u00bd"+
		"\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\5\u00bd\u0cef\n\u00bd\3\u00be"+
		"\3\u00be\5\u00be\u0cf3\n\u00be\3\u00be\3\u00be\3\u00be\3\u00be\7\u00be"+
		"\u0cf9\n\u00be\f\u00be\16\u00be\u0cfc\13\u00be\3\u00be\3\u00be\3\u00be"+
		"\3\u00be\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\5\u00bf\u0d07\n\u00bf"+
		"\3\u00c0\3\u00c0\3\u00c0\3\u00c0\3\u00c0\3\u00c0\7\u00c0\u0d0f\n\u00c0"+
		"\f\u00c0\16\u00c0\u0d12\13\u00c0\3\u00c0\3\u00c0\5\u00c0\u0d16\n\u00c0"+
		"\3\u00c1\3\u00c1\3\u00c1\3\u00c1\3\u00c1\3\u00c1\7\u00c1\u0d1e\n\u00c1"+
		"\f\u00c1\16\u00c1\u0d21\13\u00c1\3\u00c1\3\u00c1\3\u00c1\7\u00c1\u0d26"+
		"\n\u00c1\f\u00c1\16\u00c1\u0d29\13\u00c1\5\u00c1\u0d2b\n\u00c1\3\u00c1"+
		"\3\u00c1\3\u00c2\3\u00c2\5\u00c2\u0d31\n\u00c2\3\u00c3\3\u00c3\5\u00c3"+
		"\u0d35\n\u00c3\3\u00c4\3\u00c4\3\u00c4\5\u00c4\u0d3a\n\u00c4\3\u00c4\3"+
		"\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4\7\u00c4\u0d42\n\u00c4\f\u00c4\16"+
		"\u00c4\u0d45\13\u00c4\3\u00c4\3\u00c4\5\u00c4\u0d49\n\u00c4\3\u00c4\3"+
		"\u00c4\3\u00c4\3\u00c4\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\7\u00c5"+
		"\u0d54\n\u00c5\f\u00c5\16\u00c5\u0d57\13\u00c5\3\u00c5\3\u00c5\3\u00c6"+
		"\3\u00c6\3\u00c6\3\u00c6\3\u00c6\7\u00c6\u0d60\n\u00c6\f\u00c6\16\u00c6"+
		"\u0d63\13\u00c6\3\u00c6\3\u00c6\5\u00c6\u0d67\n\u00c6\3\u00c6\3\u00c6"+
		"\3\u00c6\3\u00c6\3\u00c6\3\u00c6\7\u00c6\u0d6f\n\u00c6\f\u00c6\16\u00c6"+
		"\u0d72\13\u00c6\3\u00c6\3\u00c6\5\u00c6\u0d76\n\u00c6\5\u00c6\u0d78\n"+
		"\u00c6\3\u00c7\3\u00c7\3\u00c7\5\u00c7\u0d7d\n\u00c7\3\u00c7\3\u00c7\5"+
		"\u00c7\u0d81\n\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\5\u00c7\u0d87\n\u00c7"+
		"\3\u00c7\3\u00c7\5\u00c7\u0d8b\n\u00c7\3\u00c8\3\u00c8\3\u00c8\3\u00c8"+
		"\3\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9\7\u00c9\u0d96\n\u00c9\f\u00c9"+
		"\16\u00c9\u0d99\13\u00c9\3\u00c9\5\u00c9\u0d9c\n\u00c9\3\u00c9\3\u00c9"+
		"\3\u00c9\3\u00c9\3\u00c9\3\u00c9\7\u00c9\u0da4\n\u00c9\f\u00c9\16\u00c9"+
		"\u0da7\13\u00c9\5\u00c9\u0da9\n\u00c9\5\u00c9\u0dab\n\u00c9\3\u00ca\3"+
		"\u00ca\3\u00ca\5\u00ca\u0db0\n\u00ca\3\u00cb\3\u00cb\3\u00cb\3\u00cb\3"+
		"\u00cb\7\u00cb\u0db7\n\u00cb\f\u00cb\16\u00cb\u0dba\13\u00cb\3\u00cb\3"+
		"\u00cb\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\7\u00cc\u0dc4\n"+
		"\u00cc\f\u00cc\16\u00cc\u0dc7\13\u00cc\3\u00cc\3\u00cc\3\u00cd\3\u00cd"+
		"\3\u00cd\5\u00cd\u0dce\n\u00cd\3\u00ce\3\u00ce\3\u00ce\3\u00cf\3\u00cf"+
		"\7\u00cf\u0dd5\n\u00cf\f\u00cf\16\u00cf\u0dd8\13\u00cf\3\u00cf\5\u00cf"+
		"\u0ddb\n\u00cf\3\u00cf\7\u00cf\u0dde\n\u00cf\f\u00cf\16\u00cf\u0de1\13"+
		"\u00cf\3\u00cf\3\u00cf\3\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0"+
		"\5\u00d0\u0deb\n\u00d0\5\u00d0\u0ded\n\u00d0\3\u00d1\3\u00d1\3\u00d1\3"+
		"\u00d1\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2"+
		"\7\u00d2\u0dfb\n\u00d2\f\u00d2\16\u00d2\u0dfe\13\u00d2\3\u00d3\3\u00d3"+
		"\5\u00d3\u0e02\n\u00d3\3\u00d3\3\u00d3\7\u00d3\u0e06\n\u00d3\f\u00d3\16"+
		"\u00d3\u0e09\13\u00d3\3\u00d3\3\u00d3\3\u00d4\5\u00d4\u0e0e\n\u00d4\3"+
		"\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d5\3\u00d5\3\u00d5"+
		"\3\u00d5\3\u00d6\3\u00d6\3\u00d6\3\u00d6\7\u00d6\u0e1e\n\u00d6\f\u00d6"+
		"\16\u00d6\u0e21\13\u00d6\3\u00d6\3\u00d6\3\u00d7\3\u00d7\5\u00d7\u0e27"+
		"\n\u00d7\3\u00d7\5\u00d7\u0e2a\n\u00d7\3\u00d8\5\u00d8\u0e2d\n\u00d8\3"+
		"\u00d8\3\u00d8\3\u00d8\3\u00d8\7\u00d8\u0e33\n\u00d8\f\u00d8\16\u00d8"+
		"\u0e36\13\u00d8\5\u00d8\u0e38\n\u00d8\3\u00d8\3\u00d8\3\u00d9\3\u00d9"+
		"\3\u00d9\3\u00d9\5\u00d9\u0e40\n\u00d9\5\u00d9\u0e42\n\u00d9\3\u00d9\3"+
		"\u00d9\5\u00d9\u0e46\n\u00d9\3\u00d9\5\u00d9\u0e49\n\u00d9\3\u00da\3\u00da"+
		"\3\u00da\5\u00da\u0e4e\n\u00da\5\u00da\u0e50\n\u00da\3\u00da\3\u00da\5"+
		"\u00da\u0e54\n\u00da\3\u00da\3\u00da\3\u00da\3\u00db\3\u00db\3\u00dc\3"+
		"\u00dc\3\u00dc\3\u00dc\3\u00dc\5\u00dc\u0e60\n\u00dc\3\u00dd\3\u00dd\3"+
		"\u00dd\3\u00dd\3\u00dd\3\u00de\3\u00de\5\u00de\u0e69\n\u00de\3\u00de\3"+
		"\u00de\3\u00de\3\u00de\7\u00de\u0e6f\n\u00de\f\u00de\16\u00de\u0e72\13"+
		"\u00de\3\u00df\3\u00df\5\u00df\u0e76\n\u00df\3\u00df\3\u00df\5\u00df\u0e7a"+
		"\n\u00df\3\u00e0\3\u00e0\3\u00e0\5\u00e0\u0e7f\n\u00e0\3\u00e0\5\u00e0"+
		"\u0e82\n\u00e0\3\u00e1\3\u00e1\3\u00e1\3\u00e1\7\u00e1\u0e88\n\u00e1\f"+
		"\u00e1\16\u00e1\u0e8b\13\u00e1\3\u00e2\3\u00e2\3\u00e2\3\u00e2\3\u00e2"+
		"\5\u00e2\u0e92\n\u00e2\3\u00e3\3\u00e3\3\u00e3\3\u00e3\5\u00e3\u0e98\n"+
		"\u00e3\3\u00e3\5\u00e3\u0e9b\n\u00e3\3\u00e3\5\u00e3\u0e9e\n\u00e3\3\u00e4"+
		"\3\u00e4\3\u00e4\3\u00e4\7\u00e4\u0ea4\n\u00e4\f\u00e4\16\u00e4\u0ea7"+
		"\13\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\5\u00e4"+
		"\u0eb0\n\u00e4\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5"+
		"\3\u00e5\7\u00e5\u0eba\n\u00e5\f\u00e5\16\u00e5\u0ebd\13\u00e5\3\u00e5"+
		"\3\u00e5\3\u00e5\3\u00e5\5\u00e5\u0ec3\n\u00e5\3\u00e6\3\u00e6\5\u00e6"+
		"\u0ec7\n\u00e6\3\u00e6\3\u00e6\5\u00e6\u0ecb\n\u00e6\3\u00e6\5\u00e6\u0ece"+
		"\n\u00e6\3\u00e6\5\u00e6\u0ed1\n\u00e6\3\u00e7\3\u00e7\3\u00e7\5\u00e7"+
		"\u0ed6\n\u00e7\3\u00e8\3\u00e8\3\u00e8\5\u00e8\u0edb\n\u00e8\3\u00e8\5"+
		"\u00e8\u0ede\n\u00e8\3\u00e8\5\u00e8\u0ee1\n\u00e8\3\u00e9\3\u00e9\6\u00e9"+
		"\u0ee5\n\u00e9\r\u00e9\16\u00e9\u0ee6\3\u00e9\5\u00e9\u0eea\n\u00e9\3"+
		"\u00e9\3\u00e9\3\u00ea\3\u00ea\5\u00ea\u0ef0\n\u00ea\3\u00ea\5\u00ea\u0ef3"+
		"\n\u00ea\3\u00eb\5\u00eb\u0ef6\n\u00eb\3\u00eb\6\u00eb\u0ef9\n\u00eb\r"+
		"\u00eb\16\u00eb\u0efa\3\u00eb\5\u00eb\u0efe\n\u00eb\3\u00ec\3\u00ec\3"+
		"\u00ec\3\u00ec\6\u00ec\u0f04\n\u00ec\r\u00ec\16\u00ec\u0f05\3\u00ed\3"+
		"\u00ed\6\u00ed\u0f0a\n\u00ed\r\u00ed\16\u00ed\u0f0b\3\u00ee\3\u00ee\3"+
		"\u00ee\3\u00ee\3\u00ee\3\u00ee\7\u00ee\u0f14\n\u00ee\f\u00ee\16\u00ee"+
		"\u0f17\13\u00ee\3\u00ee\3\u00ee\5\u00ee\u0f1b\n\u00ee\3\u00ef\3\u00ef"+
		"\3\u00ef\5\u00ef\u0f20\n\u00ef\3\u00f0\3\u00f0\3\u00f0\3\u00f0\5\u00f0"+
		"\u0f26\n\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f0"+
		"\3\u00f0\5\u00f0\u0f30\n\u00f0\3\u00f0\3\u00f0\5\u00f0\u0f34\n\u00f0\5"+
		"\u00f0\u0f36\n\u00f0\3\u00f0\5\u00f0\u0f39\n\u00f0\3\u00f1\3\u00f1\3\u00f1"+
		"\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\7\u00f1\u0f43\n\u00f1\f\u00f1"+
		"\16\u00f1\u0f46\13\u00f1\3\u00f1\5\u00f1\u0f49\n\u00f1\3\u00f1\5\u00f1"+
		"\u0f4c\n\u00f1\3\u00f2\3\u00f2\3\u00f2\3\u00f2\3\u00f3\3\u00f3\3\u00f3"+
		"\3\u00f4\3\u00f4\3\u00f4\3\u00f4\3\u00f4\3\u00f4\3\u00f4\3\u00f4\3\u00f4"+
		"\7\u00f4\u0f5e\n\u00f4\f\u00f4\16\u00f4\u0f61\13\u00f4\3\u00f4\3\u00f4"+
		"\5\u00f4\u0f65\n\u00f4\3\u00f4\3\u00f4\3\u00f4\5\u00f4\u0f6a\n\u00f4\3"+
		"\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5\5\u00f5\u0f71\n\u00f5\3\u00f5\5"+
		"\u00f5\u0f74\n\u00f5\3\u00f6\3\u00f6\3\u00f6\3\u00f6\3\u00f6\7\u00f6\u0f7b"+
		"\n\u00f6\f\u00f6\16\u00f6\u0f7e\13\u00f6\3\u00f6\3\u00f6\3\u00f6\3\u00f6"+
		"\5\u00f6\u0f84\n\u00f6\3\u00f7\3\u00f7\3\u00f7\5\u00f7\u0f89\n\u00f7\3"+
		"\u00f8\3\u00f8\5\u00f8\u0f8d\n\u00f8\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3"+
		"\u00f9\3\u00f9\5\u00f9\u0f95\n\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9\5"+
		"\u00f9\u0f9b\n\u00f9\3\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fa\5"+
		"\u00fa\u0fa3\n\u00fa\3\u00fa\5\u00fa\u0fa6\n\u00fa\3\u00fb\3\u00fb\3\u00fb"+
		"\3\u00fb\7\u00fb\u0fac\n\u00fb\f\u00fb\16\u00fb\u0faf\13\u00fb\3\u00fb"+
		"\3\u00fb\3\u00fc\3\u00fc\3\u00fc\5\u00fc\u0fb6\n\u00fc\3\u00fc\5\u00fc"+
		"\u0fb9\n\u00fc\3\u00fc\5\u00fc\u0fbc\n\u00fc\3\u00fd\3\u00fd\3\u00fd\3"+
		"\u00fe\3\u00fe\3\u00fe\3\u00fe\5\u00fe\u0fc5\n\u00fe\3\u00ff\3\u00ff\3"+
		"\u00ff\3\u00ff\5\u00ff\u0fcb\n\u00ff\3\u00ff\3\u00ff\3\u00ff\3\u00ff\5"+
		"\u00ff\u0fd1\n\u00ff\5\u00ff\u0fd3\n\u00ff\3\u0100\3\u0100\3\u0100\3\u0100"+
		"\3\u0100\3\u0100\3\u0100\3\u0100\3\u0100\3\u0100\3\u0100\5\u0100\u0fe0"+
		"\n\u0100\5\u0100\u0fe2\n\u0100\3\u0101\3\u0101\3\u0101\3\u0101\3\u0101"+
		"\3\u0101\3\u0101\5\u0101\u0feb\n\u0101\5\u0101\u0fed\n\u0101\3\u0102\3"+
		"\u0102\5\u0102\u0ff1\n\u0102\3\u0102\3\u0102\3\u0102\3\u0102\5\u0102\u0ff7"+
		"\n\u0102\3\u0102\3\u0102\5\u0102\u0ffb\n\u0102\3\u0103\3\u0103\3\u0103"+
		"\3\u0103\3\u0103\3\u0104\3\u0104\3\u0104\3\u0104\3\u0104\3\u0105\3\u0105"+
		"\5\u0105\u1009\n\u0105\3\u0105\3\u0105\7\u0105\u100d\n\u0105\f\u0105\16"+
		"\u0105\u1010\13\u0105\3\u0105\3\u0105\3\u0106\3\u0106\3\u0107\3\u0107"+
		"\5\u0107\u1018\n\u0107\3\u0108\3\u0108\3\u0108\3\u0108\3\u0108\3\u0108"+
		"\7\u0108\u1020\n\u0108\f\u0108\16\u0108\u1023\13\u0108\3\u0109\3\u0109"+
		"\3\u0109\3\u0109\3\u0109\3\u0109\7\u0109\u102b\n\u0109\f\u0109\16\u0109"+
		"\u102e\13\u0109\3\u010a\3\u010a\3\u010a\5\u010a\u1033\n\u010a\3\u010b"+
		"\3\u010b\3\u010b\5\u010b\u1038\n\u010b\3\u010b\3\u010b\3\u010b\3\u010b"+
		"\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\5\u010b\u1043\n\u010b\3\u010b"+
		"\3\u010b\5\u010b\u1047\n\u010b\3\u010b\3\u010b\3\u010b\7\u010b\u104c\n"+
		"\u010b\f\u010b\16\u010b\u104f\13\u010b\3\u010b\3\u010b\5\u010b\u1053\n"+
		"\u010b\7\u010b\u1055\n\u010b\f\u010b\16\u010b\u1058\13\u010b\3\u010c\3"+
		"\u010c\3\u010c\5\u010c\u105d\n\u010c\3\u010c\3\u010c\5\u010c\u1061\n\u010c"+
		"\3\u010d\3\u010d\3\u010e\3\u010e\3\u010e\3\u010e\3\u010e\3\u010e\3\u010e"+
		"\7\u010e\u106c\n\u010e\f\u010e\16\u010e\u106f\13\u010e\3\u010f\3\u010f"+
		"\3\u010f\3\u010f\3\u010f\3\u010f\5\u010f\u1077\n\u010f\3\u0110\3\u0110"+
		"\5\u0110\u107b\n\u0110\3\u0110\3\u0110\3\u0110\3\u0110\3\u0110\3\u0110"+
		"\3\u0110\5\u0110\u1084\n\u0110\5\u0110\u1086\n\u0110\5\u0110\u1088\n\u0110"+
		"\3\u0111\3\u0111\3\u0112\3\u0112\3\u0113\3\u0113\3\u0113\3\u0114\3\u0114"+
		"\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114\7\u0114\u1099\n\u0114"+
		"\f\u0114\16\u0114\u109c\13\u0114\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114"+
		"\5\u0114\u10a3\n\u0114\3\u0115\3\u0115\3\u0115\3\u0115\3\u0116\3\u0116"+
		"\3\u0116\3\u0116\7\u0116\u10ad\n\u0116\f\u0116\16\u0116\u10b0\13\u0116"+
		"\3\u0117\3\u0117\3\u0117\7\u0117\u10b5\n\u0117\f\u0117\16\u0117\u10b8"+
		"\13\u0117\3\u0118\3\u0118\3\u0118\7\u0118\u10bd\n\u0118\f\u0118\16\u0118"+
		"\u10c0\13\u0118\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\5\u0119"+
		"\u10c8\n\u0119\3\u0119\5\u0119\u10cb\n\u0119\3\u011a\3\u011a\3\u011a\3"+
		"\u011a\3\u011a\5\u011a\u10d2\n\u011a\3\u011a\3\u011a\3\u011a\3\u011a\3"+
		"\u011a\3\u011a\5\u011a\u10da\n\u011a\3\u011a\3\u011a\3\u011a\3\u011a\3"+
		"\u011a\5\u011a\u10e1\n\u011a\3\u011a\3\u011a\5\u011a\u10e5\n\u011a\3\u011b"+
		"\3\u011b\3\u011b\3\u011b\3\u011b\5\u011b\u10ec\n\u011b\3\u011c\3\u011c"+
		"\5\u011c\u10f0\n\u011c\3\u011c\3\u011c\3\u011c\5\u011c\u10f5\n\u011c\7"+
		"\u011c\u10f7\n\u011c\f\u011c\16\u011c\u10fa\13\u011c\3\u011c\3\u011c\3"+
		"\u011c\7\u011c\u10ff\n\u011c\f\u011c\16\u011c\u1102\13\u011c\3\u011c\5"+
		"\u011c\u1105\n\u011c\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d\5\u011d\u110c"+
		"\n\u011d\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d\5\u011d"+
		"\u1115\n\u011d\3\u011e\3\u011e\3\u011e\3\u011f\3\u011f\3\u0120\3\u0120"+
		"\3\u0120\3\u0120\3\u0120\7\u0120\u1121\n\u0120\f\u0120\16\u0120\u1124"+
		"\13\u0120\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120"+
		"\7\u0120\u112e\n\u0120\f\u0120\16\u0120\u1131\13\u0120\3\u0120\3\u0120"+
		"\5\u0120\u1135\n\u0120\3\u0120\3\u0120\3\u0121\3\u0121\3\u0121\3\u0121"+
		"\3\u0121\3\u0121\3\u0121\3\u0121\3\u0121\3\u0121\3\u0121\3\u0121\3\u0121"+
		"\3\u0121\3\u0121\5\u0121\u1148\n\u0121\3\u0122\3\u0122\5\u0122\u114c\n"+
		"\u0122\3\u0123\3\u0123\3\u0123\6\u0123\u1151\n\u0123\r\u0123\16\u0123"+
		"\u1152\3\u0123\5\u0123\u1156\n\u0123\3\u0123\3\u0123\5\u0123\u115a\n\u0123"+
		"\3\u0124\3\u0124\3\u0124\3\u0124\3\u0124\5\u0124\u1161\n\u0124\3\u0125"+
		"\3\u0125\6\u0125\u1165\n\u0125\r\u0125\16\u0125\u1166\3\u0125\5\u0125"+
		"\u116a\n\u0125\3\u0125\3\u0125\5\u0125\u116e\n\u0125\3\u0126\3\u0126\3"+
		"\u0126\3\u0126\3\u0126\5\u0126\u1175\n\u0126\3\u0127\3\u0127\3\u0127\5"+
		"\u0127\u117a\n\u0127\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128\3"+
		"\u0128\3\u0128\3\u0128\3\u0128\7\u0128\u1186\n\u0128\f\u0128\16\u0128"+
		"\u1189\13\u0128\3\u0128\3\u0128\3\u0128\5\u0128\u118e\n\u0128\5\u0128"+
		"\u1190\n\u0128\3\u0129\3\u0129\5\u0129\u1194\n\u0129\3\u012a\3\u012a\3"+
		"\u012a\3\u012a\7\u012a\u119a\n\u012a\f\u012a\16\u012a\u119d\13\u012a\3"+
		"\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b"+
		"\5\u012b\u11a8\n\u012b\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c"+
		"\3\u012c\5\u012c\u11b1\n\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c"+
		"\3\u012c\3\u012c\5\u012c\u11ba\n\u012c\3\u012c\3\u012c\5\u012c\u11be\n"+
		"\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\7\u012c"+
		"\u11c7\n\u012c\f\u012c\16\u012c\u11ca\13\u012c\3\u012c\3\u012c\3\u012c"+
		"\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c"+
		"\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\5\u012c\u11df"+
		"\n\u012c\3\u012c\5\u012c\u11e2\n\u012c\3\u012c\5\u012c\u11e5\n\u012c\3"+
		"\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\5\u012c"+
		"\u11ef\n\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c"+
		"\5\u012c\u11f8\n\u012c\3\u012d\3\u012d\3\u012e\3\u012e\3\u012e\5\u012e"+
		"\u11ff\n\u012e\3\u012f\3\u012f\3\u012f\5\u012f\u1204\n\u012f\3\u012f\3"+
		"\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\5\u012f\u120d\n\u012f\3"+
		"\u012f\5\u012f\u1210\n\u012f\5\u012f\u1212\n\u012f\3\u012f\3\u012f\5\u012f"+
		"\u1216\n\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\5\u012f\u121d\n"+
		"\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\5\u012f\u1224\n\u012f\3"+
		"\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\5\u012f\u122c\n\u012f\3"+
		"\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\5\u012f\u1234\n\u012f\3"+
		"\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\7\u012f"+
		"\u123e\n\u012f\f\u012f\16\u012f\u1241\13\u012f\3\u012f\3\u012f\3\u012f"+
		"\3\u012f\3\u012f\3\u012f\3\u012f\7\u012f\u124a\n\u012f\f\u012f\16\u012f"+
		"\u124d\13\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f"+
		"\5\u012f\u1256\n\u012f\3\u012f\3\u012f\5\u012f\u125a\n\u012f\3\u012f\3"+
		"\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\5\u012f"+
		"\u1265\n\u012f\3\u0130\3\u0130\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131"+
		"\3\u0131\3\u0131\5\u0131\u1270\n\u0131\3\u0131\3\u0131\3\u0131\5\u0131"+
		"\u1275\n\u0131\3\u0131\3\u0131\5\u0131\u1279\n\u0131\3\u0131\3\u0131\3"+
		"\u0131\3\u0131\3\u0131\6\u0131\u1280\n\u0131\r\u0131\16\u0131\u1281\3"+
		"\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131"+
		"\3\u0131\3\u0131\3\u0131\3\u0131\5\u0131\u1291\n\u0131\3\u0131\3\u0131"+
		"\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\7\u0131\u129a\n\u0131\f\u0131"+
		"\16\u0131\u129d\13\u0131\3\u0131\5\u0131\u12a0\n\u0131\3\u0131\5\u0131"+
		"\u12a3\n\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131"+
		"\5\u0131\u12ac\n\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131"+
		"\5\u0131\u12b4\n\u0131\3\u0131\5\u0131\u12b7\n\u0131\3\u0131\5\u0131\u12ba"+
		"\n\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\5\u0131"+
		"\u12c3\n\u0131\3\u0131\3\u0131\3\u0131\5\u0131\u12c8\n\u0131\3\u0131\3"+
		"\u0131\3\u0131\3\u0131\3\u0131\7\u0131\u12cf\n\u0131\f\u0131\16\u0131"+
		"\u12d2\13\u0131\3\u0131\3\u0131\3\u0131\5\u0131\u12d7\n\u0131\3\u0131"+
		"\3\u0131\3\u0131\5\u0131\u12dc\n\u0131\3\u0131\5\u0131\u12df\n\u0131\3"+
		"\u0131\3\u0131\3\u0131\5\u0131\u12e4\n\u0131\3\u0131\3\u0131\3\u0131\5"+
		"\u0131\u12e9\n\u0131\7\u0131\u12eb\n\u0131\f\u0131\16\u0131\u12ee\13\u0131"+
		"\3\u0131\3\u0131\3\u0131\5\u0131\u12f3\n\u0131\3\u0131\3\u0131\3\u0131"+
		"\3\u0131\5\u0131\u12f9\n\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131"+
		"\3\u0131\3\u0131\5\u0131\u1302\n\u0131\3\u0131\3\u0131\3\u0131\5\u0131"+
		"\u1307\n\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\5\u0131"+
		"\u130f\n\u0131\3\u0131\3\u0131\5\u0131\u1313\n\u0131\3\u0131\3\u0131\3"+
		"\u0131\5\u0131\u1318\n\u0131\3\u0131\3\u0131\3\u0131\3\u0131\5\u0131\u131e"+
		"\n\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\5\u0131\u1325\n\u0131"+
		"\3\u0131\3\u0131\3\u0131\5\u0131\u132a\n\u0131\3\u0131\3\u0131\3\u0131"+
		"\3\u0131\3\u0131\5\u0131\u1331\n\u0131\3\u0131\3\u0131\5\u0131\u1335\n"+
		"\u0131\3\u0131\3\u0131\3\u0131\5\u0131\u133a\n\u0131\3\u0131\3\u0131\3"+
		"\u0131\3\u0131\3\u0131\3\u0131\5\u0131\u1342\n\u0131\3\u0131\5\u0131\u1345"+
		"\n\u0131\3\u0131\5\u0131\u1348\n\u0131\3\u0131\5\u0131\u134b\n\u0131\3"+
		"\u0131\3\u0131\5\u0131\u134f\n\u0131\3\u0131\3\u0131\3\u0131\5\u0131\u1354"+
		"\n\u0131\3\u0131\3\u0131\3\u0131\5\u0131\u1359\n\u0131\3\u0131\3\u0131"+
		"\5\u0131\u135d\n\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\5\u0131"+
		"\u1364\n\u0131\3\u0131\3\u0131\3\u0131\5\u0131\u1369\n\u0131\5\u0131\u136b"+
		"\n\u0131\3\u0132\3\u0132\3\u0133\3\u0133\3\u0134\3\u0134\3\u0135\3\u0135"+
		"\3\u0135\5\u0135\u1376\n\u0135\3\u0135\3\u0135\5\u0135\u137a\n\u0135\5"+
		"\u0135\u137c\n\u0135\3\u0135\3\u0135\3\u0136\3\u0136\3\u0136\3\u0136\3"+
		"\u0136\3\u0136\3\u0136\5\u0136\u1387\n\u0136\3\u0137\3\u0137\3\u0138\3"+
		"\u0138\3\u0138\3\u0138\3\u0138\3\u0138\3\u0138\5\u0138\u1392\n\u0138\3"+
		"\u0139\3\u0139\3\u0139\3\u0139\3\u0139\7\u0139\u1399\n\u0139\f\u0139\16"+
		"\u0139\u139c\13\u0139\5\u0139\u139e\n\u0139\3\u013a\3\u013a\5\u013a\u13a2"+
		"\n\u013a\3\u013a\5\u013a\u13a5\n\u013a\3\u013a\3\u013a\5\u013a\u13a9\n"+
		"\u013a\3\u013b\3\u013b\3\u013b\3\u013b\3\u013c\3\u013c\3\u013c\3\u013c"+
		"\3\u013c\3\u013c\3\u013c\5\u013c\u13b6\n\u013c\3\u013d\3\u013d\3\u013d"+
		"\5\u013d\u13bb\n\u013d\3\u013d\3\u013d\3\u013d\3\u013d\7\u013d\u13c1\n"+
		"\u013d\f\u013d\16\u013d\u13c4\13\u013d\3\u013d\3\u013d\3\u013d\3\u013d"+
		"\5\u013d\u13ca\n\u013d\3\u013e\3\u013e\3\u013e\5\u013e\u13cf\n\u013e\3"+
		"\u013e\3\u013e\5\u013e\u13d3\n\u013e\3\u013e\3\u013e\3\u013e\5\u013e\u13d8"+
		"\n\u013e\3\u013f\3\u013f\3\u013f\5\u013f\u13dd\n\u013f\3\u013f\5\u013f"+
		"\u13e0\n\u013f\3\u013f\3\u013f\3\u013f\7\u013f\u13e5\n\u013f\f\u013f\16"+
		"\u013f\u13e8\13\u013f\3\u013f\3\u013f\3\u0140\3\u0140\3\u0140\3\u0140"+
		"\3\u0140\5\u0140\u13f1\n\u0140\3\u0140\3\u0140\3\u0140\3\u0140\7\u0140"+
		"\u13f7\n\u0140\f\u0140\16\u0140\u13fa\13\u0140\3\u0140\5\u0140\u13fd\n"+
		"\u0140\3\u0140\3\u0140\3\u0141\3\u0141\3\u0141\3\u0141\3\u0141\3\u0141"+
		"\5\u0141\u1407\n\u0141\3\u0141\5\u0141\u140a\n\u0141\5\u0141\u140c\n\u0141"+
		"\3\u0142\3\u0142\3\u0142\3\u0143\3\u0143\3\u0143\3\u0143\3\u0143\5\u0143"+
		"\u1416\n\u0143\5\u0143\u1418\n\u0143\3\u0144\3\u0144\3\u0144\3\u0144\5"+
		"\u0144\u141e\n\u0144\3\u0145\3\u0145\3\u0145\3\u0145\5\u0145\u1424\n\u0145"+
		"\5\u0145\u1426\n\u0145\3\u0146\3\u0146\3\u0146\3\u0147\3\u0147\3\u0147"+
		"\3\u0148\3\u0148\3\u0148\3\u0148\3\u0148\3\u0148\5\u0148\u1434\n\u0148"+
		"\5\u0148\u1436\n\u0148\3\u0149\3\u0149\3\u0149\3\u0149\3\u0149\3\u0149"+
		"\3\u0149\5\u0149\u143f\n\u0149\3\u0149\5\u0149\u1442\n\u0149\3\u014a\3"+
		"\u014a\3\u014a\3\u014a\3\u014a\3\u014a\3\u014a\5\u014a\u144b\n\u014a\3"+
		"\u014b\3\u014b\3\u014b\3\u014b\3\u014b\3\u014b\3\u014b\5\u014b\u1454\n"+
		"\u014b\3\u014c\3\u014c\3\u014d\3\u014d\3\u014e\3\u014e\3\u014e\3\u014e"+
		"\5\u014e\u145e\n\u014e\3\u014f\3\u014f\3\u0150\3\u0150\5\u0150\u1464\n"+
		"\u0150\3\u0150\3\u0150\3\u0151\5\u0151\u1469\n\u0151\3\u0151\3\u0151\5"+
		"\u0151\u146d\n\u0151\3\u0151\5\u0151\u1470\n\u0151\3\u0152\3\u0152\5\u0152"+
		"\u1474\n\u0152\3\u0153\3\u0153\3\u0154\3\u0154\3\u0154\5\u0154\u147b\n"+
		"\u0154\3\u0155\3\u0155\3\u0155\3\u0155\3\u0156\3\u0156\3\u0156\3\u0156"+
		"\7\u0156\u1485\n\u0156\f\u0156\16\u0156\u1488\13\u0156\3\u0156\3\u0156"+
		"\3\u0156\3\u0156\3\u0156\3\u0156\7\u0156\u1490\n\u0156\f\u0156\16\u0156"+
		"\u1493\13\u0156\5\u0156\u1495\n\u0156\3\u0157\3\u0157\5\u0157\u1499\n"+
		"\u0157\3\u0158\3\u0158\3\u0159\3\u0159\3\u015a\3\u015a\3\u015b\3\u015b"+
		"\3\u015c\3\u015c\3\u015d\3\u015d\3\u015e\3\u015e\3\u015e\7\u015e\u14aa"+
		"\n\u015e\f\u015e\16\u015e\u14ad\13\u015e\3\u015e\3\u015e\5\u015e\u14b1"+
		"\n\u015e\3\u015f\3\u015f\3\u0160\3\u0160\3\u0160\5\u0160\u14b8\n\u0160"+
		"\3\u0161\3\u0161\3\u0162\3\u0162\3\u0163\3\u0163\3\u0164\3\u0164\3\u0164"+
		"\7\u0164\u14c3\n\u0164\f\u0164\16\u0164\u14c6\13\u0164\3\u0165\3\u0165"+
		"\3\u0166\3\u0166\3\u0166\7\u0166\u14cd\n\u0166\f\u0166\16\u0166\u14d0"+
		"\13\u0166\3\u0166\3\u0166\5\u0166\u14d4\n\u0166\3\u0167\3\u0167\3\u0168"+
		"\3\u0168\3\u0168\7\u0168\u14db\n\u0168\f\u0168\16\u0168\u14de\13\u0168"+
		"\3\u0169\3\u0169\3\u0169\7\u0169\u14e3\n\u0169\f\u0169\16\u0169\u14e6"+
		"\13\u0169\3\u016a\3\u016a\3\u016a\7\u016a\u14eb\n\u016a\f\u016a\16\u016a"+
		"\u14ee\13\u016a\3\u016b\3\u016b\3\u016b\5\u016b\u14f3\n\u016b\3\u016c"+
		"\3\u016c\3\u016c\5\u016c\u14f8\n\u016c\3\u016d\3\u016d\3\u016d\5\u016d"+
		"\u14fd\n\u016d\3\u016e\3\u016e\3\u016e\5\u016e\u1502\n\u016e\3\u016f\3"+
		"\u016f\5\u016f\u1506\n\u016f\3\u016f\3\u016f\5\u016f\u150a\n\u016f\3\u0170"+
		"\3\u0170\3\u0171\3\u0171\5\u0171\u1510\n\u0171\3\u0172\3\u0172\5\u0172"+
		"\u1514\n\u0172\3\u0173\3\u0173\3\u0173\5\u0173\u1519\n\u0173\3\u0174\3"+
		"\u0174\3\u0175\3\u0175\3\u0175\7\u0175\u1520\n\u0175\f\u0175\16\u0175"+
		"\u1523\13\u0175\3\u0176\3\u0176\3\u0176\5\u0176\u1528\n\u0176\3\u0176"+
		"\3\u0176\3\u0176\5\u0176\u152d\n\u0176\3\u0177\3\u0177\3\u0177\7\u0177"+
		"\u1532\n\u0177\f\u0177\16\u0177\u1535\13\u0177\3\u0177\3\u0177\3\u0177"+
		"\5\u0177\u153a\n\u0177\3\u0178\3\u0178\3\u0179\3\u0179\3\u017a\3\u017a"+
		"\3\u017a\3\u017a\3\u017a\3\u017a\3\u017a\5\u017a\u1547\n\u017a\3\u017b"+
		"\3\u017b\3\u017c\3\u017c\5\u017c\u154d\n\u017c\3\u017c\3\u017c\3\u017c"+
		"\7\u017c\u1552\n\u017c\f\u017c\16\u017c\u1555\13\u017c\3\u017c\3\u017c"+
		"\5\u017c\u1559\n\u017c\3\u017d\3\u017d\3\u017d\5\u017d\u155e\n\u017d\5"+
		"\u017d\u1560\n\u017d\3\u017d\3\u017d\3\u017d\5\u017d\u1565\n\u017d\7\u017d"+
		"\u1567\n\u017d\f\u017d\16\u017d\u156a\13\u017d\3\u017d\3\u017d\5\u017d"+
		"\u156e\n\u017d\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\5\u017e\u1575\n"+
		"\u017e\3\u017e\3\u017e\3\u017e\5\u017e\u157a\n\u017e\5\u017e\u157c\n\u017e"+
		"\5\u017e\u157e\n\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e"+
		"\3\u017e\3\u017e\5\u017e\u1588\n\u017e\3\u017e\3\u017e\3\u017e\5\u017e"+
		"\u158d\n\u017e\7\u017e\u158f\n\u017e\f\u017e\16\u017e\u1592\13\u017e\5"+
		"\u017e\u1594\n\u017e\3\u017e\3\u017e\5\u017e\u1598\n\u017e\3\u017f\3\u017f"+
		"\3\u017f\3\u0180\3\u0180\3\u0180\3\u0180\5\u0180\u15a1\n\u0180\3\u0180"+
		"\3\u0180\3\u0181\3\u0181\5\u0181\u15a7\n\u0181\3\u0181\3\u0181\5\u0181"+
		"\u15ab\n\u0181\5\u0181\u15ad\n\u0181\3\u0182\3\u0182\5\u0182\u15b1\n\u0182"+
		"\3\u0182\3\u0182\5\u0182\u15b5\n\u0182\3\u0182\3\u0182\3\u0182\3\u0182"+
		"\3\u0182\5\u0182\u15bc\n\u0182\3\u0182\3\u0182\3\u0182\3\u0182\3\u0182"+
		"\3\u0182\5\u0182\u15c4\n\u0182\3\u0182\3\u0182\3\u0182\3\u0182\3\u0182"+
		"\3\u0182\5\u0182\u15cc\n\u0182\5\u0182\u15ce\n\u0182\3\u0183\3\u0183\3"+
		"\u0183\3\u0183\5\u0183\u15d4\n\u0183\3\u0183\5\u0183\u15d7\n\u0183\3\u0183"+
		"\3\u0183\3\u0184\3\u0184\3\u0184\3\u0184\3\u0184\3\u0184\3\u0184\3\u0184"+
		"\3\u0184\3\u0184\3\u0184\3\u0184\3\u0184\3\u0184\3\u0184\3\u0184\3\u0184"+
		"\3\u0184\3\u0184\3\u0184\5\u0184\u15ef\n\u0184\3\u0184\3\u0184\3\u0184"+
		"\3\u0184\3\u0184\5\u0184\u15f6\n\u0184\3\u0184\3\u0184\3\u0184\3\u0184"+
		"\3\u0184\3\u0184\3\u0184\3\u0184\3\u0184\3\u0184\3\u0184\3\u0184\3\u0184"+
		"\3\u0184\3\u0184\3\u0184\3\u0184\3\u0184\3\u0184\3\u0184\3\u0184\3\u0184"+
		"\3\u0184\3\u0184\3\u0184\3\u0184\3\u0184\3\u0184\3\u0184\3\u0184\3\u0184"+
		"\3\u0184\3\u0184\5\u0184\u1619\n\u0184\3\u0185\3\u0185\3\u0185\5\u0185"+
		"\u161e\n\u0185\3\u0185\5\u0185\u1621\n\u0185\3\u0185\3\u0185\3\u0185\5"+
		"\u0185\u1626\n\u0185\5\u0185\u1628\n\u0185\3\u0185\3\u0185\7\u0185\u162c"+
		"\n\u0185\f\u0185\16\u0185\u162f\13\u0185\3\u0186\3\u0186\3\u0186\7\u0186"+
		"\u1634\n\u0186\f\u0186\16\u0186\u1637\13\u0186\3\u0187\3\u0187\5\u0187"+
		"\u163b\n\u0187\3\u0187\3\u0187\3\u0187\7\u0187\u1640\n\u0187\f\u0187\16"+
		"\u0187\u1643\13\u0187\3\u0187\3\u0187\5\u0187\u1647\n\u0187\3\u0187\5"+
		"\u0187\u164a\n\u0187\3\u0188\3\u0188\5\u0188\u164e\n\u0188\3\u0188\3\u0188"+
		"\3\u0188\7\u0188\u1653\n\u0188\f\u0188\16\u0188\u1656\13\u0188\3\u0189"+
		"\3\u0189\3\u0189\5\u0189\u165b\n\u0189\3\u0189\3\u0189\3\u0189\3\u0189"+
		"\5\u0189\u1661\n\u0189\3\u0189\3\u0189\3\u0189\3\u0189\5\u0189\u1667\n"+
		"\u0189\3\u0189\3\u0189\3\u0189\3\u0189\5\u0189\u166d\n\u0189\3\u0189\3"+
		"\u0189\3\u0189\5\u0189\u1672\n\u0189\5\u0189\u1674\n\u0189\3\u0189\5\u0189"+
		"\u1677\n\u0189\3\u0189\3\u0189\3\u0189\3\u0189\3\u0189\3\u0189\3\u0189"+
		"\3\u0189\5\u0189\u1681\n\u0189\3\u0189\5\u0189\u1684\n\u0189\5\u0189\u1686"+
		"\n\u0189\5\u0189\u1688\n\u0189\3\u0189\3\u0189\3\u0189\3\u0189\3\u0189"+
		"\3\u0189\3\u0189\3\u0189\3\u0189\3\u0189\3\u0189\3\u0189\5\u0189\u1696"+
		"\n\u0189\3\u018a\3\u018a\5\u018a\u169a\n\u018a\3\u018b\3\u018b\3\u018c"+
		"\3\u018c\3\u018d\3\u018d\3\u018d\3\u018e\3\u018e\3\u018f\3\u018f\5\u018f"+
		"\u16a7\n\u018f\3\u018f\3\u018f\3\u0190\3\u0190\5\u0190\u16ad\n\u0190\3"+
		"\u0191\3\u0191\3\u0191\3\u0191\3\u0191\3\u0191\3\u0191\5\u0191\u16b6\n"+
		"\u0191\3\u0192\3\u0192\3\u0192\5\u0192\u16bb\n\u0192\3\u0193\3\u0193\3"+
		"\u0193\5\u0193\u16c0\n\u0193\3\u0194\3\u0194\3\u0194\5\u0194\u16c5\n\u0194"+
		"\3\u0195\3\u0195\3\u0195\3\u0195\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196"+
		"\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196"+
		"\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196"+
		"\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196"+
		"\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196"+
		"\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196"+
		"\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196"+
		"\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196"+
		"\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196"+
		"\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196"+
		"\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196"+
		"\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196"+
		"\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196"+
		"\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196"+
		"\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196"+
		"\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196"+
		"\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196"+
		"\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196"+
		"\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196"+
		"\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196"+
		"\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196"+
		"\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196"+
		"\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196"+
		"\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196"+
		"\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196"+
		"\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196"+
		"\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196"+
		"\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196"+
		"\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196"+
		"\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196"+
		"\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196"+
		"\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196"+
		"\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196"+
		"\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196"+
		"\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196"+
		"\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196"+
		"\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196"+
		"\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196"+
		"\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196"+
		"\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196"+
		"\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196"+
		"\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196"+
		"\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196"+
		"\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196"+
		"\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196"+
		"\3\u0196\3\u0196\3\u0196\5\u0196\u185f\n\u0196\3\u0197\3\u0197\3\u0198"+
		"\3\u0198\3\u0199\3\u0199\3\u019a\3\u019a\3\u019b\3\u019b\3\u019c\3\u019c"+
		"\3\u019c\2\5\u020e\u0210\u021a\u019d\2\4\6\b\n\f\16\20\22\24\26\30\32"+
		"\34\36 \"$&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080"+
		"\u0082\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098"+
		"\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0"+
		"\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8"+
		"\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0"+
		"\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8"+
		"\u00fa\u00fc\u00fe\u0100\u0102\u0104\u0106\u0108\u010a\u010c\u010e\u0110"+
		"\u0112\u0114\u0116\u0118\u011a\u011c\u011e\u0120\u0122\u0124\u0126\u0128"+
		"\u012a\u012c\u012e\u0130\u0132\u0134\u0136\u0138\u013a\u013c\u013e\u0140"+
		"\u0142\u0144\u0146\u0148\u014a\u014c\u014e\u0150\u0152\u0154\u0156\u0158"+
		"\u015a\u015c\u015e\u0160\u0162\u0164\u0166\u0168\u016a\u016c\u016e\u0170"+
		"\u0172\u0174\u0176\u0178\u017a\u017c\u017e\u0180\u0182\u0184\u0186\u0188"+
		"\u018a\u018c\u018e\u0190\u0192\u0194\u0196\u0198\u019a\u019c\u019e\u01a0"+
		"\u01a2\u01a4\u01a6\u01a8\u01aa\u01ac\u01ae\u01b0\u01b2\u01b4\u01b6\u01b8"+
		"\u01ba\u01bc\u01be\u01c0\u01c2\u01c4\u01c6\u01c8\u01ca\u01cc\u01ce\u01d0"+
		"\u01d2\u01d4\u01d6\u01d8\u01da\u01dc\u01de\u01e0\u01e2\u01e4\u01e6\u01e8"+
		"\u01ea\u01ec\u01ee\u01f0\u01f2\u01f4\u01f6\u01f8\u01fa\u01fc\u01fe\u0200"+
		"\u0202\u0204\u0206\u0208\u020a\u020c\u020e\u0210\u0212\u0214\u0216\u0218"+
		"\u021a\u021c\u021e\u0220\u0222\u0224\u0226\u0228\u022a\u022c\u022e\u0230"+
		"\u0232\u0234\u0236\u0238\u023a\u023c\u023e\u0240\u0242\u0244\u0246\u0248"+
		"\u024a\u024c\u024e\u0250\u0252\u0254\u0256\u0258\u025a\u025c\u025e\u0260"+
		"\u0262\u0264\u0266\u0268\u026a\u026c\u026e\u0270\u0272\u0274\u0276\u0278"+
		"\u027a\u027c\u027e\u0280\u0282\u0284\u0286\u0288\u028a\u028c\u028e\u0290"+
		"\u0292\u0294\u0296\u0298\u029a\u029c\u029e\u02a0\u02a2\u02a4\u02a6\u02a8"+
		"\u02aa\u02ac\u02ae\u02b0\u02b2\u02b4\u02b6\u02b8\u02ba\u02bc\u02be\u02c0"+
		"\u02c2\u02c4\u02c6\u02c8\u02ca\u02cc\u02ce\u02d0\u02d2\u02d4\u02d6\u02d8"+
		"\u02da\u02dc\u02de\u02e0\u02e2\u02e4\u02e6\u02e8\u02ea\u02ec\u02ee\u02f0"+
		"\u02f2\u02f4\u02f6\u02f8\u02fa\u02fc\u02fe\u0300\u0302\u0304\u0306\u0308"+
		"\u030a\u030c\u030e\u0310\u0312\u0314\u0316\u0318\u031a\u031c\u031e\u0320"+
		"\u0322\u0324\u0326\u0328\u032a\u032c\u032e\u0330\u0332\u0334\u0336\2U"+
		"\3\2\u0277\u0277\4\2\21\21\u00e2\u00e2\4\2\t\t\u0161\u0161\4\2\u00bd\u00bd"+
		"\u0172\u0172\4\2DD\u014b\u014b\5\2--\u0153\u0153\u01bd\u01bd\4\2\u0083"+
		"\u0083\u0092\u0092\4\2\7\7!!\5\2~~\u00d3\u00d3\u0202\u0202\5\2\u0126\u0126"+
		"\u0144\u0144\u0156\u0156\4\2\u00b1\u00b1\u020a\u020a\4\2--\u01bd\u01bd"+
		"\4\2\5\5\u0088\u0088\5\2\5\5\u0088\u0088\u0116\u0116\5\2kk\u014a\u014a"+
		"\u01be\u01be\4\2\u010a\u010a\u014b\u014b\4\2\u010e\u010e\u01c6\u01c6\5"+
		"\2\u00a9\u00a9\u00d4\u00d4\u0152\u0152\3\2\u015f\u0160\4\2ii}}\6\2\u00ce"+
		"\u00ce\u00d2\u00d2\u012b\u012b\u0150\u0150\4\2zz\u0274\u0274\3\3\u0277"+
		"\u0277\3\2\u0189\u018a\4\2\u0145\u0145\u0222\u0222\3\2TU\4\2||\u00c4\u00c4"+
		"\4\2\u0135\u0135\u0218\u0218\4\2  \u00c4\u00c4\4\2\60\60\177\177\5\2\13"+
		"\13\u0085\u0085\u01fd\u01fd\4\2dd\u011e\u011e\5\2\u00b6\u00b6\u00ee\u00ee"+
		"\u018e\u018e\4\2\u019d\u019d\u01da\u01da\5\2\u019d\u019d\u01ba\u01ba\u01da"+
		"\u01da\4\2\u009d\u009d\u00c5\u00c5\4\2ee\u0190\u0190\4\2\u00c3\u00c3\u00e7"+
		"\u00e7\4\2\13\13\u0201\u0201\4\2\36\36\u01a5\u01a5\4\2\22\22\u0080\u0080"+
		"\4\2\u00aa\u00aa\u00eb\u00eb\4\2\13\13\u00aa\u00aa\4\2\u01d4\u01d4\u01d8"+
		"\u01d8\4\2\u010e\u010e\u01c9\u01c9\3\2\u00f6\u00f9\3\2\u026e\u026f\5\2"+
		"\u0117\u0117\u026d\u026d\u0272\u0272\4\2yy\u00c7\u00c7\6\2\13\13\17\17"+
		"\u00a0\u00a0\u01bb\u01bb\5\2//\u00ed\u00ed\u01ef\u01ef\4\2\13\13\u0085"+
		"\u0085\4\2\u0085\u0085\u01fd\u01fd\3\2\u015b\u015e\4\2\u00ab\u00ab\u00ec"+
		"\u00ec\4\2\u0226\u0226\u0229\u0229\4\2\u0095\u0095\u012d\u012d\4\2\u0099"+
		"\u0099\u011b\u011b\4\2WW\u0086\u0086\4\2\u00c0\u00c0\u01ae\u01ae\b\2\u0243"+
		"\u0245\u0247\u024c\u024e\u024f\u0251\u0251\u0255\u0258\u025c\u025c\3\2"+
		"\u023c\u0242\3\2\u0236\u023b\4\2\u0172\u0172\u0194\u0194\4\2\u00ae\u00ae"+
		"\u016a\u016a\4\2\u0133\u0133\u019b\u019b\4\2\u014e\u014e\u01bf\u01bf\5"+
		"\2\u00a6\u00a6\u01cd\u01cd\u0219\u0219\4\2JJ\u018f\u018f\5\2JJ\u0130\u0130"+
		"\u018f\u018f\4\2\u0157\u0157\u01ca\u01ca\4\2\u00c3\u00c3\u0185\u0185\4"+
		"\2pp\u0232\u0232\4\2\u0118\u0118\u019f\u019f\4\2\63\63<<\b\2pp\u00c1\u00c1"+
		"\u0111\u0111\u0118\u0118\u019f\u019f\u0232\u0232\4\2\u025d\u025d\u0266"+
		"\u0266\27\2\23\24@@NNPPZZxx\u008a\u008a\u00cf\u00cf\u00d6\u00da\u00ef"+
		"\u00f3\u0106\u0108\u0123\u0123\u017d\u017f\u0184\u0184\u0195\u0196\u01bc"+
		"\u01bc\u01f1\u01f1\u0203\u0203\u0217\u0217\u0252\u0252\u0254\u0254\34"+
		"\2\3\4\25\25\27\30**::]^``\u00a2\u00a2\u00ad\u00ad\u00fb\u00fb\u0101\u0101"+
		"\u0117\u0117\u0168\u0168\u017c\u017c\u0182\u0182\u0192\u0192\u01b1\u01b1"+
		"\u01b5\u01b6\u01c0\u01c0\u01d5\u01d6\u01f6\u01f6\u0243\u0243\u0249\u024b"+
		"\u0250\u0250\u0255\u0255\u0259\u025a\17\2\6\6ghrr\u00a5\u00a5\u00ea\u00ea"+
		"\u00fe\u00fe\u0119\u0119\u0127\u0128\u01a9\u01a9\u01d2\u01d3\u01f6\u01f6"+
		"\u01f8\u01f8\u0250\u0250\r\2))99>>\u00b5\u00b5\u00bf\u00bf\u013c\u013d"+
		"\u0174\u0174\u01e4\u01ec\u01ee\u01ee\u0253\u0253\u025b\u025b\16\2ab\u00ab"+
		"\u00ab\u00ec\u00ec\u0136\u0136\u0210\u0210\u0212\u0212\u023c\u023e\u0242"+
		"\u0242\u0244\u0244\u0247\u0248\u0256\u0256\u0258\u0258\21\2%%\66\6688"+
		"EE\u008f\u0090\u00bb\u00bb\u00fc\u00fc\u011d\u011d\u0137\u0137\u013f\u013f"+
		"\u01d1\u01d1\u01f9\u01f9\u0206\u0207\u0246\u0246\u024d\u024d\2\u1c91\2"+
		"\u0341\3\2\2\2\4\u0347\3\2\2\2\6\u0368\3\2\2\2\b\u036a\3\2\2\2\n\u036f"+
		"\3\2\2\2\f\u0382\3\2\2\2\16\u03b9\3\2\2\2\20\u03bd\3\2\2\2\22\u03d5\3"+
		"\2\2\2\24\u03d9\3\2\2\2\26\u03e5\3\2\2\2\30\u03f3\3\2\2\2\32\u0400\3\2"+
		"\2\2\34\u0416\3\2\2\2\36\u0432\3\2\2\2 \u0458\3\2\2\2\"\u045a\3\2\2\2"+
		"$\u046b\3\2\2\2&\u0494\3\2\2\2(\u0496\3\2\2\2*\u049b\3\2\2\2,\u04ae\3"+
		"\2\2\2.\u04e0\3\2\2\2\60\u0500\3\2\2\2\62\u0528\3\2\2\2\64\u052d\3\2\2"+
		"\2\66\u0546\3\2\2\28\u055e\3\2\2\2:\u0567\3\2\2\2<\u0570\3\2\2\2>\u0579"+
		"\3\2\2\2@\u057d\3\2\2\2B\u0582\3\2\2\2D\u059a\3\2\2\2F\u059c\3\2\2\2H"+
		"\u05d0\3\2\2\2J\u05ec\3\2\2\2L\u05ee\3\2\2\2N\u05fc\3\2\2\2P\u0608\3\2"+
		"\2\2R\u060d\3\2\2\2T\u0613\3\2\2\2V\u0616\3\2\2\2X\u0621\3\2\2\2Z\u0630"+
		"\3\2\2\2\\\u0641\3\2\2\2^\u0652\3\2\2\2`\u065a\3\2\2\2b\u065f\3\2\2\2"+
		"d\u066f\3\2\2\2f\u0673\3\2\2\2h\u068b\3\2\2\2j\u068e\3\2\2\2l\u0694\3"+
		"\2\2\2n\u069e\3\2\2\2p\u06a8\3\2\2\2r\u06b1\3\2\2\2t\u06cd\3\2\2\2v\u06d3"+
		"\3\2\2\2x\u06d6\3\2\2\2z\u06dd\3\2\2\2|\u06e5\3\2\2\2~\u06f1\3\2\2\2\u0080"+
		"\u06f3\3\2\2\2\u0082\u06f8\3\2\2\2\u0084\u06ff\3\2\2\2\u0086\u071b\3\2"+
		"\2\2\u0088\u073d\3\2\2\2\u008a\u076f\3\2\2\2\u008c\u0779\3\2\2\2\u008e"+
		"\u077b\3\2\2\2\u0090\u0780\3\2\2\2\u0092\u078e\3\2\2\2\u0094\u0790\3\2"+
		"\2\2\u0096\u0795\3\2\2\2\u0098\u07b9\3\2\2\2\u009a\u07bb\3\2\2\2\u009c"+
		"\u07ee\3\2\2\2\u009e\u081d\3\2\2\2\u00a0\u0821\3\2\2\2\u00a2\u0830\3\2"+
		"\2\2\u00a4\u0832\3\2\2\2\u00a6\u0837\3\2\2\2\u00a8\u0841\3\2\2\2\u00aa"+
		"\u085c\3\2\2\2\u00ac\u085e\3\2\2\2\u00ae\u0862\3\2\2\2\u00b0\u0873\3\2"+
		"\2\2\u00b2\u0878\3\2\2\2\u00b4\u087c\3\2\2\2\u00b6\u08ad\3\2\2\2\u00b8"+
		"\u08af\3\2\2\2\u00ba\u08b6\3\2\2\2\u00bc\u08bb\3\2\2\2\u00be\u08c5\3\2"+
		"\2\2\u00c0\u08d5\3\2\2\2\u00c2\u08e2\3\2\2\2\u00c4\u08e9\3\2\2\2\u00c6"+
		"\u08f5\3\2\2\2\u00c8\u0902\3\2\2\2\u00ca\u0907\3\2\2\2\u00cc\u090a\3\2"+
		"\2\2\u00ce\u090e\3\2\2\2\u00d0\u0913\3\2\2\2\u00d2\u0917\3\2\2\2\u00d4"+
		"\u0928\3\2\2\2\u00d6\u0935\3\2\2\2\u00d8\u0946\3\2\2\2\u00da\u0953\3\2"+
		"\2\2\u00dc\u0960\3\2\2\2\u00de\u0962\3\2\2\2\u00e0\u0970\3\2\2\2\u00e2"+
		"\u0981\3\2\2\2\u00e4\u0999\3\2\2\2\u00e6\u099b\3\2\2\2\u00e8\u09a5\3\2"+
		"\2\2\u00ea\u09a9\3\2\2\2\u00ec\u09e6\3\2\2\2\u00ee\u09f2\3\2\2\2\u00f0"+
		"\u09fd\3\2\2\2\u00f2\u0a03\3\2\2\2\u00f4\u0a0e\3\2\2\2\u00f6\u0a1a\3\2"+
		"\2\2\u00f8\u0a22\3\2\2\2\u00fa\u0a31\3\2\2\2\u00fc\u0a35\3\2\2\2\u00fe"+
		"\u0a56\3\2\2\2\u0100\u0a5a\3\2\2\2\u0102\u0a5f\3\2\2\2\u0104\u0a67\3\2"+
		"\2\2\u0106\u0a6f\3\2\2\2\u0108\u0a72\3\2\2\2\u010a\u0a82\3\2\2\2\u010c"+
		"\u0a87\3\2\2\2\u010e\u0a8b\3\2\2\2\u0110\u0aaf\3\2\2\2\u0112\u0ab1\3\2"+
		"\2\2\u0114\u0ac7\3\2\2\2\u0116\u0ac9\3\2\2\2\u0118\u0ace\3\2\2\2\u011a"+
		"\u0ad0\3\2\2\2\u011c\u0ad2\3\2\2\2\u011e\u0ad4\3\2\2\2\u0120\u0ad8\3\2"+
		"\2\2\u0122\u0add\3\2\2\2\u0124\u0ae1\3\2\2\2\u0126\u0ae7\3\2\2\2\u0128"+
		"\u0af5\3\2\2\2\u012a\u0b09\3\2\2\2\u012c\u0b0e\3\2\2\2\u012e\u0b1b\3\2"+
		"\2\2\u0130\u0b1d\3\2\2\2\u0132\u0b2b\3\2\2\2\u0134\u0b35\3\2\2\2\u0136"+
		"\u0b3b\3\2\2\2\u0138\u0b3d\3\2\2\2\u013a\u0b40\3\2\2\2\u013c\u0b45\3\2"+
		"\2\2\u013e\u0b5d\3\2\2\2\u0140\u0b6c\3\2\2\2\u0142\u0b6e\3\2\2\2\u0144"+
		"\u0b83\3\2\2\2\u0146\u0b92\3\2\2\2\u0148\u0ba3\3\2\2\2\u014a\u0bb0\3\2"+
		"\2\2\u014c\u0bb3\3\2\2\2\u014e\u0bc8\3\2\2\2\u0150\u0bd2\3\2\2\2\u0152"+
		"\u0bdb\3\2\2\2\u0154\u0bf6\3\2\2\2\u0156\u0c21\3\2\2\2\u0158\u0c31\3\2"+
		"\2\2\u015a\u0c3e\3\2\2\2\u015c\u0c47\3\2\2\2\u015e\u0c49\3\2\2\2\u0160"+
		"\u0c68\3\2\2\2\u0162\u0c6c\3\2\2\2\u0164\u0c74\3\2\2\2\u0166\u0c76\3\2"+
		"\2\2\u0168\u0c7e\3\2\2\2\u016a\u0c89\3\2\2\2\u016c\u0caa\3\2\2\2\u016e"+
		"\u0cad\3\2\2\2\u0170\u0cc2\3\2\2\2\u0172\u0cc5\3\2\2\2\u0174\u0cd1\3\2"+
		"\2\2\u0176\u0cd5\3\2\2\2\u0178\u0cee\3\2\2\2\u017a\u0cf0\3\2\2\2\u017c"+
		"\u0d01\3\2\2\2\u017e\u0d08\3\2\2\2\u0180\u0d17\3\2\2\2\u0182\u0d2e\3\2"+
		"\2\2\u0184\u0d34\3\2\2\2\u0186\u0d36\3\2\2\2\u0188\u0d4e\3\2\2\2\u018a"+
		"\u0d66\3\2\2\2\u018c\u0d8a\3\2\2\2\u018e\u0d8c\3\2\2\2\u0190\u0daa\3\2"+
		"\2\2\u0192\u0daf\3\2\2\2\u0194\u0db1\3\2\2\2\u0196\u0dbd\3\2\2\2\u0198"+
		"\u0dcd\3\2\2\2\u019a\u0dcf\3\2\2\2\u019c\u0dd2\3\2\2\2\u019e\u0dec\3\2"+
		"\2\2\u01a0\u0dee\3\2\2\2\u01a2\u0df2\3\2\2\2\u01a4\u0e01\3\2\2\2\u01a6"+
		"\u0e0d\3\2\2\2\u01a8\u0e15\3\2\2\2\u01aa\u0e19\3\2\2\2\u01ac\u0e26\3\2"+
		"\2\2\u01ae\u0e2c\3\2\2\2\u01b0\u0e3b\3\2\2\2\u01b2\u0e4f\3\2\2\2\u01b4"+
		"\u0e58\3\2\2\2\u01b6\u0e5a\3\2\2\2\u01b8\u0e61\3\2\2\2\u01ba\u0e66\3\2"+
		"\2\2\u01bc\u0e73\3\2\2\2\u01be\u0e7b\3\2\2\2\u01c0\u0e83\3\2\2\2\u01c2"+
		"\u0e91\3\2\2\2\u01c4\u0e93\3\2\2\2\u01c6\u0e9f\3\2\2\2\u01c8\u0ec2\3\2"+
		"\2\2\u01ca\u0ec4\3\2\2\2\u01cc\u0ed2\3\2\2\2\u01ce\u0ed7\3\2\2\2\u01d0"+
		"\u0ee9\3\2\2\2\u01d2\u0eed\3\2\2\2\u01d4\u0ef5\3\2\2\2\u01d6\u0eff\3\2"+
		"\2\2\u01d8\u0f07\3\2\2\2\u01da\u0f0d\3\2\2\2\u01dc\u0f1c\3\2\2\2\u01de"+
		"\u0f21\3\2\2\2\u01e0\u0f3a\3\2\2\2\u01e2\u0f4d\3\2\2\2\u01e4\u0f51\3\2"+
		"\2\2\u01e6\u0f54\3\2\2\2\u01e8\u0f70\3\2\2\2\u01ea\u0f75\3\2\2\2\u01ec"+
		"\u0f88\3\2\2\2\u01ee\u0f8a\3\2\2\2\u01f0\u0f9a\3\2\2\2\u01f2\u0fa2\3\2"+
		"\2\2\u01f4\u0fa7\3\2\2\2\u01f6\u0fb2\3\2\2\2\u01f8\u0fbd\3\2\2\2\u01fa"+
		"\u0fc0\3\2\2\2\u01fc\u0fd2\3\2\2\2\u01fe\u0fd4\3\2\2\2\u0200\u0fe3\3\2"+
		"\2\2\u0202\u0fee\3\2\2\2\u0204\u0ffc\3\2\2\2\u0206\u1001\3\2\2\2\u0208"+
		"\u1006\3\2\2\2\u020a\u1013\3\2\2\2\u020c\u1017\3\2\2\2\u020e\u1019\3\2"+
		"\2\2\u0210\u1024\3\2\2\2\u0212\u1032\3\2\2\2\u0214\u1034\3\2\2\2\u0216"+
		"\u1059\3\2\2\2\u0218\u1062\3\2\2\2\u021a\u1064\3\2\2\2\u021c\u1076\3\2"+
		"\2\2\u021e\u1078\3\2\2\2\u0220\u1089\3\2\2\2\u0222\u108b\3\2\2\2\u0224"+
		"\u108d\3\2\2\2\u0226\u10a2\3\2\2\2\u0228\u10a4\3\2\2\2\u022a\u10a8\3\2"+
		"\2\2\u022c\u10b1\3\2\2\2\u022e\u10b9\3\2\2\2\u0230\u10c1\3\2\2\2\u0232"+
		"\u10e4\3\2\2\2\u0234\u10e6\3\2\2\2\u0236\u1104\3\2\2\2\u0238\u1106\3\2"+
		"\2\2\u023a\u1116\3\2\2\2\u023c\u1119\3\2\2\2\u023e\u111b\3\2\2\2\u0240"+
		"\u1147\3\2\2\2\u0242\u114b\3\2\2\2\u0244\u114d\3\2\2\2\u0246\u115b\3\2"+
		"\2\2\u0248\u1162\3\2\2\2\u024a\u116f\3\2\2\2\u024c\u1176\3\2\2\2\u024e"+
		"\u118f\3\2\2\2\u0250\u1191\3\2\2\2\u0252\u1195\3\2\2\2\u0254\u119e\3\2"+
		"\2\2\u0256\u11f7\3\2\2\2\u0258\u11f9\3\2\2\2\u025a\u11fb\3\2\2\2\u025c"+
		"\u1264\3\2\2\2\u025e\u1266\3\2\2\2\u0260\u136a\3\2\2\2\u0262\u136c\3\2"+
		"\2\2\u0264\u136e\3\2\2\2\u0266\u1370\3\2\2\2\u0268\u1372\3\2\2\2\u026a"+
		"\u137f\3\2\2\2\u026c\u1388\3\2\2\2\u026e\u1391\3\2\2\2\u0270\u1393\3\2"+
		"\2\2\u0272\u13a4\3\2\2\2\u0274\u13aa\3\2\2\2\u0276\u13b5\3\2\2\2\u0278"+
		"\u13b7\3\2\2\2\u027a\u13cb\3\2\2\2\u027c\u13d9\3\2\2\2\u027e\u13eb\3\2"+
		"\2\2\u0280\u1400\3\2\2\2\u0282\u140d\3\2\2\2\u0284\u1410\3\2\2\2\u0286"+
		"\u1419\3\2\2\2\u0288\u141f\3\2\2\2\u028a\u1427\3\2\2\2\u028c\u142a\3\2"+
		"\2\2\u028e\u1435\3\2\2\2\u0290\u143e\3\2\2\2\u0292\u1443\3\2\2\2\u0294"+
		"\u144c\3\2\2\2\u0296\u1455\3\2\2\2\u0298\u1457\3\2\2\2\u029a\u145d\3\2"+
		"\2\2\u029c\u145f\3\2\2\2\u029e\u1461\3\2\2\2\u02a0\u146f\3\2\2\2\u02a2"+
		"\u1473\3\2\2\2\u02a4\u1475\3\2\2\2\u02a6\u1477\3\2\2\2\u02a8\u147c\3\2"+
		"\2\2\u02aa\u1494\3\2\2\2\u02ac\u1498\3\2\2\2\u02ae\u149a\3\2\2\2\u02b0"+
		"\u149c\3\2\2\2\u02b2\u149e\3\2\2\2\u02b4\u14a0\3\2\2\2\u02b6\u14a2\3\2"+
		"\2\2\u02b8\u14a4\3\2\2\2\u02ba\u14a6\3\2\2\2\u02bc\u14b2\3\2\2\2\u02be"+
		"\u14b4\3\2\2\2\u02c0\u14b9\3\2\2\2\u02c2\u14bb\3\2\2\2\u02c4\u14bd\3\2"+
		"\2\2\u02c6\u14bf\3\2\2\2\u02c8\u14c7\3\2\2\2\u02ca\u14c9\3\2\2\2\u02cc"+
		"\u14d5\3\2\2\2\u02ce\u14d7\3\2\2\2\u02d0\u14df\3\2\2\2\u02d2\u14e7\3\2"+
		"\2\2\u02d4\u14ef\3\2\2\2\u02d6\u14f4\3\2\2\2\u02d8\u14f9\3\2\2\2\u02da"+
		"\u14fe\3\2\2\2\u02dc\u1509\3\2\2\2\u02de\u150b\3\2\2\2\u02e0\u150f\3\2"+
		"\2\2\u02e2\u1513\3\2\2\2\u02e4\u1515\3\2\2\2\u02e6\u151a\3\2\2\2\u02e8"+
		"\u151c\3\2\2\2\u02ea\u1524\3\2\2\2\u02ec\u1539\3\2\2\2\u02ee\u153b\3\2"+
		"\2\2\u02f0\u153d\3\2\2\2\u02f2\u153f\3\2\2\2\u02f4\u1548\3\2\2\2\u02f6"+
		"\u154a\3\2\2\2\u02f8\u155a\3\2\2\2\u02fa\u156f\3\2\2\2\u02fc\u1599\3\2"+
		"\2\2\u02fe\u15a0\3\2\2\2\u0300\u15ac\3\2\2\2\u0302\u15cd\3\2\2\2\u0304"+
		"\u15cf\3\2\2\2\u0306\u1618\3\2\2\2\u0308\u161d\3\2\2\2\u030a\u1630\3\2"+
		"\2\2\u030c\u163a\3\2\2\2\u030e\u164d\3\2\2\2\u0310\u1695\3\2\2\2\u0312"+
		"\u1699\3\2\2\2\u0314\u169b\3\2\2\2\u0316\u169d\3\2\2\2\u0318\u169f\3\2"+
		"\2\2\u031a\u16a2\3\2\2\2\u031c\u16a6\3\2\2\2\u031e\u16ac\3\2\2\2\u0320"+
		"\u16b5\3\2\2\2\u0322\u16ba\3\2\2\2\u0324\u16bf\3\2\2\2\u0326\u16c4\3\2"+
		"\2\2\u0328\u16c6\3\2\2\2\u032a\u185e\3\2\2\2\u032c\u1860\3\2\2\2\u032e"+
		"\u1862\3\2\2\2\u0330\u1864\3\2\2\2\u0332\u1866\3\2\2\2\u0334\u1868\3\2"+
		"\2\2\u0336\u186a\3\2\2\2\u0338\u033b\5\6\4\2\u0339\u033b\5\u0290\u0149"+
		"\2\u033a\u0338\3\2\2\2\u033a\u0339\3\2\2\2\u033b\u033d\3\2\2\2\u033c\u033e"+
		"\7\u0277\2\2\u033d\u033c\3\2\2\2\u033d\u033e\3\2\2\2\u033e\u0340\3\2\2"+
		"\2\u033f\u033a\3\2\2\2\u0340\u0343\3\2\2\2\u0341\u033f\3\2\2\2\u0341\u0342"+
		"\3\2\2\2\u0342\u0344\3\2\2\2\u0343\u0341\3\2\2\2\u0344\u0345\7\2\2\3\u0345"+
		"\3\3\2\2\2\u0346\u0348\n\2\2\2\u0347\u0346\3\2\2\2\u0348\u0349\3\2\2\2"+
		"\u0349\u0347\3\2\2\2\u0349\u034a\3\2\2\2\u034a\5\3\2\2\2\u034b\u0369\5"+
		"\n\6\2\u034c\u0369\5\32\16\2\u034d\u0369\5*\26\2\u034e\u0369\5\u00a6T"+
		"\2\u034f\u0369\5\64\33\2\u0350\u0369\5X-\2\u0351\u0369\5\u00ba^\2\u0352"+
		"\u0369\5\f\7\2\u0353\u0369\5\60\31\2\u0354\u0369\5\34\17\2\u0355\u0369"+
		"\5\36\20\2\u0356\u0369\5l\67\2\u0357\u0369\5n8\2\u0358\u0369\5\u00aeX"+
		"\2\u0359\u0369\5\u00b0Y\2\u035a\u0369\5\u00a8U\2\u035b\u0369\5\66\34\2"+
		"\u035c\u0369\5\u00b6\\\2\u035d\u0369\5\b\5\2\u035e\u0369\5\30\r\2\u035f"+
		"\u0369\5(\25\2\u0360\u0369\5\u00a4S\2\u0361\u0369\5\62\32\2\u0362\u0369"+
		"\5V,\2\u0363\u0369\5\u0134\u009b\2\u0364\u0369\5\u00b2Z\2\u0365\u0369"+
		"\5\u00b4[\2\u0366\u0369\5\u00b8]\2\u0367\u0369\5\u00c8e\2\u0368\u034b"+
		"\3\2\2\2\u0368\u034c\3\2\2\2\u0368\u034d\3\2\2\2\u0368\u034e\3\2\2\2\u0368"+
		"\u034f\3\2\2\2\u0368\u0350\3\2\2\2\u0368\u0351\3\2\2\2\u0368\u0352\3\2"+
		"\2\2\u0368\u0353\3\2\2\2\u0368\u0354\3\2\2\2\u0368\u0355\3\2\2\2\u0368"+
		"\u0356\3\2\2\2\u0368\u0357\3\2\2\2\u0368\u0358\3\2\2\2\u0368\u0359\3\2"+
		"\2\2\u0368\u035a\3\2\2\2\u0368\u035b\3\2\2\2\u0368\u035c\3\2\2\2\u0368"+
		"\u035d\3\2\2\2\u0368\u035e\3\2\2\2\u0368\u035f\3\2\2\2\u0368\u0360\3\2"+
		"\2\2\u0368\u0361\3\2\2\2\u0368\u0362\3\2\2\2\u0368\u0363\3\2\2\2\u0368"+
		"\u0364\3\2\2\2\u0368\u0365\3\2\2\2\u0368\u0366\3\2\2\2\u0368\u0367\3\2"+
		"\2\2\u0369\7\3\2\2\2\u036a\u036b\7\u0088\2\2\u036b\u036c\7\u00b7\2\2\u036c"+
		"\u036d\5\u02d4\u016b\2\u036d\u036e\7\u0277\2\2\u036e\t\3\2\2\2\u036f\u0370"+
		"\7\f\2\2\u0370\u0371\7\u00b7\2\2\u0371\u0372\5\u02d4\u016b\2\u0372\u0374"+
		"\7M\2\2\u0373\u0375\7t\2\2\u0374\u0373\3\2\2\2\u0374\u0375\3\2\2\2\u0375"+
		"\u0379\3\2\2\2\u0376\u0378\5\u00ccg\2\u0377\u0376\3\2\2\2\u0378\u037b"+
		"\3\2\2\2\u0379\u0377\3\2\2\2\u0379\u037a\3\2\2\2\u037a\u037e\3\2\2\2\u037b"+
		"\u0379\3\2\2\2\u037c\u037d\7\u018b\2\2\u037d\u037f\7\u01ac\2\2\u037e\u037c"+
		"\3\2\2\2\u037e\u037f\3\2\2\2\u037f\u0380\3\2\2\2\u0380\u0381\7\u0277\2"+
		"\2\u0381\13\3\2\2\2\u0382\u0385\7c\2\2\u0383\u0384\7\u014d\2\2\u0384\u0386"+
		"\7\u0184\2\2\u0385\u0383\3\2\2\2\u0385\u0386\3\2\2\2\u0386\u0387\3\2\2"+
		"\2\u0387\u0388\7\u00b7\2\2\u0388\u0394\5\u02d4\u016b\2\u0389\u038a\7\u026a"+
		"\2\2\u038a\u038f\5\u00d8m\2\u038b\u038c\7\u0271\2\2\u038c\u038e\5\u00d8"+
		"m\2\u038d\u038b\3\2\2\2\u038e\u0391\3\2\2\2\u038f\u038d\3\2\2\2\u038f"+
		"\u0390\3\2\2\2\u0390\u0392\3\2\2\2\u0391\u038f\3\2\2\2\u0392\u0393\7\u026b"+
		"\2\2\u0393\u0395\3\2\2\2\u0394\u0389\3\2\2\2\u0394\u0395\3\2\2\2\u0395"+
		"\u0396\3\2\2\2\u0396\u0397\7\u018a\2\2\u0397\u039e\5\u0300\u0181\2\u0398"+
		"\u039d\5\u00caf\2\u0399\u039d\5\16\b\2\u039a\u039d\5\22\n\2\u039b\u039d"+
		"\7\u0081\2\2\u039c\u0398\3\2\2\2\u039c\u0399\3\2\2\2\u039c\u039a\3\2\2"+
		"\2\u039c\u039b\3\2\2\2\u039d\u03a0\3\2\2\2\u039e\u039c\3\2\2\2\u039e\u039f"+
		"\3\2\2\2\u039f\u03b5\3\2\2\2\u03a0\u039e\3\2\2\2\u03a1\u03a3\7\u0161\2"+
		"\2\u03a2\u03a1\3\2\2\2\u03a2\u03a3\3\2\2\2\u03a3\u03a4\3\2\2\2\u03a4\u03b0"+
		"\t\3\2\2\u03a5\u03a7\7w\2\2\u03a6\u03a5\3\2\2\2\u03a6\u03a7\3\2\2\2\u03a7"+
		"\u03ab\3\2\2\2\u03a8\u03aa\5\u00dco\2\u03a9\u03a8\3\2\2\2\u03aa\u03ad"+
		"\3\2\2\2\u03ab\u03a9\3\2\2\2\u03ab\u03ac\3\2\2\2\u03ac\u03ae\3\2\2\2\u03ad"+
		"\u03ab\3\2\2\2\u03ae\u03b1\5\u0126\u0094\2\u03af\u03b1\5\u00ceh\2\u03b0"+
		"\u03a6\3\2\2\2\u03b0\u03af\3\2\2\2\u03b1\u03b6\3\2\2\2\u03b2\u03b3\t\4"+
		"\2\2\u03b3\u03b4\7\u0209\2\2\u03b4\u03b6\5\u02be\u0160\2\u03b5\u03a2\3"+
		"\2\2\2\u03b5\u03b2\3\2\2\2\u03b6\u03b7\3\2\2\2\u03b7\u03b8\7\u0277\2\2"+
		"\u03b8\r\3\2\2\2\u03b9\u03bb\7\u0154\2\2\u03ba\u03bc\5\20\t\2\u03bb\u03ba"+
		"\3\2\2\2\u03bb\u03bc\3\2\2\2\u03bc\17\3\2\2\2\u03bd\u03be\7\u026a\2\2"+
		"\u03be\u03bf\7\u0157\2\2\u03bf\u03c0\5\u020c\u0107\2\u03c0\u03ce\7\62"+
		"\2\2\u03c1\u03cf\7\17\2\2\u03c2\u03c3\t\5\2\2\u03c3\u03c4\7\u026a\2\2"+
		"\u03c4\u03c9\5\u02e8\u0175\2\u03c5\u03c6\7\u0271\2\2\u03c6\u03c8\5\u02e8"+
		"\u0175\2\u03c7\u03c5\3\2\2\2\u03c8\u03cb\3\2\2\2\u03c9\u03c7\3\2\2\2\u03c9"+
		"\u03ca\3\2\2\2\u03ca\u03cc\3\2\2\2\u03cb\u03c9\3\2\2\2\u03cc\u03cd\7\u026b"+
		"\2\2\u03cd\u03cf\3\2\2\2\u03ce\u03c1\3\2\2\2\u03ce\u03c2\3\2\2\2\u03cf"+
		"\u03d1\3\2\2\2\u03d0\u03d2\5\26\f\2\u03d1\u03d0\3\2\2\2\u03d1\u03d2\3"+
		"\2\2\2\u03d2\u03d3\3\2\2\2\u03d3\u03d4\7\u026b\2\2\u03d4\21\3\2\2\2\u03d5"+
		"\u03d7\7\u0187\2\2\u03d6\u03d8\5\24\13\2\u03d7\u03d6\3\2\2\2\u03d7\u03d8"+
		"\3\2\2\2\u03d8\23\3\2\2\2\u03d9\u03da\7\u0181\2\2\u03da\u03db\7\u026a"+
		"\2\2\u03db\u03e0\5\u02ea\u0176\2\u03dc\u03dd\7\u0271\2\2\u03dd\u03df\5"+
		"\u02ea\u0176\2\u03de\u03dc\3\2\2\2\u03df\u03e2\3\2\2\2\u03e0\u03de\3\2"+
		"\2\2\u03e0\u03e1\3\2\2\2\u03e1\u03e3\3\2\2\2\u03e2\u03e0\3\2\2\2\u03e3"+
		"\u03e4\7\u026b\2\2\u03e4\25\3\2\2\2\u03e5\u03e6\t\6\2\2\u03e6\u03e7\5"+
		"\u020c\u0107\2\u03e7\u03e8\7\62\2\2\u03e8\u03e9\7\u026a\2\2\u03e9\u03ee"+
		"\5\u02e8\u0175\2\u03ea\u03eb\7\u0271\2\2\u03eb\u03ed\5\u02e8\u0175\2\u03ec"+
		"\u03ea\3\2\2\2\u03ed\u03f0\3\2\2\2\u03ee\u03ec\3\2\2\2\u03ee\u03ef\3\2"+
		"\2\2\u03ef\u03f1\3\2\2\2\u03f0\u03ee\3\2\2\2\u03f1\u03f2\7\u026b\2\2\u03f2"+
		"\27\3\2\2\2\u03f3\u03f4\7\u0088\2\2\u03f4\u03f6\7\u0153\2\2\u03f5\u03f7"+
		"\7-\2\2\u03f6\u03f5\3\2\2\2\u03f6\u03f7\3\2\2\2\u03f7\u03fb\3\2\2\2\u03f8"+
		"\u03f9\5\u02f0\u0179\2\u03f9\u03fa\7\u0261\2\2\u03fa\u03fc\3\2\2\2\u03fb"+
		"\u03f8\3\2\2\2\u03fb\u03fc\3\2\2\2\u03fc\u03fd\3\2\2\2\u03fd\u03fe\5\u02bc"+
		"\u015f\2\u03fe\u03ff\7\u0277\2\2\u03ff\31\3\2\2\2\u0400\u0401\7\f\2\2"+
		"\u0401\u0402\7\u0153\2\2\u0402\u0403\5\u02bc\u015f\2\u0403\u0405\7M\2"+
		"\2\u0404\u0406\7t\2\2\u0405\u0404\3\2\2\2\u0405\u0406\3\2\2\2\u0406\u0408"+
		"\3\2\2\2\u0407\u0409\t\7\2\2\u0408\u0407\3\2\2\2\u0408\u0409\3\2\2\2\u0409"+
		"\u040d\3\2\2\2\u040a\u040c\5\u00ccg\2\u040b\u040a\3\2\2\2\u040c\u040f"+
		"\3\2\2\2\u040d\u040b\3\2\2\2\u040d\u040e\3\2\2\2\u040e\u0412\3\2\2\2\u040f"+
		"\u040d\3\2\2\2\u0410\u0411\7\u018b\2\2\u0411\u0413\7\u01ac\2\2\u0412\u0410"+
		"\3\2\2\2\u0412\u0413\3\2\2\2\u0413\u0414\3\2\2\2\u0414\u0415\7\u0277\2"+
		"\2\u0415\33\3\2\2\2\u0416\u0419\7c\2\2\u0417\u0418\7\u014d\2\2\u0418\u041a"+
		"\7\u0184\2\2\u0419\u0417\3\2\2\2\u0419\u041a\3\2\2\2\u041a\u041b\3\2\2"+
		"\2\u041b\u041f\7\u0153\2\2\u041c\u041d\5\u02f0\u0179\2\u041d\u041e\7\u0261"+
		"\2\2\u041e\u0420\3\2\2\2\u041f\u041c\3\2\2\2\u041f\u0420\3\2\2\2\u0420"+
		"\u0421\3\2\2\2\u0421\u0423\5\u02bc\u015f\2\u0422\u0424\5\u00caf\2\u0423"+
		"\u0422\3\2\2\2\u0423\u0424\3\2\2\2\u0424\u0425\3\2\2\2\u0425\u0429\t\3"+
		"\2\2\u0426\u0428\5 \21\2\u0427\u0426\3\2\2\2\u0428\u042b\3\2\2\2\u0429"+
		"\u0427\3\2\2\2\u0429\u042a\3\2\2\2\u042a\u042c\3\2\2\2\u042b\u0429\3\2"+
		"\2\2\u042c\u042e\7\u0094\2\2\u042d\u042f\5\u02bc\u015f\2\u042e\u042d\3"+
		"\2\2\2\u042e\u042f\3\2\2\2\u042f\u0430\3\2\2\2\u0430\u0431\7\u0277\2\2"+
		"\u0431\35\3\2\2\2\u0432\u0435\7c\2\2\u0433\u0434\7\u014d\2\2\u0434\u0436"+
		"\7\u0184\2\2\u0435\u0433\3\2\2\2\u0435\u0436\3\2\2\2\u0436\u0437\3\2\2"+
		"\2\u0437\u0438\7\u0153\2\2\u0438\u043c\7-\2\2\u0439\u043a\5\u02f0\u0179"+
		"\2\u043a\u043b\7\u0261\2\2\u043b\u043d\3\2\2\2\u043c\u0439\3\2\2\2\u043c"+
		"\u043d\3\2\2\2\u043d\u043e\3\2\2\2\u043e\u043f\5\u02bc\u015f\2\u043f\u0443"+
		"\t\3\2\2\u0440\u0442\5&\24\2\u0441\u0440\3\2\2\2\u0442\u0445\3\2\2\2\u0443"+
		"\u0441\3\2\2\2\u0443\u0444\3\2\2\2\u0444\u0448\3\2\2\2\u0445\u0443\3\2"+
		"\2\2\u0446\u0447\7\"\2\2\u0447\u0449\5\u00fa~\2\u0448\u0446\3\2\2\2\u0448"+
		"\u0449\3\2\2\2\u0449\u044a\3\2\2\2\u044a\u044c\7\u0094\2\2\u044b\u044d"+
		"\5\u02bc\u015f\2\u044c\u044b\3\2\2\2\u044c\u044d\3\2\2\2\u044d\u044e\3"+
		"\2\2\2\u044e\u044f\7\u0277\2\2\u044f\37\3\2\2\2\u0450\u0459\5\u00e8u\2"+
		"\u0451\u0459\5\u00eav\2\u0452\u0459\5\"\22\2\u0453\u0459\5$\23\2\u0454"+
		"\u0459\5\u00dep\2\u0455\u0459\5\u00e0q\2\u0456\u0459\5\u00e2r\2\u0457"+
		"\u0459\5\u00f2z\2\u0458\u0450\3\2\2\2\u0458\u0451\3\2\2\2\u0458\u0452"+
		"\3\2\2\2\u0458\u0453\3\2\2\2\u0458\u0454\3\2\2\2\u0458\u0455\3\2\2\2\u0458"+
		"\u0456\3\2\2\2\u0458\u0457\3\2\2\2\u0459!\3\2\2\2\u045a\u045b\7\u016f"+
		"\2\2\u045b\u0467\5\u031c\u018f\2\u045c\u045d\7\u026a\2\2\u045d\u0462\5"+
		"\u00d8m\2\u045e\u045f\7\u0271\2\2\u045f\u0461\5\u00d8m\2\u0460\u045e\3"+
		"\2\2\2\u0461\u0464\3\2\2\2\u0462\u0460\3\2\2\2\u0462\u0463\3\2\2\2\u0463"+
		"\u0465\3\2\2\2\u0464\u0462\3\2\2\2\u0465\u0466\7\u026b\2\2\u0466\u0468"+
		"\3\2\2\2\u0467\u045c\3\2\2\2\u0467\u0468\3\2\2\2\u0468\u0469\3\2\2\2\u0469"+
		"\u046a\7\u0277\2\2\u046a#\3\2\2\2\u046b\u046c\7\u00b7\2\2\u046c\u0478"+
		"\5\u031c\u018f\2\u046d\u046e\7\u026a\2\2\u046e\u0473\5\u00d8m\2\u046f"+
		"\u0470\7\u0271\2\2\u0470\u0472\5\u00d8m\2\u0471\u046f\3\2\2\2\u0472\u0475"+
		"\3\2\2\2\u0473\u0471\3\2\2\2\u0473\u0474\3\2\2\2\u0474\u0476\3\2\2\2\u0475"+
		"\u0473\3\2\2\2\u0476\u0477\7\u026b\2\2\u0477\u0479\3\2\2\2\u0478\u046d"+
		"\3\2\2\2\u0478\u0479\3\2\2\2\u0479\u047a\3\2\2\2\u047a\u047b\7\u018a\2"+
		"\2\u047b\u047d\5\u0300\u0181\2\u047c\u047e\5\16\b\2\u047d\u047c\3\2\2"+
		"\2\u047d\u047e\3\2\2\2\u047e\u0480\3\2\2\2\u047f\u0481\7\u0081\2\2\u0480"+
		"\u047f\3\2\2\2\u0480\u0481\3\2\2\2\u0481\u0483\3\2\2\2\u0482\u0484\7\u0161"+
		"\2\2\u0483\u0482\3\2\2\2\u0483\u0484\3\2\2\2\u0484\u0486\3\2\2\2\u0485"+
		"\u0487\7\u0187\2\2\u0486\u0485\3\2\2\2\u0486\u0487\3\2\2\2\u0487\u0488"+
		"\3\2\2\2\u0488\u0489\7\u0277\2\2\u0489%\3\2\2\2\u048a\u0495\5\u00e8u\2"+
		"\u048b\u0495\5\u00eav\2\u048c\u0495\5\"\22\2\u048d\u0495\5$\23\2\u048e"+
		"\u0495\5\u00dep\2\u048f\u0495\5\u00e0q\2\u0490\u0495\5\u00e2r\2\u0491"+
		"\u0495\5\u00f2z\2\u0492\u0495\5.\30\2\u0493\u0495\5,\27\2\u0494\u048a"+
		"\3\2\2\2\u0494\u048b\3\2\2\2\u0494\u048c\3\2\2\2\u0494\u048d\3\2\2\2\u0494"+
		"\u048e\3\2\2\2\u0494\u048f\3\2\2\2\u0494\u0490\3\2\2\2\u0494\u0491\3\2"+
		"\2\2\u0494\u0492\3\2\2\2\u0494\u0493\3\2\2\2\u0495\'\3\2\2\2\u0496\u0497"+
		"\7\u0088\2\2\u0497\u0498\7\u016f\2\2\u0498\u0499\5\u02d6\u016c\2\u0499"+
		"\u049a\7\u0277\2\2\u049a)\3\2\2\2\u049b\u049c\7\f\2\2\u049c\u049d\7\u016f"+
		"\2\2\u049d\u049e\5\u02d6\u016c\2\u049e\u04a0\7M\2\2\u049f\u04a1\7t\2\2"+
		"\u04a0\u049f\3\2\2\2\u04a0\u04a1\3\2\2\2\u04a1\u04a5\3\2\2\2\u04a2\u04a4"+
		"\5\u00ccg\2\u04a3\u04a2\3\2\2\2\u04a4\u04a7\3\2\2\2\u04a5\u04a3\3\2\2"+
		"\2\u04a5\u04a6\3\2\2\2\u04a6\u04aa\3\2\2\2\u04a7\u04a5\3\2\2\2\u04a8\u04a9"+
		"\7\u018b\2\2\u04a9\u04ab\7\u01ac\2\2\u04aa\u04a8\3\2\2\2\u04aa\u04ab\3"+
		"\2\2\2\u04ab\u04ac\3\2\2\2\u04ac\u04ad\7\u0277\2\2\u04ad+\3\2\2\2\u04ae"+
		"\u04af\7\u00b7\2\2\u04af\u04bb\5\u031c\u018f\2\u04b0\u04b1\7\u026a\2\2"+
		"\u04b1\u04b6\5\u00d8m\2\u04b2\u04b3\7\u0271\2\2\u04b3\u04b5\5\u00d8m\2"+
		"\u04b4\u04b2\3\2\2\2\u04b5\u04b8\3\2\2\2\u04b6\u04b4\3\2\2\2\u04b6\u04b7"+
		"\3\2\2\2\u04b7\u04b9\3\2\2\2\u04b8\u04b6\3\2\2\2\u04b9\u04ba\7\u026b\2"+
		"\2\u04ba\u04bc\3\2\2\2\u04bb\u04b0\3\2\2\2\u04bb\u04bc\3\2\2\2\u04bc\u04bd"+
		"\3\2\2\2\u04bd\u04be\7\u018a\2\2\u04be\u04c5\5\u0300\u0181\2\u04bf\u04c4"+
		"\5\u00caf\2\u04c0\u04c4\5\16\b\2\u04c1\u04c4\5\22\n\2\u04c2\u04c4\7\u0081"+
		"\2\2\u04c3\u04bf\3\2\2\2\u04c3\u04c0\3\2\2\2\u04c3\u04c1\3\2\2\2\u04c3"+
		"\u04c2\3\2\2\2\u04c4\u04c7\3\2\2\2\u04c5\u04c3\3\2\2\2\u04c5\u04c6\3\2"+
		"\2\2\u04c6\u04dc\3\2\2\2\u04c7\u04c5\3\2\2\2\u04c8\u04ca\7\u0161\2\2\u04c9"+
		"\u04c8\3\2\2\2\u04c9\u04ca\3\2\2\2\u04ca\u04cb\3\2\2\2\u04cb\u04d7\t\3"+
		"\2\2\u04cc\u04ce\7w\2\2\u04cd\u04cc\3\2\2\2\u04cd\u04ce\3\2\2\2\u04ce"+
		"\u04d2\3\2\2\2\u04cf\u04d1\5\u00dco\2\u04d0\u04cf\3\2\2\2\u04d1\u04d4"+
		"\3\2\2\2\u04d2\u04d0\3\2\2\2\u04d2\u04d3\3\2\2\2\u04d3\u04d5\3\2\2\2\u04d4"+
		"\u04d2\3\2\2\2\u04d5\u04d8\5\u0126\u0094\2\u04d6\u04d8\5\u00ceh\2\u04d7"+
		"\u04cd\3\2\2\2\u04d7\u04d6\3\2\2\2\u04d8\u04dd\3\2\2\2\u04d9\u04da\t\4"+
		"\2\2\u04da\u04db\7\u0209\2\2\u04db\u04dd\5\u02be\u0160\2\u04dc\u04c9\3"+
		"\2\2\2\u04dc\u04d9\3\2\2\2\u04dd\u04de\3\2\2\2\u04de\u04df\7\u0277\2\2"+
		"\u04df-\3\2\2\2\u04e0\u04e1\7\u016f\2\2\u04e1\u04ed\5\u031c\u018f\2\u04e2"+
		"\u04e3\7\u026a\2\2\u04e3\u04e8\5\u00d8m\2\u04e4\u04e5\7\u0271\2\2\u04e5"+
		"\u04e7\5\u00d8m\2\u04e6\u04e4\3\2\2\2\u04e7\u04ea\3\2\2\2\u04e8\u04e6"+
		"\3\2\2\2\u04e8\u04e9\3\2\2\2\u04e9\u04eb\3\2\2\2\u04ea\u04e8\3\2\2\2\u04eb"+
		"\u04ec\7\u026b\2\2\u04ec\u04ee\3\2\2\2\u04ed\u04e2\3\2\2\2\u04ed\u04ee"+
		"\3\2\2\2\u04ee\u04ef\3\2\2\2\u04ef\u04fc\t\3\2\2\u04f0\u04f2\7w\2\2\u04f1"+
		"\u04f0\3\2\2\2\u04f1\u04f2\3\2\2\2\u04f2\u04f6\3\2\2\2\u04f3\u04f5\5\u00dc"+
		"o\2\u04f4\u04f3\3\2\2\2\u04f5\u04f8\3\2\2\2\u04f6\u04f4\3\2\2\2\u04f6"+
		"\u04f7\3\2\2\2\u04f7\u04f9\3\2\2\2\u04f8\u04f6\3\2\2\2\u04f9\u04fd\5\u0126"+
		"\u0094\2\u04fa\u04fd\5\u00ceh\2\u04fb\u04fd\7\u00a4\2\2\u04fc\u04f1\3"+
		"\2\2\2\u04fc\u04fa\3\2\2\2\u04fc\u04fb\3\2\2\2\u04fd\u04fe\3\2\2\2\u04fe"+
		"\u04ff\7\u0277\2\2\u04ff/\3\2\2\2\u0500\u0503\7c\2\2\u0501\u0502\7\u014d"+
		"\2\2\u0502\u0504\7\u0184\2\2\u0503\u0501\3\2\2\2\u0503\u0504\3\2\2\2\u0504"+
		"\u0505\3\2\2\2\u0505\u0506\7\u016f\2\2\u0506\u0512\5\u02d6\u016c\2\u0507"+
		"\u0508\7\u026a\2\2\u0508\u050d\5\u00d8m\2\u0509\u050a\7\u0271\2\2\u050a"+
		"\u050c\5\u00d8m\2\u050b\u0509\3\2\2\2\u050c\u050f\3\2\2\2\u050d\u050b"+
		"\3\2\2\2\u050d\u050e\3\2\2\2\u050e\u0510\3\2\2\2\u050f\u050d\3\2\2\2\u0510"+
		"\u0511\7\u026b\2\2\u0511\u0513\3\2\2\2\u0512\u0507\3\2\2\2\u0512\u0513"+
		"\3\2\2\2\u0513\u0515\3\2\2\2\u0514\u0516\5\u00caf\2\u0515\u0514\3\2\2"+
		"\2\u0515\u0516\3\2\2\2\u0516\u0517\3\2\2\2\u0517\u0524\t\3\2\2\u0518\u051a"+
		"\7w\2\2\u0519\u0518\3\2\2\2\u0519\u051a\3\2\2\2\u051a\u051e\3\2\2\2\u051b"+
		"\u051d\5\u00dco\2\u051c\u051b\3\2\2\2\u051d\u0520\3\2\2\2\u051e\u051c"+
		"\3\2\2\2\u051e\u051f\3\2\2\2\u051f\u0521\3\2\2\2\u0520\u051e\3\2\2\2\u0521"+
		"\u0525\5\u0126\u0094\2\u0522\u0525\5\u00ceh\2\u0523\u0525\7\u00a4\2\2"+
		"\u0524\u0519\3\2\2\2\u0524\u0522\3\2\2\2\u0524\u0523\3\2\2\2\u0525\u0526"+
		"\3\2\2\2\u0526\u0527\7\u0277\2\2\u0527\61\3\2\2\2\u0528\u0529\7\u0088"+
		"\2\2\u0529\u052a\7\u01f3\2\2\u052a\u052b\5\u02da\u016e\2\u052b\u052c\7"+
		"\u0277\2\2\u052c\63\3\2\2\2\u052d\u052e\7\f\2\2\u052e\u052f\7\u01f3\2"+
		"\2\u052f\u0542\5\u02da\u016e\2\u0530\u0543\t\b\2\2\u0531\u0532\7\u0183"+
		"\2\2\u0532\u0533\7\u01ed\2\2\u0533\u0543\5\u02da\u016e\2\u0534\u0536\7"+
		"M\2\2\u0535\u0537\7t\2\2\u0536\u0535\3\2\2\2\u0536\u0537\3\2\2\2\u0537"+
		"\u053b\3\2\2\2\u0538\u053a\5\u00ccg\2\u0539\u0538\3\2\2\2\u053a\u053d"+
		"\3\2\2\2\u053b\u0539\3\2\2\2\u053b\u053c\3\2\2\2\u053c\u0540\3\2\2\2\u053d"+
		"\u053b\3\2\2\2\u053e\u053f\7\u018b\2\2\u053f\u0541\7\u01ac\2\2\u0540\u053e"+
		"\3\2\2\2\u0540\u0541\3\2\2\2\u0541\u0543\3\2\2\2\u0542\u0530\3\2\2\2\u0542"+
		"\u0531\3\2\2\2\u0542\u0534\3\2\2\2\u0543\u0544\3\2\2\2\u0544\u0545\7\u0277"+
		"\2\2\u0545\65\3\2\2\2\u0546\u0549\7c\2\2\u0547\u0548\7\u014d\2\2\u0548"+
		"\u054a\7\u0184\2\2\u0549\u0547\3\2\2\2\u0549\u054a\3\2\2\2\u054a\u054b"+
		"\3\2\2\2\u054b\u054c\7\u01f3\2\2\u054c\u0550\5\u02da\u016e\2\u054d\u0551"+
		"\5<\37\2\u054e\u0551\5@!\2\u054f\u0551\5B\"\2\u0550\u054d\3\2\2\2\u0550"+
		"\u054e\3\2\2\2\u0550\u054f\3\2\2\2\u0551\u0553\3\2\2\2\u0552\u0554\58"+
		"\35\2\u0553\u0552\3\2\2\2\u0553\u0554\3\2\2\2\u0554\u0556\3\2\2\2\u0555"+
		"\u0557\t\b\2\2\u0556\u0555\3\2\2\2\u0556\u0557\3\2\2\2\u0557\u0559\3\2"+
		"\2\2\u0558\u055a\5:\36\2\u0559\u0558\3\2\2\2\u0559\u055a\3\2\2\2\u055a"+
		"\u055b\3\2\2\2\u055b\u055c\5D#\2\u055c\u055d\7\u0277\2\2\u055d\67\3\2"+
		"\2\2\u055e\u055f\7\u00af\2\2\u055f\u0564\5\u02da\u016e\2\u0560\u0561\7"+
		"\u0271\2\2\u0561\u0563\5\u02da\u016e\2\u0562\u0560\3\2\2\2\u0563\u0566"+
		"\3\2\2\2\u0564\u0562\3\2\2\2\u0564\u0565\3\2\2\2\u05659\3\2\2\2\u0566"+
		"\u0564\3\2\2\2\u0567\u0568\7\u021c\2\2\u0568\u0569\7\u026a\2\2\u0569\u056a"+
		"\5\u020a\u0106\2\u056a\u056b\7\u026b\2\2\u056b;\3\2\2\2\u056c\u0571\7"+
		"!\2\2\u056d\u0571\7\7\2\2\u056e\u056f\7\u00d5\2\2\u056f\u0571\7\u0142"+
		"\2\2\u0570\u056c\3\2\2\2\u0570\u056d\3\2\2\2\u0570\u056e\3\2\2\2\u0571"+
		"\u0572\3\2\2\2\u0572\u0574\5L\'\2\u0573\u0575\5R*\2\u0574\u0573\3\2\2"+
		"\2\u0574\u0575\3\2\2\2\u0575\u0577\3\2\2\2\u0576\u0578\5> \2\u0577\u0576"+
		"\3\2\2\2\u0577\u0578\3\2\2\2\u0578=\3\2\2\2\u0579\u057a\7\u00b3\2\2\u057a"+
		"\u057b\7\u008b\2\2\u057b\u057c\7\u0193\2\2\u057c?\3\2\2\2\u057d\u057e"+
		"\7\u00b3\2\2\u057e\u0580\5L\'\2\u057f\u0581\5R*\2\u0580\u057f\3\2\2\2"+
		"\u0580\u0581\3\2\2\2\u0581A\3\2\2\2\u0582\u0583\t\t\2\2\u0583\u0588\5"+
		"J&\2\u0584\u0585\7\u014d\2\2\u0585\u0587\5J&\2\u0586\u0584\3\2\2\2\u0587"+
		"\u058a\3\2\2\2\u0588\u0586\3\2\2\2\u0588\u0589\3\2\2\2\u0589\u058b\3\2"+
		"\2\2\u058a\u0588\3\2\2\2\u058b\u0593\7\u0146\2\2\u058c\u0594\7m\2\2\u058d"+
		"\u058e\5\u02b8\u015d\2\u058e\u058f\7\u0261\2\2\u058f\u0591\3\2\2\2\u0590"+
		"\u058d\3\2\2\2\u0590\u0591\3\2\2\2\u0591\u0592\3\2\2\2\u0592\u0594\7\u019c"+
		"\2\2\u0593\u058c\3\2\2\2\u0593\u0590\3\2\2\2\u0594C\3\2\2\2\u0595\u0596"+
		"\7O\2\2\u0596\u059b\7\u01f3\2\2\u0597\u0598\7\64\2\2\u0598\u059b\5\u031c"+
		"\u018f\2\u0599\u059b\5\u012a\u0096\2\u059a\u0595\3\2\2\2\u059a\u0597\3"+
		"\2\2\2\u059a\u0599\3\2\2\2\u059bE\3\2\2\2\u059c\u059d\7O\2\2\u059d\u05a1"+
		"\7\u01f3\2\2\u059e\u05a0\5\u00dco\2\u059f\u059e\3\2\2\2\u05a0\u05a3\3"+
		"\2\2\2\u05a1\u059f\3\2\2\2\u05a1\u05a2\3\2\2\2\u05a2\u05a5\3\2\2\2\u05a3"+
		"\u05a1\3\2\2\2\u05a4\u05a6\5H%\2\u05a5\u05a4\3\2\2\2\u05a6\u05a7\3\2\2"+
		"\2\u05a7\u05a5\3\2\2\2\u05a7\u05a8\3\2\2\2\u05a8\u05a9\3\2\2\2\u05a9\u05aa"+
		"\7\u0094\2\2\u05aa\u05ab\5\u02da\u016e\2\u05abG\3\2\2\2\u05ac\u05ad\7"+
		"!\2\2\u05ad\u05ae\7\u01c5\2\2\u05ae\u05af\7\u00e2\2\2\u05af\u05b0\5\u012a"+
		"\u0096\2\u05b0\u05b1\7!\2\2\u05b1\u05b2\7\u01c5\2\2\u05b2\u05b3\7\u0277"+
		"\2\2\u05b3\u05d1\3\2\2\2\u05b4\u05b5\7!\2\2\u05b5\u05b6\7\u008b\2\2\u05b6"+
		"\u05b7\7\u0193\2\2\u05b7\u05b8\7\u00e2\2\2\u05b8\u05b9\5\u012a\u0096\2"+
		"\u05b9\u05ba\7!\2\2\u05ba\u05bb\7\u008b\2\2\u05bb\u05bc\7\u0193\2\2\u05bc"+
		"\u05bd\7\u0277\2\2\u05bd\u05d1\3\2\2\2\u05be\u05bf\7\7\2\2\u05bf\u05c0"+
		"\7\u01c5\2\2\u05c0\u05c1\7\u00e2\2\2\u05c1\u05c2\5\u012a\u0096\2\u05c2"+
		"\u05c3\7\7\2\2\u05c3\u05c4\7\u01c5\2\2\u05c4\u05c5\7\u0277\2\2\u05c5\u05d1"+
		"\3\2\2\2\u05c6\u05c7\7\7\2\2\u05c7\u05c8\7\u008b\2\2\u05c8\u05c9\7\u0193"+
		"\2\2\u05c9\u05ca\7\u00e2\2\2\u05ca\u05cb";
	private static final String _serializedATNSegment1 =
		"\5\u012a\u0096\2\u05cb\u05cc\7\7\2\2\u05cc\u05cd\7\u008b\2\2\u05cd\u05ce"+
		"\7\u0193\2\2\u05ce\u05cf\7\u0277\2\2\u05cf\u05d1\3\2\2\2\u05d0\u05ac\3"+
		"\2\2\2\u05d0\u05b4\3\2\2\2\u05d0\u05be\3\2\2\2\u05d0\u05c6\3\2\2\2\u05d1"+
		"I\3\2\2\2\u05d2\u05ed\7\f\2\2\u05d3\u05ed\7\r\2\2\u05d4\u05d5\7\26\2\2"+
		"\u05d5\u05ed\7\u01c7\2\2\u05d6\u05ed\7\33\2\2\u05d7\u05ed\7I\2\2\u05d8"+
		"\u05ed\7c\2\2\u05d9\u05da\7\u0084\2\2\u05da\u05ed\7\u01c7\2\2\u05db\u05ed"+
		"\7\u0088\2\2\u05dc\u05ed\7\u00b9\2\2\u05dd\u05ed\7\u0129\2\2\u05de\u05ed"+
		"\7\u0183\2\2\u05df\u05ed\7\u018d\2\2\u05e0\u05ed\7\u01f5\2\2\u05e1\u05ed"+
		"\7s\2\2\u05e2\u05ed\7\u01c3\2\2\u05e3\u05ed\7\u01af\2\2\u05e4\u05ed\7"+
		"q\2\2\u05e5\u05ed\7\u0103\2\2\u05e6\u05ed\7\u0102\2\2\u05e7\u05ed\7\u01a8"+
		"\2\2\u05e8\u05ed\7\u01cf\2\2\u05e9\u05ed\7m\2\2\u05ea\u05ed\7\u019c\2"+
		"\2\u05eb\u05ed\7\u00af\2\2\u05ec\u05d2\3\2\2\2\u05ec\u05d3\3\2\2\2\u05ec"+
		"\u05d4\3\2\2\2\u05ec\u05d6\3\2\2\2\u05ec\u05d7\3\2\2\2\u05ec\u05d8\3\2"+
		"\2\2\u05ec\u05d9\3\2\2\2\u05ec\u05db\3\2\2\2\u05ec\u05dc\3\2\2\2\u05ec"+
		"\u05dd\3\2\2\2\u05ec\u05de\3\2\2\2\u05ec\u05df\3\2\2\2\u05ec\u05e0\3\2"+
		"\2\2\u05ec\u05e1\3\2\2\2\u05ec\u05e2\3\2\2\2\u05ec\u05e3\3\2\2\2\u05ec"+
		"\u05e4\3\2\2\2\u05ec\u05e5\3\2\2\2\u05ec\u05e6\3\2\2\2\u05ec\u05e7\3\2"+
		"\2\2\u05ec\u05e8\3\2\2\2\u05ec\u05e9\3\2\2\2\u05ec\u05ea\3\2\2\2\u05ec"+
		"\u05eb\3\2\2\2\u05edK\3\2\2\2\u05ee\u05f3\5N(\2\u05ef\u05f0\7\u014d\2"+
		"\2\u05f0\u05f2\5N(\2\u05f1\u05ef\3\2\2\2\u05f2\u05f5\3\2\2\2\u05f3\u05f1"+
		"\3\2\2\2\u05f3\u05f4\3\2\2\2\u05f4\u05f6\3\2\2\2\u05f5\u05f3\3\2\2\2\u05f6"+
		"\u05f8\7\u0146\2\2\u05f7\u05f9\5P)\2\u05f8\u05f7\3\2\2\2\u05f8\u05f9\3"+
		"\2\2\2\u05f9\u05fa\3\2\2\2\u05fa\u05fb\5\u02ea\u0176\2\u05fbM\3\2\2\2"+
		"\u05fc\u0606\t\n\2\2\u05fd\u05fe\7\u0142\2\2\u05fe\u0603\5\u02e8\u0175"+
		"\2\u05ff\u0600\7\u0271\2\2\u0600\u0602\5\u02e8\u0175\2\u0601\u05ff\3\2"+
		"\2\2\u0602\u0605\3\2\2\2\u0603\u0601\3\2\2\2\u0603\u0604\3\2\2\2\u0604"+
		"\u0607\3\2\2\2\u0605\u0603\3\2\2\2\u0606\u05fd\3\2\2\2\u0606\u0607\3\2"+
		"\2\2\u0607O\3\2\2\2\u0608\u0609\7\u0125\2\2\u0609\u060a\7\u01d4\2\2\u060a"+
		"\u060b\5\u02ea\u0176\2\u060b\u060c\7\u0142\2\2\u060cQ\3\2\2\2\u060d\u060f"+
		"\7\u017a\2\2\u060e\u0610\5T+\2\u060f\u060e\3\2\2\2\u0610\u0611\3\2\2\2"+
		"\u0611\u060f\3\2\2\2\u0611\u0612\3\2\2\2\u0612S\3\2\2\2\u0613\u0614\t"+
		"\13\2\2\u0614\u0615\5\u02a0\u0151\2\u0615U\3\2\2\2\u0616\u0617\7\u0088"+
		"\2\2\u0617\u0619\7\u01f7\2\2\u0618\u061a\7-\2\2\u0619\u0618\3\2\2\2\u0619"+
		"\u061a\3\2\2\2\u061a\u061b\3\2\2\2\u061b\u061d\5\u02ce\u0168\2\u061c\u061e"+
		"\t\f\2\2\u061d\u061c\3\2\2\2\u061d\u061e\3\2\2\2\u061e\u061f\3\2\2\2\u061f"+
		"\u0620\7\u0277\2\2\u0620W\3\2\2\2\u0621\u0622\7\f\2\2\u0622\u0623\7\u01f7"+
		"\2\2\u0623\u0629\5\u02ce\u0168\2\u0624\u062a\5Z.\2\u0625\u062a\5\\/\2"+
		"\u0626\u062a\5^\60\2\u0627\u062a\5f\64\2\u0628\u062a\5\u008aF\2\u0629"+
		"\u0624\3\2\2\2\u0629\u0625\3\2\2\2\u0629\u0626\3\2\2\2\u0629\u0627\3\2"+
		"\2\2\u0629\u0628\3\2\2\2\u062a\u062c\3\2\2\2\u062b\u062d\5h\65\2\u062c"+
		"\u062b\3\2\2\2\u062c\u062d\3\2\2\2\u062d\u062e\3\2\2\2\u062e\u062f\7\u0277"+
		"\2\2\u062fY\3\2\2\2\u0630\u0632\7M\2\2\u0631\u0633\7t\2\2\u0632\u0631"+
		"\3\2\2\2\u0632\u0633\3\2\2\2\u0633\u0635\3\2\2\2\u0634\u0636\t\r\2\2\u0635"+
		"\u0634\3\2\2\2\u0635\u0636\3\2\2\2\u0636\u063a\3\2\2\2\u0637\u0639\5\u00cc"+
		"g\2\u0638\u0637\3\2\2\2\u0639\u063c\3\2\2\2\u063a\u0638\3\2\2\2\u063a"+
		"\u063b\3\2\2\2\u063b\u063f\3\2\2\2\u063c\u063a\3\2\2\2\u063d\u063e\7\u018b"+
		"\2\2\u063e\u0640\7\u01ac\2\2\u063f\u063d\3\2\2\2\u063f\u0640\3\2\2\2\u0640"+
		"[\3\2\2\2\u0641\u0643\7\u0184\2\2\u0642\u0644\5\u00caf\2\u0643\u0642\3"+
		"\2\2\2\u0643\u0644\3\2\2\2\u0644\u0645\3\2\2\2\u0645\u0646\7\21\2\2\u0646"+
		"\u0647\7\u0140\2\2\u0647\u0648\7\u026a\2\2\u0648\u064d\5\u008cG\2\u0649"+
		"\u064a\7\u0271\2\2\u064a\u064c\5\u008cG\2\u064b\u0649\3\2\2\2\u064c\u064f"+
		"\3\2\2\2\u064d\u064b\3\2\2\2\u064d\u064e\3\2\2\2\u064e\u0650\3\2\2\2\u064f"+
		"\u064d\3\2\2\2\u0650\u0651\7\u026b\2\2\u0651]\3\2\2\2\u0652\u0657\5`\61"+
		"\2\u0653\u0654\7\u0271\2\2\u0654\u0656\5`\61\2\u0655\u0653\3\2\2\2\u0656"+
		"\u0659\3\2\2\2\u0657\u0655\3\2\2\2\u0657\u0658\3\2\2\2\u0658_\3\2\2\2"+
		"\u0659\u0657\3\2\2\2\u065a\u065d\t\16\2\2\u065b\u065e\5\u009eP\2\u065c"+
		"\u065e\5\u0094K\2\u065d\u065b\3\2\2\2\u065d\u065c\3\2\2\2\u065ea\3\2\2"+
		"\2\u065f\u0660\t\17\2\2\u0660\u066d\7\32\2\2\u0661\u066e\5d\63\2\u0662"+
		"\u0663\7\u026a\2\2\u0663\u0668\5d\63\2\u0664\u0665\7\u0271\2\2\u0665\u0667"+
		"\5d\63\2\u0666\u0664\3\2\2\2\u0667\u066a\3\2\2\2\u0668\u0666\3\2\2\2\u0668"+
		"\u0669\3\2\2\2\u0669\u066b\3\2\2\2\u066a\u0668\3\2\2\2\u066b\u066c\7\u026b"+
		"\2\2\u066c\u066e\3\2\2\2\u066d\u0661\3\2\2\2\u066d\u0662\3\2\2\2\u066e"+
		"c\3\2\2\2\u066f\u0671\5\u02b0\u0159\2\u0670\u0672\5\u0300\u0181\2\u0671"+
		"\u0670\3\2\2\2\u0671\u0672\3\2\2\2\u0672e\3\2\2\2\u0673\u0679\7\u0116"+
		"\2\2\u0674\u0675\7\u00fa\2\2\u0675\u067a\5\u020c\u0107\2\u0676\u0677\7"+
		"\u008c\2\2\u0677\u0678\7\u01f7\2\2\u0678\u067a\5\u0300\u0181\2\u0679\u0674"+
		"\3\2\2\2\u0679\u0676\3\2\2\2\u067ag\3\2\2\2\u067b\u068c\7\u00e1\2\2\u067c"+
		"\u0686\7\67\2\2\u067d\u067e\7Z\2\2\u067e\u067f\7\u01ed\2\2\u067f\u0687"+
		"\7\u01cb\2\2\u0680\u0682\7\u0134\2\2\u0681\u0680\3\2\2\2\u0681\u0682\3"+
		"\2\2\2\u0682\u0683\3\2\2\2\u0683\u0684\7\u00c6\2\2\u0684\u0685\7\u01d4"+
		"\2\2\u0685\u0687\7n\2\2\u0686\u067d\3\2\2\2\u0686\u0681\3\2\2\2\u0686"+
		"\u0687\3\2\2\2\u0687\u0689\3\2\2\2\u0688\u068a\5j\66\2\u0689\u0688\3\2"+
		"\2\2\u0689\u068a\3\2\2\2\u068a\u068c\3\2\2\2\u068b\u067b\3\2\2\2\u068b"+
		"\u067c\3\2\2\2\u068ci\3\2\2\2\u068d\u068f\7\u00b1\2\2\u068e\u068d\3\2"+
		"\2\2\u068e\u068f\3\2\2\2\u068f\u0690\3\2\2\2\u0690\u0691\7\u009c\2\2\u0691"+
		"\u0692\7\u00e0\2\2\u0692\u0693\5\u02ea\u0176\2\u0693k\3\2\2\2\u0694\u0697"+
		"\7c\2\2\u0695\u0696\7\u014d\2\2\u0696\u0698\7\u0184\2\2\u0697\u0695\3"+
		"\2\2\2\u0697\u0698\3\2\2\2\u0698\u0699\3\2\2\2\u0699\u069a\7\u01f7\2\2"+
		"\u069a\u069c\5p9\2\u069b\u069d\7\u0277\2\2\u069c\u069b\3\2\2\2\u069c\u069d"+
		"\3\2\2\2\u069dm\3\2\2\2\u069e\u06a1\7c\2\2\u069f\u06a0\7\u014d\2\2\u06a0"+
		"\u06a2\7\u0184\2\2\u06a1\u069f\3\2\2\2\u06a1\u06a2\3\2\2\2\u06a2\u06a3"+
		"\3\2\2\2\u06a3\u06a4\7\u01f7\2\2\u06a4\u06a6\5|?\2\u06a5\u06a7\7\u0277"+
		"\2\2\u06a6\u06a5\3\2\2\2\u06a6\u06a7\3\2\2\2\u06a7o\3\2\2\2\u06a8\u06ab"+
		"\5\u02ce\u0168\2\u06a9\u06aa\7\u0143\2\2\u06aa\u06ac\7\u0266\2\2\u06ab"+
		"\u06a9\3\2\2\2\u06ab\u06ac\3\2\2\2\u06ac\u06ae\3\2\2\2\u06ad\u06af\5r"+
		":\2\u06ae\u06ad\3\2\2\2\u06ae\u06af\3\2\2\2\u06afq\3\2\2\2\u06b0\u06b2"+
		"\5\u00caf\2\u06b1\u06b0\3\2\2\2\u06b1\u06b2\3\2\2\2\u06b2\u06b5\3\2\2"+
		"\2\u06b3\u06b6\5t;\2\u06b4\u06b6\5v<\2\u06b5\u06b3\3\2\2\2\u06b5\u06b4"+
		"\3\2\2\2\u06b6\u06b8\3\2\2\2\u06b7\u06b9\5z>\2\u06b8\u06b7\3\2\2\2\u06b8"+
		"\u06b9\3\2\2\2\u06b9\u06c5\3\2\2\2\u06ba\u06bb\7\u026a\2\2\u06bb\u06c0"+
		"\5\u008cG\2\u06bc\u06bd\7\u0271\2\2\u06bd\u06bf\5\u008cG\2\u06be\u06bc"+
		"\3\2\2\2\u06bf\u06c2\3\2\2\2\u06c0\u06be\3\2\2\2\u06c0\u06c1\3\2\2\2\u06c1"+
		"\u06c3\3\2\2\2\u06c2\u06c0\3\2\2\2\u06c3\u06c4\7\u026b\2\2\u06c4\u06c6"+
		"\3\2\2\2\u06c5\u06ba\3\2\2\2\u06c5\u06c6\3\2\2\2\u06c6\u06ca\3\2\2\2\u06c7"+
		"\u06c9\5\u008aF\2\u06c8\u06c7\3\2\2\2\u06c9\u06cc\3\2\2\2\u06ca\u06c8"+
		"\3\2\2\2\u06ca\u06cb\3\2\2\2\u06cbs\3\2\2\2\u06cc\u06ca\3\2\2\2\u06cd"+
		"\u06d1\t\3\2\2\u06ce\u06d2\7\u0140\2\2\u06cf\u06d2\5\u00f8}\2\u06d0\u06d2"+
		"\5x=\2\u06d1\u06ce\3\2\2\2\u06d1\u06cf\3\2\2\2\u06d1\u06d0\3\2\2\2\u06d2"+
		"u\3\2\2\2\u06d3\u06d4\7\u01fb\2\2\u06d4\u06d5\5\u0300\u0181\2\u06d5w\3"+
		"\2\2\2\u06d6\u06d7\7\u01d4\2\2\u06d7\u06d8\7\u0142\2\2\u06d8\u06db\5\u0300"+
		"\u0181\2\u06d9\u06da\7\u0134\2\2\u06da\u06dc\7\u0138\2\2\u06db\u06d9\3"+
		"\2\2\2\u06db\u06dc\3\2\2\2\u06dcy\3\2\2\2\u06dd\u06de\7\u00a4\2\2\u06de"+
		"\u06df\7\u011b\2\2\u06df\u06e0\5\u020c\u0107\2\u06e0\u06e1\7\u00e9\2\2"+
		"\u06e1\u06e2\7\u00e5\2\2\u06e2\u06e3\7\u0209\2\2\u06e3\u06e4\t\20\2\2"+
		"\u06e4{\3\2\2\2\u06e5\u06e6\7-\2\2\u06e6\u06e7\5\u02ce\u0168\2\u06e7\u06e9"+
		"\t\3\2\2\u06e8\u06ea\5~@\2\u06e9\u06e8\3\2\2\2\u06ea\u06eb\3\2\2\2\u06eb"+
		"\u06e9\3\2\2\2\u06eb\u06ec\3\2\2\2\u06ec\u06ed\3\2\2\2\u06ed\u06ee\7\u0094"+
		"\2\2\u06ee}\3\2\2\2\u06ef\u06f2\5\u0080A\2\u06f0\u06f2\5\u0082B\2\u06f1"+
		"\u06ef\3\2\2\2\u06f1\u06f0\3\2\2\2\u06f2\177\3\2\2\2\u06f3\u06f4\t\21"+
		"\2\2\u06f4\u06f5\7\u010e\2\2\u06f5\u06f6\5\u0086D\2\u06f6\u0081\3\2\2"+
		"\2\u06f7\u06f9\t\22\2\2\u06f8\u06f7\3\2\2\2\u06f8\u06f9\3\2\2\2\u06f9"+
		"\u06fd\3\2\2\2\u06fa\u06fe\5\u0084C\2\u06fb\u06fe\5\u0086D\2\u06fc\u06fe"+
		"\5\u0088E\2\u06fd\u06fa\3\2\2\2\u06fd\u06fb\3\2\2\2\u06fd\u06fc\3\2\2"+
		"\2\u06fe\u0083\3\2\2\2\u06ff\u0700\7\u016f\2\2\u0700\u0701\5\u02d6\u016c"+
		"\2\u0701\u0702\7\u026a\2\2\u0702\u0707\5\u00d8m\2\u0703\u0704\7\u0271"+
		"\2\2\u0704\u0706\5\u00d8m\2\u0705\u0703\3\2\2\2\u0706\u0709\3\2\2\2\u0707"+
		"\u0705\3\2\2\2\u0707\u0708\3\2\2\2\u0708\u070a\3\2\2\2\u0709\u0707\3\2"+
		"\2\2\u070a\u070b\7\u026b\2\2\u070b\u0719\t\3\2\2\u070c\u071a\5\u00ceh"+
		"\2\u070d\u070f\7w\2\2\u070e\u070d\3\2\2\2\u070e\u070f\3\2\2\2\u070f\u0713"+
		"\3\2\2\2\u0710\u0712\5\u00dco\2\u0711\u0710\3\2\2\2\u0712\u0715\3\2\2"+
		"\2\u0713\u0711\3\2\2\2\u0713\u0714\3\2\2\2\u0714\u0716\3\2\2\2\u0715\u0713"+
		"\3\2\2\2\u0716\u0717\5\u0126\u0094\2\u0717\u0718\7\u0277\2\2\u0718\u071a"+
		"\3\2\2\2\u0719\u070c\3\2\2\2\u0719\u070e\3\2\2\2\u071a\u0085\3\2\2\2\u071b"+
		"\u071c\7\u00b7\2\2\u071c\u0728\5\u02d4\u016b\2\u071d\u071e\7\u026a\2\2"+
		"\u071e\u0723\5\u00d8m\2\u071f\u0720\7\u0271\2\2\u0720\u0722\5\u00d8m\2"+
		"\u0721\u071f\3\2\2\2\u0722\u0725\3\2\2\2\u0723\u0721\3\2\2\2\u0723\u0724"+
		"\3\2\2\2\u0724\u0726\3\2\2\2\u0725\u0723\3\2\2\2\u0726\u0727\7\u026b\2"+
		"\2\u0727\u0729\3\2\2\2\u0728\u071d\3\2\2\2\u0728\u0729\3\2\2\2\u0729\u072a"+
		"\3\2\2\2\u072a\u072b\7\u018a\2\2\u072b\u072c\5\u0300\u0181\2\u072c\u073a"+
		"\t\3\2\2\u072d\u073b\5\u00ceh\2\u072e\u0730\7w\2\2\u072f\u072e\3\2\2\2"+
		"\u072f\u0730\3\2\2\2\u0730\u0734\3\2\2\2\u0731\u0733\5\u00dco\2\u0732"+
		"\u0731\3\2\2\2\u0733\u0736\3\2\2\2\u0734\u0732\3\2\2\2\u0734\u0735\3\2"+
		"\2\2\u0735\u0737\3\2\2\2\u0736\u0734\3\2\2\2\u0737\u0738\5\u0126\u0094"+
		"\2\u0738\u0739\7\u0277\2\2\u0739\u073b\3\2\2\2\u073a\u072d\3\2\2\2\u073a"+
		"\u072f\3\2\2\2\u073b\u0087\3\2\2\2\u073c\u073e\7\u00a9\2\2\u073d\u073c"+
		"\3\2\2\2\u073d\u073e\3\2\2\2\u073e\u0740\3\2\2\2\u073f\u0741\7\u00d4\2"+
		"\2\u0740\u073f\3\2\2\2\u0740\u0741\3\2\2\2\u0741\u0742\3\2\2\2\u0742\u0743"+
		"\7V\2\2\u0743\u0744\7\u00b7\2\2\u0744\u0758\5\u02d8\u016d\2\u0745\u074c"+
		"\7\u026a\2\2\u0746\u0747\7\u01a3\2\2\u0747\u0748\7\u00ce\2\2\u0748\u0749"+
		"\7\u0150\2\2\u0749\u074a\5\u0300\u0181\2\u074a\u074b\7\u0271\2\2\u074b"+
		"\u074d\3\2\2\2\u074c\u0746\3\2\2\2\u074c\u074d\3\2\2\2\u074d\u074e\3\2"+
		"\2\2\u074e\u0753\5\u00d8m\2\u074f\u0750\7\u0271\2\2\u0750\u0752\5\u00d8"+
		"m\2\u0751\u074f\3\2\2\2\u0752\u0755\3\2\2\2\u0753\u0751\3\2\2\2\u0753"+
		"\u0754\3\2\2\2\u0754\u0756\3\2\2\2\u0755\u0753\3\2\2\2\u0756\u0757\7\u026b"+
		"\2\2\u0757\u0759\3\2\2\2\u0758\u0745\3\2\2\2\u0758\u0759\3\2\2\2\u0759"+
		"\u075a\3\2\2\2\u075a\u075b\7\u018a\2\2\u075b\u075c\7\u01a3\2\2\u075c\u075d"+
		"\7\21\2\2\u075d\u075e\7\u0188\2\2\u075e\u076c\t\3\2\2\u075f\u076d\5\u00ce"+
		"h\2\u0760\u0762\7w\2\2\u0761\u0760\3\2\2\2\u0761\u0762\3\2\2\2\u0762\u0766"+
		"\3\2\2\2\u0763\u0765\5\u00dco\2\u0764\u0763\3\2\2\2\u0765\u0768\3\2\2"+
		"\2\u0766\u0764\3\2\2\2\u0766\u0767\3\2\2\2\u0767\u0769\3\2\2\2\u0768\u0766"+
		"\3\2\2\2\u0769\u076a\5\u0126\u0094\2\u076a\u076b\7\u0277\2\2\u076b\u076d"+
		"\3\2\2\2\u076c\u075f\3\2\2\2\u076c\u0761\3\2\2\2\u076d\u0089\3\2\2\2\u076e"+
		"\u0770\7\u0134\2\2\u076f\u076e\3\2\2\2\u076f\u0770\3\2\2\2\u0770\u0771"+
		"\3\2\2\2\u0771\u0772\t\23\2\2\u0772\u008b\3\2\2\2\u0773\u0774\5\u031c"+
		"\u018f\2\u0774\u0776\5\u0300\u0181\2\u0775\u0777\5\u008eH\2\u0776\u0775"+
		"\3\2\2\2\u0776\u0777\3\2\2\2\u0777\u077a\3\2\2\2\u0778\u077a\5\u0090I"+
		"\2\u0779\u0773\3\2\2\2\u0779\u0778\3\2\2\2\u077a\u008d\3\2\2\2\u077b\u077c"+
		"\7\u00a4\2\2\u077c\u077d\7\u011b\2\2\u077d\u077e\5\u020c\u0107\2\u077e"+
		"\u008f\3\2\2\2\u077f\u0781\5\u008aF\2\u0780\u077f\3\2\2\2\u0780\u0781"+
		"\3\2\2\2\u0781\u0783\3\2\2\2\u0782\u0784\5\u0092J\2\u0783\u0782\3\2\2"+
		"\2\u0784\u0785\3\2\2\2\u0785\u0783\3\2\2\2\u0785\u0786\3\2\2\2\u0786\u0789"+
		"\3\2\2\2\u0787\u0788\7\u0271\2\2\u0788\u078a\5\u00a0Q\2\u0789\u0787\3"+
		"\2\2\2\u0789\u078a\3\2\2\2\u078a\u0091\3\2\2\2\u078b\u078f\5\u0094K\2"+
		"\u078c\u078f\5\u009cO\2\u078d\u078f\5\u009eP\2\u078e\u078b\3\2\2\2\u078e"+
		"\u078c\3\2\2\2\u078e\u078d\3\2\2\2\u078f\u0093\3\2\2\2\u0790\u0793\t\22"+
		"\2\2\u0791\u0794\5\u0096L\2\u0792\u0794\5\u009aN\2\u0793\u0791\3\2\2\2"+
		"\u0793\u0792\3\2\2\2\u0794\u0095\3\2\2\2\u0795\u0796\7\u016f\2\2\u0796"+
		"\u0797\5\u02d6\u016c\2\u0797\u07a0\7\u026a\2\2\u0798\u0799\7\u01a3\2\2"+
		"\u0799\u079a\7\u00ce\2\2\u079a\u079b\7\u0150\2\2\u079b\u079c\7\u012b\2"+
		"\2\u079c\u079e\5\u0300\u0181\2\u079d\u079f\7\u0271\2\2\u079e\u079d\3\2"+
		"\2\2\u079e\u079f\3\2\2\2\u079f\u07a1\3\2\2\2\u07a0\u0798\3\2\2\2\u07a0"+
		"\u07a1\3\2\2\2\u07a1\u07aa\3\2\2\2\u07a2\u07a7\5\u00d8m\2\u07a3\u07a4"+
		"\7\u0271\2\2\u07a4\u07a6\5\u00d8m\2\u07a5\u07a3\3\2\2\2\u07a6\u07a9\3"+
		"\2\2\2\u07a7\u07a5\3\2\2\2\u07a7\u07a8\3\2\2\2\u07a8\u07ab\3\2\2\2\u07a9"+
		"\u07a7\3\2\2\2\u07aa\u07a2\3\2\2\2\u07aa\u07ab\3\2\2\2\u07ab\u07ac\3\2"+
		"\2\2\u07ac\u07af\7\u026b\2\2\u07ad\u07ae\t\3\2\2\u07ae\u07b0\5\u00ceh"+
		"\2\u07af\u07ad\3\2\2\2\u07af\u07b0\3\2\2\2\u07b0\u0097\3\2\2\2\u07b1\u07ba"+
		"\5\u0302\u0182\2\u07b2\u07b4\7\u017b\2\2\u07b3\u07b2\3\2\2\2\u07b3\u07b4"+
		"\3\2\2\2\u07b4\u07b5\3\2\2\2\u07b5\u07b7\5\u02ce\u0168\2\u07b6\u07b8\t"+
		"\24\2\2\u07b7\u07b6\3\2\2\2\u07b7\u07b8\3\2\2\2\u07b8\u07ba\3\2\2\2\u07b9"+
		"\u07b1\3\2\2\2\u07b9\u07b3\3\2\2\2\u07ba\u0099\3\2\2\2\u07bb\u07bc\7\u00b7"+
		"\2\2\u07bc\u07d3\5\u02d4\u016b\2\u07bd\u07c6\7\u026a\2\2\u07be\u07bf\7"+
		"\u01a3\2\2\u07bf\u07c0\7\u00ce\2\2\u07c0\u07c1\7\u0150\2\2\u07c1\u07c2"+
		"\7\u012b\2\2\u07c2\u07c4\5\u0300\u0181\2\u07c3\u07c5\7\u0271\2\2\u07c4"+
		"\u07c3\3\2\2\2\u07c4\u07c5\3\2\2\2\u07c5\u07c7\3\2\2\2\u07c6\u07be\3\2"+
		"\2\2\u07c6\u07c7\3\2\2\2\u07c7\u07d0\3\2\2\2\u07c8\u07cd\5\u00d8m\2\u07c9"+
		"\u07ca\7\u0271\2\2\u07ca\u07cc\5\u00d8m\2\u07cb\u07c9\3\2\2\2\u07cc\u07cf"+
		"\3\2\2\2\u07cd\u07cb\3\2\2\2\u07cd\u07ce\3\2\2\2\u07ce\u07d1\3\2\2\2\u07cf"+
		"\u07cd\3\2\2\2\u07d0\u07c8\3\2\2\2\u07d0\u07d1\3\2\2\2\u07d1\u07d2\3\2"+
		"\2\2\u07d2\u07d4\7\u026b\2\2\u07d3\u07bd\3\2\2\2\u07d3\u07d4\3\2\2\2\u07d4"+
		"\u07d5\3\2\2\2\u07d5\u07da\7\u018a\2\2\u07d6\u07db\5\u0098M\2\u07d7\u07d8"+
		"\7\u01a3\2\2\u07d8\u07d9\7\21\2\2\u07d9\u07db\7\u0188\2\2\u07da\u07d6"+
		"\3\2\2\2\u07da\u07d7\3\2\2\2\u07db\u07e0\3\2\2\2\u07dc\u07df\5\16\b\2"+
		"\u07dd\u07df\7\u0081\2\2\u07de\u07dc\3\2\2\2\u07de\u07dd\3\2\2\2\u07df"+
		"\u07e2\3\2\2\2\u07e0\u07de\3\2\2\2\u07e0\u07e1\3\2\2\2\u07e1\u07eb\3\2"+
		"\2\2\u07e2\u07e0\3\2\2\2\u07e3\u07e4\t\3\2\2\u07e4\u07ec\5\u00ceh\2\u07e5"+
		"\u07e7\7\u00a4\2\2\u07e6\u07e8\7\u020f\2\2\u07e7\u07e6\3\2\2\2\u07e7\u07e8"+
		"\3\2\2\2\u07e8\u07e9\3\2\2\2\u07e9\u07ea\7\u011b\2\2\u07ea\u07ec\5\u020c"+
		"\u0107\2\u07eb\u07e3\3\2\2\2\u07eb\u07e5\3\2\2\2\u07eb\u07ec\3\2\2\2\u07ec"+
		"\u009b\3\2\2\2\u07ed\u07ef\7\u00a9\2\2\u07ee\u07ed\3\2\2\2\u07ee\u07ef"+
		"\3\2\2\2\u07ef\u07f1\3\2\2\2\u07f0\u07f2\7\u00d4\2\2\u07f1\u07f0\3\2\2"+
		"\2\u07f1\u07f2\3\2\2\2\u07f2\u07f3\3\2\2\2\u07f3\u07f4\7V\2\2\u07f4\u07f5"+
		"\7\u00b7\2\2\u07f5\u080c\5\u02d8\u016d\2\u07f6\u07ff\7\u026a\2\2\u07f7"+
		"\u07f8\7\u01a3\2\2\u07f8\u07f9\7\u00ce\2\2\u07f9\u07fa\7\u0150\2\2\u07fa"+
		"\u07fb\7\u012b\2\2\u07fb\u07fd\5\u0300\u0181\2\u07fc\u07fe\7\u0271\2\2"+
		"\u07fd\u07fc\3\2\2\2\u07fd\u07fe\3\2\2\2\u07fe\u0800\3\2\2\2\u07ff\u07f7"+
		"\3\2\2\2\u07ff\u0800\3\2\2\2\u0800\u0809\3\2\2\2\u0801\u0806\5\u00d8m"+
		"\2\u0802\u0803\7\u0271\2\2\u0803\u0805\5\u00d8m\2\u0804\u0802\3\2\2\2"+
		"\u0805\u0808\3\2\2\2\u0806\u0804\3\2\2\2\u0806\u0807\3\2\2\2\u0807\u080a"+
		"\3\2\2\2\u0808\u0806\3\2\2\2\u0809\u0801\3\2\2\2\u0809\u080a\3\2\2\2\u080a"+
		"\u080b\3\2\2\2\u080b\u080d\7\u026b\2\2\u080c\u07f6\3\2\2\2\u080c\u080d"+
		"\3\2\2\2\u080d\u080e\3\2\2\2\u080e\u080f\7\u018a\2\2\u080f\u0810\7\u01a3"+
		"\2\2\u0810\u0811\7\21\2\2\u0811\u0816\7\u0188\2\2\u0812\u0815\5\16\b\2"+
		"\u0813\u0815\7\u0081\2\2\u0814\u0812\3\2\2\2\u0814\u0813\3\2\2\2\u0815"+
		"\u0818\3\2\2\2\u0816\u0814\3\2\2\2\u0816\u0817\3\2\2\2\u0817\u081b\3\2"+
		"\2\2\u0818\u0816\3\2\2\2\u0819\u081a\t\3\2\2\u081a\u081c\5\u00ceh\2\u081b"+
		"\u0819\3\2\2\2\u081b\u081c\3\2\2\2\u081c\u009d\3\2\2\2\u081d\u081e\t\21"+
		"\2\2\u081e\u081f\7\u010e\2\2\u081f\u0820\5\u009aN\2\u0820\u009f\3\2\2"+
		"\2\u0821\u0822\7\u0169\2\2\u0822\u0823\7\u0186\2\2\u0823\u0824\7\u026a"+
		"\2\2\u0824\u0829\5\u00a2R\2\u0825\u0826\7\u0271\2\2\u0826\u0828\5\u00a2"+
		"R\2\u0827\u0825\3\2\2\2\u0828\u082b\3\2\2\2\u0829\u0827\3\2\2\2\u0829"+
		"\u082a\3\2\2\2\u082a\u082c\3\2\2\2\u082b\u0829\3\2\2\2\u082c\u082d\7\u026b"+
		"\2\2\u082d\u00a1\3\2\2\2\u082e\u0831\5\u031c\u018f\2\u082f\u0831\7z\2"+
		"\2\u0830\u082e\3\2\2\2\u0830\u082f\3\2\2\2\u0831\u00a3\3\2\2\2\u0832\u0833"+
		"\7\u0088\2\2\u0833\u0834\7\u01a4\2\2\u0834\u0835\5\u02d0\u0169\2\u0835"+
		"\u0836\7\u0277\2\2\u0836\u00a5\3\2\2\2\u0837\u0838\7\f\2\2\u0838\u0839"+
		"\7\u01a4\2\2\u0839\u083b\5\u02d0\u0169\2\u083a\u083c\5\u00aaV\2\u083b"+
		"\u083a\3\2\2\2\u083c\u083d\3\2\2\2\u083d\u083b\3\2\2\2\u083d\u083e\3\2"+
		"\2\2\u083e\u083f\3\2\2\2\u083f\u0840\7\u0277\2\2\u0840\u00a7\3\2\2\2\u0841"+
		"\u0842\7c\2\2\u0842\u0843\7\u01a4\2\2\u0843\u0848\5\u02d0\u0169\2\u0844"+
		"\u0847\5\u00acW\2\u0845\u0847\5\u00aaV\2\u0846\u0844\3\2\2\2\u0846\u0845"+
		"\3\2\2\2\u0847\u084a\3\2\2\2\u0848\u0846\3\2\2\2\u0848\u0849\3\2\2\2\u0849"+
		"\u084b\3\2\2\2\u084a\u0848\3\2\2\2\u084b\u084c\7\u0277\2\2\u084c\u00a9"+
		"\3\2\2\2\u084d\u084e\7\u00c7\2\2\u084e\u084f\7\62\2\2\u084f\u085d\7\u0262"+
		"\2\2\u0850\u0851\7\u010c\2\2\u0851\u085d\7\u0262\2\2\u0852\u085d\7\u012e"+
		"\2\2\u0853\u0854\7\u0112\2\2\u0854\u085d\7\u0262\2\2\u0855\u085d\7\u012f"+
		"\2\2\u0856\u085d\7l\2\2\u0857\u085d\7\u012c\2\2\u0858\u085d\7\u0289\2"+
		"\2\u0859\u085d\7\u012a\2\2\u085a\u085d\7\u014b\2\2\u085b\u085d\7\u0132"+
		"\2\2\u085c\u084d\3\2\2\2\u085c\u0850\3\2\2\2\u085c\u0852\3\2\2\2\u085c"+
		"\u0853\3\2\2\2\u085c\u0855\3\2\2\2\u085c\u0856\3\2\2\2\u085c\u0857\3\2"+
		"\2\2\u085c\u0858\3\2\2\2\u085c\u0859\3\2\2\2\u085c\u085a\3\2\2\2\u085c"+
		"\u085b\3\2\2\2\u085d\u00ab\3\2\2\2\u085e\u085f\7\u01c2\2\2\u085f\u0860"+
		"\7\u0220\2\2\u0860\u0861\7\u0262\2\2\u0861\u00ad\3\2\2\2\u0862\u0863\7"+
		"c\2\2\u0863\u0864\7\u01d4\2\2\u0864\u0865\5\u02ea\u0176\2\u0865\u0866"+
		"\7\u026a\2\2\u0866\u0867\5\u02e8\u0175\2\u0867\u086e\5\u0302\u0182\2\u0868"+
		"\u0869\7\u0271\2\2\u0869\u086a\5\u02e8\u0175\2\u086a\u086b\5\u0302\u0182"+
		"\2\u086b\u086d\3\2\2\2\u086c\u0868\3\2\2\2\u086d\u0870\3\2\2\2\u086e\u086c"+
		"\3\2\2\2\u086e\u086f\3\2\2\2\u086f\u0871\3\2\2\2\u0870\u086e\3\2\2\2\u0871"+
		"\u0872\7\u026b\2\2\u0872\u00af\3\2\2\2\u0873\u0874\7c\2\2\u0874\u0875"+
		"\7\u0216\2\2\u0875\u0876\5\u02ea\u0176\2\u0876\u0877\5\u014e\u00a8\2\u0877"+
		"\u00b1\3\2\2\2\u0878\u0879\7\u0088\2\2\u0879\u087a\7\u01d4\2\2\u087a\u087b"+
		"\5\u02ea\u0176\2\u087b\u00b3\3\2\2\2\u087c\u087d\7G\2\2\u087d\u087e\5"+
		"\u02ea\u0176\2\u087e\u087f\7\u0261\2\2\u087f\u0880\5\u02e8\u0175\2\u0880"+
		"\u0881\7\u00e2\2\2\u0881\u0882\5\u031a\u018e\2\u0882\u00b5\3\2\2\2\u0883"+
		"\u0886\7c\2\2\u0884\u0885\7\u014d\2\2\u0885\u0887\7\u0184\2\2\u0886\u0884"+
		"\3\2\2\2\u0886\u0887\3\2\2\2\u0887\u0888\3\2\2\2\u0888\u0889\7\u0170\2"+
		"\2\u0889\u088a\7\u01d0\2\2\u088a\u088b\5\u02ee\u0178\2\u088b\u088f\7\u00b3"+
		"\2\2\u088c\u088d\5\u02b8\u015d\2\u088d\u088e\7\u0261\2\2\u088e\u0890\3"+
		"\2\2\2\u088f\u088c\3\2\2\2\u088f\u0890\3\2\2\2\u0890\u0891\3\2\2\2\u0891"+
		"\u0894\5\u02f0\u0179\2\u0892\u0893\7\u0273\2\2\u0893\u0895\5\u02e6\u0174"+
		"\2\u0894\u0892\3\2\2\2\u0894\u0895\3\2\2\2\u0895\u08ae\3\2\2\2\u0896\u0899"+
		"\7c\2\2\u0897\u0898\7\u014d\2\2\u0898\u089a\7\u0184\2\2\u0899\u0897\3"+
		"\2\2\2\u0899\u089a\3\2\2\2\u089a\u089b\3\2\2\2\u089b\u089f\7\u01d0\2\2"+
		"\u089c\u089d\5\u02b8\u015d\2\u089d\u089e\7\u0261\2\2\u089e\u08a0\3\2\2"+
		"\2\u089f\u089c\3\2\2\2\u089f\u08a0\3\2\2\2\u08a0\u08a1\3\2\2\2\u08a1\u08a2"+
		"\5\u02ee\u0178\2\u08a2\u08a6\7\u00b3\2\2\u08a3\u08a4\5\u02b8\u015d\2\u08a4"+
		"\u08a5\7\u0261\2\2\u08a5\u08a7\3\2\2\2\u08a6\u08a3\3\2\2\2\u08a6\u08a7"+
		"\3\2\2\2\u08a7\u08a8\3\2\2\2\u08a8\u08ab\5\u02f0\u0179\2\u08a9\u08aa\7"+
		"\u0273\2\2\u08aa\u08ac\5\u02e6\u0174\2\u08ab\u08a9\3\2\2\2\u08ab\u08ac"+
		"\3\2\2\2\u08ac\u08ae\3\2\2\2\u08ad\u0883\3\2\2\2\u08ad\u0896\3\2\2\2\u08ae"+
		"\u00b7\3\2\2\2\u08af\u08b0\7I\2\2\u08b0\u08b1\7\u0146\2\2\u08b1\u08b2"+
		"\7\u01d4\2\2\u08b2\u08b3\5\u02ea\u0176\2\u08b3\u08b4\7\u00e2\2\2\u08b4"+
		"\u08b5\5\u031a\u018e\2\u08b5\u00b9\3\2\2\2\u08b6\u08b7\7\f\2\2\u08b7\u08b8"+
		"\7\u01d4\2\2\u08b8\u08b9\5\u02ea\u0176\2\u08b9\u08ba\5\u00bc_\2\u08ba"+
		"\u00bb\3\2\2\2\u08bb\u08be\7\5\2\2\u08bc\u08bd\7T\2\2\u08bd\u08bf\5\u02ca"+
		"\u0166\2\u08be\u08bc\3\2\2\2\u08be\u08bf\3\2\2\2\u08bf\u08c3\3\2\2\2\u08c0"+
		"\u08c4\5\u00c6d\2\u08c1\u08c4\5\u00be`\2\u08c2\u08c4\5\u00c4c\2\u08c3"+
		"\u08c0\3\2\2\2\u08c3\u08c1\3\2\2\2\u08c3\u08c2\3\2\2\2\u08c4\u00bd\3\2"+
		"\2\2\u08c5\u08c6\7\u00b2\2\2\u08c6\u08c7\7\u00e8\2\2\u08c7\u08c8\7\u026a"+
		"\2\2\u08c8\u08cd\5\u02e8\u0175\2\u08c9\u08ca\7\u0271\2\2\u08ca\u08cc\5"+
		"\u02e8\u0175\2\u08cb\u08c9\3\2\2\2\u08cc\u08cf\3\2\2\2\u08cd\u08cb\3\2"+
		"\2\2\u08cd\u08ce\3\2\2\2\u08ce\u08d0\3\2\2\2\u08cf\u08cd\3\2\2\2\u08d0"+
		"\u08d1\7\u026b\2\2\u08d1\u08d3\5\u00c0a\2\u08d2\u08d4\5\u00c2b\2\u08d3"+
		"\u08d2\3\2\2\2\u08d3\u08d4\3\2\2\2\u08d4\u00bf\3\2\2\2\u08d5\u08d6\7\u0179"+
		"\2\2\u08d6\u08d7\5\u02ea\u0176\2\u08d7\u08d8\7\u026a\2\2\u08d8\u08dd\5"+
		"\u02e8\u0175\2\u08d9\u08da\7\u0271\2\2\u08da\u08dc\5\u02e8\u0175\2\u08db"+
		"\u08d9\3\2\2\2\u08dc\u08df\3\2\2\2\u08dd\u08db\3\2\2\2\u08dd\u08de\3\2"+
		"\2\2\u08de\u08e0\3\2\2\2\u08df\u08dd\3\2\2\2\u08e0\u08e1\7\u026b\2\2\u08e1"+
		"\u00c1\3\2\2\2\u08e2\u08e3\7\u0146\2\2\u08e3\u08e7\7~\2\2\u08e4\u08e8"+
		"\7\67\2\2\u08e5\u08e6\7\u01aa\2\2\u08e6\u08e8\7\u0138\2\2\u08e7\u08e4"+
		"\3\2\2\2\u08e7\u08e5\3\2\2\2\u08e8\u00c3\3\2\2\2\u08e9\u08ea\7\u01fd\2"+
		"\2\u08ea\u08eb\7\u026a\2\2\u08eb\u08f0\5\u02e8\u0175\2\u08ec\u08ed\7\u0271"+
		"\2\2\u08ed\u08ef\5\u02e8\u0175\2\u08ee\u08ec\3\2\2\2\u08ef\u08f2\3\2\2"+
		"\2\u08f0\u08ee\3\2\2\2\u08f0\u08f1\3\2\2\2\u08f1\u08f3\3\2\2\2\u08f2\u08f0"+
		"\3\2\2\2\u08f3\u08f4\7\u026b\2\2\u08f4\u00c5\3\2\2\2\u08f5\u08f6\7\u016d"+
		"\2\2\u08f6\u08f7\7\u00e8\2\2\u08f7\u08f8\7\u026a\2\2\u08f8\u08fd\5\u02e8"+
		"\u0175\2\u08f9\u08fa\7\u0271\2\2\u08fa\u08fc\5\u02e8\u0175\2\u08fb\u08f9"+
		"\3\2\2\2\u08fc\u08ff\3\2\2\2\u08fd\u08fb\3\2\2\2\u08fd\u08fe\3\2\2\2\u08fe"+
		"\u0900\3\2\2\2\u08ff\u08fd\3\2\2\2\u0900\u0901\7\u026b\2\2\u0901\u00c7"+
		"\3\2\2\2\u0902\u0903\7\"\2\2\u0903\u0904\5\u00fa~\2\u0904\u0905\7\u0094"+
		"\2\2\u0905\u0906\7\u0277\2\2\u0906\u00c9\3\2\2\2\u0907\u0908\7\34\2\2"+
		"\u0908\u0909\t\25\2\2\u0909\u00cb\3\2\2\2\u090a\u090b\5\u031c\u018f\2"+
		"\u090b\u090c\7\u0282\2\2\u090c\u090d\5\u020c\u0107\2\u090d\u00cd\3\2\2"+
		"\2\u090e\u0911\7\u00e9\2\2\u090f\u0912\5\u00d0i\2\u0910\u0912\5\u00d2"+
		"j\2\u0911\u090f\3\2\2\2\u0911\u0910\3\2\2\2\u0912\u00cf\3\2\2\2\u0913"+
		"\u0914\7\u00e5\2\2\u0914\u0915\7\u011b\2\2\u0915\u0916\7\u0266\2\2\u0916"+
		"\u00d1\3\2\2\2\u0917\u091a\7A\2\2\u0918\u0919\7\u011b\2\2\u0919\u091b"+
		"\7\u0266\2\2\u091a\u0918\3\2\2\2\u091a\u091b\3\2\2\2\u091b\u091c\3\2\2"+
		"\2\u091c\u091d\7\u00f5\2\2\u091d\u091f\5\u031c\u018f\2\u091e\u0920\5\u00d4"+
		"k\2\u091f\u091e\3\2\2\2\u091f\u0920\3\2\2\2\u0920\u0923\3\2\2\2\u0921"+
		"\u0922\7\u0220\2\2\u0922\u0924\7X\2\2\u0923\u0921\3\2\2\2\u0923\u0924"+
		"\3\2\2\2\u0924\u0926\3\2\2\2\u0925\u0927\5\u00d6l\2\u0926\u0925\3\2\2"+
		"\2\u0926\u0927\3\2\2\2\u0927\u00d3\3\2\2\2\u0928\u0929\7\b\2\2\u0929\u092a"+
		"\7\u00ce\2\2\u092a\u092b\7\u026a\2\2\u092b\u0930\5\u020c\u0107\2\u092c"+
		"\u092d\7\u0271\2\2\u092d\u092f\5\u020c\u0107\2\u092e\u092c\3\2\2\2\u092f"+
		"\u0932\3\2\2\2\u0930\u092e\3\2\2\2\u0930\u0931\3\2\2\2\u0931\u0933\3\2"+
		"\2\2\u0932\u0930\3\2\2\2\u0933\u0934\7\u026b\2\2\u0934\u00d5\3\2\2\2\u0935"+
		"\u0936\7\u0155\2\2\u0936\u0942\7\u026a\2\2\u0937\u093c\5\u020c\u0107\2"+
		"\u0938\u0939\7\u0271\2\2\u0939\u093b\5\u020c\u0107\2\u093a\u0938\3\2\2"+
		"\2\u093b\u093e\3\2\2\2\u093c\u093a\3\2\2\2\u093c\u093d\3\2\2\2\u093d\u0943"+
		"\3\2\2\2\u093e\u093c\3\2\2\2\u093f\u0940\7\u0261\2\2\u0940\u0941\7\u0261"+
		"\2\2\u0941\u0943\7\u0261\2\2\u0942\u0937\3\2\2\2\u0942\u093f\3\2\2\2\u0943"+
		"\u0944\3\2\2\2\u0944\u0945\7\u026b\2\2\u0945\u00d7\3\2\2\2\u0946\u094a"+
		"\5\u02c0\u0161\2\u0947\u0949\t\26\2\2\u0948\u0947\3\2\2\2\u0949\u094c"+
		"\3\2\2\2\u094a\u0948\3\2\2\2\u094a\u094b\3\2\2\2\u094b\u094e\3\2\2\2\u094c"+
		"\u094a\3\2\2\2\u094d\u094f\5\u0300\u0181\2\u094e\u094d\3\2\2\2\u094e\u094f"+
		"\3\2\2\2\u094f\u0951\3\2\2\2\u0950\u0952\5\u00dan\2\u0951\u0950\3\2\2"+
		"\2\u0951\u0952\3\2\2\2\u0952\u00d9\3\2\2\2\u0953\u0954\t\27\2\2\u0954"+
		"\u0955\5\u020c\u0107\2\u0955\u00db\3\2\2\2\u0956\u0961\5\u00e8u\2\u0957"+
		"\u0961\5\u00eav\2\u0958\u0961\5\"\22\2\u0959\u0961\5$\23\2\u095a\u0961"+
		"\5\u00dep\2\u095b\u0961\5\u00e0q\2\u095c\u0961\5\u00e2r\2\u095d\u0961"+
		"\5\u00f2z\2\u095e\u0961\5.\30\2\u095f\u0961\5,\27\2\u0960\u0956\3\2\2"+
		"\2\u0960\u0957\3\2\2\2\u0960\u0958\3\2\2\2\u0960\u0959\3\2\2\2\u0960\u095a"+
		"\3\2\2\2\u0960\u095b\3\2\2\2\u0960\u095c\3\2\2\2\u0960\u095d\3\2\2\2\u0960"+
		"\u095e\3\2\2\2\u0960\u095f\3\2\2\2\u0961\u00dd\3\2\2\2\u0962\u0964\5\u031c"+
		"\u018f\2\u0963\u0965\7S\2\2\u0964\u0963\3\2\2\2\u0964\u0965\3\2\2\2\u0965"+
		"\u0966\3\2\2\2\u0966\u0969\5\u0300\u0181\2\u0967\u0968\7\u0134\2\2\u0968"+
		"\u096a\7\u0138\2\2\u0969\u0967\3\2\2\2\u0969\u096a\3\2\2\2\u096a\u096c"+
		"\3\2\2\2\u096b\u096d\5\u00dan\2\u096c\u096b\3\2\2\2\u096c\u096d\3\2\2"+
		"\2\u096d\u096e\3\2\2\2\u096e\u096f\7\u0277\2\2\u096f\u00df\3\2\2\2\u0970"+
		"\u0971\7\u01cc\2\2\u0971\u0972\5\u031c\u018f\2\u0972\u0973\7\u00e2\2\2"+
		"\u0973\u0979\5\u0300\u0181\2\u0974\u0975\7\u0172\2\2\u0975\u0976\5\u020c"+
		"\u0107\2\u0976\u0977\7\u0260\2\2\u0977\u0978\5\u020c\u0107\2\u0978\u097a"+
		"\3\2\2\2\u0979\u0974\3\2\2\2\u0979\u097a\3\2\2\2\u097a\u097d\3\2\2\2\u097b"+
		"\u097c\7\u0134\2\2\u097c\u097e\7\u0138\2\2\u097d\u097b\3\2\2\2\u097d\u097e"+
		"\3\2\2\2\u097e\u097f\3\2\2\2\u097f\u0980\7\u0277\2\2\u0980\u00e1\3\2\2"+
		"\2\u0981\u0982\7j\2\2\u0982\u0983\5\u031c\u018f\2\u0983\u0986\5\u00e4"+
		"s\2\u0984\u0985\7\u018a\2\2\u0985\u0987\5\u0300\u0181\2\u0986\u0984\3"+
		"\2\2\2\u0986\u0987\3\2\2\2\u0987\u098a\3\2\2\2\u0988\u0989\7\u00e2\2\2"+
		"\u0989\u098b\5\u014e\u00a8\2\u098a\u0988\3\2\2\2\u098a\u098b\3\2\2\2\u098b"+
		"\u098c\3\2\2\2\u098c\u098d\7\u0277\2\2\u098d\u00e3\3\2\2\2\u098e\u098f"+
		"\7\u026a\2\2\u098f\u0994\5\u00e6t\2\u0990\u0991\7\u0271\2\2\u0991\u0993"+
		"\5\u00e6t\2\u0992\u0990\3\2\2\2\u0993\u0996\3\2\2\2\u0994\u0992\3\2\2"+
		"\2\u0994\u0995\3\2\2\2\u0995\u0997\3\2\2\2\u0996\u0994\3\2\2\2\u0997\u0998"+
		"\7\u026b\2\2\u0998\u099a\3\2\2\2\u0999\u098e\3\2\2\2\u0999\u099a\3\2\2"+
		"\2\u099a\u00e5\3\2\2\2\u099b\u09a0\5\u02c0\u0161\2\u099c\u099e\7\u00ce"+
		"\2\2\u099d\u099c\3\2\2\2\u099d\u099e\3\2\2\2\u099e\u099f\3\2\2\2\u099f"+
		"\u09a1\5\u0300\u0181\2\u09a0\u099d\3\2\2\2\u09a0\u09a1\3\2\2\2\u09a1\u09a3"+
		"\3\2\2\2\u09a2\u09a4\5\u00dan\2\u09a3\u09a2\3\2\2\2\u09a3\u09a4\3\2\2"+
		"\2\u09a4\u00e7\3\2\2\2\u09a5\u09a6\5\u031c\u018f\2\u09a6\u09a7\7\u009a"+
		"\2\2\u09a7\u09a8\7\u0277\2\2\u09a8\u00e9\3\2\2\2\u09a9\u09e2\7\u0169\2"+
		"\2\u09aa\u09e3\7\u01a7\2\2\u09ab\u09e3\7\37\2\2\u09ac\u09ad\7\u009b\2"+
		"\2\u09ad\u09ae\7\u026a\2\2\u09ae\u09af\5\u02d2\u016a\2\u09af\u09b0\7\u0271"+
		"\2\2\u09b0\u09b1\5\u0318\u018d\2\u09b1\u09b2\7\u026b\2\2\u09b2\u09e3\3"+
		"\2\2\2\u09b3\u09b4\7\u00d0\2\2\u09b4\u09b5\7\u026a\2\2\u09b5\u09b6\5\u031c"+
		"\u018f\2\u09b6\u09b7\7\u0271\2\2\u09b7\u09b8\5\u020c\u0107\2\u09b8\u09b9"+
		"\7\u026b\2\2\u09b9\u09e3\3\2\2\2\u09ba\u09bb\7\u0186\2\2\u09bb\u09be\7"+
		"\u026a\2\2\u09bc\u09bf\5\u031c\u018f\2\u09bd\u09bf\7z\2\2\u09be\u09bc"+
		"\3\2\2\2\u09be\u09bd\3\2\2\2\u09bf\u09c2\3\2\2\2\u09c0\u09c1\7\u0271\2"+
		"\2\u09c1\u09c3\5\u031c\u018f\2\u09c2\u09c0\3\2\2\2\u09c3\u09c4\3\2\2\2"+
		"\u09c4\u09c2\3\2\2\2\u09c4\u09c5\3\2\2\2\u09c5\u09c6\3\2\2\2\u09c6\u09c7"+
		"\7\u026b\2\2\u09c7\u09e3\3\2\2\2\u09c8\u09c9\7\u01da\2\2\u09c9\u09ca\7"+
		"\u026a\2\2\u09ca\u09cb\5\u020c\u0107\2\u09cb\u09cc\7\u026b\2\2\u09cc\u09e3"+
		"\3\2\2\2\u09cd\u09ce\7\u00db\2\2\u09ce\u09d1\7\u026a\2\2\u09cf\u09d2\5"+
		"\u031c\u018f\2\u09d0\u09d2\7z\2\2\u09d1\u09cf\3\2\2\2\u09d1\u09d0\3\2"+
		"\2\2\u09d2\u09d5\3\2\2\2\u09d3\u09d4\7\u0271\2\2\u09d4\u09d6\5\u031c\u018f"+
		"\2\u09d5\u09d3\3\2\2\2\u09d6\u09d7\3\2\2\2\u09d7\u09d5\3\2\2\2\u09d7\u09d8"+
		"\3\2\2\2\u09d8\u09d9\3\2\2\2\u09d9\u09da\7\u026b\2\2\u09da\u09e3\3\2\2"+
		"\2\u09db\u09dc\7\u01ce\2\2\u09dc\u09dd\7\u026a\2\2\u09dd\u09de\5\u031c"+
		"\u018f\2\u09de\u09df\7\u0271\2\2\u09df\u09e0\5\u020c\u0107\2\u09e0\u09e1"+
		"\7\u026b\2\2\u09e1\u09e3\3\2\2\2\u09e2\u09aa\3\2\2\2\u09e2\u09ab\3\2\2"+
		"\2\u09e2\u09ac\3\2\2\2\u09e2\u09b3\3\2\2\2\u09e2\u09ba\3\2\2\2\u09e2\u09c8"+
		"\3\2\2\2\u09e2\u09cd\3\2\2\2\u09e2\u09db\3\2\2\2\u09e3\u09e4\3\2\2\2\u09e4"+
		"\u09e5\7\u0277\2\2\u09e5\u00eb\3\2\2\2\u09e6\u09e7\7\u0177\2\2\u09e7\u09e8"+
		"\7\u026a\2\2\u09e8\u09ed\5\u00eex\2\u09e9\u09ea\7\u0271\2\2\u09ea\u09ec"+
		"\5\u00eex\2\u09eb\u09e9\3\2\2\2\u09ec\u09ef\3\2\2\2\u09ed\u09eb\3\2\2"+
		"\2\u09ed\u09ee\3\2\2\2\u09ee\u09f0\3\2\2\2\u09ef\u09ed\3\2\2\2\u09f0\u09f1"+
		"\7\u026b\2\2\u09f1\u00ed\3\2\2\2\u09f2\u09f4\5\u02e8\u0175\2\u09f3\u09f5"+
		"\5\u0300\u0181\2\u09f4\u09f3\3\2\2\2\u09f4\u09f5\3\2\2\2\u09f5\u09f8\3"+
		"\2\2\2\u09f6\u09f7\7\u0134\2\2\u09f7\u09f9\7\u0138\2\2\u09f8\u09f6\3\2"+
		"\2\2\u09f8\u09f9\3\2\2\2\u09f9\u09fb\3\2\2\2\u09fa\u09fc\5\u00dan\2\u09fb"+
		"\u09fa\3\2\2\2\u09fb\u09fc\3\2\2\2\u09fc\u00ef\3\2\2\2\u09fd\u09fe\7\u017b"+
		"\2\2\u09fe\u0a01\7j\2\2\u09ff\u0a00\7\u018a\2\2\u0a00\u0a02\5\u0300\u0181"+
		"\2\u0a01\u09ff\3\2\2\2\u0a01\u0a02\3\2\2\2\u0a02\u00f1\3\2\2\2\u0a03\u0a04"+
		"\7\u01f7\2\2\u0a04\u0a05\5\u031c\u018f\2\u0a05\u0a0a\7\u00e2\2\2\u0a06"+
		"\u0a0b\5\u00f4{\2\u0a07\u0a0b\5\u00f8}\2\u0a08\u0a0b\5\u00ecw\2\u0a09"+
		"\u0a0b\5\u00f0y\2\u0a0a\u0a06\3\2\2\2\u0a0a\u0a07\3\2\2\2\u0a0a\u0a08"+
		"\3\2\2\2\u0a0a\u0a09\3\2\2\2\u0a0b\u0a0c\3\2\2\2\u0a0c\u0a0d\7\u0277\2"+
		"\2\u0a0d\u00f3\3\2\2\2\u0a0e\u0a0f\7\u01d4\2\2\u0a0f\u0a10\7\u0142\2\2"+
		"\u0a10\u0a12\5\u0300\u0181\2\u0a11\u0a13\5\u00f6|\2\u0a12\u0a11\3\2\2"+
		"\2\u0a12\u0a13\3\2\2\2\u0a13\u0a16\3\2\2\2\u0a14\u0a15\7\u0134\2\2\u0a15"+
		"\u0a17\7\u0138\2\2\u0a16\u0a14\3\2\2\2\u0a16\u0a17\3\2\2\2\u0a17\u00f5"+
		"\3\2\2\2\u0a18\u0a1b\7\u00c9\2\2\u0a19\u0a1b\7\u00ca\2\2\u0a1a\u0a18\3"+
		"\2\2\2\u0a1a\u0a19\3\2\2\2\u0a1b\u0a1c\3\2\2\2\u0a1c\u0a1d\7\62\2\2\u0a1d"+
		"\u0a1e\5\u0300\u0181\2\u0a1e\u00f7\3\2\2\2\u0a1f\u0a23\7\u0211\2\2\u0a20"+
		"\u0a21\7\u0213\2\2\u0a21\u0a23\7\20\2\2\u0a22\u0a1f\3\2\2\2\u0a22\u0a20"+
		"\3\2\2\2\u0a23\u0a24\3\2\2\2\u0a24\u0a25\7\u026a\2\2\u0a25\u0a26\5\u020c"+
		"\u0107\2\u0a26\u0a27\7\u026b\2\2\u0a27\u0a28\7\u0142\2\2\u0a28\u0a2b\5"+
		"\u0300\u0181\2\u0a29\u0a2a\7\u0134\2\2\u0a2a\u0a2c\7\u0138\2\2\u0a2b\u0a29"+
		"\3\2\2\2\u0a2b\u0a2c\3\2\2\2\u0a2c\u00f9\3\2\2\2\u0a2d\u0a2e\5\u00fe\u0080"+
		"\2\u0a2e\u0a2f\t\30\2\2\u0a2f\u0a32\3\2\2\2\u0a30\u0a32\5\u00fc\177\2"+
		"\u0a31\u0a2d\3\2\2\2\u0a31\u0a30\3\2\2\2\u0a32\u0a33\3\2\2\2\u0a33\u0a31"+
		"\3\2\2\2\u0a33\u0a34\3\2\2\2\u0a34\u00fb\3\2\2\2\u0a35\u0a36\7\u0279\2"+
		"\2\u0a36\u0a37\7\u0279\2\2\u0a37\u0a38\5\u02cc\u0167\2\u0a38\u0a39\7\u027f"+
		"\2\2\u0a39\u0a3a\7\u027f\2\2\u0a3a\u00fd\3\2\2\2\u0a3b\u0a3c\7c\2\2\u0a3c"+
		"\u0a57\5\4\3\2\u0a3d\u0a3e\7\f\2\2\u0a3e\u0a57\5\4\3\2\u0a3f\u0a41\7\u00b9"+
		"\2\2\u0a40\u0a42\7\13\2\2\u0a41\u0a40\3\2\2\2\u0a41\u0a42\3\2\2\2\u0a42"+
		"\u0a43\3\2\2\2\u0a43\u0a57\5\4\3\2\u0a44\u0a45\7\u01f5\2\2\u0a45\u0a57"+
		"\5\4\3\2\u0a46\u0a57\5\u0126\u0094\2\u0a47\u0a57\5\u012c\u0097\2\u0a48"+
		"\u0a57\5\u0100\u0081\2\u0a49\u0a57\5\u0102\u0082\2\u0a4a\u0a57\5\u0104"+
		"\u0083\2\u0a4b\u0a57\5\u0106\u0084\2\u0a4c\u0a57\5\u0108\u0085\2\u0a4d"+
		"\u0a57\5\u010e\u0088\2\u0a4e\u0a57\5\u0112\u008a\2\u0a4f\u0a57\5\u011c"+
		"\u008f\2\u0a50\u0a57\5\u011e\u0090\2\u0a51\u0a57\5\u0120\u0091\2\u0a52"+
		"\u0a57\5\u0242\u0122\2\u0a53\u0a57\5\u012e\u0098\2\u0a54\u0a57\5\u0122"+
		"\u0092\2\u0a55\u0a57\5\u0124\u0093\2\u0a56\u0a3b\3\2\2\2\u0a56\u0a3d\3"+
		"\2\2\2\u0a56\u0a3f\3\2\2\2\u0a56\u0a44\3\2\2\2\u0a56\u0a46\3\2\2\2\u0a56"+
		"\u0a47\3\2\2\2\u0a56\u0a48\3\2\2\2\u0a56\u0a49\3\2\2\2\u0a56\u0a4a\3\2"+
		"\2\2\u0a56\u0a4b\3\2\2\2\u0a56\u0a4c\3\2\2\2\u0a56\u0a4d\3\2\2\2\u0a56"+
		"\u0a4e\3\2\2\2\u0a56\u0a4f\3\2\2\2\u0a56\u0a50\3\2\2\2\u0a56\u0a51\3\2"+
		"\2\2\u0a56\u0a52\3\2\2\2\u0a56\u0a53\3\2\2\2\u0a56\u0a54\3\2\2\2\u0a56"+
		"\u0a55\3\2\2\2\u0a57\u00ff\3\2\2\2\u0a58\u0a5b\5\u030a\u0186\2\u0a59\u0a5b"+
		"\5\u0308\u0185\2\u0a5a\u0a58\3\2\2\2\u0a5a\u0a59\3\2\2\2\u0a5b\u0a5c\3"+
		"\2\2\2\u0a5c\u0a5d\7\u0274\2\2\u0a5d\u0a5e\5\u020c\u0107\2\u0a5e\u0101"+
		"\3\2\2\2\u0a5f\u0a61\7Y\2\2\u0a60\u0a62\5\u02cc\u0167\2\u0a61\u0a60\3"+
		"\2\2\2\u0a61\u0a62\3\2\2\2\u0a62\u0a65\3\2\2\2\u0a63\u0a64\7\u021c\2\2"+
		"\u0a64\u0a66\5\u020a\u0106\2\u0a65\u0a63\3\2\2\2\u0a65\u0a66\3\2\2\2\u0a66"+
		"\u0103\3\2\2\2\u0a67\u0a69\7\u00a1\2\2\u0a68\u0a6a\5\u02cc\u0167\2\u0a69"+
		"\u0a68\3\2\2\2\u0a69\u0a6a\3\2\2\2\u0a6a\u0a6d\3\2\2\2\u0a6b\u0a6c\7\u021c"+
		"\2\2\u0a6c\u0a6e\5\u020a\u0106\2\u0a6d\u0a6b\3\2\2\2\u0a6d\u0a6e\3\2\2"+
		"\2\u0a6e\u0105\3\2\2\2\u0a6f\u0a70\7\u00b8\2\2\u0a70\u0a71\5\u02cc\u0167"+
		"\2\u0a71\u0107\3\2\2\2\u0a72\u0a73\7\u00c2\2\2\u0a73\u0a74\5\u020a\u0106"+
		"\2\u0a74\u0a75\7\u01d7\2\2\u0a75\u0a79\5\u00fa~\2\u0a76\u0a78\5\u010a"+
		"\u0086\2\u0a77\u0a76\3\2\2\2\u0a78\u0a7b\3\2\2\2\u0a79\u0a77\3\2\2\2\u0a79"+
		"\u0a7a\3\2\2\2\u0a7a\u0a7d\3\2\2\2\u0a7b\u0a79\3\2\2\2\u0a7c\u0a7e\5\u010c"+
		"\u0087\2\u0a7d\u0a7c\3\2\2\2\u0a7d\u0a7e\3\2\2\2\u0a7e\u0a7f\3\2\2\2\u0a7f"+
		"\u0a80\7\u0094\2\2\u0a80\u0a81\7\u00c2\2\2\u0a81\u0109\3\2\2\2\u0a82\u0a83"+
		"\7\u008e\2\2\u0a83\u0a84\5\u020a\u0106\2\u0a84\u0a85\7\u01d7\2\2\u0a85"+
		"\u0a86\5\u00fa~\2\u0a86\u010b\3\2\2\2\u0a87\u0a88\7\u008d\2\2\u0a88\u0a89"+
		"\5\u00fa~\2\u0a89\u010d\3\2\2\2\u0a8a\u0a8c\5\u02cc\u0167\2\u0a8b\u0a8a"+
		"\3\2\2\2\u0a8b\u0a8c\3\2\2\2\u0a8c\u0a91\3\2\2\2\u0a8d\u0a8e\7\u021e\2"+
		"\2\u0a8e\u0a92\5\u020a\u0106\2\u0a8f\u0a90\7\u00b3\2\2\u0a90\u0a92\5\u0110"+
		"\u0089\2\u0a91\u0a8d\3\2\2\2\u0a91\u0a8f\3\2\2\2\u0a91\u0a92\3\2\2\2\u0a92"+
		"\u0a93\3\2\2\2\u0a93\u0a94\7\u0105\2\2\u0a94\u0a95\5\u00fa~\2\u0a95\u0a96"+
		"\7\u0094\2\2\u0a96\u0a98\7\u0105\2\2\u0a97\u0a99\5\u02cc\u0167\2\u0a98"+
		"\u0a97\3\2\2\2\u0a98\u0a99\3\2\2\2\u0a99\u010f\3\2\2\2\u0a9a\u0a9b\5\u02de"+
		"\u0170\2\u0a9b\u0a9d\7\u00ce\2\2\u0a9c\u0a9e\7\u018c\2\2\u0a9d\u0a9c\3"+
		"\2\2\2\u0a9d\u0a9e\3\2\2\2\u0a9e\u0a9f\3\2\2\2\u0a9f\u0aa0\5\u0118\u008d"+
		"\2\u0aa0\u0aa1\7\u0260\2\2\u0aa1\u0aa2\5\u011a\u008e\2\u0aa2\u0ab0\3\2"+
		"\2\2\u0aa3\u0aa4\5\u02e2\u0172\2\u0aa4\u0aad\7\u00ce\2\2\u0aa5\u0aa7\5"+
		"\u02e0\u0171\2\u0aa6\u0aa8\5\u0208\u0105\2\u0aa7\u0aa6\3\2\2\2\u0aa7\u0aa8"+
		"\3\2\2\2\u0aa8\u0aae\3\2\2\2\u0aa9\u0aaa\7\u026a\2\2\u0aaa\u0aab\5\u014e"+
		"\u00a8\2\u0aab\u0aac\7\u026b\2\2\u0aac\u0aae\3\2\2\2\u0aad\u0aa5\3\2\2"+
		"\2\u0aad\u0aa9\3\2\2\2\u0aae\u0ab0\3\2\2\2\u0aaf\u0a9a\3\2\2\2\u0aaf\u0aa3"+
		"\3\2\2\2\u0ab0\u0111\3\2\2\2\u0ab1\u0ab2\7\u00b0\2\2\u0ab2\u0ab3\5\u02de"+
		"\u0170\2\u0ab3\u0ab4\7\u00ce\2\2\u0ab4\u0ab5\5\u0114\u008b\2\u0ab5\u0ab8"+
		"\5\u012e\u0098\2\u0ab6\u0ab7\7\u019a\2\2\u0ab7\u0ab9\7\u009c\2\2\u0ab8"+
		"\u0ab6\3\2\2\2\u0ab8\u0ab9\3\2\2\2\u0ab9\u0113\3\2\2\2\u0aba\u0abb\5\u0118"+
		"\u008d\2\u0abb\u0abc\7\u0260\2\2\u0abc\u0abd\5\u011a\u008e\2\u0abd\u0ac8"+
		"\3\2\2\2\u0abe\u0abf\7\u00cc\2\2\u0abf\u0ac0\7\u0142\2\2\u0ac0\u0ac2\5"+
		"\u02e4\u0173\2\u0ac1\u0ac3\5\u0116\u008c\2\u0ac2\u0ac1\3\2\2\2\u0ac2\u0ac3"+
		"\3\2\2\2\u0ac3\u0ac8\3\2\2\2\u0ac4\u0ac5\7\u020b\2\2\u0ac5\u0ac6\7\u0142"+
		"\2\2\u0ac6\u0ac8\5\u02de\u0170\2\u0ac7\u0aba\3\2\2\2\u0ac7\u0abe\3\2\2"+
		"\2\u0ac7\u0ac4\3\2\2\2\u0ac8\u0115\3\2\2\2\u0ac9\u0aca\7#\2\2\u0aca\u0acb"+
		"\5\u0118\u008d\2\u0acb\u0acc\7\16\2\2\u0acc\u0acd\5\u011a\u008e\2\u0acd"+
		"\u0117\3\2\2\2\u0ace\u0acf\5\u022a\u0116\2\u0acf\u0119\3\2\2\2\u0ad0\u0ad1"+
		"\5\u022a\u0116\2\u0ad1\u011b\3\2\2\2\u0ad2\u0ad3\7\u0138\2\2\u0ad3\u011d"+
		"\3\2\2\2\u0ad4\u0ad6\7\u0171\2\2\u0ad5\u0ad7\5\u02d2\u016a\2\u0ad6\u0ad5"+
		"\3\2\2\2\u0ad6\u0ad7\3\2\2\2\u0ad7\u011f\3\2\2\2\u0ad8\u0ada\7\u018a\2"+
		"\2\u0ad9\u0adb\5\u020c\u0107\2\u0ada\u0ad9\3\2\2\2\u0ada\u0adb\3\2\2\2"+
		"\u0adb\u0121\3\2\2\2\u0adc\u0ade\7\64\2\2\u0add\u0adc\3\2\2\2\u0add\u0ade"+
		"\3\2\2\2\u0ade\u0adf\3\2\2\2\u0adf\u0ae0\5\u030a\u0186\2\u0ae0\u0123\3"+
		"\2\2\2\u0ae1\u0ae2\7\u0162\2\2\u0ae2\u0ae3\7\u0193\2\2\u0ae3\u0ae4\7\u026a"+
		"\2\2\u0ae4\u0ae5\5\u020c\u0107\2\u0ae5\u0ae6\7\u026b\2\2\u0ae6\u0125\3"+
		"\2\2\2\u0ae7\u0ae8\7\"\2\2\u0ae8\u0aef\5\u00fa~\2\u0ae9\u0aeb\7\u009a"+
		"\2\2\u0aea\u0aec\5\u0128\u0095\2\u0aeb\u0aea\3\2\2\2\u0aec\u0aed\3\2\2"+
		"\2\u0aed\u0aeb\3\2\2\2\u0aed\u0aee\3\2\2\2\u0aee\u0af0\3\2\2\2\u0aef\u0ae9"+
		"\3\2\2\2\u0aef\u0af0\3\2\2\2\u0af0\u0af1\3\2\2\2\u0af1\u0af3\7\u0094\2"+
		"\2\u0af2\u0af4\5\u02cc\u0167\2\u0af3\u0af2\3\2\2\2\u0af3\u0af4\3\2\2\2"+
		"\u0af4\u0127\3\2\2\2\u0af5\u0af6\7\u021c\2\2\u0af6\u0afb\5\u02d2\u016a"+
		"\2\u0af7\u0af8\7\u014d\2\2\u0af8\u0afa\5\u02d2\u016a\2\u0af9\u0af7\3\2"+
		"\2\2\u0afa\u0afd\3\2\2\2\u0afb\u0af9\3\2\2\2\u0afb\u0afc\3\2\2\2\u0afc"+
		"\u0afe\3\2\2\2\u0afd\u0afb\3\2\2\2\u0afe\u0aff\7\u01d7\2\2\u0aff\u0b00"+
		"\5\u00fa~\2\u0b00\u0129\3\2\2\2\u0b01\u0b03\7w\2\2\u0b02\u0b01\3\2\2\2"+
		"\u0b02\u0b03\3\2\2\2\u0b03\u0b05\3\2\2\2\u0b04\u0b06\5\u00dco\2\u0b05"+
		"\u0b04\3\2\2\2\u0b06\u0b07\3\2\2\2\u0b07\u0b05\3\2\2\2\u0b07\u0b08\3\2"+
		"\2\2\u0b08\u0b0a\3\2\2\2\u0b09\u0b02\3\2\2\2\u0b09\u0b0a\3\2\2\2\u0b0a"+
		"\u0b0b\3\2\2\2\u0b0b\u0b0c\5\u0126\u0094\2\u0b0c\u012b\3\2\2\2\u0b0d\u0b0f"+
		"\7w\2\2\u0b0e\u0b0d\3\2\2\2\u0b0e\u0b0f\3\2\2\2\u0b0f\u0b11\3\2\2\2\u0b10"+
		"\u0b12\5\u00dco\2\u0b11\u0b10\3\2\2\2\u0b12\u0b13\3\2\2\2\u0b13\u0b11"+
		"\3\2\2\2\u0b13\u0b14\3\2\2\2\u0b14\u0b15\3\2\2\2\u0b15\u0b16\5\u0126\u0094"+
		"\2\u0b16\u012d\3\2\2\2\u0b17\u0b1c\5\u0130\u0099\2\u0b18\u0b1c\5\u0134"+
		"\u009b\2\u0b19\u0b1c\5\u0136\u009c\2\u0b1a\u0b1c\5\u0140\u00a1\2\u0b1b"+
		"\u0b17\3\2\2\2\u0b1b\u0b18\3\2\2\2\u0b1b\u0b19\3\2\2\2\u0b1b\u0b1a\3\2"+
		"\2\2\u0b1c\u012f\3\2\2\2\u0b1d\u0b1e\7\u009f\2\2\u0b1e\u0b1f\7\u00c4\2"+
		"\2\u0b1f\u0b29\5\u020c\u0107\2\u0b20\u0b22\5\u02aa\u0156\2\u0b21\u0b23"+
		"\5\u0270\u0139\2\u0b22\u0b21\3\2\2\2\u0b22\u0b23\3\2\2\2\u0b23\u0b2a\3"+
		"\2\2\2\u0b24\u0b26\5\u0270\u0139\2\u0b25\u0b27\5\u0132\u009a\2\u0b26\u0b25"+
		"\3\2\2\2\u0b26\u0b27\3\2\2\2\u0b27\u0b2a\3\2\2\2\u0b28\u0b2a\5\u0132\u009a"+
		"\2\u0b29\u0b20\3\2\2\2\u0b29\u0b24\3\2\2\2\u0b29\u0b28\3\2\2\2\u0b29\u0b2a"+
		"\3\2\2\2\u0b2a\u0131\3\2\2\2\u0b2b\u0b2c\t\31\2\2\u0b2c\u0b2d\5\u02aa"+
		"\u0156\2\u0b2d\u0133\3\2\2\2\u0b2e\u0b36\5\u01de\u00f0\2\u0b2f\u0b36\5"+
		"\u01ea\u00f6\2\u0b30\u0b36\5\u014e\u00a8\2\u0b31\u0b36\5\u01c4\u00e3\2"+
		"\u0b32\u0b36\5\u01ca\u00e6\2\u0b33\u0b36\5\u01cc\u00e7\2\u0b34\u0b36\5"+
		"\u014c\u00a7\2\u0b35\u0b2e\3\2\2\2\u0b35\u0b2f\3\2\2\2\u0b35\u0b30\3\2"+
		"\2\2\u0b35\u0b31\3\2\2\2\u0b35\u0b32\3\2\2\2\u0b35\u0b33\3\2\2\2\u0b35"+
		"\u0b34\3\2\2\2\u0b36\u0135\3\2\2\2\u0b37\u0b3c\5\u0138\u009d\2\u0b38\u0b3c"+
		"\5\u013a\u009e\2\u0b39\u0b3c\5\u013c\u009f\2\u0b3a\u0b3c\5\u013e\u00a0"+
		"\2\u0b3b\u0b37\3\2\2\2\u0b3b\u0b38\3\2\2\2\u0b3b\u0b39\3\2\2\2\u0b3b\u0b3a"+
		"\3\2\2\2\u0b3c\u0137\3\2\2\2\u0b3d\u0b3e\7C\2\2\u0b3e\u0b3f\5\u02e0\u0171"+
		"\2\u0b3f\u0139\3\2\2\2\u0b40\u0b41\7\u0148\2\2\u0b41\u0b43\5\u02e0\u0171"+
		"\2\u0b42\u0b44\5\u0208\u0105\2\u0b43\u0b42\3\2\2\2\u0b43\u0b44\3\2\2\2"+
		"\u0b44\u013b\3\2\2\2\u0b45\u0b46\7\u00a8\2\2\u0b46\u0b5b\5\u02e0\u0171"+
		"\2\u0b47\u0b48\7\u00e0\2\2\u0b48\u0b4d\5\u02dc\u016f\2\u0b49\u0b4a\7\u0271"+
		"\2\2\u0b4a\u0b4c\5\u02dc\u016f\2\u0b4b\u0b49\3\2\2\2\u0b4c\u0b4f\3\2\2"+
		"\2\u0b4d\u0b4b\3\2\2\2\u0b4d\u0b4e\3\2\2\2\u0b4e\u0b5c\3\2\2\2\u0b4f\u0b4d"+
		"\3\2\2\2\u0b50\u0b51\7\61\2\2\u0b51\u0b52\7F\2\2\u0b52\u0b53\7\u00e0\2"+
		"\2\u0b53\u0b58\5\u02dc\u016f\2\u0b54\u0b55\7\u0271\2\2\u0b55\u0b57\5\u02dc"+
		"\u016f\2\u0b56\u0b54\3\2\2\2\u0b57\u0b5a\3\2\2\2\u0b58\u0b56\3\2\2\2\u0b58"+
		"\u0b59\3\2\2\2\u0b59\u0b5c\3\2\2\2\u0b5a\u0b58\3\2\2\2\u0b5b\u0b47\3\2"+
		"\2\2\u0b5b\u0b50\3\2\2\2\u0b5c\u013d\3\2\2\2\u0b5d\u0b5e\7\u0148\2\2\u0b5e"+
		"\u0b5f\5\u02dc\u016f\2\u0b5f\u0b62\7\u00b3\2\2\u0b60\u0b63\5\u014e\u00a8"+
		"\2\u0b61\u0b63\5\u020c\u0107\2\u0b62\u0b60\3\2\2\2\u0b62\u0b61\3\2\2\2"+
		"\u0b63\u0b65\3\2\2\2\u0b64\u0b66\5\u0270\u0139\2\u0b65\u0b64\3\2\2\2\u0b65"+
		"\u0b66\3\2\2\2\u0b66\u013f\3\2\2\2\u0b67\u0b6d\5\u0142\u00a2\2\u0b68\u0b6d"+
		"\5\u0144\u00a3\2\u0b69\u0b6d\5\u0146\u00a4\2\u0b6a\u0b6d\5\u0148\u00a5"+
		"\2\u0b6b\u0b6d\5\u014a\u00a6\2\u0b6c\u0b67\3\2\2\2\u0b6c\u0b68\3\2\2\2"+
		"\u0b6c\u0b69\3\2\2\2\u0b6c\u0b6a\3\2\2\2\u0b6c\u0b6b\3\2\2\2\u0b6d\u0141"+
		"\3\2\2\2\u0b6e\u0b6f\7\u01aa\2\2\u0b6f\u0b7d\7\u01f0\2\2\u0b70\u0b71\7"+
		"\u0175\2\2\u0b71\u0b7e\t\32\2\2\u0b72\u0b73\7\u00e3\2\2\u0b73\u0b77\7"+
		"\u00f4\2\2\u0b74\u0b78\7\u01a6\2\2\u0b75\u0b76\7\u0175\2\2\u0b76\u0b78"+
		"\7K\2\2\u0b77\u0b74\3\2\2\2\u0b77\u0b75\3\2\2\2\u0b78\u0b7e\3\2\2\2\u0b79"+
		"\u0b7a\7\u0208\2\2\u0b7a\u0b7b\7\u018f\2\2\u0b7b\u0b7c\7\u01a1\2\2\u0b7c"+
		"\u0b7e\5\u02b4\u015b\2\u0b7d\u0b70\3\2\2\2\u0b7d\u0b72\3\2\2\2\u0b7d\u0b79"+
		"\3\2\2\2\u0b7d\u0b7e\3\2\2\2\u0b7e\u0b81\3\2\2\2\u0b7f\u0b80\7\u011b\2"+
		"\2\u0b80\u0b82\5\u031a\u018e\2\u0b81\u0b7f\3\2\2\2\u0b81\u0b82\3\2\2\2"+
		"\u0b82\u0143\3\2\2\2\u0b83\u0b84\7\u01aa\2\2\u0b84\u0b8e\t\33\2\2\u0b85"+
		"\u0b8f\7\13\2\2\u0b86\u0b8b\5\u02ca\u0166\2\u0b87\u0b88\7\u0271\2\2\u0b88"+
		"\u0b8a\5\u02ca\u0166\2\u0b89\u0b87\3\2\2\2\u0b8a\u0b8d\3\2\2\2\u0b8b\u0b89"+
		"\3\2\2\2\u0b8b\u0b8c\3\2\2\2\u0b8c\u0b8f\3\2\2\2\u0b8d\u0b8b\3\2\2\2\u0b8e"+
		"\u0b85\3\2\2\2\u0b8e\u0b86\3\2\2\2\u0b8f\u0b90\3\2\2\2\u0b90\u0b91\t\34"+
		"\2\2\u0b91\u0145\3\2\2\2\u0b92\u0b94\7J\2\2\u0b93\u0b95\7\u0221\2\2\u0b94"+
		"\u0b93\3\2\2\2\u0b94\u0b95\3\2\2\2\u0b95\u0b98\3\2\2\2\u0b96\u0b97\7\u00b1"+
		"\2\2\u0b97\u0b99\5\u031a\u018e\2\u0b98\u0b96\3\2\2\2\u0b98\u0b99\3\2\2"+
		"\2\u0b99\u0ba1\3\2\2\2\u0b9a\u0b9c\7\u0222\2\2\u0b9b\u0b9d\t\35\2\2\u0b9c"+
		"\u0b9b\3\2\2\2\u0b9c\u0b9d\3\2\2\2\u0b9d\u0b9f\3\2\2\2\u0b9e\u0ba0\t\36"+
		"\2\2\u0b9f\u0b9e\3\2\2\2\u0b9f\u0ba0\3\2\2\2\u0ba0\u0ba2\3\2\2\2\u0ba1"+
		"\u0b9a\3\2\2\2\u0ba1\u0ba2\3\2\2\2\u0ba2\u0147\3\2\2\2\u0ba3\u0ba5\7\u018f"+
		"\2\2\u0ba4\u0ba6\7\u0221\2\2\u0ba5\u0ba4\3\2\2\2\u0ba5\u0ba6\3\2\2\2\u0ba6"+
		"\u0bae\3\2\2\2\u0ba7\u0ba9\7\u01ed\2\2\u0ba8\u0baa\7\u0199\2\2\u0ba9\u0ba8"+
		"\3\2\2\2\u0ba9\u0baa\3\2\2\2\u0baa\u0bab\3\2\2\2\u0bab\u0baf\5\u02b2\u015a"+
		"\2\u0bac\u0bad\7\u00b1\2\2\u0bad\u0baf\5\u031a\u018e\2\u0bae\u0ba7\3\2"+
		"\2\2\u0bae\u0bac\3\2\2\2\u0bae\u0baf\3\2\2\2\u0baf\u0149\3\2\2\2\u0bb0"+
		"\u0bb1\7\u0199\2\2\u0bb1\u0bb2\5\u02b2\u015a\2\u0bb2\u014b\3\2\2\2\u0bb3"+
		"\u0bb4\7\u00a3\2\2\u0bb4\u0bb9\7\u0164\2\2\u0bb5\u0bb6\7\u01aa\2\2\u0bb6"+
		"\u0bb7\7\u01c4\2\2\u0bb7\u0bb8\7\u0282\2\2\u0bb8\u0bba\5\u031a\u018e\2"+
		"\u0bb9\u0bb5\3\2\2\2\u0bb9\u0bba\3\2\2\2\u0bba\u0bbd\3\2\2\2\u0bbb\u0bbc"+
		"\7\u00e0\2\2\u0bbc\u0bbe\5\u02ea\u0176\2\u0bbd\u0bbb\3\2\2\2\u0bbd\u0bbe"+
		"\3\2\2\2\u0bbe\u0bbf\3\2\2\2\u0bbf\u0bc5\7\u00b3\2\2\u0bc0\u0bc6\5\u014e"+
		"\u00a8\2\u0bc1\u0bc6\5\u01c4\u00e3\2\u0bc2\u0bc6\5\u01ca\u00e6\2\u0bc3"+
		"\u0bc6\5\u01cc\u00e7\2\u0bc4\u0bc6\5\u01de\u00f0\2\u0bc5\u0bc0\3\2\2\2"+
		"\u0bc5\u0bc1\3\2\2\2\u0bc5\u0bc2\3\2\2\2\u0bc5\u0bc3\3\2\2\2\u0bc5\u0bc4"+
		"\3\2\2\2\u0bc6\u014d\3\2\2\2\u0bc7\u0bc9\5\u0150\u00a9\2\u0bc8\u0bc7\3"+
		"\2\2\2\u0bc8\u0bc9\3\2\2\2\u0bc9\u0bca\3\2\2\2\u0bca\u0bcf\5\u0158\u00ad"+
		"\2\u0bcb\u0bce\5\u01be\u00e0\2\u0bcc\u0bce\5\u01ba\u00de\2\u0bcd\u0bcb"+
		"\3\2\2\2\u0bcd\u0bcc\3\2\2\2\u0bce\u0bd1\3\2\2\2\u0bcf\u0bcd\3\2\2\2\u0bcf"+
		"\u0bd0\3\2\2\2\u0bd0\u014f\3\2\2\2\u0bd1\u0bcf\3\2\2\2\u0bd2\u0bd3\7\u0220"+
		"\2\2\u0bd3\u0bd8\5\u0152\u00aa\2\u0bd4\u0bd5\7\u0271\2\2\u0bd5\u0bd7\5"+
		"\u0152\u00aa\2\u0bd6\u0bd4\3\2\2\2\u0bd7\u0bda\3\2\2\2\u0bd8\u0bd6\3\2"+
		"\2\2\u0bd8\u0bd9\3\2\2\2\u0bd9\u0151\3\2\2\2\u0bda\u0bd8\3\2\2\2\u0bdb"+
		"\u0be7\5\u02c8\u0165\2\u0bdc\u0bdd\7\u026a\2\2\u0bdd\u0be2\5\u02e8\u0175"+
		"\2\u0bde\u0bdf\7\u0271\2\2\u0bdf\u0be1\5\u02e8\u0175\2\u0be0\u0bde\3\2"+
		"\2\2\u0be1\u0be4\3\2\2\2\u0be2\u0be0\3\2\2\2\u0be2\u0be3\3\2\2\2\u0be3"+
		"\u0be5\3\2\2\2\u0be4\u0be2\3\2\2\2\u0be5\u0be6\7\u026b\2\2\u0be6\u0be8"+
		"\3\2\2\2\u0be7\u0bdc\3\2\2\2\u0be7\u0be8\3\2\2\2\u0be8\u0be9\3\2\2\2\u0be9"+
		"\u0bea\7\21\2\2\u0bea\u0beb\7\u026a\2\2\u0beb\u0bed\5\u0158\u00ad\2\u0bec"+
		"\u0bee\5\u01ba\u00de\2\u0bed\u0bec\3\2\2\2\u0bed\u0bee\3\2\2\2\u0bee\u0bef"+
		"\3\2\2\2\u0bef\u0bf1\7\u026b\2\2\u0bf0\u0bf2\5\u0154\u00ab\2\u0bf1\u0bf0"+
		"\3\2\2\2\u0bf1\u0bf2\3\2\2\2\u0bf2\u0bf4\3\2\2\2\u0bf3\u0bf5\5\u0156\u00ac"+
		"\2\u0bf4\u0bf3\3\2\2\2\u0bf4\u0bf5\3\2\2\2\u0bf5\u0153\3\2\2\2\u0bf6\u0bf7"+
		"\7\u019e\2\2\u0bf7\u0bf8\t\37\2\2\u0bf8\u0bf9\7\u00aa\2\2\u0bf9\u0bfa"+
		"\7\62\2\2\u0bfa\u0bfc\5\u02e8\u0175\2\u0bfb\u0bfd\7\22\2\2\u0bfc\u0bfb"+
		"\3\2\2\2\u0bfc\u0bfd\3\2\2\2\u0bfd\u0bff\3\2\2\2\u0bfe\u0c00\7\u0080\2"+
		"\2\u0bff\u0bfe\3\2\2\2\u0bff\u0c00\3\2\2\2\u0c00\u0c03\3\2\2\2\u0c01\u0c02"+
		"\7\u0139\2\2\u0c02\u0c04\7\u00aa\2\2\u0c03\u0c01\3\2\2\2\u0c03\u0c04\3"+
		"\2\2\2\u0c04\u0c07\3\2\2\2\u0c05\u0c06\7\u0139\2\2\u0c06\u0c08\7\u00eb"+
		"\2\2\u0c07\u0c05\3\2\2\2\u0c07\u0c08\3\2\2\2\u0c08\u0c1b\3\2\2\2\u0c09"+
		"\u0c0a\7\u0271\2\2\u0c0a\u0c0c\5\u02e8\u0175\2\u0c0b\u0c0d\7\22\2\2\u0c0c"+
		"\u0c0b\3\2\2\2\u0c0c\u0c0d\3\2\2\2\u0c0d\u0c0f\3\2\2\2\u0c0e\u0c10\7\u0080"+
		"\2\2\u0c0f\u0c0e\3\2\2\2\u0c0f\u0c10\3\2\2\2\u0c10\u0c13\3\2\2\2\u0c11"+
		"\u0c12\7\u0139\2\2\u0c12\u0c14\7\u00aa\2\2\u0c13\u0c11\3\2\2\2\u0c13\u0c14"+
		"\3\2\2\2\u0c14\u0c17\3\2\2\2\u0c15\u0c16\7\u0139\2\2\u0c16\u0c18\7\u00eb"+
		"\2\2\u0c17\u0c15\3\2\2\2\u0c17\u0c18\3\2\2\2\u0c18\u0c1a\3\2\2\2\u0c19"+
		"\u0c09\3\2\2\2\u0c1a\u0c1d\3\2\2\2\u0c1b\u0c19\3\2\2\2\u0c1b\u0c1c\3\2"+
		"\2\2\u0c1c\u0c1e\3\2\2\2\u0c1d\u0c1b\3\2\2\2\u0c1e\u0c1f\7\u01aa\2\2\u0c1f"+
		"\u0c20\5\u02e8\u0175\2\u0c20\u0155\3\2\2\2\u0c21\u0c22\7l\2\2\u0c22\u0c27"+
		"\5\u02e8\u0175\2\u0c23\u0c24\7\u0271\2\2\u0c24\u0c26\5\u02e8\u0175\2\u0c25"+
		"\u0c23\3\2\2\2\u0c26\u0c29\3\2\2\2\u0c27\u0c25\3\2\2\2\u0c27\u0c28\3\2"+
		"\2\2\u0c28\u0c2a\3\2\2\2\u0c29\u0c27\3\2\2\2\u0c2a\u0c2b\7\u01aa\2\2\u0c2b"+
		"\u0c2c\5\u02e8\u0175\2\u0c2c\u0c2d\7\u01ed\2\2\u0c2d\u0c2e\5\u020c\u0107"+
		"\2\u0c2e\u0c2f\7z\2\2\u0c2f\u0c30\5\u020c\u0107\2\u0c30\u0157\3\2\2\2"+
		"\u0c31\u0c35\5\u015c\u00af\2\u0c32\u0c34\5\u015a\u00ae\2\u0c33\u0c32\3"+
		"\2\2\2\u0c34\u0c37\3\2\2\2\u0c35\u0c33\3\2\2\2\u0c35\u0c36\3\2\2\2\u0c36"+
		"\u0159\3\2\2\2\u0c37\u0c35\3\2\2\2\u0c38\u0c3a\7\u01fc\2\2\u0c39\u0c3b"+
		"\7\13\2\2\u0c3a\u0c39\3\2\2\2\u0c3a\u0c3b\3\2\2\2\u0c3b\u0c3f\3\2\2\2"+
		"\u0c3c\u0c3f\7\u00dd\2\2\u0c3d\u0c3f\7\u0110\2\2\u0c3e\u0c38\3\2\2\2\u0c3e"+
		"\u0c3c\3\2\2\2\u0c3e\u0c3d\3\2\2\2\u0c3f\u0c40\3\2\2\2\u0c40\u0c41\5\u015c"+
		"\u00af\2\u0c41\u015b\3\2\2\2\u0c42\u0c48\5\u015e\u00b0\2\u0c43\u0c44\7"+
		"\u026a\2\2\u0c44\u0c45\5\u0158\u00ad\2\u0c45\u0c46\7\u026b\2\2\u0c46\u0c48"+
		"\3\2\2\2\u0c47\u0c42\3\2\2\2\u0c47\u0c43\3\2\2\2\u0c48\u015d\3\2\2\2\u0c49"+
		"\u0c4b\7\u01a2\2\2\u0c4a\u0c4c\t \2\2\u0c4b\u0c4a\3\2\2\2\u0c4b\u0c4c"+
		"\3\2\2\2\u0c4c\u0c56\3\2\2\2\u0c4d\u0c57\7\u026d\2\2\u0c4e\u0c53\5\u0160"+
		"\u00b1\2\u0c4f\u0c50\7\u0271\2\2\u0c50\u0c52\5\u0160\u00b1\2\u0c51\u0c4f"+
		"\3\2\2\2\u0c52\u0c55\3\2\2\2\u0c53\u0c51\3\2\2\2\u0c53\u0c54\3\2\2\2\u0c54"+
		"\u0c57\3\2\2\2\u0c55\u0c53\3\2\2\2\u0c56\u0c4d\3\2\2\2\u0c56\u0c4e\3\2"+
		"\2\2\u0c57\u0c59\3\2\2\2\u0c58\u0c5a\5\u02aa\u0156\2\u0c59\u0c58\3\2\2"+
		"\2\u0c59\u0c5a\3\2\2\2\u0c5a\u0c5b\3\2\2\2\u0c5b\u0c5d\5\u0162\u00b2\2"+
		"\u0c5c\u0c5e\5\u02a6\u0154\2\u0c5d\u0c5c\3\2\2\2\u0c5d\u0c5e\3\2\2\2\u0c5e"+
		"\u0c60\3\2\2\2\u0c5f\u0c61\5\u018c\u00c7\2\u0c60\u0c5f\3\2\2\2\u0c60\u0c61"+
		"\3\2\2\2\u0c61\u0c63\3\2\2\2\u0c62\u0c64\5\u0190\u00c9\2\u0c63\u0c62\3"+
		"\2\2\2\u0c63\u0c64\3\2\2\2\u0c64\u0c66\3\2\2\2\u0c65\u0c67\5\u019c\u00cf"+
		"\2\u0c66\u0c65\3\2\2\2\u0c66\u0c67\3\2\2\2\u0c67\u015f\3\2\2\2\u0c68\u0c6a"+
		"\5\u0164\u00b3\2\u0c69\u0c6b\5\u02a0\u0151\2\u0c6a\u0c69\3\2\2\2\u0c6a"+
		"\u0c6b\3\2\2\2\u0c6b\u0161\3\2\2\2\u0c6c\u0c6d\7\u00b4\2\2\u0c6d\u0c6e"+
		"\5\u0166\u00b4\2\u0c6e\u0163\3\2\2\2\u0c6f\u0c70\5\u02ea\u0176\2\u0c70"+
		"\u0c71\7\u0261\2\2\u0c71\u0c72\7\u026d\2\2\u0c72\u0c75\3\2\2\2\u0c73\u0c75"+
		"\5\u020c\u0107\2\u0c74\u0c6f\3\2\2\2\u0c74\u0c73\3\2\2\2\u0c75\u0165\3"+
		"\2\2\2\u0c76\u0c7b\5\u0168\u00b5\2\u0c77\u0c78\7\u0271\2\2\u0c78\u0c7a"+
		"\5\u0168\u00b5\2\u0c79\u0c77\3\2\2\2\u0c7a\u0c7d\3\2\2\2\u0c7b\u0c79\3"+
		"\2\2\2\u0c7b\u0c7c\3\2\2\2\u0c7c\u0167\3\2\2\2\u0c7d\u0c7b\3\2\2\2\u0c7e"+
		"\u0c82\5\u016a\u00b6\2\u0c7f\u0c81\5\u016e\u00b8\2\u0c80\u0c7f\3\2\2\2"+
		"\u0c81\u0c84\3\2\2\2\u0c82\u0c80\3\2\2\2\u0c82\u0c83\3\2\2\2\u0c83\u0c87"+
		"\3\2\2\2\u0c84\u0c82\3\2\2\2\u0c85\u0c88\5\u017a\u00be\2\u0c86\u0c88\5"+
		"\u0186\u00c4\2\u0c87\u0c85\3\2\2\2\u0c87\u0c86\3\2\2\2\u0c87\u0c88\3\2"+
		"\2\2\u0c88\u0169\3\2\2\2\u0c89\u0c8d\5\u016c\u00b7\2\u0c8a\u0c8c\5\u0178"+
		"\u00bd\2\u0c8b\u0c8a\3\2\2\2\u0c8c\u0c8f\3\2\2\2\u0c8d\u0c8b\3\2\2\2\u0c8d"+
		"\u0c8e\3\2\2\2\u0c8e\u0c91\3\2\2\2\u0c8f\u0c8d\3\2\2\2\u0c90\u0c92\5\u02a2"+
		"\u0152\2\u0c91\u0c90\3\2\2\2\u0c91\u0c92\3\2\2\2\u0c92\u016b\3\2\2\2\u0c93"+
		"\u0c96\5\u01fc\u00ff\2\u0c94\u0c97\5\u017a\u00be\2\u0c95\u0c97\5\u0186"+
		"\u00c4\2\u0c96\u0c94\3\2\2\2\u0c96\u0c95\3\2\2\2\u0c96\u0c97\3\2\2\2\u0c97"+
		"\u0cab\3\2\2\2\u0c98\u0c99\7\u026a\2\2\u0c99\u0c9d\5\u0168\u00b5\2\u0c9a"+
		"\u0c9c\5\u015a\u00ae\2\u0c9b\u0c9a\3\2\2\2\u0c9c\u0c9f\3\2\2\2\u0c9d\u0c9b"+
		"\3\2\2\2\u0c9d\u0c9e\3\2\2\2\u0c9e\u0ca0\3\2\2\2\u0c9f\u0c9d\3\2\2\2\u0ca0"+
		"\u0ca3\7\u026b\2\2\u0ca1\u0ca4\5\u017a\u00be\2\u0ca2\u0ca4\5\u0186\u00c4"+
		"\2\u0ca3\u0ca1\3\2\2\2\u0ca3\u0ca2\3\2\2\2\u0ca3\u0ca4\3\2\2\2\u0ca4\u0cab"+
		"\3\2\2\2\u0ca5\u0ca6\7\u0145\2\2\u0ca6\u0ca7\7\u026a\2\2\u0ca7\u0ca8\5"+
		"\u01fc\u00ff\2\u0ca8\u0ca9\7\u026b\2\2\u0ca9\u0cab\3\2\2\2\u0caa\u0c93"+
		"\3\2\2\2\u0caa\u0c98\3\2\2\2\u0caa\u0ca5\3\2\2\2\u0cab\u016d\3\2\2\2\u0cac"+
		"\u0cae\5\u0176\u00bc\2\u0cad\u0cac\3\2\2\2\u0cad\u0cae\3\2\2\2\u0cae\u0cb0"+
		"\3\2\2\2\u0caf\u0cb1\t!\2\2\u0cb0\u0caf\3\2\2\2\u0cb0\u0cb1\3\2\2\2\u0cb1"+
		"\u0cb4\3\2\2\2\u0cb2\u0cb5\7\u00d1\2\2\u0cb3\u0cb5\5\u0174\u00bb\2\u0cb4"+
		"\u0cb2\3\2\2\2\u0cb4\u0cb3\3\2\2\2\u0cb4\u0cb5\3\2\2\2\u0cb5\u0cb6\3\2"+
		"\2\2\u0cb6\u0cb7\7\u00e6\2\2\u0cb7\u0cb9\5\u016a\u00b6\2\u0cb8\u0cba\5"+
		"\u0176\u00bc\2\u0cb9\u0cb8\3\2\2\2\u0cb9\u0cba\3\2\2\2\u0cba\u0cbf\3\2"+
		"\2\2\u0cbb\u0cbe\5\u0170\u00b9\2\u0cbc\u0cbe\5\u0172\u00ba\2\u0cbd\u0cbb"+
		"\3\2\2\2\u0cbd\u0cbc\3\2\2\2\u0cbe\u0cc1\3\2\2\2\u0cbf\u0cbd\3\2\2\2\u0cbf"+
		"\u0cc0\3\2\2\2\u0cc0\u016f\3\2\2\2\u0cc1\u0cbf\3\2\2\2\u0cc2\u0cc3\7\u0146"+
		"\2\2\u0cc3\u0cc4\5\u020a\u0106\2\u0cc4\u0171\3\2\2\2\u0cc5\u0cc6\7\u0209"+
		"\2\2\u0cc6\u0cc7\7\u026a\2\2\u0cc7\u0ccc\5\u02e8\u0175\2\u0cc8\u0cc9\7"+
		"\u0271\2\2\u0cc9\u0ccb\5\u02e8\u0175\2\u0cca\u0cc8\3\2\2\2\u0ccb\u0cce"+
		"\3\2\2\2\u0ccc\u0cca\3\2\2\2\u0ccc\u0ccd\3\2\2\2\u0ccd\u0ccf\3\2\2\2\u0cce"+
		"\u0ccc\3\2\2\2\u0ccf\u0cd0\7\u026b\2\2\u0cd0\u0173\3\2\2\2\u0cd1\u0cd3"+
		"\t\"\2\2\u0cd2\u0cd4\7\u014f\2\2\u0cd3\u0cd2\3\2\2\2\u0cd3\u0cd4\3\2\2"+
		"\2\u0cd4\u0175\3\2\2\2\u0cd5\u0cd6\7\u0157\2\2\u0cd6\u0ce4\7\62\2\2\u0cd7"+
		"\u0cd8\7\u026a\2\2\u0cd8\u0cd9\5\u0158\u00ad\2\u0cd9\u0cda\7\u026b\2\2"+
		"\u0cda\u0ce5\3\2\2\2\u0cdb\u0ce5\5\u0208\u0105\2\u0cdc\u0ce1\5\u020c\u0107"+
		"\2\u0cdd\u0cde\7\u0271\2\2\u0cde\u0ce0\5\u020c\u0107\2\u0cdf\u0cdd\3\2"+
		"\2\2\u0ce0\u0ce3\3\2\2\2\u0ce1\u0cdf\3\2\2\2\u0ce1\u0ce2\3\2\2\2\u0ce2"+
		"\u0ce5\3\2\2\2\u0ce3\u0ce1\3\2\2\2\u0ce4\u0cd7\3\2\2\2\u0ce4\u0cdb\3\2"+
		"\2\2\u0ce4\u0cdc\3\2\2\2\u0ce5\u0177\3\2\2\2\u0ce6\u0ce7\7\u0214\2\2\u0ce7"+
		"\u0ce8\7#\2\2\u0ce8\u0ce9\t#\2\2\u0ce9\u0cef\5\u020c\u0107\2\u0cea\u0ceb"+
		"\7\21\2\2\u0ceb\u0cec\7\u0142\2\2\u0cec\u0ced\t$\2\2\u0ced\u0cef\5\u020c"+
		"\u0107\2\u0cee\u0ce6\3\2\2\2\u0cee\u0cea\3\2\2\2\u0cef\u0179\3\2\2\2\u0cf0"+
		"\u0cf2\7\u0163\2\2\u0cf1\u0cf3\7\u0231\2\2\u0cf2\u0cf1\3\2\2\2\u0cf2\u0cf3"+
		"\3\2\2\2\u0cf3\u0cf4\3\2\2\2\u0cf4\u0cf5\7\u026a\2\2\u0cf5\u0cfa\5\u017c"+
		"\u00bf\2\u0cf6\u0cf7\7\u0271\2\2\u0cf7\u0cf9\5\u017c\u00bf\2\u0cf8\u0cf6"+
		"\3\2\2\2\u0cf9\u0cfc\3\2\2\2\u0cfa\u0cf8\3\2\2\2\u0cfa\u0cfb\3\2\2\2\u0cfb"+
		"\u0cfd\3\2\2\2\u0cfc\u0cfa\3\2\2\2\u0cfd\u0cfe\5\u017e\u00c0\2\u0cfe\u0cff"+
		"\5\u0180\u00c1\2\u0cff\u0d00\7\u026b\2\2\u0d00\u017b\3\2\2\2\u0d01\u0d02"+
		"\5\u02c6\u0164\2\u0d02\u0d03\7\u026a\2\2\u0d03\u0d04\5\u020c\u0107\2\u0d04"+
		"\u0d06\7\u026b\2\2\u0d05\u0d07\5\u02a0\u0151\2\u0d06\u0d05\3\2\2\2\u0d06"+
		"\u0d07\3\2\2\2\u0d07\u017d\3\2\2\2\u0d08\u0d15\7\u00b3\2\2\u0d09\u0d16"+
		"\5\u02e8\u0175\2\u0d0a\u0d0b\7\u026a\2\2\u0d0b\u0d10\5\u02e8\u0175\2\u0d0c"+
		"\u0d0d\7\u0271\2\2\u0d0d\u0d0f\5\u02e8\u0175\2\u0d0e\u0d0c\3\2\2\2\u0d0f"+
		"\u0d12\3\2\2\2\u0d10\u0d0e\3\2\2\2\u0d10\u0d11\3\2\2\2\u0d11\u0d13\3\2"+
		"\2\2\u0d12\u0d10\3\2\2\2\u0d13\u0d14\7\u026b\2\2\u0d14\u0d16\3\2\2\2\u0d15"+
		"\u0d09\3\2\2\2\u0d15\u0d0a\3\2\2\2\u0d16\u017f\3\2\2\2\u0d17\u0d18\7\u00ce"+
		"\2\2\u0d18\u0d2a\7\u026a\2\2\u0d19\u0d2b\5\u0158\u00ad\2\u0d1a\u0d1f\7"+
		"\17\2\2\u0d1b\u0d1c\7\u0271\2\2\u0d1c\u0d1e\7\17\2\2\u0d1d\u0d1b\3\2\2"+
		"\2\u0d1e\u0d21\3\2\2\2\u0d1f\u0d1d\3\2\2\2\u0d1f\u0d20\3\2\2\2\u0d20\u0d2b"+
		"\3\2\2\2\u0d21\u0d1f\3\2\2\2\u0d22\u0d27\5\u0182\u00c2\2\u0d23\u0d24\7"+
		"\u0271\2\2\u0d24\u0d26\5\u0182\u00c2\2\u0d25\u0d23\3\2\2\2\u0d26\u0d29"+
		"\3\2\2\2\u0d27\u0d25\3\2\2\2\u0d27\u0d28\3\2\2\2\u0d28\u0d2b\3\2\2\2\u0d29"+
		"\u0d27\3\2\2\2\u0d2a\u0d19\3\2\2\2\u0d2a\u0d1a\3\2\2\2\u0d2a\u0d22\3\2"+
		"\2\2\u0d2b\u0d2c\3\2\2\2\u0d2c\u0d2d\7\u026b\2\2\u0d2d\u0181\3\2\2\2\u0d2e"+
		"\u0d30\5\u0184\u00c3\2\u0d2f\u0d31\5\u02a0\u0151\2\u0d30\u0d2f\3\2\2\2"+
		"\u0d30\u0d31\3\2\2\2\u0d31\u0183\3\2\2\2\u0d32\u0d35\5\u020c\u0107\2\u0d33"+
		"\u0d35\5\u0208\u0105\2\u0d34\u0d32\3\2\2\2\u0d34\u0d33\3\2\2\2\u0d35\u0185"+
		"\3\2\2\2\u0d36\u0d39\7\u01ff\2\2\u0d37\u0d38\t%\2\2\u0d38\u0d3a\7\u0139"+
		"\2\2\u0d39\u0d37\3\2\2\2\u0d39\u0d3a\3\2\2\2\u0d3a\u0d3b\3\2\2\2\u0d3b"+
		"\u0d48\7\u026a\2\2\u0d3c\u0d49\5\u02e8\u0175\2\u0d3d\u0d3e\7\u026a\2\2"+
		"\u0d3e\u0d43\5\u02e8\u0175\2\u0d3f\u0d40\7\u0271\2\2\u0d40\u0d42\5\u02e8"+
		"\u0175\2\u0d41\u0d3f\3\2\2\2\u0d42\u0d45\3\2\2\2\u0d43\u0d41\3\2\2\2\u0d43"+
		"\u0d44\3\2\2\2\u0d44\u0d46\3\2\2\2\u0d45\u0d43\3\2\2\2\u0d46\u0d47\7\u026b"+
		"\2\2\u0d47\u0d49\3\2\2\2\u0d48\u0d3c\3\2\2\2\u0d48\u0d3d\3\2\2\2\u0d49"+
		"\u0d4a\3\2\2\2\u0d4a\u0d4b\5\u017e\u00c0\2\u0d4b\u0d4c\5\u0188\u00c5\2"+
		"\u0d4c\u0d4d\7\u026b\2\2\u0d4d\u0187\3\2\2\2\u0d4e\u0d4f\7\u00ce\2\2\u0d4f"+
		"\u0d50\7\u026a\2\2\u0d50\u0d55\5\u018a\u00c6\2\u0d51\u0d52\7\u0271\2\2"+
		"\u0d52\u0d54\5\u018a\u00c6\2\u0d53\u0d51\3\2\2\2\u0d54\u0d57\3\2\2\2\u0d55"+
		"\u0d53\3\2\2\2\u0d55\u0d56\3\2\2\2\u0d56\u0d58\3\2\2\2\u0d57\u0d55\3\2"+
		"\2\2\u0d58\u0d59\7\u026b\2\2\u0d59\u0189\3\2\2\2\u0d5a\u0d67\5\u02e8\u0175"+
		"\2\u0d5b\u0d5c\7\u026a\2\2\u0d5c\u0d61\5\u02e8\u0175\2\u0d5d\u0d5e\7\u0271"+
		"\2\2\u0d5e\u0d60\5\u02e8\u0175\2\u0d5f\u0d5d\3\2\2\2\u0d60\u0d63\3\2\2"+
		"\2\u0d61\u0d5f\3\2\2\2\u0d61\u0d62\3\2\2\2\u0d62\u0d64\3\2\2\2\u0d63\u0d61"+
		"\3\2\2\2\u0d64\u0d65\7\u026b\2\2\u0d65\u0d67\3\2\2\2\u0d66\u0d5a\3\2\2"+
		"\2\u0d66\u0d5b\3\2\2\2\u0d67\u0d77\3\2\2\2\u0d68\u0d75\7\21\2\2\u0d69"+
		"\u0d76\5\u0310\u0189\2\u0d6a\u0d6b\7\u026a\2\2\u0d6b\u0d70\5\u0310\u0189"+
		"\2\u0d6c\u0d6d\7\u0271\2\2\u0d6d\u0d6f\5\u0310\u0189\2\u0d6e\u0d6c\3\2"+
		"\2\2\u0d6f\u0d72\3\2\2\2\u0d70\u0d6e\3\2\2\2\u0d70\u0d71\3\2\2\2\u0d71"+
		"\u0d73\3\2\2\2\u0d72\u0d70\3\2\2\2\u0d73\u0d74\7\u026b\2\2\u0d74\u0d76"+
		"\3\2\2\2\u0d75\u0d69\3\2\2\2\u0d75\u0d6a\3\2\2\2\u0d76\u0d78\3\2\2\2\u0d77"+
		"\u0d68\3\2\2\2\u0d77\u0d78\3\2\2\2\u0d78\u018b\3\2\2\2\u0d79\u0d7a\7R"+
		"\2\2\u0d7a\u0d7c\7\62\2\2\u0d7b\u0d7d\7\u012c\2\2\u0d7c\u0d7b\3\2\2\2"+
		"\u0d7c\u0d7d\3\2\2\2\u0d7d\u0d7e\3\2\2\2\u0d7e\u0d80\5\u020a\u0106\2\u0d7f"+
		"\u0d81\5\u018e\u00c8\2\u0d80\u0d7f\3\2\2\2\u0d80\u0d81\3\2\2\2\u0d81\u0d8b"+
		"\3\2\2\2\u0d82\u0d83\5\u018e\u00c8\2\u0d83\u0d84\7R\2\2\u0d84\u0d86\7"+
		"\62\2\2\u0d85\u0d87\7\u012c\2\2\u0d86\u0d85\3\2\2\2\u0d86\u0d87\3\2\2"+
		"\2\u0d87\u0d88\3\2\2\2\u0d88\u0d89\5\u020a\u0106\2\u0d89\u0d8b\3\2\2\2"+
		"\u0d8a\u0d79\3\2\2\2\u0d8a\u0d82\3\2\2\2\u0d8b\u018d\3\2\2\2\u0d8c\u0d8d"+
		"\7\u01c2\2\2\u0d8d\u0d8e\7\u0220\2\2\u0d8e\u0d8f\5\u020a\u0106\2\u0d8f"+
		"\u018f\3\2\2\2\u0d90\u0d91\7\u00ba\2\2\u0d91\u0d92\7\62\2\2\u0d92\u0d97"+
		"\5\u0192\u00ca\2\u0d93\u0d94\7\u0271\2\2\u0d94\u0d96\5\u0192\u00ca\2\u0d95"+
		"\u0d93\3\2\2\2\u0d96\u0d99\3\2\2\2\u0d97\u0d95\3\2\2\2\u0d97\u0d98\3\2"+
		"\2\2\u0d98\u0d9b\3\2\2\2\u0d99\u0d97\3\2\2\2\u0d9a\u0d9c\5\u019a\u00ce"+
		"\2\u0d9b\u0d9a\3\2\2\2\u0d9b\u0d9c\3\2\2\2\u0d9c\u0dab\3\2\2\2\u0d9d\u0da8"+
		"\5\u019a\u00ce\2\u0d9e\u0d9f\7\u00ba\2\2\u0d9f\u0da0\7\62\2\2\u0da0\u0da5"+
		"\5\u0192\u00ca\2\u0da1\u0da2\7\u0271\2\2\u0da2\u0da4\5\u0192\u00ca\2\u0da3"+
		"\u0da1\3\2\2\2\u0da4\u0da7\3\2\2\2\u0da5\u0da3\3\2\2\2\u0da5\u0da6\3\2"+
		"\2\2\u0da6\u0da9\3\2\2\2\u0da7\u0da5\3\2\2\2\u0da8\u0d9e\3\2\2\2\u0da8"+
		"\u0da9\3\2\2\2\u0da9\u0dab\3\2\2\2\u0daa\u0d90\3\2\2\2\u0daa\u0d9d\3\2"+
		"\2\2\u0dab\u0191\3\2\2\2\u0dac\u0db0\5\u0196\u00cc\2\u0dad\u0db0\5\u0194"+
		"\u00cb\2\u0dae\u0db0\5\u020c\u0107\2\u0daf\u0dac\3\2\2\2\u0daf\u0dad\3"+
		"\2\2\2\u0daf\u0dae\3\2\2\2\u0db0\u0193\3\2\2\2\u0db1\u0db2\t&\2\2\u0db2"+
		"\u0db3\7\u026a\2\2\u0db3\u0db8\5\u0198\u00cd\2\u0db4\u0db5\7\u0271\2\2"+
		"\u0db5\u0db7\5\u0198\u00cd\2\u0db6\u0db4\3\2\2\2\u0db7\u0dba\3\2\2\2\u0db8"+
		"\u0db6\3\2\2\2\u0db8\u0db9\3\2\2\2\u0db9\u0dbb\3\2\2\2\u0dba\u0db8\3\2"+
		"\2\2\u0dbb\u0dbc\7\u026b\2\2\u0dbc\u0195\3\2\2\2\u0dbd\u0dbe\7\u00bc\2"+
		"\2\u0dbe\u0dbf\7\u01ab\2\2\u0dbf\u0dc0\7\u026a\2\2\u0dc0\u0dc5\5\u0198"+
		"\u00cd\2\u0dc1\u0dc2\7\u0271\2\2\u0dc2\u0dc4\5\u0198\u00cd\2\u0dc3\u0dc1"+
		"\3\2\2\2\u0dc4\u0dc7\3\2\2\2\u0dc5\u0dc3\3\2\2\2\u0dc5\u0dc6\3\2\2\2\u0dc6"+
		"\u0dc8\3\2\2\2\u0dc7\u0dc5\3\2\2\2\u0dc8\u0dc9\7\u026b\2\2\u0dc9\u0197"+
		"\3\2\2\2\u0dca\u0dce\5\u0194\u00cb\2\u0dcb\u0dce\5\u0208\u0105\2\u0dcc"+
		"\u0dce\5\u020c\u0107\2\u0dcd\u0dca\3\2\2\2\u0dcd\u0dcb\3\2\2\2\u0dcd\u0dcc"+
		"\3\2\2\2\u0dce\u0199\3\2\2\2\u0dcf\u0dd0\7\u00be\2\2\u0dd0\u0dd1\5\u020a"+
		"\u0106\2\u0dd1\u019b\3\2\2\2\u0dd2\u0dd6\7\u0114\2\2\u0dd3\u0dd5\5\u019e"+
		"\u00d0\2\u0dd4\u0dd3\3\2\2\2\u0dd5\u0dd8\3\2\2\2\u0dd6\u0dd4\3\2\2\2\u0dd6"+
		"\u0dd7\3\2\2\2\u0dd7\u0dda\3\2\2\2\u0dd8\u0dd6\3\2\2\2\u0dd9\u0ddb\5\u01a0"+
		"\u00d1\2\u0dda\u0dd9\3\2\2\2\u0dda\u0ddb\3\2\2\2\u0ddb\u0ddf\3\2\2\2\u0ddc"+
		"\u0dde\5\u01a2\u00d2\2\u0ddd\u0ddc\3\2\2\2\u0dde\u0de1\3\2\2\2\u0ddf\u0ddd"+
		"\3\2\2\2\u0ddf\u0de0\3\2\2\2\u0de0\u0de2\3\2\2\2\u0de1\u0ddf\3\2\2\2\u0de2"+
		"\u0de3\5\u01a4\u00d3\2\u0de3\u019d\3\2\2\2\u0de4\u0de5\t\'\2\2\u0de5\u0ded"+
		"\7\u0120\2\2\u0de6\u0dea\7\u01fd\2\2\u0de7\u0deb\7\u0082\2\2\u0de8\u0de9"+
		"\7\u01b4\2\2\u0de9\u0deb\7\u0178\2\2\u0dea\u0de7\3\2\2\2\u0dea\u0de8\3"+
		"\2\2\2\u0deb\u0ded\3\2\2\2\u0dec\u0de4\3\2\2\2\u0dec\u0de6\3\2\2\2\u0ded"+
		"\u019f\3\2\2\2\u0dee\u0def\7\u018a\2\2\u0def\u0df0\t(\2\2\u0df0\u0df1"+
		"\7\u0194\2\2\u0df1\u01a1\3\2\2\2\u0df2\u0df3\7\u0178\2\2\u0df3\u0df4\5"+
		"\u02c2\u0162\2\u0df4\u0df5\7\u0146\2\2\u0df5\u0df6\7\u026a\2\2\u0df6\u0df7"+
		"\5\u0158\u00ad\2\u0df7\u0df8\7\u026b\2\2\u0df8\u0dfc\5\u01a6\u00d4\2\u0df9"+
		"\u0dfb\5\u019e\u00d0\2\u0dfa\u0df9\3\2\2\2\u0dfb\u0dfe\3\2\2\2\u0dfc\u0dfa"+
		"\3\2\2\2\u0dfc\u0dfd\3\2\2\2\u0dfd\u01a3\3\2\2\2\u0dfe\u0dfc\3\2\2\2\u0dff"+
		"\u0e00\7\u0109\2\2\u0e00\u0e02\5\u02c4\u0163\2\u0e01\u0dff\3\2\2\2\u0e01"+
		"\u0e02\3\2\2\2\u0e02\u0e03\3\2\2\2\u0e03\u0e07\5\u01a6\u00d4\2\u0e04\u0e06"+
		"\5\u019e\u00d0\2\u0e05\u0e04\3\2\2\2\u0e06\u0e09\3\2\2\2\u0e07\u0e05\3"+
		"\2\2\2\u0e07\u0e08\3\2\2\2\u0e08\u0e0a\3\2\2\2\u0e09\u0e07\3\2\2\2\u0e0a"+
		"\u0e0b\5\u01ae\u00d8\2\u0e0b\u01a5\3\2\2\2\u0e0c\u0e0e\5\u01a8\u00d5\2"+
		"\u0e0d\u0e0c\3\2\2\2\u0e0d\u0e0e\3\2\2\2\u0e0e\u0e0f\3\2\2\2\u0e0f\u0e10"+
		"\7\u0082\2\2\u0e10\u0e11\7\62\2\2\u0e11\u0e12\5\u01aa\u00d6\2\u0e12\u0e13"+
		"\7\u010d\2\2\u0e13\u0e14\5\u01aa\u00d6\2\u0e14\u01a7\3\2\2\2\u0e15\u0e16"+
		"\7\u0157\2\2\u0e16\u0e17\7\62\2\2\u0e17\u0e18\5\u01aa\u00d6\2\u0e18\u01a9"+
		"\3\2\2\2\u0e19\u0e1a\7\u026a\2\2\u0e1a\u0e1f\5\u01ac\u00d7\2\u0e1b\u0e1c"+
		"\7\u0271\2\2\u0e1c\u0e1e\5\u01ac\u00d7\2\u0e1d\u0e1b\3\2\2\2\u0e1e\u0e21"+
		"\3\2\2\2\u0e1f\u0e1d\3\2\2\2\u0e1f\u0e20\3\2\2\2\u0e20\u0e22\3\2\2\2\u0e21"+
		"\u0e1f\3\2\2\2\u0e22\u0e23\7\u026b\2\2\u0e23\u01ab\3\2\2\2\u0e24\u0e27"+
		"\5\u020c\u0107\2\u0e25\u0e27\5\u015e\u00b0\2\u0e26\u0e24\3\2\2\2\u0e26"+
		"\u0e25\3\2\2\2\u0e27\u0e29\3\2\2\2\u0e28\u0e2a\5\u02a0\u0151\2\u0e29\u0e28"+
		"\3\2\2\2\u0e29\u0e2a\3\2\2\2\u0e2a\u01ad\3\2\2\2\u0e2b\u0e2d\5\u01b0\u00d9"+
		"\2\u0e2c\u0e2b\3\2\2\2\u0e2c\u0e2d\3\2\2\2\u0e2d\u0e2e\3\2\2\2\u0e2e\u0e37"+
		"\7\u026a\2\2\u0e2f\u0e34\5\u01b2\u00da\2\u0e30\u0e31\7\u0271\2\2\u0e31"+
		"\u0e33\5\u01b2\u00da\2\u0e32\u0e30\3\2\2\2\u0e33\u0e36\3\2\2\2\u0e34\u0e32"+
		"\3\2\2\2\u0e34\u0e35\3\2\2\2\u0e35\u0e38\3\2\2\2\u0e36\u0e34\3\2\2\2\u0e37"+
		"\u0e2f\3\2\2\2\u0e37\u0e38\3\2\2\2\u0e38\u0e39\3\2\2\2\u0e39\u0e3a\7\u026b"+
		"\2\2\u0e3a\u01af\3\2\2\2\u0e3b\u0e41\7\u0197\2\2\u0e3c\u0e42\7\u0202\2"+
		"\2\u0e3d\u0e3f\7\u0204\2\2\u0e3e\u0e40\7\13\2\2\u0e3f\u0e3e\3\2\2\2\u0e3f"+
		"\u0e40\3\2\2\2\u0e40\u0e42\3\2\2\2\u0e41\u0e3c\3\2\2\2\u0e41\u0e3d\3\2"+
		"\2\2\u0e41\u0e42\3\2\2\2\u0e42\u0e45\3\2\2\2\u0e43\u0e44\t)\2\2\u0e44"+
		"\u0e46\7\u014b\2\2\u0e45\u0e43\3\2\2\2\u0e45\u0e46\3\2\2\2\u0e46\u0e48"+
		"\3\2\2\2\u0e47\u0e49\5\u01b6\u00dc\2\u0e48\u0e47\3\2\2\2\u0e48\u0e49\3"+
		"\2\2\2\u0e49\u01b1\3\2\2\2\u0e4a\u0e50\7\u0202\2\2\u0e4b\u0e4d\7\u0204"+
		"\2\2\u0e4c\u0e4e\7\13\2\2\u0e4d\u0e4c\3\2\2\2\u0e4d\u0e4e\3\2\2\2\u0e4e"+
		"\u0e50\3\2\2\2\u0e4f\u0e4a\3\2\2\2\u0e4f\u0e4b\3\2\2\2\u0e4f\u0e50\3\2"+
		"\2\2\u0e50\u0e51\3\2\2\2\u0e51\u0e53\5\u01b4\u00db\2\u0e52\u0e54\5\u01ba"+
		"\u00de\2\u0e53\u0e52\3\2\2\2\u0e53\u0e54\3\2\2\2\u0e54\u0e55\3\2\2\2\u0e55"+
		"\u0e56\7\u0282\2\2\u0e56\u0e57\5\u020c\u0107\2\u0e57\u01b3\3\2\2\2\u0e58"+
		"\u0e59\5\u0234\u011b\2\u0e59\u01b5\3\2\2\2\u0e5a\u0e5b\7\u00e4\2\2\u0e5b"+
		"\u0e5c\7\u026a\2\2\u0e5c\u0e5d\5\u020c\u0107\2\u0e5d\u0e5f\7\u026b\2\2"+
		"\u0e5e\u0e60\5\u01b8\u00dd\2\u0e5f\u0e5e\3\2\2\2\u0e5f\u0e60\3\2\2\2\u0e60"+
		"\u01b7\3\2\2\2\u0e61\u0e62\7\u0200\2\2\u0e62\u0e63\7\u026a\2\2\u0e63\u0e64"+
		"\5\u020a\u0106\2\u0e64\u0e65\7\u026b\2\2\u0e65\u01b9\3\2\2\2\u0e66\u0e68"+
		"\7\u014b\2\2\u0e67\u0e69\7\u01b0\2\2\u0e68\u0e67\3\2\2\2\u0e68\u0e69\3"+
		"\2\2\2\u0e69\u0e6a\3\2\2\2\u0e6a\u0e6b\7\62\2\2\u0e6b\u0e70\5\u01bc\u00df"+
		"\2\u0e6c\u0e6d\7\u0271\2\2\u0e6d\u0e6f\5\u01bc\u00df\2\u0e6e\u0e6c\3\2"+
		"\2\2\u0e6f\u0e72\3\2\2\2\u0e70\u0e6e\3\2\2\2\u0e70\u0e71\3\2\2\2\u0e71"+
		"\u01bb\3\2\2\2\u0e72\u0e70\3\2\2\2\u0e73\u0e75\5\u020c\u0107\2\u0e74\u0e76"+
		"\t*\2\2\u0e75\u0e74\3\2\2\2\u0e75\u0e76\3\2\2\2\u0e76\u0e79\3\2\2\2\u0e77"+
		"\u0e78\7\u0139\2\2\u0e78\u0e7a\t+\2\2\u0e79\u0e77\3\2\2\2\u0e79\u0e7a"+
		"\3\2\2\2\u0e7a\u01bd\3\2\2\2\u0e7b\u0e7c\7\u00b3\2\2\u0e7c\u0e7e\7\u0202"+
		"\2\2\u0e7d\u0e7f\5\u01c0\u00e1\2\u0e7e\u0e7d\3\2\2\2\u0e7e\u0e7f\3\2\2"+
		"\2\u0e7f\u0e81\3\2\2\2\u0e80\u0e82\5\u01c2\u00e2\2\u0e81\u0e80\3\2\2\2"+
		"\u0e81\u0e82\3\2\2\2\u0e82\u01bf\3\2\2\2\u0e83\u0e84\7\u0142\2\2\u0e84"+
		"\u0e89\5\u02e8\u0175\2\u0e85\u0e86\7\u0271\2\2\u0e86\u0e88\5\u02e8\u0175"+
		"\2\u0e87\u0e85\3\2\2\2\u0e88\u0e8b\3\2\2\2\u0e89\u0e87\3\2\2\2\u0e89\u0e8a"+
		"\3\2\2\2\u0e8a\u01c1\3\2\2\2\u0e8b\u0e89\3\2\2\2\u0e8c\u0e8d\7\u01b8\2"+
		"\2\u0e8d\u0e92\7\u00ff\2\2\u0e8e\u0e92\7\u0135\2\2\u0e8f\u0e90\7\u0218"+
		"\2\2\u0e90\u0e92\5\u020c\u0107\2\u0e91\u0e8c\3\2\2\2\u0e91\u0e8e\3\2\2"+
		"\2\u0e91\u0e8f\3\2\2\2\u0e92\u01c3\3\2\2\2\u0e93\u0e94\7\u0202\2\2\u0e94"+
		"\u0e95\5\u01f2\u00fa\2\u0e95\u0e97\5\u01c6\u00e4\2\u0e96\u0e98\5\u02a6"+
		"\u0154\2\u0e97\u0e96\3\2\2\2\u0e97\u0e98\3\2\2\2\u0e98\u0e9a\3\2\2\2\u0e99"+
		"\u0e9b\5\u01f4\u00fb\2\u0e9a\u0e99\3\2\2\2\u0e9a\u0e9b\3\2\2\2\u0e9b\u0e9d"+
		"\3\2\2\2\u0e9c\u0e9e\5\u01f6\u00fc\2\u0e9d\u0e9c\3\2\2\2\u0e9d\u0e9e\3"+
		"\2\2\2\u0e9e\u01c5\3\2\2\2\u0e9f\u0eaf\7\u01aa\2\2\u0ea0\u0ea5\5\u01c8"+
		"\u00e5\2\u0ea1\u0ea2\7\u0271\2\2\u0ea2\u0ea4\5\u01c8\u00e5\2\u0ea3\u0ea1"+
		"\3\2\2\2\u0ea4\u0ea7\3\2\2\2\u0ea5\u0ea3\3\2\2\2\u0ea5\u0ea6\3\2\2\2\u0ea6"+
		"\u0eb0\3\2\2\2\u0ea7\u0ea5\3\2\2\2\u0ea8\u0ea9\7\u020c\2\2\u0ea9\u0eaa"+
		"\7\u026a\2\2\u0eaa\u0eab\5\u031c\u018f\2\u0eab\u0eac\7\u026b\2\2\u0eac"+
		"\u0ead\7\u0282\2\2\u0ead\u0eae\5\u020c\u0107\2\u0eae\u0eb0\3\2\2\2\u0eaf"+
		"\u0ea0\3\2\2\2\u0eaf\u0ea8\3\2\2\2\u0eb0\u01c7\3\2\2\2\u0eb1\u0eb2\5\u02e8"+
		"\u0175\2\u0eb2\u0eb3\7\u0282\2\2\u0eb3\u0eb4\5\u020c\u0107\2\u0eb4\u0ec3"+
		"\3\2\2\2\u0eb5\u0eb6\7\u026a\2\2\u0eb6\u0ebb\5\u02e8\u0175\2\u0eb7\u0eb8"+
		"\7\u0271\2\2\u0eb8\u0eba\5\u02e8\u0175\2\u0eb9\u0eb7\3\2\2\2\u0eba\u0ebd"+
		"\3\2\2\2\u0ebb\u0eb9\3\2\2\2\u0ebb\u0ebc\3\2\2\2\u0ebc\u0ebe\3\2\2\2\u0ebd"+
		"\u0ebb\3\2\2\2\u0ebe\u0ebf\7\u026b\2\2\u0ebf\u0ec0\7\u0282\2\2\u0ec0\u0ec1"+
		"\5\u0158\u00ad\2\u0ec1\u0ec3\3\2\2\2\u0ec2\u0eb1\3\2\2\2\u0ec2\u0eb5\3"+
		"\2\2\2\u0ec3\u01c9\3\2\2\2\u0ec4\u0ec6\7~\2\2\u0ec5\u0ec7\7\u00b4\2\2"+
		"\u0ec6\u0ec5\3\2\2\2\u0ec6\u0ec7\3\2\2\2\u0ec7\u0ec8\3\2\2\2\u0ec8\u0eca"+
		"\5\u01f2\u00fa\2\u0ec9\u0ecb\5\u02a6\u0154\2\u0eca\u0ec9\3\2\2\2\u0eca"+
		"\u0ecb\3\2\2\2\u0ecb\u0ecd\3\2\2\2\u0ecc\u0ece\5\u01f4\u00fb\2\u0ecd\u0ecc"+
		"\3\2\2\2\u0ecd\u0ece\3\2\2\2\u0ece\u0ed0\3\2\2\2\u0ecf\u0ed1\5\u01f6\u00fc"+
		"\2\u0ed0\u0ecf\3\2\2\2\u0ed0\u0ed1\3\2\2\2\u0ed1\u01cb\3\2\2\2\u0ed2\u0ed5"+
		"\7\u00d3\2\2\u0ed3\u0ed6\5\u01ce\u00e8\2\u0ed4\u0ed6\5\u01d0\u00e9\2\u0ed5"+
		"\u0ed3\3\2\2\2\u0ed5\u0ed4\3\2\2\2\u0ed6\u01cd\3\2\2\2\u0ed7\u0edd\5\u01da"+
		"\u00ee\2\u0ed8\u0eda\5\u01dc\u00ef\2\u0ed9\u0edb\5\u01f4\u00fb\2\u0eda"+
		"\u0ed9\3\2\2\2\u0eda\u0edb\3\2\2\2\u0edb\u0ede\3\2\2\2\u0edc\u0ede\5\u014e"+
		"\u00a8\2\u0edd\u0ed8\3\2\2\2\u0edd\u0edc\3\2\2\2\u0ede\u0ee0\3\2\2\2\u0edf"+
		"\u0ee1\5\u01f6\u00fc\2\u0ee0\u0edf\3\2\2\2\u0ee0\u0ee1\3\2\2\2\u0ee1\u01cf"+
		"\3\2\2\2\u0ee2\u0ee4\7\13\2\2\u0ee3\u0ee5\5\u01d2\u00ea\2\u0ee4\u0ee3"+
		"\3\2\2\2\u0ee5\u0ee6\3\2\2\2\u0ee6\u0ee4\3\2\2\2\u0ee6\u0ee7\3\2\2\2\u0ee7"+
		"\u0eea\3\2\2\2\u0ee8\u0eea\5\u01d4\u00eb\2\u0ee9\u0ee2\3\2\2\2\u0ee9\u0ee8"+
		"\3\2\2\2\u0eea\u0eeb\3\2\2\2\u0eeb\u0eec\5\u014e\u00a8\2\u0eec\u01d1\3"+
		"\2\2\2\u0eed\u0eef\5\u01da\u00ee\2\u0eee\u0ef0\5\u01dc\u00ef\2\u0eef\u0eee"+
		"\3\2\2\2\u0eef\u0ef0\3\2\2\2\u0ef0\u0ef2\3\2\2\2\u0ef1\u0ef3\5\u01f6\u00fc"+
		"\2\u0ef2\u0ef1\3\2\2\2\u0ef2\u0ef3\3\2\2\2\u0ef3\u01d3\3\2\2\2\u0ef4\u0ef6"+
		"\t,\2\2\u0ef5\u0ef4\3\2\2\2\u0ef5\u0ef6\3\2\2\2\u0ef6\u0ef8\3\2\2\2\u0ef7"+
		"\u0ef9\5\u01d6\u00ec\2\u0ef8\u0ef7\3\2\2\2\u0ef9\u0efa\3\2\2\2\u0efa\u0ef8"+
		"\3\2\2\2\u0efa\u0efb\3\2\2\2\u0efb\u0efd\3\2\2\2\u0efc\u0efe\5\u01d8\u00ed"+
		"\2\u0efd\u0efc\3\2\2\2\u0efd\u0efe\3\2\2\2\u0efe\u01d5\3\2\2\2\u0eff\u0f00"+
		"\7\u021c\2\2\u0f00\u0f01\5\u020a\u0106\2\u0f01\u0f03\7\u01d7\2\2\u0f02"+
		"\u0f04\5\u01d2\u00ea\2\u0f03\u0f02\3\2\2\2\u0f04\u0f05\3\2\2\2\u0f05\u0f03"+
		"\3\2\2\2\u0f05\u0f06\3\2\2\2\u0f06\u01d7\3\2\2\2\u0f07\u0f09\7\u008d\2"+
		"\2\u0f08\u0f0a\5\u01d2\u00ea\2\u0f09\u0f08\3\2\2\2\u0f0a\u0f0b\3\2\2\2"+
		"\u0f0b\u0f09\3\2\2\2\u0f0b\u0f0c\3\2\2\2\u0f0c\u01d9\3\2\2\2\u0f0d\u0f0e"+
		"\7\u00e0\2\2\u0f0e\u0f1a\5\u01f2\u00fa\2\u0f0f\u0f10\7\u026a\2\2\u0f10"+
		"\u0f15\5\u02e8\u0175\2\u0f11\u0f12\7\u0271\2\2\u0f12\u0f14\5\u02e8\u0175"+
		"\2\u0f13\u0f11\3\2\2\2\u0f14\u0f17\3\2\2\2\u0f15\u0f13\3\2\2\2\u0f15\u0f16"+
		"\3\2\2\2\u0f16\u0f18\3\2\2\2\u0f17\u0f15\3\2\2\2\u0f18\u0f19\7\u026b\2"+
		"\2\u0f19\u0f1b\3\2\2\2\u0f1a\u0f0f\3\2\2\2\u0f1a\u0f1b\3\2\2\2\u0f1b\u01db"+
		"\3\2\2\2\u0f1c\u0f1f\7\u020b\2\2\u0f1d\u0f20\5\u0208\u0105\2\u0f1e\u0f20"+
		"\5\u031c\u018f\2\u0f1f\u0f1d\3\2\2\2\u0f1f\u0f1e\3\2\2\2\u0f20\u01dd\3"+
		"\2\2\2\u0f21\u0f22\7\u010f\2\2\u0f22\u0f23\7\u00e0\2\2\u0f23\u0f25\5\u02ea"+
		"\u0176\2\u0f24\u0f26\5\u02a2\u0152\2\u0f25\u0f24\3\2\2\2\u0f25\u0f26\3"+
		"\2\2\2\u0f26\u0f27\3\2\2\2\u0f27\u0f28\7\u0209\2\2\u0f28\u0f29\5\u01e8"+
		"\u00f5\2\u0f29\u0f2a\7\u0146\2\2\u0f2a\u0f2b\7\u026a\2\2\u0f2b\u0f2c\5"+
		"\u020a\u0106\2\u0f2c\u0f35\7\u026b\2\2\u0f2d\u0f2f\5\u01e0\u00f1\2\u0f2e"+
		"\u0f30\5\u01e6\u00f4\2\u0f2f\u0f2e\3\2\2\2\u0f2f\u0f30\3\2\2\2\u0f30\u0f36"+
		"\3\2\2\2\u0f31\u0f33\5\u01e6\u00f4\2\u0f32\u0f34\5\u01e0\u00f1\2\u0f33"+
		"\u0f32\3\2\2\2\u0f33\u0f34\3\2\2\2\u0f34\u0f36\3\2\2\2\u0f35\u0f2d\3\2"+
		"\2\2\u0f35\u0f31\3\2\2\2\u0f35\u0f36\3\2\2\2\u0f36\u0f38\3\2\2\2\u0f37"+
		"\u0f39\5\u01f6\u00fc\2\u0f38\u0f37\3\2\2\2\u0f38\u0f39\3\2\2\2\u0f39\u01df"+
		"\3\2\2\2\u0f3a\u0f3b\7\u021c\2\2\u0f3b\u0f3c\7\u010b\2\2\u0f3c\u0f3d\7"+
		"\u01d7\2\2\u0f3d\u0f3e\7\u0202\2\2\u0f3e\u0f3f\7\u01aa\2\2\u0f3f\u0f44"+
		"\5\u01e2\u00f2\2\u0f40\u0f41\7\u0271\2\2\u0f41\u0f43\5\u01e2\u00f2\2\u0f42"+
		"\u0f40\3\2\2\2\u0f43\u0f46\3\2\2\2\u0f44\u0f42\3\2\2\2\u0f44\u0f45\3\2"+
		"\2\2\u0f45\u0f48\3\2\2\2\u0f46\u0f44\3\2\2\2\u0f47\u0f49\5\u02a6\u0154"+
		"\2\u0f48\u0f47\3\2\2\2\u0f48\u0f49\3\2\2\2\u0f49\u0f4b\3\2\2\2\u0f4a\u0f4c"+
		"\5\u01e4\u00f3\2\u0f4b\u0f4a\3\2\2\2\u0f4b\u0f4c\3\2\2\2\u0f4c\u01e1\3"+
		"\2\2\2\u0f4d\u0f4e\5\u02e8\u0175\2\u0f4e\u0f4f\7\u0282\2\2\u0f4f\u0f50"+
		"\5\u020c\u0107\2\u0f50\u01e3\3\2\2\2\u0f51\u0f52\7~\2\2\u0f52\u0f53\5"+
		"\u02a6\u0154\2\u0f53\u01e5\3\2\2\2\u0f54\u0f55\7\u021c\2\2\u0f55\u0f56"+
		"\7\u0134\2\2\u0f56\u0f57\7\u010b\2\2\u0f57\u0f58\7\u01d7\2\2\u0f58\u0f64"+
		"\7\u00d3\2\2\u0f59\u0f5a\7\u026a\2\2\u0f5a\u0f5f\5\u02e8\u0175\2\u0f5b"+
		"\u0f5c\7\u0271\2\2\u0f5c\u0f5e\5\u02e8\u0175\2\u0f5d\u0f5b\3\2\2\2\u0f5e"+
		"\u0f61\3\2\2\2\u0f5f\u0f5d\3\2\2\2\u0f5f\u0f60\3\2\2\2\u0f60\u0f62\3\2"+
		"\2\2\u0f61\u0f5f\3\2\2\2\u0f62\u0f63\7\u026b\2\2\u0f63\u0f65\3\2\2\2\u0f64"+
		"\u0f59\3\2\2\2\u0f64\u0f65\3\2\2\2\u0f65\u0f66\3\2\2\2\u0f66\u0f67\7\u020b"+
		"\2\2\u0f67\u0f69\5\u0208\u0105\2\u0f68\u0f6a\5\u02a6\u0154\2\u0f69\u0f68"+
		"\3\2\2\2\u0f69\u0f6a\3\2\2\2\u0f6a\u01e7\3\2\2\2\u0f6b\u0f71\5\u02ea\u0176"+
		"\2\u0f6c\u0f6d\7\u026a\2\2\u0f6d\u0f6e\5\u014e\u00a8\2\u0f6e\u0f6f\7\u026b"+
		"\2\2\u0f6f\u0f71\3\2\2\2\u0f70\u0f6b\3\2\2\2\u0f70\u0f6c\3\2\2\2\u0f71"+
		"\u0f73\3\2\2\2\u0f72\u0f74\5\u02a2\u0152\2\u0f73\u0f72\3\2\2\2\u0f73\u0f74"+
		"\3\2\2\2\u0f74\u01e9\3\2\2\2\u0f75\u0f76\7\u0100\2\2\u0f76\u0f77\7\u01d4"+
		"\2\2\u0f77\u0f7c\5\u01ee\u00f8\2\u0f78\u0f79\7\u0271\2\2\u0f79\u0f7b\5"+
		"\u01ee\u00f8\2\u0f7a\u0f78\3\2\2\2\u0f7b\u0f7e\3\2\2\2\u0f7c\u0f7a\3\2"+
		"\2\2\u0f7c\u0f7d\3\2\2\2\u0f7d\u0f7f\3\2\2\2\u0f7e\u0f7c\3\2\2\2\u0f7f"+
		"\u0f80\7\u00ce\2\2\u0f80\u0f81\5\u01f0\u00f9\2\u0f81\u0f83\7\u0115\2\2"+
		"\u0f82\u0f84\5\u01ec\u00f7\2\u0f83\u0f82\3\2\2\2\u0f83\u0f84\3\2\2\2\u0f84"+
		"\u01eb\3\2\2\2\u0f85\u0f86\7\u0218\2\2\u0f86\u0f89\5\u020c\u0107\2\u0f87"+
		"\u0f89\7\u0135\2\2\u0f88\u0f85\3\2\2\2\u0f88\u0f87\3\2\2\2\u0f89\u01ed"+
		"\3\2\2\2\u0f8a\u0f8c\5\u02ea\u0176\2\u0f8b\u0f8d\5\u029e\u0150\2\u0f8c"+
		"\u0f8b\3\2\2\2\u0f8c\u0f8d\3\2\2\2\u0f8d\u01ef\3\2\2\2\u0f8e\u0f8f\7\u0193"+
		"\2\2\u0f8f\u0f9b\7\u01ad\2\2\u0f90\u0f91\7\u0193\2\2\u0f91\u0f9b\7\u009e"+
		"\2\2\u0f92\u0f94\7\u01ad\2\2\u0f93\u0f95\7\u0202\2\2\u0f94\u0f93\3\2\2"+
		"\2\u0f94\u0f95\3\2\2\2\u0f95\u0f9b\3\2\2\2\u0f96\u0f97\7\u01ad\2\2\u0f97"+
		"\u0f98\7\u0193\2\2\u0f98\u0f9b\7\u009e\2\2\u0f99\u0f9b\7\u009e\2\2\u0f9a"+
		"\u0f8e\3\2\2\2\u0f9a\u0f90\3\2\2\2\u0f9a\u0f92\3\2\2\2\u0f9a\u0f96\3\2"+
		"\2\2\u0f9a\u0f99\3\2\2\2\u0f9b\u01f1\3\2\2\2\u0f9c\u0fa3\5\u01fc\u00ff"+
		"\2\u0f9d\u0f9e\7\u0145\2\2\u0f9e\u0f9f\7\u026a\2\2\u0f9f\u0fa0\5\u01fc"+
		"\u00ff\2\u0fa0\u0fa1\7\u026b\2\2\u0fa1\u0fa3\3\2\2\2\u0fa2\u0f9c\3\2\2"+
		"\2\u0fa2\u0f9d\3\2\2\2\u0fa3\u0fa5\3\2\2\2\u0fa4\u0fa6\5\u02a2\u0152\2"+
		"\u0fa5\u0fa4\3\2\2\2\u0fa5\u0fa6\3\2\2\2\u0fa6\u01f3\3\2\2\2\u0fa7\u0fa8"+
		"\t\31\2\2\u0fa8\u0fad\5\u020c\u0107\2\u0fa9\u0faa\7\u0271\2\2\u0faa\u0fac"+
		"\5\u020c\u0107\2\u0fab\u0fa9\3\2\2\2\u0fac\u0faf\3\2\2\2\u0fad\u0fab\3"+
		"\2\2\2\u0fad\u0fae\3\2\2\2\u0fae\u0fb0\3\2\2\2\u0faf\u0fad\3\2\2\2\u0fb0"+
		"\u0fb1\5\u02aa\u0156\2\u0fb1\u01f5\3\2\2\2\u0fb2\u0fb3\7\u0101\2\2\u0fb3"+
		"\u0fb5\7\u0097\2\2\u0fb4\u0fb6\5\u01f8\u00fd\2\u0fb5\u0fb4\3\2\2\2\u0fb5"+
		"\u0fb6\3\2\2\2\u0fb6\u0fb8\3\2\2\2\u0fb7\u0fb9\5\u020c\u0107\2\u0fb8\u0fb7"+
		"\3\2\2\2\u0fb8\u0fb9\3\2\2\2\u0fb9\u0fbb\3\2\2\2\u0fba\u0fbc\5\u01fa\u00fe"+
		"\2\u0fbb\u0fba\3\2\2\2\u0fbb\u0fbc\3\2\2\2\u0fbc\u01f7\3\2\2\2\u0fbd\u0fbe"+
		"\7\u00e0\2\2\u0fbe\u0fbf\5\u02ea\u0176\2\u0fbf\u01f9\3\2\2\2\u0fc0\u0fc1"+
		"\7\u0180\2\2\u0fc1\u0fc4\7\u00fa\2\2\u0fc2\u0fc5\7\u01fe\2\2\u0fc3\u0fc5"+
		"\5\u020c\u0107\2\u0fc4\u0fc2\3\2\2\2\u0fc4\u0fc3\3\2\2\2\u0fc5\u01fb\3"+
		"\2\2\2\u0fc6\u0fd3\5\u01fe\u0100\2\u0fc7\u0fc8\7\u026a\2\2\u0fc8\u0fca"+
		"\5\u014e\u00a8\2\u0fc9\u0fcb\5\u0200\u0101\2\u0fca\u0fc9\3\2\2\2\u0fca"+
		"\u0fcb\3\2\2\2\u0fcb\u0fcc\3\2\2\2\u0fcc\u0fcd\7\u026b\2\2\u0fcd\u0fd3"+
		"\3\2\2\2\u0fce\u0fd0\5\u02ea\u0176\2\u0fcf\u0fd1\5\u0202\u0102\2\u0fd0"+
		"\u0fcf\3\2\2\2\u0fd0\u0fd1\3\2\2\2\u0fd1\u0fd3\3\2\2\2\u0fd2\u0fc6\3\2"+
		"\2\2\u0fd2\u0fc7\3\2\2\2\u0fd2\u0fce\3\2\2\2\u0fd3\u01fd\3\2\2\2\u0fd4"+
		"\u0fe1\t-\2\2\u0fd5\u0fd6\7\u026a\2\2\u0fd6\u0fd7\5\u0158\u00ad\2\u0fd7"+
		"\u0fd8\7\u026b\2\2\u0fd8\u0fe2\3\2\2\2\u0fd9\u0fda\7\u026a\2\2\u0fda\u0fdb"+
		"\5\u020c\u0107\2\u0fdb\u0fdf\7\u026b\2\2\u0fdc\u0fdd\7\u026a\2\2\u0fdd"+
		"\u0fde\7\u026e\2\2\u0fde\u0fe0\7\u026b\2\2\u0fdf\u0fdc\3\2\2\2\u0fdf\u0fe0"+
		"\3\2\2\2\u0fe0\u0fe2\3\2\2\2\u0fe1\u0fd5\3\2\2\2\u0fe1\u0fd9\3\2\2\2\u0fe2"+
		"\u01ff\3\2\2\2\u0fe3\u0fec\7\u0220\2\2\u0fe4\u0fe5\7\u0175\2\2\u0fe5\u0fed"+
		"\7\u0145\2\2\u0fe6\u0fe7\7?\2\2\u0fe7\u0fea\7\u0149\2\2\u0fe8\u0fe9\7"+
		"T\2\2\u0fe9\u0feb\5\u02ca\u0166\2\u0fea\u0fe8\3\2\2\2\u0fea\u0feb\3\2"+
		"\2\2\u0feb\u0fed\3\2\2\2\u0fec\u0fe4\3\2\2\2\u0fec\u0fe6\3\2\2\2\u0fed"+
		"\u0201\3\2\2\2\u0fee\u0ff0\7\u0198\2\2\u0fef\u0ff1\7,\2\2\u0ff0\u0fef"+
		"\3\2\2\2\u0ff0\u0ff1\3\2\2\2\u0ff1\u0ff2\3\2\2\2\u0ff2\u0ff3\7\u026a\2"+
		"\2\u0ff3\u0ff6\5\u020c\u0107\2\u0ff4\u0ff5\7\u0271\2\2\u0ff5\u0ff7\5\u020c"+
		"\u0107\2\u0ff6\u0ff4\3\2\2\2\u0ff6\u0ff7\3\2\2\2\u0ff7\u0ff8\3\2\2\2\u0ff8"+
		"\u0ffa\7\u026b\2\2\u0ff9\u0ffb\5\u0204\u0103\2\u0ffa\u0ff9\3\2\2\2\u0ffa"+
		"\u0ffb\3\2\2\2\u0ffb\u0203\3\2\2\2\u0ffc\u0ffd\7\u01a0\2\2\u0ffd\u0ffe"+
		"\7\u026a\2\2\u0ffe\u0fff\5\u020c\u0107\2\u0fff\u1000\7\u026b\2\2\u1000"+
		"\u0205\3\2\2\2\u1001\u1002\7j\2\2\u1002\u1003\7\u026a\2\2\u1003\u1004"+
		"\5\u0158\u00ad\2\u1004\u1005\7\u026b\2\2\u1005\u0207\3\2\2\2\u1006\u1008"+
		"\7\u026a\2\2\u1007\u1009\5\u020c\u0107\2\u1008\u1007\3\2\2\2\u1008\u1009"+
		"\3\2\2\2\u1009\u100e\3\2\2\2\u100a\u100b\7\u0271\2\2\u100b\u100d\5\u020c"+
		"\u0107\2\u100c\u100a\3\2\2\2\u100d\u1010\3\2\2\2\u100e\u100c\3\2\2\2\u100e"+
		"\u100f\3\2\2\2\u100f\u1011\3\2\2\2\u1010\u100e\3\2\2\2\u1011\u1012\7\u026b"+
		"\2\2\u1012\u0209\3\2\2\2\u1013\u1014\5\u020c\u0107\2\u1014\u020b\3\2\2"+
		"\2\u1015\u1018\5\u0206\u0104\2\u1016\u1018\5\u020e\u0108\2\u1017\u1015"+
		"\3\2\2\2\u1017\u1016\3\2\2\2\u1018\u020d\3\2\2\2\u1019\u101a\b\u0108\1"+
		"\2\u101a\u101b\5\u0210\u0109\2\u101b\u1021\3\2\2\2\u101c\u101d\f\3\2\2"+
		"\u101d\u101e\7\u014d\2\2\u101e\u1020\5\u0210\u0109\2\u101f\u101c\3\2\2"+
		"\2\u1020\u1023\3\2\2\2\u1021\u101f\3\2\2\2\u1021\u1022\3\2\2\2\u1022\u020f"+
		"\3\2\2\2\u1023\u1021\3\2\2\2\u1024\u1025\b\u0109\1\2\u1025\u1026\5\u0212"+
		"\u010a\2\u1026\u102c\3\2\2\2\u1027\u1028\f\3\2\2\u1028\u1029\7\16\2\2"+
		"\u1029\u102b\5\u0212\u010a\2\u102a\u1027\3\2\2\2\u102b\u102e\3\2\2\2\u102c"+
		"\u102a\3\2\2\2\u102c\u102d\3\2\2\2\u102d\u0211\3\2\2\2\u102e\u102c\3\2"+
		"\2\2\u102f\u1030\7\u0134\2\2\u1030\u1033\5\u0212\u010a\2\u1031\u1033\5"+
		"\u0214\u010b\2\u1032\u102f\3\2\2\2\u1032\u1031\3\2\2\2\u1033\u0213\3\2"+
		"\2\2\u1034\u1056\5\u0216\u010c\2\u1035\u1037\7\u00e2\2\2\u1036\u1038\7"+
		"\u0134\2\2\u1037\u1036\3\2\2\2\u1037\u1038\3\2\2\2\u1038\u1052\3\2\2\2"+
		"\u1039\u1053\7\u0138\2\2\u103a\u1053\7\u011c\2\2\u103b\u1053\7\u016c\2"+
		"\2\u103c\u1053\7\u00cd\2\2\u103d\u103e\7\n\2\2\u103e\u1053\7\u01aa\2\2"+
		"\u103f\u1053\7\u0091\2\2\u1040\u1042\7\u0142\2\2\u1041\u1043\7\u01f7\2"+
		"\2\u1042\u1041\3\2\2\2\u1042\u1043\3\2\2\2\u1043\u1044\3\2\2\2\u1044\u1046"+
		"\7\u026a\2\2\u1045\u1047\7\u0145\2\2\u1046\u1045\3\2\2\2\u1046\u1047\3"+
		"\2\2\2\u1047\u1048\3\2\2\2\u1048\u104d\5\u0300\u0181\2\u1049\u104a\7\u0271"+
		"\2\2\u104a\u104c\5\u0300\u0181\2\u104b\u1049\3\2\2\2\u104c\u104f\3\2\2"+
		"\2\u104d\u104b\3\2\2\2\u104d\u104e\3\2\2\2\u104e\u1050\3\2\2\2\u104f\u104d"+
		"\3\2\2\2\u1050\u1051\7\u026b\2\2\u1051\u1053\3\2\2\2\u1052\u1039\3\2\2"+
		"\2\u1052\u103a\3\2\2\2\u1052\u103b\3\2\2\2\u1052\u103c\3\2\2\2\u1052\u103d"+
		"\3\2\2\2\u1052\u103f\3\2\2\2\u1052\u1040\3\2\2\2\u1053\u1055\3\2\2\2\u1054"+
		"\u1035\3\2\2\2\u1055\u1058\3\2\2\2\u1056\u1054\3\2\2\2\u1056\u1057\3\2"+
		"\2\2\u1057\u0215\3\2\2\2\u1058\u1056\3\2\2\2\u1059\u1060\5\u021a\u010e"+
		"\2\u105a\u105c\5\u0218\u010d\2\u105b\u105d\7\u0142\2\2\u105c\u105b\3\2"+
		"\2\2\u105c\u105d\3\2\2\2\u105d\u105e\3\2\2\2\u105e\u105f\5\u022a\u0116"+
		"\2\u105f\u1061\3\2\2\2\u1060\u105a\3\2\2\2\u1060\u1061\3\2\2\2\u1061\u0217"+
		"\3\2\2\2\u1062\u1063\t.\2\2\u1063\u0219\3\2\2\2\u1064\u1065\b\u010e\1"+
		"\2\u1065\u1066\5\u021e\u0110\2\u1066\u106d\3\2\2\2\u1067\u1068\f\4\2\2"+
		"\u1068\u1069\5\u021c\u010f\2\u1069\u106a\5\u021a\u010e\5\u106a\u106c\3"+
		"\2\2\2\u106b\u1067\3\2\2\2\u106c\u106f\3\2\2\2\u106d\u106b\3\2\2\2\u106d"+
		"\u106e\3\2\2\2\u106e\u021b\3\2\2\2\u106f\u106d\3\2\2\2\u1070\u1077\7\u0282"+
		"\2\2\u1071\u1077\5\u0320\u0191\2\u1072\u1077\7\u0279\2\2\u1073\u1077\7"+
		"\u027f\2\2\u1074\u1077\5\u0324\u0193\2\u1075\u1077\5\u0322\u0192\2\u1076"+
		"\u1070\3\2\2\2\u1076\u1071\3\2\2\2\u1076\u1072\3\2\2\2\u1076\u1073\3\2"+
		"\2\2\u1076\u1074\3\2\2\2\u1076\u1075\3\2\2\2\u1077\u021d\3\2\2\2\u1078"+
		"\u1087\5\u022a\u0116\2\u1079\u107b\7\u0134\2\2\u107a\u1079\3\2\2\2\u107a"+
		"\u107b\3\2\2\2\u107b\u1085\3\2\2\2\u107c\u107d\7\u00ce\2\2\u107d\u1086"+
		"\5\u0226\u0114\2\u107e\u107f\7#\2\2\u107f\u1086\5\u0228\u0115\2\u1080"+
		"\u1081\5\u0222\u0112\2\u1081\u1083\5\u0220\u0111\2\u1082\u1084\5\u0224"+
		"\u0113\2\u1083\u1082\3\2\2\2\u1083\u1084\3\2\2\2\u1084\u1086\3\2\2\2\u1085"+
		"\u107c\3\2\2\2\u1085\u107e\3\2\2\2\u1085\u1080\3\2\2\2\u1086\u1088\3\2"+
		"\2\2\u1087\u107a\3\2\2\2\u1087\u1088\3\2\2\2\u1088\u021f\3\2\2\2\u1089"+
		"\u108a\5\u022a\u0116\2\u108a\u0221\3\2\2\2\u108b\u108c\t/\2\2\u108c\u0223"+
		"\3\2\2\2\u108d\u108e\7\u0098\2\2\u108e\u108f\5\u022a\u0116\2\u108f\u0225"+
		"\3\2\2\2\u1090\u1091\7\u026a\2\2\u1091\u1092\5\u0158\u00ad\2\u1092\u1093"+
		"\7\u026b\2\2\u1093\u10a3\3\2\2\2\u1094\u1095\7\u026a\2\2\u1095\u109a\5"+
		"\u022a\u0116\2\u1096\u1097\7\u0271\2\2\u1097\u1099\5\u022a\u0116\2\u1098"+
		"\u1096\3\2\2\2\u1099\u109c\3\2\2\2\u109a\u1098\3\2\2\2\u109a\u109b\3\2"+
		"\2\2\u109b\u109d\3\2\2\2\u109c\u109a\3\2\2\2\u109d\u109e\7\u026b\2\2\u109e"+
		"\u10a3\3\2\2\2\u109f\u10a3\5\u0310\u0189\2\u10a0\u10a3\5\u0308\u0185\2"+
		"\u10a1\u10a3\5\u030a\u0186\2\u10a2\u1090\3\2\2\2\u10a2\u1094\3\2\2\2\u10a2"+
		"\u109f\3\2\2\2\u10a2\u10a0\3\2\2\2\u10a2\u10a1\3\2\2\2\u10a3\u0227\3\2"+
		"\2\2\u10a4\u10a5\5\u022a\u0116\2\u10a5\u10a6\7\16\2\2\u10a6\u10a7\5\u022a"+
		"\u0116\2\u10a7\u0229\3\2\2\2\u10a8\u10ae\5\u022c\u0117\2\u10a9\u10aa\5"+
		"\u0326\u0194\2\u10aa\u10ab\5\u022c\u0117\2\u10ab\u10ad\3\2\2\2\u10ac\u10a9"+
		"\3\2\2\2\u10ad\u10b0\3\2\2\2\u10ae\u10ac\3\2\2\2\u10ae\u10af\3\2\2\2\u10af"+
		"\u022b\3\2\2\2\u10b0\u10ae\3\2\2\2\u10b1\u10b6\5\u022e\u0118\2\u10b2\u10b3"+
		"\t\60\2\2\u10b3\u10b5\5\u022e\u0118\2\u10b4\u10b2\3\2\2\2\u10b5\u10b8"+
		"\3\2\2\2\u10b6\u10b4\3\2\2\2\u10b6\u10b7\3\2\2\2\u10b7\u022d\3\2\2\2\u10b8"+
		"\u10b6\3\2\2\2\u10b9\u10be\5\u0230\u0119\2\u10ba\u10bb\t\61\2\2\u10bb"+
		"\u10bd\5\u0230\u0119\2\u10bc\u10ba\3\2\2\2\u10bd\u10c0\3\2\2\2\u10be\u10bc"+
		"\3\2\2\2\u10be\u10bf\3\2\2\2\u10bf\u022f\3\2\2\2\u10c0\u10be\3\2\2\2\u10c1"+
		"\u10ca\5\u0234\u011b\2\u10c2\u10c7\7\31\2\2\u10c3\u10c8\7\u00fd\2\2\u10c4"+
		"\u10c5\7\u01dd\2\2\u10c5\u10c6\7\u0235\2\2\u10c6\u10c8\5\u022a\u0116\2"+
		"\u10c7\u10c3\3\2\2\2\u10c7\u10c4\3\2\2\2\u10c8\u10cb\3\2\2\2\u10c9\u10cb"+
		"\5\u0232\u011a\2\u10ca\u10c2\3\2\2\2\u10ca\u10c9\3\2\2\2\u10ca\u10cb\3"+
		"\2\2\2\u10cb\u0231\3\2\2\2\u10cc\u10d1\7p\2\2\u10cd\u10ce\7\u026a\2\2"+
		"\u10ce\u10cf\5\u022a\u0116\2\u10cf\u10d0\7\u026b\2\2\u10d0\u10d2\3\2\2"+
		"\2\u10d1\u10cd\3\2\2\2\u10d1\u10d2\3\2\2\2\u10d2\u10d3\3\2\2\2\u10d3\u10d4"+
		"\7\u01ed\2\2\u10d4\u10d9\7\u019f\2\2\u10d5\u10d6\7\u026a\2\2\u10d6\u10d7"+
		"\5\u022a\u0116\2\u10d7\u10d8\7\u026b\2\2\u10d8\u10da\3\2\2\2\u10d9\u10d5"+
		"\3\2\2\2\u10d9\u10da\3\2\2\2\u10da\u10e5\3\2\2\2\u10db\u10e0\7\u0232\2"+
		"\2\u10dc\u10dd\7\u026a\2\2\u10dd\u10de\5\u022a\u0116\2\u10de\u10df\7\u026b"+
		"\2\2\u10df\u10e1\3\2\2\2\u10e0\u10dc\3\2\2\2\u10e0\u10e1\3\2\2\2\u10e1"+
		"\u10e2\3\2\2\2\u10e2\u10e3\7\u01ed\2\2\u10e3\u10e5\7\u0118\2\2\u10e4\u10cc"+
		"\3\2\2\2\u10e4\u10db\3\2\2\2\u10e5\u0233\3\2\2\2\u10e6\u10eb\5\u0240\u0121"+
		"\2\u10e7\u10e8\7\u0283\2\2\u10e8\u10e9\5\u0236\u011c\2\u10e9\u10ea\7\u0284"+
		"\2\2\u10ea\u10ec\3\2\2\2\u10eb\u10e7\3\2\2\2\u10eb\u10ec\3\2\2\2\u10ec"+
		"\u0235\3\2\2\2\u10ed\u10f0\7\17\2\2\u10ee\u10f0\5\u020c\u0107\2\u10ef"+
		"\u10ed\3\2\2\2\u10ef\u10ee\3\2\2\2\u10f0\u10f8\3\2\2\2\u10f1\u10f4\7\u0271"+
		"\2\2\u10f2\u10f5\7\17\2\2\u10f3\u10f5\5\u020c\u0107\2\u10f4\u10f2\3\2"+
		"\2\2\u10f4\u10f3\3\2\2\2\u10f5\u10f7\3\2\2\2\u10f6\u10f1\3\2\2\2\u10f7"+
		"\u10fa\3\2\2\2\u10f8\u10f6\3\2\2\2\u10f8\u10f9\3\2\2\2\u10f9\u1105\3\2"+
		"\2\2\u10fa\u10f8\3\2\2\2\u10fb\u1100\5\u0238\u011d\2\u10fc\u10fd\7\u0271"+
		"\2\2\u10fd\u10ff\5\u0238\u011d\2\u10fe\u10fc\3\2\2\2\u10ff\u1102\3\2\2"+
		"\2\u1100\u10fe\3\2\2\2\u1100\u1101\3\2\2\2\u1101\u1105\3\2\2\2\u1102\u1100"+
		"\3\2\2\2\u1103\u1105\5\u023e\u0120\2\u1104\u10ef\3\2\2\2\u1104\u10fb\3"+
		"\2\2\2\u1104\u1103\3\2\2\2\u1105\u0237\3\2\2\2\u1106\u1107\7\u00b3\2\2"+
		"\u1107\u1114\5\u02e8\u0175\2\u1108\u1109\7\u00ce\2\2\u1109\u1115\5\u0208"+
		"\u0105\2\u110a\u110c\5\u023a\u011e\2\u110b\u110a\3\2\2\2\u110b\u110c\3"+
		"\2\2\2\u110c\u110d\3\2\2\2\u110d\u110e\7\u00b4\2\2\u110e\u110f\5\u020c"+
		"\u0107\2\u110f\u1110\7\u01ed\2\2\u1110\u1111\5\u020c\u0107\2\u1111\u1112"+
		"\5\u023c\u011f\2\u1112\u1113\5\u020c\u0107\2\u1113\u1115\3\2\2\2\u1114"+
		"\u1108\3\2\2\2\u1114\u110b\3\2\2\2\u1115\u0239\3\2\2\2\u1116\u1117\7\u00f9"+
		"\2\2\u1117\u1118\5\u020c\u0107\2\u1118\u023b\3\2\2\2\u1119\u111a\t\62"+
		"\2\2\u111a\u023d\3\2\2\2\u111b\u111c\7\u00b3\2\2\u111c\u111d\7\u026a\2"+
		"\2\u111d\u1122\5\u02e8\u0175\2\u111e\u111f\7\u0271\2\2\u111f\u1121\5\u02e8"+
		"\u0175\2\u1120\u111e\3\2\2\2\u1121\u1124\3\2\2\2\u1122\u1120\3\2\2\2\u1122"+
		"\u1123\3\2\2\2\u1123\u1125\3\2\2\2\u1124\u1122\3\2\2\2\u1125\u1126\7\u026b"+
		"\2\2\u1126\u1127\7\u00ce\2\2\u1127\u1134\7\u026a\2\2\u1128\u1135\5\u0158"+
		"\u00ad\2\u1129\u112a\7\u026a\2\2\u112a\u112f\5\u0208\u0105\2\u112b\u112c"+
		"\7\u0271\2\2\u112c\u112e\5\u0208\u0105\2\u112d\u112b\3\2\2\2\u112e\u1131"+
		"\3\2\2\2\u112f\u112d\3\2\2\2\u112f\u1130\3\2\2\2\u1130\u1132\3\2\2\2\u1131"+
		"\u112f\3\2\2\2\u1132\u1133\7\u026b\2\2\u1133\u1135\3\2\2\2\u1134\u1128"+
		"\3\2\2\2\u1134\u1129\3\2\2\2\u1135\u1136\3\2\2\2\u1136\u1137\7\u026b\2"+
		"\2\u1137\u023f\3\2\2\2\u1138\u1139\t\60\2\2\u1139\u1148\5\u0240\u0121"+
		"\2\u113a\u113b\7\u016e\2\2\u113b\u1148\5\u0240\u0121\2\u113c\u113d\7Q"+
		"\2\2\u113d\u1148\5\u0240\u0121\2\u113e\u113f\7\u0126\2\2\u113f\u1148\5"+
		"\u0240\u0121\2\u1140\u1141\7\u0085\2\2\u1141\u1148\5\u0240\u0121\2\u1142"+
		"\u1143\7\13\2\2\u1143\u1148\5\u0240\u0121\2\u1144\u1148\5\u0242\u0122"+
		"\2\u1145\u1148\5\u0254\u012b\2\u1146\u1148\5\u024e\u0128\2\u1147\u1138"+
		"\3\2\2\2\u1147\u113a\3\2\2\2\u1147\u113c\3\2\2\2\u1147\u113e\3\2\2\2\u1147"+
		"\u1140\3\2\2\2\u1147\u1142\3\2\2\2\u1147\u1144\3\2\2\2\u1147\u1145\3\2"+
		"\2\2\u1147\u1146\3\2\2\2\u1148\u0241\3\2\2\2\u1149\u114c\5\u0248\u0125"+
		"\2\u114a\u114c\5\u0244\u0123\2\u114b\u1149\3\2\2\2\u114b\u114a\3\2\2\2"+
		"\u114c\u0243\3\2\2\2\u114d\u114e\78\2\2\u114e\u1150\5\u020c\u0107\2\u114f"+
		"\u1151\5\u0246\u0124\2\u1150\u114f\3\2\2\2\u1151\u1152\3\2\2\2\u1152\u1150"+
		"\3\2\2\2\u1152\u1153\3\2\2\2\u1153\u1155\3\2\2\2\u1154\u1156\5\u024c\u0127"+
		"\2\u1155\u1154\3\2\2\2\u1155\u1156\3\2\2\2\u1156\u1157\3\2\2\2\u1157\u1159"+
		"\7\u0094\2\2\u1158\u115a\78\2\2\u1159\u1158\3\2\2\2\u1159\u115a\3\2\2"+
		"\2\u115a\u0245\3\2\2\2\u115b\u115c\7\u021c\2\2\u115c\u115d\5\u020c\u0107"+
		"\2\u115d\u1160\7\u01d7\2\2\u115e\u1161\5\u00fa~\2\u115f\u1161\5\u020c"+
		"\u0107\2\u1160\u115e\3\2\2\2\u1160\u115f\3\2\2\2\u1161\u0247\3\2\2\2\u1162"+
		"\u1164\78\2\2\u1163\u1165\5\u024a\u0126\2\u1164\u1163\3\2\2\2\u1165\u1166"+
		"\3\2\2\2\u1166\u1164\3\2\2\2\u1166\u1167\3\2\2\2\u1167\u1169\3\2\2\2\u1168"+
		"\u116a\5\u024c\u0127\2\u1169\u1168\3\2\2\2\u1169\u116a\3\2\2\2\u116a\u116b"+
		"\3\2\2\2\u116b\u116d\7\u0094\2\2\u116c\u116e\78\2\2\u116d\u116c\3\2\2"+
		"\2\u116d\u116e\3\2\2\2\u116e\u0249\3\2\2\2\u116f\u1170\7\u021c\2\2\u1170"+
		"\u1171\5\u020c\u0107\2\u1171\u1174\7\u01d7\2\2\u1172\u1175\5\u00fa~\2"+
		"\u1173\u1175\5\u020c\u0107\2\u1174\u1172\3\2\2\2\u1174\u1173\3\2\2\2\u1175"+
		"\u024b\3\2\2\2\u1176\u1179\7\u008d\2\2\u1177\u117a\5\u00fa~\2\u1178\u117a"+
		"\5\u020c\u0107\2\u1179\u1177\3\2\2\2\u1179\u1178\3\2\2\2\u117a\u024d\3"+
		"\2\2\2\u117b\u117c\5\u030e\u0188\2\u117c\u117d\5\u0328\u0195\2\u117d\u1190"+
		"\3\2\2\2\u117e\u1190\5\u0308\u0185\2\u117f\u1190\5\u0310\u0189\2\u1180"+
		"\u1190\5\u030a\u0186\2\u1181\u118d\7\u026a\2\2\u1182\u1183\5\u0158\u00ad"+
		"\2\u1183\u1187\7\u026b\2\2\u1184\u1186\5\u015a\u00ae\2\u1185\u1184\3\2"+
		"\2\2\u1186\u1189\3\2\2\2\u1187\u1185\3\2\2\2\u1187\u1188\3\2\2\2\u1188"+
		"\u118e\3\2\2\2\u1189\u1187\3\2\2\2\u118a\u118b\5\u0250\u0129\2\u118b\u118c"+
		"\7\u026b\2\2\u118c\u118e\3\2\2\2\u118d\u1182\3\2\2\2\u118d\u118a\3\2\2"+
		"\2\u118e\u1190\3\2\2\2\u118f\u117b\3\2\2\2\u118f\u117e\3\2\2\2\u118f\u117f"+
		"\3\2\2\2\u118f\u1180\3\2\2\2\u118f\u1181\3\2\2\2\u1190\u024f\3\2\2\2\u1191"+
		"\u1193\5\u020c\u0107\2\u1192\u1194\5\u0252\u012a\2\u1193\u1192\3\2\2\2"+
		"\u1193\u1194\3\2\2\2\u1194\u0251\3\2\2\2\u1195\u1196\7\u0271\2\2\u1196"+
		"\u119b\5\u020c\u0107\2\u1197\u1198\7\u0271\2\2\u1198\u119a\5\u020c\u0107"+
		"\2\u1199\u1197\3\2\2\2\u119a\u119d\3\2\2\2\u119b\u1199\3\2\2\2\u119b\u119c"+
		"\3\2\2\2\u119c\u0253\3\2\2\2\u119d\u119b\3\2\2\2\u119e\u11a7\t\63\2\2"+
		"\u119f\u11a0\7\u026a\2\2\u11a0\u11a1\5\u0158\u00ad\2\u11a1\u11a2\7\u026b"+
		"\2\2\u11a2\u11a8\3\2\2\2\u11a3\u11a4\7\u026a\2\2\u11a4\u11a5\5\u020c\u0107"+
		"\2\u11a5\u11a6\7\u026b\2\2\u11a6\u11a8\3\2\2\2\u11a7\u119f\3\2\2\2\u11a7"+
		"\u11a3\3\2\2\2\u11a8";
	private static final String _serializedATNSegment2 =
		"\u0255\3\2\2\2\u11a9\u11aa\7\u0252\2\2\u11aa\u11ab\7\u026a\2\2\u11ab\u11ac"+
		"\5\u020c\u0107\2\u11ac\u11ad\7\u0271\2\2\u11ad\u11b0\5\u020c\u0107\2\u11ae"+
		"\u11af\7\u0271\2\2\u11af\u11b1\5\u020c\u0107\2\u11b0\u11ae\3\2\2\2\u11b0"+
		"\u11b1\3\2\2\2\u11b1\u11b2\3\2\2\2\u11b2\u11b3\7\u026b\2\2\u11b3\u11f8"+
		"\3\2\2\2\u11b4\u11b5\7\u0253\2\2\u11b5\u11b6\7\u026a\2\2\u11b6\u11b9\5"+
		"\u020c\u0107\2\u11b7\u11b8\7\u0271\2\2\u11b8\u11ba\5\u031a\u018e\2\u11b9"+
		"\u11b7\3\2\2\2\u11b9\u11ba\3\2\2\2\u11ba\u11bd\3\2\2\2\u11bb\u11bc\7\u0271"+
		"\2\2\u11bc\u11be\5\u031a\u018e\2\u11bd\u11bb\3\2\2\2\u11bd\u11be\3\2\2"+
		"\2\u11be\u11bf\3\2\2\2\u11bf\u11c0\7\u026b\2\2\u11c0\u11f8\3\2\2\2\u11c1"+
		"\u11c2\7\u0246\2\2\u11c2\u11c3\7\u026a\2\2\u11c3\u11c8\5\u020c\u0107\2"+
		"\u11c4\u11c5\7\u0271\2\2\u11c5\u11c7\5\u020c\u0107\2\u11c6\u11c4\3\2\2"+
		"\2\u11c7\u11ca\3\2\2\2\u11c8\u11c6\3\2\2\2\u11c8\u11c9\3\2\2\2\u11c9\u11cb"+
		"\3\2\2\2\u11ca\u11c8\3\2\2\2\u11cb\u11cc\7\u026b\2\2\u11cc\u11f8\3\2\2"+
		"\2\u11cd\u11ce\7@\2\2\u11ce\u11cf\7\u026a\2\2\u11cf\u11d0\5\u022a\u0116"+
		"\2\u11d0\u11d1\7\u0209\2\2\u11d1\u11d2\7\u0121\2\2\u11d2\u11d3\7\u026b"+
		"\2\2\u11d3\u11f8\3\2\2\2\u11d4\u11d5\7\u024d\2\2\u11d5\u11d6\7\u026a\2"+
		"\2\u11d6\u11d7\5\u020c\u0107\2\u11d7\u11d8\7\u0271\2\2\u11d8\u11d9\5\u020c"+
		"\u0107\2\u11d9\u11da\7\u026b\2\2\u11da\u11f8\3\2\2\2\u11db\u11dc\7\u0254"+
		"\2\2\u11dc\u11e4\7\u026a\2\2\u11dd\u11df\t\64\2\2\u11de\u11dd\3\2\2\2"+
		"\u11de\u11df\3\2\2\2\u11df\u11e1\3\2\2\2\u11e0\u11e2\5\u031a\u018e\2\u11e1"+
		"\u11e0\3\2\2\2\u11e1\u11e2\3\2\2\2\u11e2\u11e3\3\2\2\2\u11e3\u11e5\7\u00b4"+
		"\2\2\u11e4\u11de\3\2\2\2\u11e4\u11e5\3\2\2\2\u11e5\u11e6\3\2\2\2\u11e6"+
		"\u11e7\5\u022a\u0116\2\u11e7\u11e8\7\u026b\2\2\u11e8\u11f8\3\2\2\2\u11e9"+
		"\u11ea\7\u025b\2\2\u11ea\u11eb\7\u026a\2\2\u11eb\u11ee\5\u020c\u0107\2"+
		"\u11ec\u11ed\7\u0271\2\2\u11ed\u11ef\5\u020c\u0107\2\u11ee\u11ec\3\2\2"+
		"\2\u11ee\u11ef\3\2\2\2\u11ef\u11f0\3\2\2\2\u11f0\u11f1\7\u026b\2\2\u11f1"+
		"\u11f8\3\2\2\2\u11f2\u11f3\7\u025c\2\2\u11f3\u11f4\7\u026a\2\2\u11f4\u11f5"+
		"\5\u020c\u0107\2\u11f5\u11f6\7\u026b\2\2\u11f6\u11f8\3\2\2\2\u11f7\u11a9"+
		"\3\2\2\2\u11f7\u11b4\3\2\2\2\u11f7\u11c1\3\2\2\2\u11f7\u11cd\3\2\2\2\u11f7"+
		"\u11d4\3\2\2\2\u11f7\u11db\3\2\2\2\u11f7\u11e9\3\2\2\2\u11f7\u11f2\3\2"+
		"\2\2\u11f8\u0257\3\2\2\2\u11f9\u11fa\5\u0260\u0131\2\u11fa\u0259\3\2\2"+
		"\2\u11fb\u11fe\5\u025c\u012f\2\u11fc\u11ff\5\u0238\u011d\2\u11fd\u11ff"+
		"\5\u023e\u0120\2\u11fe\u11fc\3\2\2\2\u11fe\u11fd\3\2\2\2\u11fe\u11ff\3"+
		"\2\2\2\u11ff\u025b\3\2\2\2\u1200\u1201\7\u0255\2\2\u1201\u1203\7\u026a"+
		"\2\2\u1202\u1204\t\65\2\2\u1203\u1202\3\2\2\2\u1203\u1204\3\2\2\2\u1204"+
		"\u1205\3\2\2\2\u1205\u1206\5\u020c\u0107\2\u1206\u1207\7\u026b\2\2\u1207"+
		"\u1265\3\2\2\2\u1208\u1209\7`\2\2\u1209\u1211\7\u026a\2\2\u120a\u1212"+
		"\7\u026d\2\2\u120b\u120d\t \2\2\u120c\u120b\3\2\2\2\u120c\u120d\3\2\2"+
		"\2\u120d\u120e\3\2\2\2\u120e\u1210\5\u022a\u0116\2\u120f\u120c\3\2\2\2"+
		"\u120f\u1210\3\2\2\2\u1210\u1212\3\2\2\2\u1211\u120a\3\2\2\2\u1211\u120f"+
		"\3\2\2\2\u1212\u1213\3\2\2\2\u1213\u1215\7\u026b\2\2\u1214\u1216\5\u0268"+
		"\u0135\2\u1215\u1214\3\2\2\2\u1215\u1216\3\2\2\2\u1216\u1265\3\2\2\2\u1217"+
		"\u1218\7\u0250\2\2\u1218\u1219\7\u026a\2\2\u1219\u121c\5\u020c\u0107\2"+
		"\u121a\u121b\7\u0271\2\2\u121b\u121d\5\u020c\u0107\2\u121c\u121a\3\2\2"+
		"\2\u121c\u121d\3\2\2\2\u121d\u121e\3\2\2\2\u121e\u121f\7\u026b\2\2\u121f"+
		"\u1265\3\2\2\2\u1220\u1221\7\u0243\2\2\u1221\u1223\7\u026a\2\2\u1222\u1224"+
		"\t\65\2\2\u1223\u1222\3\2\2\2\u1223\u1224\3\2\2\2\u1224\u1225\3\2\2\2"+
		"\u1225\u1226\5\u020c\u0107\2\u1226\u1227\7\u026b\2\2\u1227\u1265\3\2\2"+
		"\2\u1228\u1229\7\u024b\2\2\u1229\u122b\7\u026a\2\2\u122a\u122c\t\65\2"+
		"\2\u122b\u122a\3\2\2\2\u122b\u122c\3\2\2\2\u122c\u122d\3\2\2\2\u122d\u122e"+
		"\5\u020c\u0107\2\u122e\u122f\7\u026b\2\2\u122f\u1265\3\2\2\2\u1230\u1231"+
		"\7\u0249\2\2\u1231\u1233\7\u026a\2\2\u1232\u1234\t\65\2\2\u1233\u1232"+
		"\3\2\2\2\u1233\u1234\3\2\2\2\u1234\u1235\3\2\2\2\u1235\u1236\5\u020c\u0107"+
		"\2\u1236\u1237\7\u026b\2\2\u1237\u1265\3\2\2\2\u1238\u1239\7\u0259\2\2"+
		"\u1239\u123a\7\u026a\2\2\u123a\u123f\5\u020c\u0107\2\u123b\u123c\7\u0271"+
		"\2\2\u123c\u123e\5\u020c\u0107\2\u123d\u123b\3\2\2\2\u123e\u1241\3\2\2"+
		"\2\u123f\u123d\3\2\2\2\u123f\u1240\3\2\2\2\u1240\u1242\3\2\2\2\u1241\u123f"+
		"\3\2\2\2\u1242\u1243\7\u026b\2\2\u1243\u1265\3\2\2\2\u1244\u1245\7\u025a"+
		"\2\2\u1245\u1246\7\u026a\2\2\u1246\u124b\5\u020c\u0107\2\u1247\u1248\7"+
		"\u0271\2\2\u1248\u124a\5\u020c\u0107\2\u1249\u1247\3\2\2\2\u124a\u124d"+
		"\3\2\2\2\u124b\u1249\3\2\2\2\u124b\u124c\3\2\2\2\u124c\u124e\3\2\2\2\u124d"+
		"\u124b\3\2\2\2\u124e\u124f\7\u026b\2\2\u124f\u1265\3\2\2\2\u1250\u1251"+
		"\7\u01e9\2\2\u1251\u1252\7\u026a\2\2\u1252\u1255\5\u020c\u0107\2\u1253"+
		"\u1254\7\u0271\2\2\u1254\u1256\5\u031a\u018e\2\u1255\u1253\3\2\2\2\u1255"+
		"\u1256\3\2\2\2\u1256\u1259\3\2\2\2\u1257\u1258\7\u0271\2\2\u1258\u125a"+
		"\5\u031a\u018e\2\u1259\u1257\3\2\2\2\u1259\u125a\3\2\2\2\u125a\u125b\3"+
		"\2\2\2\u125b\u125c\7\u026b\2\2\u125c\u1265\3\2\2\2\u125d\u125e\7\u0117"+
		"\2\2\u125e\u125f\7\u026a\2\2\u125f\u1260\5\u020c\u0107\2\u1260\u1261\7"+
		"\u0271\2\2\u1261\u1262\5\u020c\u0107\2\u1262\u1263\7\u026b\2\2\u1263\u1265"+
		"\3\2\2\2\u1264\u1200\3\2\2\2\u1264\u1208\3\2\2\2\u1264\u1217\3\2\2\2\u1264"+
		"\u1220\3\2\2\2\u1264\u1228\3\2\2\2\u1264\u1230\3\2\2\2\u1264\u1238\3\2"+
		"\2\2\u1264\u1244\3\2\2\2\u1264\u1250\3\2\2\2\u1264\u125d\3\2\2\2\u1265"+
		"\u025d\3\2\2\2\u1266\u1267\7\u01d2\2\2\u1267\u025f\3\2\2\2\u1268\u1269"+
		"\5\u0262\u0132\2\u1269\u126a\5\u02f8\u017d\2\u126a\u126b\5\u0268\u0135"+
		"\2\u126b\u136b\3\2\2\2\u126c\u126d\5\u032a\u0196\2\u126d\u126f\5\u02fa"+
		"\u017e\2\u126e\u1270\5\u0270\u0139\2\u126f\u126e\3\2\2\2\u126f\u1270\3"+
		"\2\2\2\u1270\u136b\3\2\2\2\u1271\u1272\7F\2\2\u1272\u1274\7\u026a\2\2"+
		"\u1273\u1275\t\66\2\2\u1274\u1273\3\2\2\2\u1274\u1275\3\2\2\2\u1275\u1276"+
		"\3\2\2\2\u1276\u1278\5\u022a\u0116\2\u1277\u1279\5\u0274\u013b\2\u1278"+
		"\u1277\3\2\2\2\u1278\u1279\3\2\2\2\u1279\u127a\3\2\2\2\u127a\u127b\7\u026b"+
		"\2\2\u127b\u136b\3\2\2\2\u127c\u127d\5\u0264\u0133\2\u127d\u127f\5\u02f6"+
		"\u017c\2\u127e\u1280\5\u0276\u013c\2\u127f\u127e\3\2\2\2\u1280\u1281\3"+
		"\2\2\2\u1281\u127f\3\2\2\2\u1281\u1282\3\2\2\2\u1282\u136b\3\2\2\2\u1283"+
		"\u1284\5\u02e0\u0171\2\u1284\u1285\t\67\2\2\u1285\u136b\3\2\2\2\u1286"+
		"\u1287\7\u00a5\2\2\u1287\u1288\7\u026a\2\2\u1288\u1289\5\u032a\u0196\2"+
		"\u1289\u128a\7\u00b4\2\2\u128a\u128b\5\u022a\u0116\2\u128b\u128c\7\u026b"+
		"\2\2\u128c\u136b\3\2\2\2\u128d\u128e\t8\2\2\u128e\u1290\5\u02f8\u017d"+
		"\2\u128f\u1291\5\u02fc\u017f\2\u1290\u128f\3\2\2\2\u1290\u1291\3\2\2\2"+
		"\u1291\u1292\3\2\2\2\u1292\u1293\5\u0268\u0135\2\u1293\u136b\3\2\2\2\u1294"+
		"\u1295\5\u0266\u0134\2\u1295\u1296\7\u026a\2\2\u1296\u129b\5\u020c\u0107"+
		"\2\u1297\u1298\7\u0271\2\2\u1298\u129a\5\u020c\u0107\2\u1299\u1297\3\2"+
		"\2\2\u129a\u129d\3\2\2\2\u129b\u1299\3\2\2\2\u129b\u129c\3\2\2\2\u129c"+
		"\u129f\3\2\2\2\u129d\u129b\3\2\2\2\u129e\u12a0\5\u0278\u013d\2\u129f\u129e"+
		"\3\2\2\2\u129f\u12a0\3\2\2\2\u12a0\u12a2\3\2\2\2\u12a1\u12a3\5\u0270\u0139"+
		"\2\u12a2\u12a1\3\2\2\2\u12a2\u12a3\3\2\2\2\u12a3\u12a4\3\2\2\2\u12a4\u12a5"+
		"\7\u026b\2\2\u12a5\u136b\3\2\2\2\u12a6\u12a7\7\u01f2\2\2\u12a7\u12a8\7"+
		"\u026a\2\2\u12a8\u12a9\5\u020c\u0107\2\u12a9\u12ab\7\21\2\2\u12aa\u12ac"+
		"\7\u017b\2\2\u12ab\u12aa\3\2\2\2\u12ab\u12ac\3\2\2\2\u12ac\u12ad\3\2\2"+
		"\2\u12ad\u12ae\5\u0300\u0181\2\u12ae\u12af\7\u026b\2\2\u12af\u136b\3\2"+
		"\2\2\u12b0\u12b1\7\u0254\2\2\u12b1\u12b9\7\u026a\2\2\u12b2\u12b4\t\64"+
		"\2\2\u12b3\u12b2\3\2\2\2\u12b3\u12b4\3\2\2\2\u12b4\u12b6\3\2\2\2\u12b5"+
		"\u12b7\5\u031a\u018e\2\u12b6\u12b5\3\2\2\2\u12b6\u12b7\3\2\2\2\u12b7\u12b8"+
		"\3\2\2\2\u12b8\u12ba\7\u00b4\2\2\u12b9\u12b3\3\2\2\2\u12b9\u12ba\3\2\2"+
		"\2\u12ba\u12bb\3\2\2\2\u12bb\u12bc\5\u022a\u0116\2\u12bc\u12bd\7\u026b"+
		"\2\2\u12bd\u136b\3\2\2\2\u12be\u12bf\7\u0223\2\2\u12bf\u12c0\7\u026a\2"+
		"\2\u12c0\u12c2\5\u020c\u0107\2\u12c1\u12c3\5\u01ba\u00de\2\u12c2\u12c1"+
		"\3\2\2\2\u12c2\u12c3\3\2\2\2\u12c3\u12c4\3\2\2\2\u12c4\u12c7\7\u026b\2"+
		"\2\u12c5\u12c6\7\u0261\2\2\u12c6\u12c8\5\u030c\u0187\2\u12c7\u12c5\3\2"+
		"\2\2\u12c7\u12c8\3\2\2\2\u12c8\u136b\3\2\2\2\u12c9\u12ca\t9\2\2\u12ca"+
		"\u12cb\7\u026a\2\2\u12cb\u12d0\5\u0284\u0143\2\u12cc\u12cd\7\u0271\2\2"+
		"\u12cd\u12cf\5\u0284\u0143\2\u12ce\u12cc\3\2\2\2\u12cf\u12d2\3\2\2\2\u12d0"+
		"\u12ce\3\2\2\2\u12d0\u12d1\3\2\2\2\u12d1\u12d3\3\2\2\2\u12d2\u12d0\3\2"+
		"\2\2\u12d3\u12d6\7\u026b\2\2\u12d4\u12d5\7\u0261\2\2\u12d5\u12d7\5\u030c"+
		"\u0187\2\u12d6\u12d4\3\2\2\2\u12d6\u12d7\3\2\2\2\u12d7\u136b\3\2\2\2\u12d8"+
		"\u12d9\7\u0227\2\2\u12d9\u12db\7\u026a\2\2\u12da\u12dc\t:\2\2\u12db\u12da"+
		"\3\2\2\2\u12db\u12dc\3\2\2\2\u12dc\u12de\3\2\2\2\u12dd\u12df\t;\2\2\u12de"+
		"\u12dd\3\2\2\2\u12de\u12df\3\2\2\2\u12df\u12e0\3\2\2\2\u12e0\u12e3\5\u020c"+
		"\u0107\2\u12e1\u12e2\7\u0271\2\2\u12e2\u12e4\5\u027c\u013f\2\u12e3\u12e1"+
		"\3\2\2\2\u12e3\u12e4\3\2\2\2\u12e4\u12ec\3\2\2\2\u12e5\u12e6\7\u0271\2"+
		"\2\u12e6\u12e8\5\u020c\u0107\2\u12e7\u12e9\5\u02a0\u0151\2\u12e8\u12e7"+
		"\3\2\2\2\u12e8\u12e9\3\2\2\2\u12e9\u12eb\3\2\2\2\u12ea\u12e5\3\2\2\2\u12eb"+
		"\u12ee\3\2\2\2\u12ec\u12ea\3\2\2\2\u12ec\u12ed\3\2\2\2\u12ed\u12ef\3\2"+
		"\2\2\u12ee\u12ec\3\2\2\2\u12ef\u12f2\7\u026b\2\2\u12f0\u12f1\7\u0261\2"+
		"\2\u12f1\u12f3\5\u030c\u0187\2\u12f2\u12f0\3\2\2\2\u12f2\u12f3\3\2\2\2"+
		"\u12f3\u136b\3\2\2\2\u12f4\u12f5\7\u0228\2\2\u12f5\u12f6\7\u026a\2\2\u12f6"+
		"\u12f8\5\u020c\u0107\2\u12f7\u12f9\5\u027a\u013e\2\u12f8\u12f7\3\2\2\2"+
		"\u12f8\u12f9\3\2\2\2\u12f9\u12fa\3\2\2\2\u12fa\u12fb\7\u026b\2\2\u12fb"+
		"\u136b\3\2\2\2\u12fc\u12fd\7\u022b\2\2\u12fd\u12fe\7\u026a\2\2\u12fe\u12ff"+
		"\t<\2\2\u12ff\u1301\5\u022a\u0116\2\u1300\u1302\7\u021a\2\2\u1301\u1300"+
		"\3\2\2\2\u1301\u1302\3\2\2\2\u1302\u1303\3\2\2\2\u1303\u1306\7\u026b\2"+
		"\2\u1304\u1305\7\u0261\2\2\u1305\u1307\5\u030c\u0187\2\u1306\u1304\3\2"+
		"\2\2\u1306\u1307\3\2\2\2\u1307\u136b\3\2\2\2\u1308\u1309\7\u022c\2\2\u1309"+
		"\u130e\7\u026a\2\2\u130a\u130b\7\u011b\2\2\u130b\u130f\5\u031c\u018f\2"+
		"\u130c\u130d\7\u0099\2\2\u130d\u130f\5\u022a\u0116\2\u130e\u130a\3\2\2"+
		"\2\u130e\u130c\3\2\2\2\u130f\u1312\3\2\2\2\u1310\u1311\7\u0271\2\2\u1311"+
		"\u1313\5\u022a\u0116\2\u1312\u1310\3\2\2\2\u1312\u1313\3\2\2\2\u1313\u1314"+
		"\3\2\2\2\u1314\u1317\7\u026b\2\2\u1315\u1316\7\u0261\2\2\u1316\u1318\5"+
		"\u030c\u0187\2\u1317\u1315\3\2\2\2\u1317\u1318\3\2\2\2\u1318\u136b\3\2"+
		"\2\2\u1319\u131a\7\u022d\2\2\u131a\u131b\7\u026a\2\2\u131b\u131d\5\u022a"+
		"\u0116\2\u131c\u131e\5\u027a\u013e\2\u131d\u131c\3\2\2\2\u131d\u131e\3"+
		"\2\2\2\u131e\u131f\3\2\2\2\u131f\u1320\7\u0189\2\2\u1320\u1324\7W\2\2"+
		"\u1321\u1322\7\u0138\2\2\u1322\u1323\7\u0146\2\2\u1323\u1325\7\u0091\2"+
		"\2\u1324\u1321\3\2\2\2\u1324\u1325\3\2\2\2\u1325\u1326\3\2\2\2\u1326\u1329"+
		"\7\u026b\2\2\u1327\u1328\7\u0261\2\2\u1328\u132a\5\u030c\u0187\2\u1329"+
		"\u1327\3\2\2\2\u1329\u132a\3\2\2\2\u132a\u136b\3\2\2\2\u132b\u132c\7\u022e"+
		"\2\2\u132c\u132d\7\u026a\2\2\u132d\u1330\5\u022a\u0116\2\u132e\u132f\7"+
		"\u0271\2\2\u132f\u1331\5\u0286\u0144\2\u1330\u132e\3\2\2\2\u1330\u1331"+
		"\3\2\2\2\u1331\u1334\3\2\2\2\u1332\u1333\7\u0271\2\2\u1333\u1335\5\u0288"+
		"\u0145\2\u1334\u1332\3\2\2\2\u1334\u1335\3\2\2\2\u1335\u1336\3\2\2\2\u1336"+
		"\u1339\7\u026b\2\2\u1337\u1338\7\u0261\2\2\u1338\u133a\5\u030c\u0187\2"+
		"\u1339\u1337\3\2\2\2\u1339\u133a\3\2\2\2\u133a\u136b\3\2\2\2\u133b\u133c"+
		"\7\u022f\2\2\u133c\u133d\7\u026a\2\2\u133d\u133e\t<\2\2\u133e\u1341\5"+
		"\u022a\u0116\2\u133f\u1340\7\21\2\2\u1340\u1342\5\u0300\u0181\2\u1341"+
		"\u133f\3\2\2\2\u1341\u1342\3\2\2\2\u1342\u1344\3\2\2\2\u1343\u1345\5\u028a"+
		"\u0146\2\u1344\u1343\3\2\2\2\u1344\u1345\3\2\2\2\u1345\u1347\3\2\2\2\u1346"+
		"\u1348\5\u028c\u0147\2\u1347\u1346\3\2\2\2\u1347\u1348\3\2\2\2\u1348\u134a"+
		"\3\2\2\2\u1349\u134b\5\u028e\u0148\2\u134a\u1349\3\2\2\2\u134a\u134b\3"+
		"\2\2\2\u134b\u134e\3\2\2\2\u134c\u134d\t=\2\2\u134d\u134f\7{\2\2\u134e"+
		"\u134c\3\2\2\2\u134e\u134f\3\2\2\2\u134f\u1350\3\2\2\2\u1350\u1353\7\u026b"+
		"\2\2\u1351\u1352\7\u0261\2\2\u1352\u1354\5\u030c\u0187\2\u1353\u1351\3"+
		"\2\2\2\u1353\u1354\3\2\2\2\u1354\u136b\3\2\2\2\u1355\u1356\7\u0230\2\2"+
		"\u1356\u1358\7\u026a\2\2\u1357\u1359\5\u027e\u0140\2\u1358\u1357\3\2\2"+
		"\2\u1358\u1359\3\2\2\2\u1359\u135a\3\2\2\2\u135a\u135c\5\u022a\u0116\2"+
		"\u135b\u135d\5\u027a\u013e\2\u135c\u135b\3\2\2\2\u135c\u135d\3\2\2\2\u135d"+
		"\u1363\3\2\2\2\u135e\u135f\7H\2\2\u135f\u1360\5\u0280\u0141\2\u1360\u1361"+
		"\7\u0271\2\2\u1361\u1362\5\u0280\u0141\2\u1362\u1364\3\2\2\2\u1363\u135e"+
		"\3\2\2\2\u1363\u1364\3\2\2\2\u1364\u1365\3\2\2\2\u1365\u1368\7\u026b\2"+
		"\2\u1366\u1367\7\u0261\2\2\u1367\u1369\5\u030c\u0187\2\u1368\u1366\3\2"+
		"\2\2\u1368\u1369\3\2\2\2\u1369\u136b\3\2\2\2\u136a\u1268\3\2\2\2\u136a"+
		"\u126c\3\2\2\2\u136a\u1271\3\2\2\2\u136a\u127c\3\2\2\2\u136a\u1283\3\2"+
		"\2\2\u136a\u1286\3\2\2\2\u136a\u128d\3\2\2\2\u136a\u1294\3\2\2\2\u136a"+
		"\u12a6\3\2\2\2\u136a\u12b0\3\2\2\2\u136a\u12be\3\2\2\2\u136a\u12c9\3\2"+
		"\2\2\u136a\u12d8\3\2\2\2\u136a\u12f4\3\2\2\2\u136a\u12fc\3\2\2\2\u136a"+
		"\u1308\3\2\2\2\u136a\u1319\3\2\2\2\u136a\u132b\3\2\2\2\u136a\u133b\3\2"+
		"\2\2\u136a\u1355\3\2\2\2\u136b\u0261\3\2\2\2\u136c\u136d\t>\2\2\u136d"+
		"\u0263\3\2\2\2\u136e\u136f\t?\2\2\u136f\u0265\3\2\2\2\u1370\u1371\t@\2"+
		"\2\u1371\u0267\3\2\2\2\u1372\u1373\7\u0151\2\2\u1373\u1375\7\u026a\2\2"+
		"\u1374\u1376\5\u0176\u00bc\2\u1375\u1374\3\2\2\2\u1375\u1376\3\2\2\2\u1376"+
		"\u137b\3\2\2\2\u1377\u1379\5\u01ba\u00de\2\u1378\u137a\5\u026a\u0136\2"+
		"\u1379\u1378\3\2\2\2\u1379\u137a\3\2\2\2\u137a\u137c\3\2\2\2\u137b\u1377"+
		"\3\2\2\2\u137b\u137c\3\2\2\2\u137c\u137d\3\2\2\2\u137d\u137e\7\u026b\2"+
		"\2\u137e\u0269\3\2\2\2\u137f\u1386\5\u026c\u0137\2\u1380\u1381\7#\2\2"+
		"\u1381\u1382\5\u026e\u0138\2\u1382\u1383\7\16\2\2\u1383\u1384\5\u026e"+
		"\u0138\2\u1384\u1387\3\2\2\2\u1385\u1387\5\u026e\u0138\2\u1386\u1380\3"+
		"\2\2\2\u1386\u1385\3\2\2\2\u1387\u026b\3\2\2\2\u1388\u1389\tA\2\2\u1389"+
		"\u026d\3\2\2\2\u138a\u138b\7\u01fa\2\2\u138b\u1392\7\u016a\2\2\u138c\u138d"+
		"\7f\2\2\u138d\u1392\7\u0193\2\2\u138e\u138f\5\u022a\u0116\2\u138f\u1390"+
		"\tB\2\2\u1390\u1392\3\2\2\2\u1391\u138a\3\2\2\2\u1391\u138c\3\2\2\2\u1391"+
		"\u138e\3\2\2\2\u1392\u026f\3\2\2\2\u1393\u139d\7\u0209\2\2\u1394\u139e"+
		"\7\u026d\2\2\u1395\u139a\5\u0272\u013a\2\u1396\u1397\7\u0271\2\2\u1397"+
		"\u1399\5\u0272\u013a\2\u1398\u1396\3\2\2\2\u1399\u139c\3\2\2\2\u139a\u1398"+
		"\3\2\2\2\u139a\u139b\3\2\2\2\u139b\u139e\3\2\2\2\u139c\u139a\3\2\2\2\u139d"+
		"\u1394\3\2\2\2\u139d\u1395\3\2\2\2\u139e\u0271\3\2\2\2\u139f\u13a1\7\u00ce"+
		"\2\2\u13a0\u13a2\7\u0150\2\2\u13a1\u13a0\3\2\2\2\u13a1\u13a2\3\2\2\2\u13a2"+
		"\u13a5\3\2\2\2\u13a3\u13a5\7\u0150\2\2\u13a4\u139f\3\2\2\2\u13a4\u13a3"+
		"\3\2\2\2\u13a4\u13a5\3\2\2\2\u13a5\u13a6\3\2\2\2\u13a6\u13a8\5\u0164\u00b3"+
		"\2\u13a7\u13a9\5\u02a0\u0151\2\u13a8\u13a7\3\2\2\2\u13a8\u13a9\3\2\2\2"+
		"\u13a9\u0273\3\2\2\2\u13aa\u13ab\7\u014b\2\2\u13ab\u13ac\7\62\2\2\u13ac"+
		"\u13ad\5\u022a\u0116\2\u13ad\u0275\3\2\2\2\u13ae\u13af\7\u021f\2\2\u13af"+
		"\u13b0\7\u00ba\2\2\u13b0\u13b1\7\u026a\2\2\u13b1\u13b2\5\u01ba\u00de\2"+
		"\u13b2\u13b3\7\u026b\2\2\u13b3\u13b6\3\2\2\2\u13b4\u13b6\5\u0268\u0135"+
		"\2\u13b5\u13ae\3\2\2\2\u13b5\u13b4\3\2\2\2\u13b6\u0277\3\2\2\2\u13b7\u13c9"+
		"\7_\2\2\u13b8\u13ba\7\u0114\2\2\u13b9\u13bb\7\35\2\2\u13ba\u13b9\3\2\2"+
		"\2\u13ba\u13bb\3\2\2\2\u13bb\u13ca\3\2\2\2\u13bc\u13bd\7\u026a\2\2\u13bd"+
		"\u13c2\5\u02ae\u0158\2\u13be\u13bf\7\u0271\2\2\u13bf\u13c1\5\u02ae\u0158"+
		"\2\u13c0\u13be\3\2\2\2\u13c1\u13c4\3\2\2\2\u13c2\u13c0\3\2\2\2\u13c2\u13c3"+
		"\3\2\2\2\u13c3\u13c5\3\2\2\2\u13c4\u13c2\3\2\2\2\u13c5\u13c6\7\u026b\2"+
		"\2\u13c6\u13c7\7\u020b\2\2\u13c7\u13c8\5\u0208\u0105\2\u13c8\u13ca\3\2"+
		"\2\2\u13c9\u13b8\3\2\2\2\u13c9\u13bc\3\2\2\2\u13ca\u0279\3\2\2\2\u13cb"+
		"\u13ce\7\u0158\2\2\u13cc\u13cd\7\62\2\2\u13cd\u13cf\7\u020c\2\2\u13ce"+
		"\u13cc\3\2\2\2\u13ce\u13cf\3\2\2\2\u13cf\u13d0\3\2\2\2\u13d0\u13d2\5\u020c"+
		"\u0107\2\u13d1\u13d3\5\u02a0\u0151\2\u13d2\u13d1\3\2\2\2\u13d2\u13d3\3"+
		"\2\2\2\u13d3\u13d4\3\2\2\2\u13d4\u13d5\7\u0271\2\2\u13d5\u13d7\5\u020c"+
		"\u0107\2\u13d6\u13d8\5\u02a0\u0151\2\u13d7\u13d6\3\2\2\2\u13d7\u13d8\3"+
		"\2\2\2\u13d8\u027b\3\2\2\2\u13d9\u13da\7\u0224\2\2\u13da\u13dc\7\u026a"+
		"\2\2\u13db\u13dd\t:\2\2\u13dc\u13db\3\2\2\2\u13dc\u13dd\3\2\2\2\u13dd"+
		"\u13df\3\2\2\2\u13de\u13e0\tC\2\2\u13df\u13de\3\2\2\2\u13df\u13e0\3\2"+
		"\2\2\u13e0\u13e1\3\2\2\2\u13e1\u13e6\5\u0284\u0143\2\u13e2\u13e3\7\u0271"+
		"\2\2\u13e3\u13e5\5\u0284\u0143\2\u13e4\u13e2\3\2\2\2\u13e5\u13e8\3\2\2"+
		"\2\u13e6\u13e4\3\2\2\2\u13e6\u13e7\3\2\2\2\u13e7\u13e9\3\2\2\2\u13e8\u13e6"+
		"\3\2\2\2\u13e9\u13ea\7\u026b\2\2\u13ea\u027d\3\2\2\2\u13eb\u13ec\7\u022a"+
		"\2\2\u13ec\u13f0\7\u026a\2\2\u13ed\u13ee\5\u022a\u0116\2\u13ee\u13ef\5"+
		"\u02a0\u0151\2\u13ef\u13f1\3\2\2\2\u13f0\u13ed\3\2\2\2\u13f0\u13f1\3\2"+
		"\2\2\u13f1\u13f8\3\2\2\2\u13f2\u13f3\7\u0271\2\2\u13f3\u13f4\5\u022a\u0116"+
		"\2\u13f4\u13f5\5\u02a0\u0151\2\u13f5\u13f7\3\2\2\2\u13f6\u13f2\3\2\2\2"+
		"\u13f7\u13fa\3\2\2\2\u13f8\u13f6\3\2\2\2\u13f8\u13f9\3\2\2\2\u13f9\u13fc"+
		"\3\2\2\2\u13fa\u13f8\3\2\2\2\u13fb\u13fd\5\u0282\u0142\2\u13fc\u13fb\3"+
		"\2\2\2\u13fc\u13fd\3\2\2\2\u13fd\u13fe\3\2\2\2\u13fe\u13ff\7\u026b\2\2"+
		"\u13ff\u027f\3\2\2\2\u1400\u140b\5\u02ac\u0157\2\u1401\u1402\7\u00b3\2"+
		"\2\u1402\u140c\7\u014c\2\2\u1403\u1406\5\u0300\u0181\2\u1404\u1405\7\u0159"+
		"\2\2\u1405\u1407\5\u022a\u0116\2\u1406\u1404\3\2\2\2\u1406\u1407\3\2\2"+
		"\2\u1407\u1409\3\2\2\2\u1408\u140a\5\u0282\u0142\2\u1409\u1408\3\2\2\2"+
		"\u1409\u140a\3\2\2\2\u140a\u140c\3\2\2\2\u140b\u1401\3\2\2\2\u140b\u1403"+
		"\3\2\2\2\u140c\u0281\3\2\2\2\u140d\u140e\7z\2\2\u140e\u140f\5\u022a\u0116"+
		"\2\u140f\u0283\3\2\2\2\u1410\u1417\5\u020c\u0107\2\u1411\u1415\7\21\2"+
		"\2\u1412\u1416\5\u031e\u0190\2\u1413\u1414\7\u0099\2\2\u1414\u1416\5\u022a"+
		"\u0116\2\u1415\u1412\3\2\2\2\u1415\u1413\3\2\2\2\u1416\u1418\3\2\2\2\u1417"+
		"\u1411\3\2\2\2\u1417\u1418\3\2\2\2\u1418\u0285\3\2\2\2\u1419\u141d\7\u0215"+
		"\2\2\u141a\u141b\7\u0131\2\2\u141b\u141e\7\u020c\2\2\u141c\u141e\5\u020c"+
		"\u0107\2\u141d\u141a\3\2\2\2\u141d\u141c\3\2\2\2\u141e\u0287\3\2\2\2\u141f"+
		"\u1425\7\u01c1\2\2\u1420\u1426\7\u0233\2\2\u1421\u1423\7\u0131\2\2\u1422"+
		"\u1424\7\u020c\2\2\u1423\u1422\3\2\2\2\u1423\u1424\3\2\2\2\u1424\u1426"+
		"\3\2\2\2\u1425\u1420\3\2\2\2\u1425\u1421\3\2\2\2\u1426\u0289\3\2\2\2\u1427"+
		"\u1428\7\u0093\2\2\u1428\u1429\5\u022a\u0116\2\u1429\u028b\3\2\2\2\u142a"+
		"\u142b\7\u0215\2\2\u142b\u142c\5\u022a\u0116\2\u142c\u028d\3\2\2\2\u142d"+
		"\u142e\7\u0131\2\2\u142e\u1436\7\u00c8\2\2\u142f\u1433\7\u00c8\2\2\u1430"+
		"\u1431\7\u01b7\2\2\u1431\u1432\7\u0282\2\2\u1432\u1434\5\u022a\u0116\2"+
		"\u1433\u1430\3\2\2\2\u1433\u1434\3\2\2\2\u1434\u1436\3\2\2\2\u1435\u142d"+
		"\3\2\2\2\u1435\u142f\3\2\2\2\u1436\u028f\3\2\2\2\u1437\u143f\7\u0272\2"+
		"\2\u1438\u143f\5\u0292\u014a\2\u1439\u143f\5\u0296\u014c\2\u143a\u143f"+
		"\5\u0298\u014d\2\u143b\u143f\5\u0294\u014b\2\u143c\u143f\5\u029a\u014e"+
		"\2\u143d\u143f\5\u029c\u014f\2\u143e\u1437\3\2\2\2\u143e\u1438\3\2\2\2"+
		"\u143e\u1439\3\2\2\2\u143e\u143a\3\2\2\2\u143e\u143b\3\2\2\2\u143e\u143c"+
		"\3\2\2\2\u143e\u143d\3\2\2\2\u143f\u1441\3\2\2\2\u1440\u1442\7\u0277\2"+
		"\2\u1441\u1440\3\2\2\2\u1441\u1442\3\2\2\2\u1442\u0291\3\2\2\2\u1443\u1444"+
		"\7\u021b\2\2\u1444\u144a\tD\2\2\u1445\u1446\7\u00a1\2\2\u1446\u1447\t"+
		"E\2\2\u1447\u144b\tF\2\2\u1448\u1449\7Y\2\2\u1449\u144b\tG\2\2\u144a\u1445"+
		"\3\2\2\2\u144a\u1448\3\2\2\2\u144b\u0293\3\2\2\2\u144c\u144d\7\u01aa\2"+
		"\2\u144d\u1453\5\u032a\u0196\2\u144e\u1454\7\u0266\2\2\u144f\u1454\7\u0146"+
		"\2\2\u1450\u1454\7\u0141\2\2\u1451\u1454\5\u0312\u018a\2\u1452\u1454\5"+
		"\u032a\u0196\2\u1453\u144e\3\2\2\2\u1453\u144f\3\2\2\2\u1453\u1450\3\2"+
		"\2\2\u1453\u1451\3\2\2\2\u1453\u1452\3\2\2\2\u1454\u0295\3\2\2\2\u1455"+
		"\u1456\7\u00a1\2\2\u1456\u0297\3\2\2\2\u1457\u1458\7\u028a\2\2\u1458\u0299"+
		"\3\2\2\2\u1459\u145a\7\u01ae\2\2\u145a\u145e\7\u0096\2\2\u145b\u145c\7"+
		"\u01ae\2\2\u145c\u145e\7\u0097\2\2\u145d\u1459\3\2\2\2\u145d\u145b\3\2"+
		"\2\2\u145e\u029b\3\2\2\2\u145f\u1460\7\u028b\2\2\u1460\u029d\3\2\2\2\u1461"+
		"\u1463\tH\2\2\u1462\u1464\7\u00b3\2\2\u1463\u1462\3\2\2\2\u1463\u1464"+
		"\3\2\2\2\u1464\u1465\3\2\2\2\u1465\u1466\5\u0208\u0105\2\u1466\u029f\3"+
		"\2\2\2\u1467\u1469\7\21\2\2\u1468\u1467\3\2\2\2\u1468\u1469\3\2\2\2\u1469"+
		"\u146c\3\2\2\2\u146a\u146d\5\u031c\u018f\2\u146b\u146d\5\u02a4\u0153\2"+
		"\u146c\u146a\3\2\2\2\u146c\u146b\3\2\2\2\u146d\u1470\3\2\2\2\u146e\u1470"+
		"\7\21\2\2\u146f\u1468\3\2\2\2\u146f\u146e\3\2\2\2\u1470\u02a1\3\2\2\2"+
		"\u1471\u1474\5\u031c\u018f\2\u1472\u1474\5\u02a4\u0153\2\u1473\u1471\3"+
		"\2\2\2\u1473\u1472\3\2\2\2\u1474\u02a3\3\2\2\2\u1475\u1476\5\u031a\u018e"+
		"\2\u1476\u02a5\3\2\2\2\u1477\u147a\7\u021d\2\2\u1478\u147b\5\u02a8\u0155"+
		"\2\u1479\u147b\5\u020c\u0107\2\u147a\u1478\3\2\2\2\u147a\u1479\3\2\2\2"+
		"\u147b\u02a7\3\2\2\2\u147c\u147d\7f\2\2\u147d\u147e\7\u0142\2\2\u147e"+
		"\u147f\5\u02e0\u0171\2\u147f\u02a9\3\2\2\2\u1480\u1481\7\u00e0\2\2\u1481"+
		"\u1486\5\u02dc\u016f\2\u1482\u1483\7\u0271\2\2\u1483\u1485\5\u02dc\u016f"+
		"\2\u1484\u1482\3\2\2\2\u1485\u1488\3\2\2\2\u1486\u1484\3\2\2\2\u1486\u1487"+
		"\3\2\2\2\u1487\u1495\3\2\2\2\u1488\u1486\3\2\2\2\u1489\u148a\7\61\2\2"+
		"\u148a\u148b\7F\2\2\u148b\u148c\7\u00e0\2\2\u148c\u1491\5\u02dc\u016f"+
		"\2\u148d\u148e\7\u0271\2\2\u148e\u1490\5\u02dc\u016f\2\u148f\u148d\3\2"+
		"\2\2\u1490\u1493\3\2\2\2\u1491\u148f\3\2\2\2\u1491\u1492\3\2\2\2\u1492"+
		"\u1495\3\2\2\2\u1493\u1491\3\2\2\2\u1494\u1480\3\2\2\2\u1494\u1489\3\2"+
		"\2\2\u1495\u02ab\3\2\2\2\u1496\u1499\5\u031c\u018f\2\u1497\u1499\5\u031a"+
		"\u018e\2\u1498\u1496\3\2\2\2\u1498\u1497\3\2\2\2\u1499\u02ad\3\2\2\2\u149a"+
		"\u149b\5\u031c\u018f\2\u149b\u02af\3\2\2\2\u149c\u149d\5\u031c\u018f\2"+
		"\u149d\u02b1\3\2\2\2\u149e\u149f\5\u031c\u018f\2\u149f\u02b3\3\2\2\2\u14a0"+
		"\u14a1\5\u031c\u018f\2\u14a1\u02b5\3\2\2\2\u14a2\u14a3\5\u031c\u018f\2"+
		"\u14a3\u02b7\3\2\2\2\u14a4\u14a5\5\u031c\u018f\2\u14a5\u02b9\3\2\2\2\u14a6"+
		"\u14ab\5\u031c\u018f\2\u14a7\u14a8\7\u0261\2\2\u14a8\u14aa\5\u031e\u0190"+
		"\2\u14a9\u14a7\3\2\2\2\u14aa\u14ad\3\2\2\2\u14ab\u14a9\3\2\2\2\u14ab\u14ac"+
		"\3\2\2\2\u14ac\u14b0\3\2\2\2\u14ad\u14ab\3\2\2\2\u14ae\u14af\7\u0273\2"+
		"\2\u14af\u14b1\5\u02e6\u0174\2\u14b0\u14ae\3\2\2\2\u14b0\u14b1\3\2\2\2"+
		"\u14b1\u02bb\3\2\2\2\u14b2\u14b3\5\u031c\u018f\2\u14b3\u02bd\3\2\2\2\u14b4"+
		"\u14b7\5\u031c\u018f\2\u14b5\u14b6\7\u0261\2\2\u14b6\u14b8\5\u031e\u0190"+
		"\2\u14b7\u14b5\3\2\2\2\u14b7\u14b8\3\2\2\2\u14b8\u02bf\3\2\2\2\u14b9\u14ba"+
		"\5\u031c\u018f\2\u14ba\u02c1\3\2\2\2\u14bb\u14bc\5\u031c\u018f\2\u14bc"+
		"\u02c3\3\2\2\2\u14bd\u14be\5\u031c\u018f\2\u14be\u02c5\3\2\2\2\u14bf\u14c4"+
		"\5\u031c\u018f\2\u14c0\u14c1\7\u0261\2\2\u14c1\u14c3\5\u031e\u0190\2\u14c2"+
		"\u14c0\3\2\2\2\u14c3\u14c6\3\2\2\2\u14c4\u14c2\3\2\2\2\u14c4\u14c5\3\2"+
		"\2\2\u14c5\u02c7\3\2\2\2\u14c6\u14c4\3\2\2\2\u14c7\u14c8\5\u031c\u018f"+
		"\2\u14c8\u02c9\3\2\2\2\u14c9\u14ce\5\u031c\u018f\2\u14ca\u14cb\7\u0261"+
		"\2\2\u14cb\u14cd\5\u031e\u0190\2\u14cc\u14ca\3\2\2\2\u14cd\u14d0\3\2\2"+
		"\2\u14ce\u14cc\3\2\2\2\u14ce\u14cf\3\2\2\2\u14cf\u14d3\3\2\2\2\u14d0\u14ce"+
		"\3\2\2\2\u14d1\u14d2\7\u0273\2\2\u14d2\u14d4\5\u02e6\u0174\2\u14d3\u14d1"+
		"\3\2\2\2\u14d3\u14d4\3\2\2\2\u14d4\u02cb\3\2\2\2\u14d5\u14d6\5\u031e\u0190"+
		"\2\u14d6\u02cd\3\2\2\2\u14d7\u14dc\5\u031e\u0190\2\u14d8\u14d9\7\u0261"+
		"\2\2\u14d9\u14db\5\u031e\u0190\2\u14da\u14d8\3\2\2\2\u14db\u14de\3\2\2"+
		"\2\u14dc\u14da\3\2\2\2\u14dc\u14dd\3\2\2\2\u14dd\u02cf\3\2\2\2\u14de\u14dc"+
		"\3\2\2\2\u14df\u14e4\5\u031e\u0190\2\u14e0\u14e1\7\u0261\2\2\u14e1\u14e3"+
		"\5\u031e\u0190\2\u14e2\u14e0\3\2\2\2\u14e3\u14e6\3\2\2\2\u14e4\u14e2\3"+
		"\2\2\2\u14e4\u14e5\3\2\2\2\u14e5\u02d1\3\2\2\2\u14e6\u14e4\3\2\2\2\u14e7"+
		"\u14ec\5\u031c\u018f\2\u14e8\u14e9\7\u0261\2\2\u14e9\u14eb\5\u031e\u0190"+
		"\2\u14ea\u14e8\3\2\2\2\u14eb\u14ee\3\2\2\2\u14ec\u14ea\3\2\2\2\u14ec\u14ed"+
		"\3\2\2\2\u14ed\u02d3\3\2\2\2\u14ee\u14ec\3\2\2\2\u14ef\u14f2\5\u031c\u018f"+
		"\2\u14f0\u14f1\7\u0261\2\2\u14f1\u14f3\5\u031e\u0190\2\u14f2\u14f0\3\2"+
		"\2\2\u14f2\u14f3\3\2\2\2\u14f3\u02d5\3\2\2\2\u14f4\u14f7\5\u031c\u018f"+
		"\2\u14f5\u14f6\7\u0261\2\2\u14f6\u14f8\5\u031e\u0190\2\u14f7\u14f5\3\2"+
		"\2\2\u14f7\u14f8\3\2\2\2\u14f8\u02d7\3\2\2\2\u14f9\u14fc\5\u031c\u018f"+
		"\2\u14fa\u14fb\7\u0261\2\2\u14fb\u14fd\5\u031e\u0190\2\u14fc\u14fa\3\2"+
		"\2\2\u14fc\u14fd\3\2\2\2\u14fd\u02d9\3\2\2\2\u14fe\u1501\5\u031c\u018f"+
		"\2\u14ff\u1500\7\u0261\2\2\u1500\u1502\5\u031e\u0190\2\u1501\u14ff\3\2"+
		"\2\2\u1501\u1502\3\2\2\2\u1502\u02db\3\2\2\2\u1503\u1504\7\u0285\2\2\u1504"+
		"\u1506\5\u02ec\u0177\2\u1505\u1503\3\2\2\2\u1505\u1506\3\2\2\2\u1506\u1507"+
		"\3\2\2\2\u1507\u150a\5\u030a\u0186\2\u1508\u150a\5\u0308\u0185\2\u1509"+
		"\u1505\3\2\2\2\u1509\u1508\3\2\2\2\u150a\u02dd\3\2\2\2\u150b\u150c\5\u031c"+
		"\u018f\2\u150c\u02df\3\2\2\2\u150d\u1510\5\u031c\u018f\2\u150e\u1510\5"+
		"\u0308\u0185\2\u150f\u150d\3\2\2\2\u150f\u150e\3\2\2\2\u1510\u02e1\3\2"+
		"\2\2\u1511\u1514\5\u031c\u018f\2\u1512\u1514\5\u0308\u0185\2\u1513\u1511"+
		"\3\2\2\2\u1513\u1512\3\2\2\2\u1514\u02e3\3\2\2\2\u1515\u1518\5\u031c\u018f"+
		"\2\u1516\u1517\7\u0261\2\2\u1517\u1519\5\u031e\u0190\2\u1518\u1516\3\2"+
		"\2\2\u1518\u1519\3\2\2\2\u1519\u02e5\3\2\2\2\u151a\u151b\5\u031c\u018f"+
		"\2\u151b\u02e7\3\2\2\2\u151c\u1521\5\u031c\u018f\2\u151d\u151e\7\u0261"+
		"\2\2\u151e\u1520\5\u031e\u0190\2\u151f\u151d\3\2\2\2\u1520\u1523\3\2\2"+
		"\2\u1521\u151f\3\2\2\2\u1521\u1522\3\2\2\2\u1522\u02e9\3\2\2\2\u1523\u1521"+
		"\3\2\2\2\u1524\u1527\5\u031c\u018f\2\u1525\u1526\7\u0261\2\2\u1526\u1528"+
		"\5\u031e\u0190\2\u1527\u1525\3\2\2\2\u1527\u1528\3\2\2\2\u1528\u152c\3"+
		"\2\2\2\u1529\u152a\7\u0273\2\2\u152a\u152d\5\u02e6\u0174\2\u152b\u152d"+
		"\5\u029e\u0150\2\u152c\u1529\3\2\2\2\u152c\u152b\3\2\2\2\u152c\u152d\3"+
		"\2\2\2\u152d\u02eb\3\2\2\2\u152e\u1533\5\u031e\u0190\2\u152f\u1530\7\u0261"+
		"\2\2\u1530\u1532\5\u031e\u0190\2\u1531\u152f\3\2\2\2\u1532\u1535\3\2\2"+
		"\2\u1533\u1531\3\2\2\2\u1533\u1534\3\2\2\2\u1534\u153a\3\2\2\2\u1535\u1533"+
		"\3\2\2\2\u1536\u1537\5\u031e\u0190\2\u1537\u1538\7\u015a\2\2\u1538\u153a"+
		"\3\2\2\2\u1539\u152e\3\2\2\2\u1539\u1536\3\2\2\2\u153a\u02ed\3\2\2\2\u153b"+
		"\u153c\5\u031c\u018f\2\u153c\u02ef\3\2\2\2\u153d\u153e\5\u031e\u0190\2"+
		"\u153e\u02f1\3\2\2\2\u153f\u1540\7\u00e7\2\2\u1540\u1541\7\u026a\2\2\u1541"+
		"\u1542\7\u023d\2\2\u1542\u1543\t+\2\2\u1543\u1544\5\u01ba\u00de\2\u1544"+
		"\u1546\7\u026b\2\2\u1545\u1547\5\u0268\u0135\2\u1546\u1545\3\2\2\2\u1546"+
		"\u1547\3\2\2\2\u1547\u02f3\3\2\2\2\u1548\u1549\7\u0271\2\2\u1549\u02f5"+
		"\3\2\2\2\u154a\u154c\7\u026a\2\2\u154b\u154d\5\u02fe\u0180\2\u154c\u154b"+
		"\3\2\2\2\u154c\u154d\3\2\2\2\u154d\u1553\3\2\2\2\u154e\u154f\5\u02f4\u017b"+
		"\2\u154f\u1550\5\u02fe\u0180\2\u1550\u1552\3\2\2\2\u1551\u154e\3\2\2\2"+
		"\u1552\u1555\3\2\2\2\u1553\u1551\3\2\2\2\u1553\u1554\3\2\2\2\u1554\u1556"+
		"\3\2\2\2\u1555\u1553\3\2\2\2\u1556\u1558\7\u026b\2\2\u1557\u1559\5\u02f2"+
		"\u017a\2\u1558\u1557\3\2\2\2\u1558\u1559\3\2\2\2\u1559\u02f7\3\2\2\2\u155a"+
		"\u155f\7\u026a\2\2\u155b\u155d\5\u02fe\u0180\2\u155c\u155e\5\u02fc\u017f"+
		"\2\u155d\u155c\3\2\2\2\u155d\u155e\3\2\2\2\u155e\u1560\3\2\2\2\u155f\u155b"+
		"\3\2\2\2\u155f\u1560\3\2\2\2\u1560\u1568\3\2\2\2\u1561\u1562\7\u0271\2"+
		"\2\u1562\u1564\5\u02fe\u0180\2\u1563\u1565\5\u02fc\u017f\2\u1564\u1563"+
		"\3\2\2\2\u1564\u1565\3\2\2\2\u1565\u1567\3\2\2\2\u1566\u1561\3\2\2\2\u1567"+
		"\u156a\3\2\2\2\u1568\u1566\3\2\2\2\u1568\u1569\3\2\2\2\u1569\u156b\3\2"+
		"\2\2\u156a\u1568\3\2\2\2\u156b\u156d\7\u026b\2\2\u156c\u156e\5\u02f2\u017a"+
		"\2\u156d\u156c\3\2\2\2\u156d\u156e\3\2\2\2\u156e\u02f9\3\2\2\2\u156f\u1570"+
		"\7\u026a\2\2\u1570\u157d\5\u02e8\u0175\2\u1571\u1574\7\u0271\2\2\u1572"+
		"\u1575\5\u0312\u018a\2\u1573\u1575\7\u0138\2\2\u1574\u1572\3\2\2\2\u1574"+
		"\u1573\3\2\2\2\u1575\u157b\3\2\2\2\u1576\u1579\7\u0271\2\2\u1577\u157a"+
		"\5\u0312\u018a\2\u1578\u157a\7\u0138\2\2\u1579\u1577\3\2\2\2\u1579\u1578"+
		"\3\2\2\2\u157a\u157c\3\2\2\2\u157b\u1576\3\2\2\2\u157b\u157c\3\2\2\2\u157c"+
		"\u157e\3\2\2\2\u157d\u1571\3\2\2\2\u157d\u157e\3\2\2\2\u157e\u157f\3\2"+
		"\2\2\u157f\u1593\7\u0209\2\2\u1580\u1581\5\u02ea\u0176\2\u1581\u1582\7"+
		"\u0261\2\2\u1582\u1583\7\u026d\2\2\u1583\u1594\3\2\2\2\u1584\u1594\7\u026d"+
		"\2\2\u1585\u1587\5\u020c\u0107\2\u1586\u1588\5\u02a0\u0151\2\u1587\u1586"+
		"\3\2\2\2\u1587\u1588\3\2\2\2\u1588\u1590\3\2\2\2\u1589\u158a\7\u0271\2"+
		"\2\u158a\u158c\5\u020c\u0107\2\u158b\u158d\5\u02a0\u0151\2\u158c\u158b"+
		"\3\2\2\2\u158c\u158d\3\2\2\2\u158d\u158f\3\2\2\2\u158e\u1589\3\2\2\2\u158f"+
		"\u1592\3\2\2\2\u1590\u158e\3\2\2\2\u1590\u1591\3\2\2\2\u1591\u1594\3\2"+
		"\2\2\u1592\u1590\3\2\2\2\u1593\u1580\3\2\2\2\u1593\u1584\3\2\2\2\u1593"+
		"\u1585\3\2\2\2\u1594\u1595\3\2\2\2\u1595\u1597\7\u026b\2\2\u1596\u1598"+
		"\5\u02f2\u017a\2\u1597\u1596\3\2\2\2\u1597\u1598\3\2\2\2\u1598\u02fb\3"+
		"\2\2\2\u1599\u159a\tI\2\2\u159a\u159b\7\u0139\2\2\u159b\u02fd\3\2\2\2"+
		"\u159c\u159d\5\u031c\u018f\2\u159d\u159e\7\u0282\2\2\u159e\u159f\7\u027f"+
		"\2\2\u159f\u15a1\3\2\2\2\u15a0\u159c\3\2\2\2\u15a0\u15a1\3\2\2\2\u15a1"+
		"\u15a2\3\2\2\2\u15a2\u15a3\5\u020c\u0107\2\u15a3\u02ff\3\2\2\2\u15a4\u15ad"+
		"\5\u0302\u0182\2\u15a5\u15a7\7\u017b\2\2\u15a6\u15a5\3\2\2\2\u15a6\u15a7"+
		"\3\2\2\2\u15a7\u15a8\3\2\2\2\u15a8\u15aa\5\u02ce\u0168\2\u15a9\u15ab\t"+
		"\24\2\2\u15aa\u15a9\3\2\2\2\u15aa\u15ab\3\2\2\2\u15ab\u15ad\3\2\2\2\u15ac"+
		"\u15a4\3\2\2\2\u15ac\u15a6\3\2\2\2\u15ad\u0301\3\2\2\2\u15ae\u15b0\5\u0306"+
		"\u0184\2\u15af\u15b1\5\u0304\u0183\2\u15b0\u15af\3\2\2\2\u15b0\u15b1\3"+
		"\2\2\2\u15b1\u15bb\3\2\2\2\u15b2\u15b4\7\u0220\2\2\u15b3\u15b5\7\u00fd"+
		"\2\2\u15b4\u15b3\3\2\2\2\u15b4\u15b5\3\2\2\2\u15b5\u15b6\3\2\2\2\u15b6"+
		"\u15b7\7\u01dd\2\2\u15b7\u15bc\7\u0235\2\2\u15b8\u15b9\7;\2\2\u15b9\u15ba"+
		"\7\u01aa\2\2\u15ba\u15bc\5\u02ec\u0177\2\u15bb\u15b2\3\2\2\2\u15bb\u15b8"+
		"\3\2\2\2\u15bb\u15bc\3\2\2\2\u15bc\u15ce\3\2\2\2\u15bd\u15be\7\u00de\2"+
		"\2\u15be\u15c3\tJ\2\2\u15bf\u15c0\7\u026a\2\2\u15c0\u15c1\5\u020c\u0107"+
		"\2\u15c1\u15c2\7\u026b\2\2\u15c2\u15c4\3\2\2\2\u15c3\u15bf\3\2\2\2\u15c3"+
		"\u15c4\3\2\2\2\u15c4\u15c5\3\2\2\2\u15c5\u15c6\7\u01ed\2\2\u15c6\u15cb"+
		"\tK\2\2\u15c7\u15c8\7\u026a\2\2\u15c8\u15c9\5\u020c\u0107\2\u15c9\u15ca"+
		"\7\u026b\2\2\u15ca\u15cc\3\2\2\2\u15cb\u15c7\3\2\2\2\u15cb\u15cc\3\2\2"+
		"\2\u15cc\u15ce\3\2\2\2\u15cd\u15ae\3\2\2\2\u15cd\u15bd\3\2\2\2\u15ce\u0303"+
		"\3\2\2\2\u15cf\u15d0\7\u026a\2\2\u15d0\u15d3\5\u0312\u018a\2\u15d1\u15d2"+
		"\7\u0271\2\2\u15d2\u15d4\5\u0312\u018a\2\u15d3\u15d1\3\2\2\2\u15d3\u15d4"+
		"\3\2\2\2\u15d4\u15d6\3\2\2\2\u15d5\u15d7\tL\2\2\u15d6\u15d5\3\2\2\2\u15d6"+
		"\u15d7\3\2\2\2\u15d7\u15d8\3\2\2\2\u15d8\u15d9\7\u026b\2\2\u15d9\u0305"+
		"\3\2\2\2\u15da\u1619\7(\2\2\u15db\u1619\7\u0165\2\2\u15dc\u1619\7\u011e"+
		"\2\2\u15dd\u1619\7\'\2\2\u15de\u1619\7&\2\2\u15df\u1619\7\u011f\2\2\u15e0"+
		"\u1619\7\u0167\2\2\u15e1\u1619\7\u0166\2\2\u15e2\u1619\7\u01b2\2\2\u15e3"+
		"\u1619\7\u01b3\2\2\u15e4\u1619\7\u013e\2\2\u15e5\u1619\7u\2\2\u15e6\u1619"+
		"\7\u00dc\2\2\u15e7\u1619\7\u00df\2\2\u15e8\u1619\7\u013b\2\2\u15e9\u1619"+
		"\7\u01b9\2\2\u15ea\u1619\7\u013a\2\2\u15eb\u1619\7v\2\2\u15ec\u15ee\7"+
		"\u0087\2\2\u15ed\u15ef\7\u016b\2\2\u15ee\u15ed\3\2\2\2\u15ee\u15ef\3\2"+
		"\2\2\u15ef\u1619\3\2\2\2\u15f0\u1619\7\u00ac\2\2\u15f1\u1619\7\u0176\2"+
		"\2\u15f2\u1619\7\u0122\2\2\u15f3\u15f5\7\u0104\2\2\u15f4\u15f6\7\u0173"+
		"\2\2\u15f5\u15f4\3\2\2\2\u15f5\u15f6\3\2\2\2\u15f6\u1619\3\2\2\2\u15f7"+
		"\u1619\7<\2\2\u15f8\u1619\7;\2\2\u15f9\u1619\7\u020d\2\2\u15fa\u1619\7"+
		"\u020e\2\2\u15fb\u1619\7\u01c8\2\2\u15fc\u1619\7\u0173\2\2\u15fd\u1619"+
		"\7.\2\2\u15fe\u1619\7o\2\2\u15ff\u1619\7\u0191\2\2\u1600\u1619\7\u0205"+
		"\2\2\u1601\u1619\7\u0232\2\2\u1602\u1619\7\u0118\2\2\u1603\u1619\7p\2"+
		"\2\u1604\u1619\7\u00c1\2\2\u1605\u1619\7\u0111\2\2\u1606\u1619\7\u019f"+
		"\2\2\u1607\u1619\7\u01e1\2\2\u1608\u1619\7\u01e2\2\2\u1609\u1619\7\u01e3"+
		"\2\2\u160a\u1619\7\u01e0\2\2\u160b\u1619\7\u01da\2\2\u160c\u1619\7\u01dc"+
		"\2\2\u160d\u1619\7\u01db\2\2\u160e\u1619\7\u01d9\2\2\u160f\u1619\7\u01de"+
		"\2\2\u1610\u1619\7\u01df\2\2\u1611\u1619\7\u0234\2\2\u1612\u1619\7\u0089"+
		"\2\2\u1613\u1619\7$\2\2\u1614\u1619\7+\2\2\u1615\u1619\7B\2\2\u1616\u1619"+
		"\7\u0124\2\2\u1617\u1619\7\u0113\2\2\u1618\u15da\3\2\2\2\u1618\u15db\3"+
		"\2\2\2\u1618\u15dc\3\2\2\2\u1618\u15dd\3\2\2\2\u1618\u15de\3\2\2\2\u1618"+
		"\u15df\3\2\2\2\u1618\u15e0\3\2\2\2\u1618\u15e1\3\2\2\2\u1618\u15e2\3\2"+
		"\2\2\u1618\u15e3\3\2\2\2\u1618\u15e4\3\2\2\2\u1618\u15e5\3\2\2\2\u1618"+
		"\u15e6\3\2\2\2\u1618\u15e7\3\2\2\2\u1618\u15e8\3\2\2\2\u1618\u15e9\3\2"+
		"\2\2\u1618\u15ea\3\2\2\2\u1618\u15eb\3\2\2\2\u1618\u15ec\3\2\2\2\u1618"+
		"\u15f0\3\2\2\2\u1618\u15f1\3\2\2\2\u1618\u15f2\3\2\2\2\u1618\u15f3\3\2"+
		"\2\2\u1618\u15f7\3\2\2\2\u1618\u15f8\3\2\2\2\u1618\u15f9\3\2\2\2\u1618"+
		"\u15fa\3\2\2\2\u1618\u15fb\3\2\2\2\u1618\u15fc\3\2\2\2\u1618\u15fd\3\2"+
		"\2\2\u1618\u15fe\3\2\2\2\u1618\u15ff\3\2\2\2\u1618\u1600\3\2\2\2\u1618"+
		"\u1601\3\2\2\2\u1618\u1602\3\2\2\2\u1618\u1603\3\2\2\2\u1618\u1604\3\2"+
		"\2\2\u1618\u1605\3\2\2\2\u1618\u1606\3\2\2\2\u1618\u1607\3\2\2\2\u1618"+
		"\u1608\3\2\2\2\u1618\u1609\3\2\2\2\u1618\u160a\3\2\2\2\u1618\u160b\3\2"+
		"\2\2\u1618\u160c\3\2\2\2\u1618\u160d\3\2\2\2\u1618\u160e\3\2\2\2\u1618"+
		"\u160f\3\2\2\2\u1618\u1610\3\2\2\2\u1618\u1611\3\2\2\2\u1618\u1612\3\2"+
		"\2\2\u1618\u1613\3\2\2\2\u1618\u1614\3\2\2\2\u1618\u1615\3\2\2\2\u1618"+
		"\u1616\3\2\2\2\u1618\u1617\3\2\2\2\u1619\u0307\3\2\2\2\u161a\u161e\7\u0275"+
		"\2\2\u161b\u161c\7\u0276\2\2\u161c\u161e\7\u0262\2\2\u161d\u161a\3\2\2"+
		"\2\u161d\u161b\3\2\2\2\u161e\u1627\3\2\2\2\u161f\u1621\7\u00cb\2\2\u1620"+
		"\u161f\3\2\2\2\u1620\u1621\3\2\2\2\u1621\u1625\3\2\2\2\u1622\u1626\7\u0275"+
		"\2\2\u1623\u1624\7\u0276\2\2\u1624\u1626\7\u0262\2\2\u1625\u1622\3\2\2"+
		"\2\u1625\u1623\3\2\2\2\u1626\u1628\3\2\2\2\u1627\u1620\3\2\2\2\u1627\u1628"+
		"\3\2\2\2\u1628\u162d\3\2\2\2\u1629\u162a\7\u0261\2\2\u162a\u162c\5\u030c"+
		"\u0187\2\u162b\u1629\3\2\2\2\u162c\u162f\3\2\2\2\u162d\u162b\3\2\2\2\u162d"+
		"\u162e\3\2\2\2\u162e\u0309\3\2\2\2\u162f\u162d\3\2\2\2\u1630\u1635\5\u030c"+
		"\u0187\2\u1631\u1632\7\u0261\2\2\u1632\u1634\5\u030c\u0187\2\u1633\u1631"+
		"\3\2\2\2\u1634\u1637\3\2\2\2\u1635\u1633\3\2\2\2\u1635\u1636\3\2\2\2\u1636"+
		"\u030b\3\2\2\2\u1637\u1635\3\2\2\2\u1638\u1639\7\u0285\2\2\u1639\u163b"+
		"\5\u02ec\u0177\2\u163a\u1638\3\2\2\2\u163a\u163b\3\2\2\2\u163b\u163c\3"+
		"\2\2\2\u163c\u1641\5\u031e\u0190\2\u163d\u163e\7\u0261\2\2\u163e\u1640"+
		"\5\u031e\u0190\2\u163f\u163d\3\2\2\2\u1640\u1643\3\2\2\2\u1641\u163f\3"+
		"\2\2\2\u1641\u1642\3\2\2\2\u1642\u1646\3\2\2\2\u1643\u1641\3\2\2\2\u1644"+
		"\u1645\7\u0273\2\2\u1645\u1647\5\u02e6\u0174\2\u1646\u1644\3\2\2\2\u1646"+
		"\u1647\3\2\2\2\u1647\u1649\3\2\2\2\u1648\u164a\5\u02f6\u017c\2\u1649\u1648"+
		"\3\2\2\2\u1649\u164a\3\2\2\2\u164a\u030d\3\2\2\2\u164b\u164c\7\u0285\2"+
		"\2\u164c\u164e\5\u02ec\u0177\2\u164d\u164b\3\2\2\2\u164d\u164e\3\2\2\2"+
		"\u164e\u164f\3\2\2\2\u164f\u1654\5\u031e\u0190\2\u1650\u1651\7\u0261\2"+
		"\2\u1651\u1653\5\u031e\u0190\2\u1652\u1650\3\2\2\2\u1653\u1656\3\2\2\2"+
		"\u1654\u1652\3\2\2\2\u1654\u1655\3\2\2\2\u1655\u030f\3\2\2\2\u1656\u1654"+
		"\3\2\2\2\u1657\u165a\7\u01da\2\2\u1658\u165b\5\u031a\u018e\2\u1659\u165b"+
		"\5\u0308\u0185\2\u165a\u1658\3\2\2\2\u165a\u1659\3\2\2\2\u165b\u1660\3"+
		"\2\2\2\u165c\u165d\7\31\2\2\u165d\u165e\7\u01dd\2\2\u165e\u165f\7\u0235"+
		"\2\2\u165f\u1661\5\u031a\u018e\2\u1660\u165c\3\2\2\2\u1660\u1661\3\2\2"+
		"\2\u1661\u1696\3\2\2\2\u1662\u1666\7\u00de\2\2\u1663\u1667\5\u031a\u018e"+
		"\2\u1664\u1667\5\u0308\u0185\2\u1665\u1667\5\u030c\u0187\2\u1666\u1663"+
		"\3\2\2\2\u1666\u1664\3\2\2\2\u1666\u1665\3\2\2\2\u1667\u1668\3\2\2\2\u1668"+
		"\u1676\tM\2\2\u1669\u166c\7\u026a\2\2\u166a\u166d\7\u0262\2\2\u166b\u166d"+
		"\5\u0308\u0185\2\u166c\u166a\3\2\2\2\u166c\u166b\3\2\2\2\u166d\u1673\3"+
		"\2\2\2\u166e\u1671\7\u0271\2\2\u166f\u1672\7\u0262\2\2\u1670\u1672\5\u0308"+
		"\u0185\2\u1671\u166f\3\2\2\2\u1671\u1670\3\2\2\2\u1672\u1674\3\2\2\2\u1673"+
		"\u166e\3\2\2\2\u1673\u1674\3\2\2\2\u1674\u1675\3\2\2\2\u1675\u1677\7\u026b"+
		"\2\2\u1676\u1669\3\2\2\2\u1676\u1677\3\2\2\2\u1677\u1687\3\2\2\2\u1678"+
		"\u1685\7\u01ed\2\2\u1679\u1686\7p\2\2\u167a\u1686\7\u00c1\2\2\u167b\u1686"+
		"\7\u0111\2\2\u167c\u1683\7\u019f\2\2\u167d\u1680\7\u026a\2\2\u167e\u1681"+
		"\7\u0262\2\2\u167f\u1681\5\u0308\u0185\2\u1680\u167e\3\2\2\2\u1680\u167f"+
		"\3\2\2\2\u1681\u1682\3\2\2\2\u1682\u1684\7\u026b\2\2\u1683\u167d\3\2\2"+
		"\2\u1683\u1684\3\2\2\2\u1684\u1686\3\2\2\2\u1685\u1679\3\2\2\2\u1685\u167a"+
		"\3\2\2\2\u1685\u167b\3\2\2\2\u1685\u167c\3\2\2\2\u1686\u1688\3\2\2\2\u1687"+
		"\u1678\3\2\2\2\u1687\u1688\3\2\2\2\u1688\u1696\3\2\2\2\u1689\u1696\5\u0312"+
		"\u018a\2\u168a\u168b\7o\2\2\u168b\u1696\5\u031a\u018e\2\u168c\u1696\5"+
		"\u031a\u018e\2\u168d\u1696\7\u0138\2\2\u168e\u1696\7\u01f4\2\2\u168f\u1696"+
		"\7\u00a7\2\2\u1690\u1696\7r\2\2\u1691\u1696\7\u01a9\2\2\u1692\u1696\7"+
		"\u0112\2\2\u1693\u1696\7\u010c\2\2\u1694\u1696\7z\2\2\u1695\u1657\3\2"+
		"\2\2\u1695\u1662\3\2\2\2\u1695\u1689\3\2\2\2\u1695\u168a\3\2\2\2\u1695"+
		"\u168c\3\2\2\2\u1695\u168d\3\2\2\2\u1695\u168e\3\2\2\2\u1695\u168f\3\2"+
		"\2\2\u1695\u1690\3\2\2\2\u1695\u1691\3\2\2\2\u1695\u1692\3\2\2\2\u1695"+
		"\u1693\3\2\2\2\u1695\u1694\3\2\2\2\u1696\u0311\3\2\2\2\u1697\u169a\5\u0314"+
		"\u018b\2\u1698\u169a\5\u0316\u018c\2\u1699\u1697\3\2\2\2\u1699\u1698\3"+
		"\2\2\2\u169a\u0313\3\2\2\2\u169b\u169c\7\u0262\2\2\u169c\u0315\3\2\2\2"+
		"\u169d\u169e\7\u0263\2\2\u169e\u0317\3\2\2\2\u169f\u16a0\7\u026f\2\2\u16a0"+
		"\u16a1\5\u0312\u018a\2\u16a1\u0319\3\2\2\2\u16a2\u16a3\tN\2\2\u16a3\u031b"+
		"\3\2\2\2\u16a4\u16a5\7\u0285\2\2\u16a5\u16a7\5\u02ec\u0177\2\u16a6\u16a4"+
		"\3\2\2\2\u16a6\u16a7\3\2\2\2\u16a7\u16a8\3\2\2\2\u16a8\u16a9\5\u031e\u0190"+
		"\2\u16a9\u031d\3\2\2\2\u16aa\u16ad\5\u032a\u0196\2\u16ab\u16ad\7\u0267"+
		"\2\2\u16ac\u16aa\3\2\2\2\u16ac\u16ab\3\2\2\2\u16ad\u031f\3\2\2\2\u16ae"+
		"\u16b6\7\u027b\2\2\u16af\u16b0\7\u0279\2\2\u16b0\u16b6\7\u027f\2\2\u16b1"+
		"\u16b2\7\u027e\2\2\u16b2\u16b6\7\u0282\2\2\u16b3\u16b4\7\u027c\2\2\u16b4"+
		"\u16b6\7\u0282\2\2\u16b5\u16ae\3\2\2\2\u16b5\u16af\3\2\2\2\u16b5\u16b1"+
		"\3\2\2\2\u16b5\u16b3\3\2\2\2\u16b6\u0321\3\2\2\2\u16b7\u16bb\7\u027a\2"+
		"\2\u16b8\u16b9\7\u027f\2\2\u16b9\u16bb\7\u0282\2\2\u16ba\u16b7\3\2\2\2"+
		"\u16ba\u16b8\3\2\2\2\u16bb\u0323\3\2\2\2\u16bc\u16c0\7\u0278\2\2\u16bd"+
		"\u16be\7\u0279\2\2\u16be\u16c0\7\u0282\2\2\u16bf\u16bc\3\2\2\2\u16bf\u16bd"+
		"\3\2\2\2\u16c0\u0325\3\2\2\2\u16c1\u16c5\7\u0280\2\2\u16c2\u16c3\7\u0281"+
		"\2\2\u16c3\u16c5\7\u0281\2\2\u16c4\u16c1\3\2\2\2\u16c4\u16c2\3\2\2\2\u16c5"+
		"\u0327\3\2\2\2\u16c6\u16c7\7\u026a\2\2\u16c7\u16c8\7\u026e\2\2\u16c8\u16c9"+
		"\7\u026b\2\2\u16c9\u0329\3\2\2\2\u16ca\u185f\7\u028c\2\2\u16cb\u185f\7"+
		"\n\2\2\u16cc\u185f\7\u026d\2\2\u16cd\u185f\5\u032c\u0197\2\u16ce\u185f"+
		"\5\u032e\u0198\2\u16cf\u185f\5\u0330\u0199\2\u16d0\u185f\5\u0332\u019a"+
		"\2\u16d1\u185f\5\u0336\u019c\2\u16d2\u185f\7\5\2\2\u16d3\u185f\7\7\2\2"+
		"\u16d4\u185f\7\b\2\2\u16d5\u185f\7\t\2\2\u16d6\u185f\7\r\2\2\u16d7\u185f"+
		"\7\20\2\2\u16d8\u185f\7\26\2\2\u16d9\u185f\7\31\2\2\u16da\u185f\7\32\2"+
		"\2\u16db\u185f\7\33\2\2\u16dc\u185f\7\34\2\2\u16dd\u185f\7\35\2\2\u16de"+
		"\u185f\7\36\2\2\u16df\u185f\7\37\2\2\u16e0\u185f\7 \2\2\u16e1\u185f\7"+
		"!\2\2\u16e2\u185f\7$\2\2\u16e3\u185f\7&\2\2\u16e4\u185f\7\'\2\2\u16e5"+
		"\u185f\7(\2\2\u16e6\u185f\7+\2\2\u16e7\u185f\7,\2\2\u16e8\u185f\7-\2\2"+
		"\u16e9\u185f\7.\2\2\u16ea\u185f\7/\2\2\u16eb\u185f\7\61\2\2\u16ec\u185f"+
		"\7\63\2\2\u16ed\u185f\7A\2\2\u16ee\u185f\7\64\2\2\u16ef\u185f\7\65\2\2"+
		"\u16f0\u185f\7\67\2\2\u16f1\u185f\79\2\2\u16f2\u185f\7<\2\2\u16f3\u185f"+
		"\7=\2\2\u16f4\u185f\7;\2\2\u16f5\u185f\7@\2\2\u16f6\u185f\7B\2\2\u16f7"+
		"\u185f\7C\2\2\u16f8\u185f\7D\2\2\u16f9\u185f\7F\2\2\u16fa\u185f\7H\2\2"+
		"\u16fb\u185f\7I\2\2\u16fc\u185f\7J\2\2\u16fd\u185f\7K\2\2\u16fe\u185f"+
		"\7L\2\2\u16ff\u185f\7M\2\2\u1700\u185f\7O\2\2\u1701\u185f\7S\2\2\u1702"+
		"\u185f\7T\2\2\u1703\u185f\7U\2\2\u1704\u185f\7V\2\2\u1705\u185f\7W\2\2"+
		"\u1706\u185f\7X\2\2\u1707\u185f\7Y\2\2\u1708\u185f\7Z\2\2\u1709\u185f"+
		"\7\\\2\2\u170a\u185f\7[\2\2\u170b\u185f\7_\2\2\u170c\u185f\7`\2\2\u170d"+
		"\u185f\7d\2\2\u170e\u185f\7e\2\2\u170f\u185f\7i\2\2\u1710\u185f\7j\2\2"+
		"\u1711\u185f\7k\2\2\u1712\u185f\7l\2\2\u1713\u185f\7n\2\2\u1714\u185f"+
		"\7m\2\2\u1715\u185f\7p\2\2\u1716\u185f\7q\2\2\u1717\u185f\7r\2\2\u1718"+
		"\u185f\7s\2\2\u1719\u185f\7t\2\2\u171a\u185f\7u\2\2\u171b\u185f\7v\2\2"+
		"\u171c\u185f\7x\2\2\u171d\u185f\7y\2\2\u171e\u185f\7{\2\2\u171f\u185f"+
		"\7|\2\2\u1720\u185f\7}\2\2\u1721\u185f\7~\2\2\u1722\u185f\7\u0081\2\2"+
		"\u1723\u185f\7\u0082\2\2\u1724\u185f\7\u0083\2\2\u1725\u185f\7\u0084\2"+
		"\2\u1726\u185f\7\u0086\2\2\u1727\u185f\7\u0087\2\2\u1728\u185f\7\u0089"+
		"\2\2\u1729\u185f\7\u008b\2\2\u172a\u185f\7\u008c\2\2\u172b\u185f\7\u0091"+
		"\2\2\u172c\u185f\7\u0092\2\2\u172d\u185f\7\u0093\2\2\u172e\u185f\7\u0095"+
		"\2\2\u172f\u185f\7\u0096\2\2\u1730\u185f\7\u0097\2\2\u1731\u185f\7\u0098"+
		"\2\2\u1732\u185f\7\u0099\2\2\u1733\u185f\7\u009a\2\2\u1734\u185f\7\u009b"+
		"\2\2\u1735\u185f\7\u009c\2\2\u1736\u185f\7\u009d\2\2\u1737\u185f\7\u009f"+
		"\2\2\u1738\u185f\7\u00a1\2\2\u1739\u185f\7\u00a3\2\2\u173a\u185f\7\u00a4"+
		"\2\2\u173b\u185f\7\u00a5\2\2\u173c\u185f\7\u00a6\2\2\u173d\u185f\7\u00a9"+
		"\2\2\u173e\u185f\7\u00aa\2\2\u173f\u185f\7\u00ab\2\2\u1740\u185f\7\u00ac"+
		"\2\2\u1741\u185f\7\u00ae\2\2\u1742\u185f\7\u00af\2\2\u1743\u185f\7\u00b0"+
		"\2\2\u1744\u185f\7\u00b1\2\2\u1745\u185f\7\u00b6\2\2\u1746\u185f\7\u00b7"+
		"\2\2\u1747\u185f\7\u00bc\2\2\u1748\u185f\7\u00bd\2\2\u1749\u185f\7\u00c0"+
		"\2\2\u174a\u185f\7\u00c1\2\2\u174b\u185f\7\u00c3\2\2\u174c\u185f\7\u00c4"+
		"\2\2\u174d\u185f\7\u00c5\2\2\u174e\u185f\7\u00c6\2\2\u174f\u185f\7\u00c7"+
		"\2\2\u1750\u185f\7\u00c8\2\2\u1751\u185f\7\u00c9\2\2\u1752\u185f\7\u00cb"+
		"\2\2\u1753\u185f\7\u00cc\2\2\u1754\u185f\7\u00cd\2\2\u1755\u185f\7\u00d0"+
		"\2\2\u1756\u185f\7\u00d1\2\2\u1757\u185f\7\u00d2\2\2\u1758\u185f\7\u00d4"+
		"\2\2\u1759\u185f\7\u00d5\2\2\u175a\u185f\7\u00df\2\2\u175b\u185f\7\u00dc"+
		"\2\2\u175c\u185f\7\u00de\2\2\u175d\u185f\7\u00e1\2\2\u175e\u185f\7\u00e3"+
		"\2\2\u175f\u185f\7\u00e4\2\2\u1760\u185f\7\u00e5\2\2\u1761\u185f\7\u00e6"+
		"\2\2\u1762\u185f\7\u00e7\2\2\u1763\u185f\7\u00e8\2\2\u1764\u185f\7\u00e9"+
		"\2\2\u1765\u185f\7\u00eb\2\2\u1766\u185f\7\u00ec\2\2\u1767\u185f\7\u00ed"+
		"\2\2\u1768\u185f\7\u00ee\2\2\u1769\u185f\7\u00f4\2\2\u176a\u185f\7\u00f5"+
		"\2\2\u176b\u185f\7\u00f6\2\2\u176c\u185f\7\u00f7\2\2\u176d\u185f\7\u00f8"+
		"\2\2\u176e\u185f\7\u00fa\2\2\u176f\u185f\7\u00fd\2\2\u1770\u185f\7\u00ff"+
		"\2\2\u1771\u185f\7\u0101\2\2\u1772\u185f\7\u0102\2\2\u1773\u185f\7\u0103"+
		"\2\2\u1774\u185f\7\u0104\2\2\u1775\u185f\7\u0105\2\2\u1776\u185f\7\u0109"+
		"\2\2\u1777\u185f\7\u010a\2\2\u1778\u185f\7\u010b\2\2\u1779\u185f\7\u010c"+
		"\2\2\u177a\u185f\7\u010d\2\2\u177b\u185f\7\u010e\2\2\u177c\u185f\7\u010f"+
		"\2\2\u177d\u185f\7\u0111\2\2\u177e\u185f\7\u0112\2\2\u177f\u185f\7\u0113"+
		"\2\2\u1780\u185f\7\u0114\2\2\u1781\u185f\7\u0116\2\2\u1782\u185f\7\u0118"+
		"\2\2\u1783\u185f\7\u011a\2\2\u1784\u185f\7\u011b\2\2\u1785\u185f\7\u011c"+
		"\2\2\u1786\u185f\7\u011e\2\2\u1787\u185f\7\u011f\2\2\u1788\u185f\7\u0120"+
		"\2\2\u1789\u185f\7\u0122\2\2\u178a\u185f\7\u0121\2\2\u178b\u185f\7\u0124"+
		"\2\2\u178c\u185f\7\u0125\2\2\u178d\u185f\7\u0126\2\2\u178e\u185f\7\u0131"+
		"\2\2\u178f\u185f\7\u0129\2\2\u1790\u185f\7\u012b\2\2\u1791\u185f\7\u012c"+
		"\2\2\u1792\u185f\7\u012d\2\2\u1793\u185f\7\u0130\2\2\u1794\u185f\7\u0133"+
		"\2\2\u1795\u185f\7\u0139\2\2\u1796\u185f\7\u013a\2\2\u1797\u185f\7\u013b"+
		"\2\2\u1798\u185f\7\u013e\2\2\u1799\u185f\7\u0140\2\2\u179a\u185f\7\u0141"+
		"\2\2\u179b\u185f\7\u0143\2\2\u179c\u185f\7\u0144\2\2\u179d\u185f\7\u0145"+
		"\2\2\u179e\u185f\7\u0147\2\2\u179f\u185f\7\u0148\2\2\u17a0\u185f\7\u014a"+
		"\2\2\u17a1\u185f\7\u014c\2\2\u17a2\u185f\7\u014e\2\2\u17a3\u185f\7\u0150"+
		"\2\2\u17a4\u185f\7\u014f\2\2\u17a5\u185f\7\u0151\2\2\u17a6\u185f\7\u0152"+
		"\2\2\u17a7\u185f\7\u0153\2\2\u17a8\u185f\7\u0154\2\2\u17a9\u185f\7\u0155"+
		"\2\2\u17aa\u185f\7\u0156\2\2\u17ab\u185f\7\u0157\2\2\u17ac\u185f\7\u0158"+
		"\2\2\u17ad\u185f\7\u0159\2\2\u17ae\u185f\7\u0161\2\2\u17af\u185f\7\u0164"+
		"\2\2\u17b0\u185f\7\u0165\2\2\u17b1\u185f\7\u0167\2\2\u17b2\u185f\7\u0166"+
		"\2\2\u17b3\u185f\7\u0169\2\2\u17b4\u185f\7\u016a\2\2\u17b5\u185f\7\u016b"+
		"\2\2\u17b6\u185f\7\u016c\2\2\u17b7\u185f\7\u0171\2\2\u17b8\u185f\7\u0172"+
		"\2\2\u17b9\u185f\7\u0173\2\2\u17ba\u185f\7\u0175\2\2\u17bb\u185f\7\u0176"+
		"\2\2\u17bc\u185f\7\u0177\2\2\u17bd\u185f\7\u017b\2\2\u17be\u185f\7\u0178"+
		"\2\2\u17bf\u185f\7\u017a\2\2\u17c0\u185f\7\u0180\2\2\u17c1\u185f\7\u0181"+
		"\2\2\u17c2\u185f\7\u0183\2\2\u17c3\u185f\7\u0184\2\2\u17c4\u185f\7\u0185"+
		"\2\2\u17c5\u185f\7\u0186\2\2\u17c6\u185f\7\u0188\2\2\u17c7\u185f\7\u0187"+
		"\2\2\u17c8\u185f\7\u018a\2\2\u17c9\u185f\7\u0189\2\2\u17ca\u185f\7\u018b"+
		"\2\2\u17cb\u185f\7\u018c\2\2\u17cc\u185f\7\u018e\2\2\u17cd\u185f\7\u018f"+
		"\2\2\u17ce\u185f\7\u0190\2\2\u17cf\u185f\7\u0193\2\2\u17d0\u185f\7\u0191"+
		"\2\2\u17d1\u185f\7\u0194\2\2\u17d2\u185f\7\u0197\2\2\u17d3\u185f\7\u0198"+
		"\2\2\u17d4\u185f\7\u019a\2\2\u17d5\u185f\7\u0199\2\2\u17d6\u185f\7\u019c"+
		"\2\2\u17d7\u185f\7\u019b\2\2\u17d8\u185f\7\u019d\2\2\u17d9\u185f\7\u019f"+
		"\2\2\u17da\u185f\7\u01a0\2\2\u17db\u185f\7\u01a1\2\2\u17dc\u185f\7\u01a3"+
		"\2\2\u17dd\u185f\7\u01a5\2\2\u17de\u185f\7\u01a6\2\2\u17df\u185f\7\u01a7"+
		"\2\2\u17e0\u185f\7\u01a8\2\2\u17e1\u185f\7\u01a9\2\2\u17e2\u185f\7\u01aa"+
		"\2\2\u17e3\u185f\7\u01ab\2\2\u17e4\u185f\7\u01ac\2\2\u17e5\u185f\7\u01ae"+
		"\2\2\u17e6\u185f\7\u01af\2\2\u17e7\u185f\7\u01b0\2\2\u17e8\u185f\7\u01b2"+
		"\2\2\u17e9\u185f\7\u01b3\2\2\u17ea\u185f\7\u01b4\2\2\u17eb\u185f\7\u01b8"+
		"\2\2\u17ec\u185f\7\u01b9\2\2\u17ed\u185f\7\u01ba\2\2\u17ee\u185f\7\u01bb"+
		"\2\2\u17ef\u185f\7\u01bd\2\2\u17f0\u185f\7\u01be\2\2\u17f1\u185f\7\u01bf"+
		"\2\2\u17f2\u185f\7\u01c1\2\2\u17f3\u185f\7\u01c3\2\2\u17f4\u185f\7\u01c5"+
		"\2\2\u17f5\u185f\7\u01c4\2\2\u17f6\u185f\7\u01c6\2\2\u17f7\u185f\7\u01c7"+
		"\2\2\u17f8\u185f\7\u01c8\2\2\u17f9\u185f\7\u0252\2\2\u17fa\u185f\7\u01c9"+
		"\2\2\u17fb\u185f\7\u01ca\2\2\u17fc\u185f\7\u01cb\2\2\u17fd\u185f\7\u01cc"+
		"\2\2\u17fe\u185f\7\u01cd\2\2\u17ff\u185f\7\u01cf\2\2\u1800\u185f\7\u01dd"+
		"\2\2\u1801\u185f\7\u01da\2\2\u1802\u185f\7\u01d9\2\2\u1803\u185f\7\u01db"+
		"\2\2\u1804\u185f\7\u01dc\2\2\u1805\u185f\7\u01e0\2\2\u1806\u185f\7\u01e1"+
		"\2\2\u1807\u185f\7\u01e2\2\2\u1808\u185f\7\u01e3\2\2\u1809\u185f\7\u01ef"+
		"\2\2\u180a\u185f\7\u01f0\2\2\u180b\u185f\7\u01f1\2\2\u180c\u185f\7\u01f2"+
		"\2\2\u180d\u185f\7\u01f3\2\2\u180e\u185f\7\u0254\2\2\u180f\u185f\7\u01f5"+
		"\2\2\u1810\u185f\7\u01f7\2\2\u1811\u185f\7\u01fa\2\2\u1812\u185f\7\u01fb"+
		"\2\2\u1813\u185f\7\u01fe\2\2\u1814\u185f\7\u0200\2\2\u1815\u185f\7\u0201"+
		"\2\2\u1816\u185f\7\u0204\2\2\u1817\u185f\7\u0205\2\2\u1818\u185f\7\u0208"+
		"\2\2\u1819\u185f\7\u020a\2\2\u181a\u185f\7\u020c\2\2\u181b\u185f\7\u020e"+
		"\2\2\u181c\u185f\7\u020d\2\2\u181d\u185f\7\u020f\2\2\u181e\u185f\7\u0211"+
		"\2\2\u181f\u185f\7\u0213\2\2\u1820\u185f\7\u0215\2\2\u1821\u185f\7\u0214"+
		"\2\2\u1822\u185f\7\u0218\2\2\u1823\u185f\7\u0219\2\2\u1824\u185f\7\u021a"+
		"\2\2\u1825\u185f\7\u021b\2\2\u1826\u185f\7\u021e\2\2\u1827\u185f\7\u021f"+
		"\2\2\u1828\u185f\7\u0221\2\2\u1829\u185f\7\u0222\2\2\u182a\u185f\7\u0231"+
		"\2\2\u182b\u185f\7\u0223\2\2\u182c\u185f\7\u0224\2\2\u182d\u185f\7\u0225"+
		"\2\2\u182e\u185f\7\u0226\2\2\u182f\u185f\7\u0227\2\2\u1830\u185f\7\u0228"+
		"\2\2\u1831\u185f\7\u0229\2\2\u1832\u185f\7\u022a\2\2\u1833\u185f\7\u022b"+
		"\2\2\u1834\u185f\7\u022c\2\2\u1835\u185f\7\u022d\2\2\u1836\u185f\7\u022e"+
		"\2\2\u1837\u185f\7\u022f\2\2\u1838\u185f\7\u0230\2\2\u1839\u185f\7\u0232"+
		"\2\2\u183a\u185f\7\u0233\2\2\u183b\u185f\7\u0234\2\2\u183c\u185f\7\u0235"+
		"\2\2\u183d\u185f\7\u0236\2\2\u183e\u185f\7\u0237\2\2\u183f\u185f\7\u0238"+
		"\2\2\u1840\u185f\7\u0239\2\2\u1841\u185f\7\u023a\2\2\u1842\u185f\7\u023b"+
		"\2\2\u1843\u185f\7\u023c\2\2\u1844\u185f\7\u023d\2\2\u1845\u185f\7\u023e"+
		"\2\2\u1846\u185f\7\u023f\2\2\u1847\u185f\7\u0240\2\2\u1848\u185f\7\u0241"+
		"\2\2\u1849\u185f\7\u0242\2\2\u184a\u185f\7\u0243\2\2\u184b\u185f\7\u0244"+
		"\2\2\u184c\u185f\7\u0247\2\2\u184d\u185f\7\u0248\2\2\u184e\u185f\7\u0249"+
		"\2\2\u184f\u185f\7\u024a\2\2\u1850\u185f\7\u024b\2\2\u1851\u185f\7\u024c"+
		"\2\2\u1852\u185f\7\u024e\2\2\u1853\u185f\7\u0251\2\2\u1854\u185f\7\u0255"+
		"\2\2\u1855\u185f\7\u0258\2\2\u1856\u185f\7\u024f\2\2\u1857\u185f\7\u0256"+
		"\2\2\u1858\u185f\7\u0257\2\2\u1859\u185f\7\u0245\2\2\u185a\u185f\7\u00db"+
		"\2\2\u185b\u185f\7\u016f\2\2\u185c\u185f\7\u0117\2\2\u185d\u185f\7\u016e"+
		"\2\2\u185e\u16ca\3\2\2\2\u185e\u16cb\3\2\2\2\u185e\u16cc\3\2\2\2\u185e"+
		"\u16cd\3\2\2\2\u185e\u16ce\3\2\2\2\u185e\u16cf\3\2\2\2\u185e\u16d0\3\2"+
		"\2\2\u185e\u16d1\3\2\2\2\u185e\u16d2\3\2\2\2\u185e\u16d3\3\2\2\2\u185e"+
		"\u16d4\3\2\2\2\u185e\u16d5\3\2\2\2\u185e\u16d6\3\2\2\2\u185e\u16d7\3\2"+
		"\2\2\u185e\u16d8\3\2\2\2\u185e\u16d9\3\2\2\2\u185e\u16da\3\2\2\2\u185e"+
		"\u16db\3\2\2\2\u185e\u16dc\3\2\2\2\u185e\u16dd\3\2\2\2\u185e\u16de\3\2"+
		"\2\2\u185e\u16df\3\2\2\2\u185e\u16e0\3\2\2\2\u185e\u16e1\3\2\2\2\u185e"+
		"\u16e2\3\2\2\2\u185e\u16e3\3\2\2\2\u185e\u16e4\3\2\2\2\u185e\u16e5\3\2"+
		"\2\2\u185e\u16e6\3\2\2\2\u185e\u16e7\3\2\2\2\u185e\u16e8\3\2\2\2\u185e"+
		"\u16e9\3\2\2\2\u185e\u16ea\3\2\2\2\u185e\u16eb\3\2\2\2\u185e\u16ec\3\2"+
		"\2\2\u185e\u16ed\3\2\2\2\u185e\u16ee\3\2\2\2\u185e\u16ef\3\2\2\2\u185e"+
		"\u16f0\3\2\2\2\u185e\u16f1\3\2\2\2\u185e\u16f2\3\2\2\2\u185e\u16f3\3\2"+
		"\2\2\u185e\u16f4\3\2\2\2\u185e\u16f5\3\2\2\2\u185e\u16f6\3\2\2\2\u185e"+
		"\u16f7\3\2\2\2\u185e\u16f8\3\2\2\2\u185e\u16f9\3\2\2\2\u185e\u16fa\3\2"+
		"\2\2\u185e\u16fb\3\2\2\2\u185e\u16fc\3\2\2\2\u185e\u16fd\3\2\2\2\u185e"+
		"\u16fe\3\2\2\2\u185e\u16ff\3\2\2\2\u185e\u1700\3\2\2\2\u185e\u1701\3\2"+
		"\2\2\u185e\u1702\3\2\2\2\u185e\u1703\3\2\2\2\u185e\u1704\3\2\2\2\u185e"+
		"\u1705\3\2\2\2\u185e\u1706\3\2\2\2\u185e\u1707\3\2\2\2\u185e\u1708\3\2"+
		"\2\2\u185e\u1709\3\2\2\2\u185e\u170a\3\2\2\2\u185e\u170b\3\2\2\2\u185e"+
		"\u170c\3\2\2\2\u185e\u170d\3\2\2\2\u185e\u170e\3\2\2\2\u185e\u170f\3\2"+
		"\2\2\u185e\u1710\3\2\2\2\u185e\u1711\3\2\2\2\u185e\u1712\3\2\2\2\u185e"+
		"\u1713\3\2\2\2\u185e\u1714\3\2\2\2\u185e\u1715\3\2\2\2\u185e\u1716\3\2"+
		"\2\2\u185e\u1717\3\2\2\2\u185e\u1718\3\2\2\2\u185e\u1719\3\2\2\2\u185e"+
		"\u171a\3\2\2\2\u185e\u171b\3\2\2\2\u185e\u171c\3\2\2\2\u185e\u171d\3\2"+
		"\2\2\u185e\u171e\3\2\2\2\u185e\u171f\3\2\2\2\u185e\u1720\3\2\2\2\u185e"+
		"\u1721\3\2\2\2\u185e\u1722\3\2\2\2\u185e\u1723\3\2\2\2\u185e\u1724\3\2"+
		"\2\2\u185e\u1725\3\2\2\2\u185e\u1726\3\2\2\2\u185e\u1727\3\2\2\2\u185e"+
		"\u1728\3\2\2\2\u185e\u1729\3\2\2\2\u185e\u172a\3\2\2\2\u185e\u172b\3\2"+
		"\2\2\u185e\u172c\3\2\2\2\u185e\u172d\3\2\2\2\u185e\u172e\3\2\2\2\u185e"+
		"\u172f\3\2\2\2\u185e\u1730\3\2\2\2\u185e\u1731\3\2\2\2\u185e\u1732\3\2"+
		"\2\2\u185e\u1733\3\2\2\2\u185e\u1734\3\2\2\2\u185e\u1735\3\2\2\2\u185e"+
		"\u1736\3\2\2\2\u185e\u1737\3\2\2\2\u185e\u1738\3\2\2\2\u185e\u1739\3\2"+
		"\2\2\u185e\u173a\3\2\2\2\u185e\u173b\3\2\2\2\u185e\u173c\3\2\2\2\u185e"+
		"\u173d\3\2\2\2\u185e\u173e\3\2\2\2\u185e\u173f\3\2\2\2\u185e\u1740\3\2"+
		"\2\2\u185e\u1741\3\2\2\2\u185e\u1742\3\2\2\2\u185e\u1743\3\2\2\2\u185e"+
		"\u1744\3\2\2\2\u185e\u1745\3\2\2\2\u185e\u1746\3\2\2\2\u185e\u1747\3\2"+
		"\2\2\u185e\u1748\3\2\2\2\u185e\u1749\3\2\2\2\u185e\u174a\3\2\2\2\u185e"+
		"\u174b\3\2\2\2\u185e\u174c\3\2\2\2\u185e\u174d\3\2\2\2\u185e\u174e\3\2"+
		"\2\2\u185e\u174f\3\2\2\2\u185e\u1750\3\2\2\2\u185e\u1751\3\2\2\2\u185e"+
		"\u1752\3\2\2\2\u185e\u1753\3\2\2\2\u185e\u1754\3\2\2\2\u185e\u1755\3\2"+
		"\2\2\u185e\u1756\3\2\2\2\u185e\u1757\3\2\2\2\u185e\u1758\3\2\2\2\u185e"+
		"\u1759\3\2\2\2\u185e\u175a\3\2\2\2\u185e\u175b\3\2\2\2\u185e\u175c\3\2"+
		"\2\2\u185e\u175d\3\2\2\2\u185e\u175e\3\2\2\2\u185e\u175f\3\2\2\2\u185e"+
		"\u1760\3\2\2\2\u185e\u1761\3\2\2\2\u185e\u1762\3\2\2\2\u185e\u1763\3\2"+
		"\2\2\u185e\u1764\3\2\2\2\u185e\u1765\3\2\2\2\u185e\u1766\3\2\2\2\u185e"+
		"\u1767\3\2\2\2\u185e\u1768\3\2\2\2\u185e\u1769\3\2\2\2\u185e\u176a\3\2"+
		"\2\2\u185e\u176b\3\2\2\2\u185e\u176c\3\2\2\2\u185e\u176d\3\2\2\2\u185e"+
		"\u176e\3\2\2\2\u185e\u176f\3\2\2\2\u185e\u1770\3\2\2\2\u185e\u1771\3\2"+
		"\2\2\u185e\u1772\3\2\2\2\u185e\u1773\3\2\2\2\u185e\u1774\3\2\2\2\u185e"+
		"\u1775\3\2\2\2\u185e\u1776\3\2\2\2\u185e\u1777\3\2\2\2\u185e\u1778\3\2"+
		"\2\2\u185e\u1779\3\2\2\2\u185e\u177a\3\2\2\2\u185e\u177b\3\2\2\2\u185e"+
		"\u177c\3\2\2\2\u185e\u177d\3\2\2\2\u185e\u177e\3\2\2\2\u185e\u177f\3\2"+
		"\2\2\u185e\u1780\3\2\2\2\u185e\u1781\3\2\2\2\u185e\u1782\3\2\2\2\u185e"+
		"\u1783\3\2\2\2\u185e\u1784\3\2\2\2\u185e\u1785\3\2\2\2\u185e\u1786\3\2"+
		"\2\2\u185e\u1787\3\2\2\2\u185e\u1788\3\2\2\2\u185e\u1789\3\2\2\2\u185e"+
		"\u178a\3\2\2\2\u185e\u178b\3\2\2\2\u185e\u178c\3\2\2\2\u185e\u178d\3\2"+
		"\2\2\u185e\u178e\3\2\2\2\u185e\u178f\3\2\2\2\u185e\u1790\3\2\2\2\u185e"+
		"\u1791\3\2\2\2\u185e\u1792\3\2\2\2\u185e\u1793\3\2\2\2\u185e\u1794\3\2"+
		"\2\2\u185e\u1795\3\2\2\2\u185e\u1796\3\2\2\2\u185e\u1797\3\2\2\2\u185e"+
		"\u1798\3\2\2\2\u185e\u1799\3\2\2\2\u185e\u179a\3\2\2\2\u185e\u179b\3\2"+
		"\2\2\u185e\u179c\3\2\2\2\u185e\u179d\3\2\2\2\u185e\u179e\3\2\2\2\u185e"+
		"\u179f\3\2\2\2\u185e\u17a0\3\2\2\2\u185e\u17a1\3\2\2\2\u185e\u17a2\3\2"+
		"\2\2\u185e\u17a3\3\2\2\2\u185e\u17a4\3\2\2\2\u185e\u17a5\3\2\2\2\u185e"+
		"\u17a6\3\2\2\2\u185e\u17a7\3\2\2\2\u185e\u17a8\3\2\2\2\u185e\u17a9\3\2"+
		"\2\2\u185e\u17aa\3\2\2\2\u185e\u17ab\3\2\2\2\u185e\u17ac\3\2\2\2\u185e"+
		"\u17ad\3\2\2\2\u185e\u17ae\3\2\2\2\u185e\u17af\3\2\2\2\u185e\u17b0\3\2"+
		"\2\2\u185e\u17b1\3\2\2\2\u185e\u17b2\3\2\2\2\u185e\u17b3\3\2\2\2\u185e"+
		"\u17b4\3\2\2\2\u185e\u17b5\3\2\2\2\u185e\u17b6\3\2\2\2\u185e\u17b7\3\2"+
		"\2\2\u185e\u17b8\3\2\2\2\u185e\u17b9\3\2\2\2\u185e\u17ba\3\2\2\2\u185e"+
		"\u17bb\3\2\2\2\u185e\u17bc\3\2\2\2\u185e\u17bd\3\2\2\2\u185e\u17be\3\2"+
		"\2\2\u185e\u17bf\3\2\2\2\u185e\u17c0\3\2\2\2\u185e\u17c1\3\2\2\2\u185e"+
		"\u17c2\3\2\2\2\u185e\u17c3\3\2\2\2\u185e\u17c4\3\2\2\2\u185e\u17c5\3\2"+
		"\2\2\u185e\u17c6\3\2\2\2\u185e\u17c7\3\2\2\2\u185e\u17c8\3\2\2\2\u185e"+
		"\u17c9\3\2\2\2\u185e\u17ca\3\2\2\2\u185e\u17cb\3\2\2\2\u185e\u17cc\3\2"+
		"\2\2\u185e\u17cd\3\2\2\2\u185e\u17ce\3\2\2\2\u185e\u17cf\3\2\2\2\u185e"+
		"\u17d0\3\2\2\2\u185e\u17d1\3\2\2\2\u185e\u17d2\3\2\2\2\u185e\u17d3\3\2"+
		"\2\2\u185e\u17d4\3\2\2\2\u185e\u17d5\3\2\2\2\u185e\u17d6\3\2\2\2\u185e"+
		"\u17d7\3\2\2\2\u185e\u17d8\3\2\2\2\u185e\u17d9\3\2\2\2\u185e\u17da\3\2"+
		"\2\2\u185e\u17db\3\2\2\2\u185e\u17dc\3\2\2\2\u185e\u17dd\3\2\2\2\u185e"+
		"\u17de\3\2\2\2\u185e\u17df\3\2\2\2\u185e\u17e0\3\2\2\2\u185e\u17e1\3\2"+
		"\2\2\u185e\u17e2\3\2\2\2\u185e\u17e3\3\2\2\2\u185e\u17e4\3\2\2\2\u185e"+
		"\u17e5\3\2\2\2\u185e\u17e6\3\2\2\2\u185e\u17e7\3\2\2\2\u185e\u17e8\3\2"+
		"\2\2\u185e\u17e9\3\2\2\2\u185e\u17ea\3\2\2\2\u185e\u17eb\3\2\2\2\u185e"+
		"\u17ec\3\2\2\2\u185e\u17ed\3\2\2\2\u185e\u17ee\3\2\2\2\u185e\u17ef\3\2"+
		"\2\2\u185e\u17f0\3\2\2\2\u185e\u17f1\3\2\2\2\u185e\u17f2\3\2\2\2\u185e"+
		"\u17f3\3\2\2\2\u185e\u17f4\3\2\2\2\u185e\u17f5\3\2\2\2\u185e\u17f6\3\2"+
		"\2\2\u185e\u17f7\3\2\2\2\u185e\u17f8\3\2\2\2\u185e\u17f9\3\2\2\2\u185e"+
		"\u17fa\3\2\2\2\u185e\u17fb\3\2\2\2\u185e\u17fc\3\2\2\2\u185e\u17fd\3\2"+
		"\2\2\u185e\u17fe\3\2\2\2\u185e\u17ff\3\2\2\2\u185e\u1800\3\2\2\2\u185e"+
		"\u1801\3\2\2\2\u185e\u1802\3\2\2\2\u185e\u1803\3\2\2\2\u185e\u1804\3\2"+
		"\2\2\u185e\u1805\3\2\2\2\u185e\u1806\3\2\2\2\u185e\u1807\3\2\2\2\u185e"+
		"\u1808\3\2\2\2\u185e\u1809\3\2\2\2\u185e\u180a\3\2\2\2\u185e\u180b\3\2"+
		"\2\2\u185e\u180c\3\2\2\2\u185e\u180d\3\2\2\2\u185e\u180e\3\2\2\2\u185e"+
		"\u180f\3\2\2\2\u185e\u1810\3\2\2\2\u185e\u1811\3\2\2\2\u185e\u1812\3\2"+
		"\2\2\u185e\u1813\3\2\2\2\u185e\u1814\3\2\2\2\u185e\u1815\3\2\2\2\u185e"+
		"\u1816\3\2\2\2\u185e\u1817\3\2\2\2\u185e\u1818\3\2\2\2\u185e\u1819\3\2"+
		"\2\2\u185e\u181a\3\2\2\2\u185e\u181b\3\2\2\2\u185e\u181c\3\2\2\2\u185e"+
		"\u181d\3\2\2\2\u185e\u181e\3\2\2\2\u185e\u181f\3\2\2\2\u185e\u1820\3\2"+
		"\2\2\u185e\u1821\3\2\2\2\u185e\u1822\3\2\2\2\u185e\u1823\3\2\2\2\u185e"+
		"\u1824\3\2\2\2\u185e\u1825\3\2\2\2\u185e\u1826\3\2\2\2\u185e\u1827\3\2"+
		"\2\2\u185e\u1828\3\2\2\2\u185e\u1829\3\2\2\2\u185e\u182a\3\2\2\2\u185e"+
		"\u182b\3\2\2\2\u185e\u182c\3\2\2\2\u185e\u182d\3\2\2\2\u185e\u182e\3\2"+
		"\2\2\u185e\u182f\3\2\2\2\u185e\u1830\3\2\2\2\u185e\u1831\3\2\2\2\u185e"+
		"\u1832\3\2\2\2\u185e\u1833\3\2\2\2\u185e\u1834\3\2\2\2\u185e\u1835\3\2"+
		"\2\2\u185e\u1836\3\2\2\2\u185e\u1837\3\2\2\2\u185e\u1838\3\2\2\2\u185e"+
		"\u1839\3\2\2\2\u185e\u183a\3\2\2\2\u185e\u183b\3\2\2\2\u185e\u183c\3\2"+
		"\2\2\u185e\u183d\3\2\2\2\u185e\u183e\3\2\2\2\u185e\u183f\3\2\2\2\u185e"+
		"\u1840\3\2\2\2\u185e\u1841\3\2\2\2\u185e\u1842\3\2\2\2\u185e\u1843\3\2"+
		"\2\2\u185e\u1844\3\2\2\2\u185e\u1845\3\2\2\2\u185e\u1846\3\2\2\2\u185e"+
		"\u1847\3\2\2\2\u185e\u1848\3\2\2\2\u185e\u1849\3\2\2\2\u185e\u184a\3\2"+
		"\2\2\u185e\u184b\3\2\2\2\u185e\u184c\3\2\2\2\u185e\u184d\3\2\2\2\u185e"+
		"\u184e\3\2\2\2\u185e\u184f\3\2\2\2\u185e\u1850\3\2\2\2\u185e\u1851\3\2"+
		"\2\2\u185e\u1852\3\2\2\2\u185e\u1853\3\2\2\2\u185e\u1854\3\2\2\2\u185e"+
		"\u1855\3\2\2\2\u185e\u1856\3\2\2\2\u185e\u1857\3\2\2\2\u185e\u1858\3\2"+
		"\2\2\u185e\u1859\3\2\2\2\u185e\u185a\3\2\2\2\u185e\u185b\3\2\2\2\u185e"+
		"\u185c\3\2\2\2\u185e\u185d\3\2\2\2\u185f\u032b\3\2\2\2\u1860\u1861\tO"+
		"\2\2\u1861\u032d\3\2\2\2\u1862\u1863\tP\2\2\u1863\u032f\3\2\2\2\u1864"+
		"\u1865\tQ\2\2\u1865\u0331\3\2\2\2\u1866\u1867\tR\2\2\u1867\u0333\3\2\2"+
		"\2\u1868\u1869\tS\2\2\u1869\u0335\3\2\2\2\u186a\u186b\tT\2\2\u186b\u0337"+
		"\3\2\2\2\u02fc\u033a\u033d\u0341\u0349\u0368\u0374\u0379\u037e\u0385\u038f"+
		"\u0394\u039c\u039e\u03a2\u03a6\u03ab\u03b0\u03b5\u03bb\u03c9\u03ce\u03d1"+
		"\u03d7\u03e0\u03ee\u03f6\u03fb\u0405\u0408\u040d\u0412\u0419\u041f\u0423"+
		"\u0429\u042e\u0435\u043c\u0443\u0448\u044c\u0458\u0462\u0467\u0473\u0478"+
		"\u047d\u0480\u0483\u0486\u0494\u04a0\u04a5\u04aa\u04b6\u04bb\u04c3\u04c5"+
		"\u04c9\u04cd\u04d2\u04d7\u04dc\u04e8\u04ed\u04f1\u04f6\u04fc\u0503\u050d"+
		"\u0512\u0515\u0519\u051e\u0524\u0536\u053b\u0540\u0542\u0549\u0550\u0553"+
		"\u0556\u0559\u0564\u0570\u0574\u0577\u0580\u0588\u0590\u0593\u059a\u05a1"+
		"\u05a7\u05d0\u05ec\u05f3\u05f8\u0603\u0606\u0611\u0619\u061d\u0629\u062c"+
		"\u0632\u0635\u063a\u063f\u0643\u064d\u0657\u065d\u0668\u066d\u0671\u0679"+
		"\u0681\u0686\u0689\u068b\u068e\u0697\u069c\u06a1\u06a6\u06ab\u06ae\u06b1"+
		"\u06b5\u06b8\u06c0\u06c5\u06ca\u06d1\u06db\u06eb\u06f1\u06f8\u06fd\u0707"+
		"\u070e\u0713\u0719\u0723\u0728\u072f\u0734\u073a\u073d\u0740\u074c\u0753"+
		"\u0758\u0761\u0766\u076c\u076f\u0776\u0779\u0780\u0785\u0789\u078e\u0793"+
		"\u079e\u07a0\u07a7\u07aa\u07af\u07b3\u07b7\u07b9\u07c4\u07c6\u07cd\u07d0"+
		"\u07d3\u07da\u07de\u07e0\u07e7\u07eb\u07ee\u07f1\u07fd\u07ff\u0806\u0809"+
		"\u080c\u0814\u0816\u081b\u0829\u0830\u083d\u0846\u0848\u085c\u086e\u0886"+
		"\u088f\u0894\u0899\u089f\u08a6\u08ab\u08ad\u08be\u08c3\u08cd\u08d3\u08dd"+
		"\u08e7\u08f0\u08fd\u0911\u091a\u091f\u0923\u0926\u0930\u093c\u0942\u094a"+
		"\u094e\u0951\u0960\u0964\u0969\u096c\u0979\u097d\u0986\u098a\u0994\u0999"+
		"\u099d\u09a0\u09a3\u09be\u09c4\u09d1\u09d7\u09e2\u09ed\u09f4\u09f8\u09fb"+
		"\u0a01\u0a0a\u0a12\u0a16\u0a1a\u0a22\u0a2b\u0a31\u0a33\u0a41\u0a56\u0a5a"+
		"\u0a61\u0a65\u0a69\u0a6d\u0a79\u0a7d\u0a8b\u0a91\u0a98\u0a9d\u0aa7\u0aad"+
		"\u0aaf\u0ab8\u0ac2\u0ac7\u0ad6\u0ada\u0add\u0aed\u0aef\u0af3\u0afb\u0b02"+
		"\u0b07\u0b09\u0b0e\u0b13\u0b1b\u0b22\u0b26\u0b29\u0b35\u0b3b\u0b43\u0b4d"+
		"\u0b58\u0b5b\u0b62\u0b65\u0b6c\u0b77\u0b7d\u0b81\u0b8b\u0b8e\u0b94\u0b98"+
		"\u0b9c\u0b9f\u0ba1\u0ba5\u0ba9\u0bae\u0bb9\u0bbd\u0bc5\u0bc8\u0bcd\u0bcf"+
		"\u0bd8\u0be2\u0be7\u0bed\u0bf1\u0bf4\u0bfc\u0bff\u0c03\u0c07\u0c0c\u0c0f"+
		"\u0c13\u0c17\u0c1b\u0c27\u0c35\u0c3a\u0c3e\u0c47\u0c4b\u0c53\u0c56\u0c59"+
		"\u0c5d\u0c60\u0c63\u0c66\u0c6a\u0c74\u0c7b\u0c82\u0c87\u0c8d\u0c91\u0c96"+
		"\u0c9d\u0ca3\u0caa\u0cad\u0cb0\u0cb4\u0cb9\u0cbd\u0cbf\u0ccc\u0cd3\u0ce1"+
		"\u0ce4\u0cee\u0cf2\u0cfa\u0d06\u0d10\u0d15\u0d1f\u0d27\u0d2a\u0d30\u0d34"+
		"\u0d39\u0d43\u0d48\u0d55\u0d61\u0d66\u0d70\u0d75\u0d77\u0d7c\u0d80\u0d86"+
		"\u0d8a\u0d97\u0d9b\u0da5\u0da8\u0daa\u0daf\u0db8\u0dc5\u0dcd\u0dd6\u0dda"+
		"\u0ddf\u0dea\u0dec\u0dfc\u0e01\u0e07\u0e0d\u0e1f\u0e26\u0e29\u0e2c\u0e34"+
		"\u0e37\u0e3f\u0e41\u0e45\u0e48\u0e4d\u0e4f\u0e53\u0e5f\u0e68\u0e70\u0e75"+
		"\u0e79\u0e7e\u0e81\u0e89\u0e91\u0e97\u0e9a\u0e9d\u0ea5\u0eaf\u0ebb\u0ec2"+
		"\u0ec6\u0eca\u0ecd\u0ed0\u0ed5\u0eda\u0edd\u0ee0\u0ee6\u0ee9\u0eef\u0ef2"+
		"\u0ef5\u0efa\u0efd\u0f05\u0f0b\u0f15\u0f1a\u0f1f\u0f25\u0f2f\u0f33\u0f35"+
		"\u0f38\u0f44\u0f48\u0f4b\u0f5f\u0f64\u0f69\u0f70\u0f73\u0f7c\u0f83\u0f88"+
		"\u0f8c\u0f94\u0f9a\u0fa2\u0fa5\u0fad\u0fb5\u0fb8\u0fbb\u0fc4\u0fca\u0fd0"+
		"\u0fd2\u0fdf\u0fe1\u0fea\u0fec\u0ff0\u0ff6\u0ffa\u1008\u100e\u1017\u1021"+
		"\u102c\u1032\u1037\u1042\u1046\u104d\u1052\u1056\u105c\u1060\u106d\u1076"+
		"\u107a\u1083\u1085\u1087\u109a\u10a2\u10ae\u10b6\u10be\u10c7\u10ca\u10d1"+
		"\u10d9\u10e0\u10e4\u10eb\u10ef\u10f4\u10f8\u1100\u1104\u110b\u1114\u1122"+
		"\u112f\u1134\u1147\u114b\u1152\u1155\u1159\u1160\u1166\u1169\u116d\u1174"+
		"\u1179\u1187\u118d\u118f\u1193\u119b\u11a7\u11b0\u11b9\u11bd\u11c8\u11de"+
		"\u11e1\u11e4\u11ee\u11f7\u11fe\u1203\u120c\u120f\u1211\u1215\u121c\u1223"+
		"\u122b\u1233\u123f\u124b\u1255\u1259\u1264\u126f\u1274\u1278\u1281\u1290"+
		"\u129b\u129f\u12a2\u12ab\u12b3\u12b6\u12b9\u12c2\u12c7\u12d0\u12d6\u12db"+
		"\u12de\u12e3\u12e8\u12ec\u12f2\u12f8\u1301\u1306\u130e\u1312\u1317\u131d"+
		"\u1324\u1329\u1330\u1334\u1339\u1341\u1344\u1347\u134a\u134e\u1353\u1358"+
		"\u135c\u1363\u1368\u136a\u1375\u1379\u137b\u1386\u1391\u139a\u139d\u13a1"+
		"\u13a4\u13a8\u13b5\u13ba\u13c2\u13c9\u13ce\u13d2\u13d7\u13dc\u13df\u13e6"+
		"\u13f0\u13f8\u13fc\u1406\u1409\u140b\u1415\u1417\u141d\u1423\u1425\u1433"+
		"\u1435\u143e\u1441\u144a\u1453\u145d\u1463\u1468\u146c\u146f\u1473\u147a"+
		"\u1486\u1491\u1494\u1498\u14ab\u14b0\u14b7\u14c4\u14ce\u14d3\u14dc\u14e4"+
		"\u14ec\u14f2\u14f7\u14fc\u1501\u1505\u1509\u150f\u1513\u1518\u1521\u1527"+
		"\u152c\u1533\u1539\u1546\u154c\u1553\u1558\u155d\u155f\u1564\u1568\u156d"+
		"\u1574\u1579\u157b\u157d\u1587\u158c\u1590\u1593\u1597\u15a0\u15a6\u15aa"+
		"\u15ac\u15b0\u15b4\u15bb\u15c3\u15cb\u15cd\u15d3\u15d6\u15ee\u15f5\u1618"+
		"\u161d\u1620\u1625\u1627\u162d\u1635\u163a\u1641\u1646\u1649\u164d\u1654"+
		"\u165a\u1660\u1666\u166c\u1671\u1673\u1676\u1680\u1683\u1685\u1687\u1695"+
		"\u1699\u16a6\u16ac\u16b5\u16ba\u16bf\u16c4\u185e";
	public static final String _serializedATN = Utils.join(
		new String[] {
			_serializedATNSegment0,
			_serializedATNSegment1,
			_serializedATNSegment2
		},
		""
	);
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}